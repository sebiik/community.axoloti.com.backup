<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Jan&#39;s contributions</title>
    <link>http://community.axoloti.com/t/jans-contributions/1445</link>
    <description>**Forum profile:** @Jan 
**Contribution prefix:** jho

**objects**
[jho/filter/notch.axo](http://community.axoloti.com/t/jans-contributions/1445/2) - notch filter object
[jho/filter/para.axo](http://community.axoloti.com/t/jans-contributions/1445/3) - parametric equalizer object
[jho/osc/phasor fast sync.axo](http://community.axoloti.com/t/jans-contributions/1445/6) - phasor with signal rate reset suitable for voice/formant-simulation
**patches**
none yet

**firmware**
none yet</description>
    
    <lastBuildDate>Fri, 13 May 2016 19:00:01 +0000</lastBuildDate>
    <category>Community Library</category>
    <atom:link href="https://sebiik.github.io/community.axoloti.com.backup/t/jans-contributions/1445.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Jan&#39;s contributions</title>
        <dc:creator><![CDATA[@toneburst alx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/toneburst">@toneburst</a> wrote:</p>
          <blockquote>
              <p>It's a novel way of doing it, but if it works, then, yeah, why not?</p>

<p>Have you thought of porting any of the oscillator algorithms from the Mutable Instruments Braids Euro module? I was toying with the idea of giving it a try myself, but not knowing how to handle oversampling (along with a general lack of knowledge of all things DSP) held me back.</p>

<p>There's a cornucopia of cool oscillator types to be mined there, though, and it's all available on GitHub.</p>

<p>a|x</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/jans-contributions/1445/14">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/jans-contributions/1445/14</link>
        <pubDate>Fri, 13 May 2016 19:00:01 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1445-14</guid>
        <source url="http://community.axoloti.com/t/jans-contributions/1445.rss">Jan&#39;s contributions</source>
      </item>
      <item>
        <title>Jan&#39;s contributions</title>
        <dc:creator><![CDATA[@Jan Jan Hofmann]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/jan">@Jan</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="12" data-topic="1445"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//community.axoloti.com/letter_avatar_proxy/v2/letter/t/b9e5f3/40.png" class="avatar">toneburst:</div>
<blockquote><p>Maybe in the longterm, there should be an inlet/outlet type for oversampled audio signals.</p></blockquote></aside>

<p>Using a double wire for 2x oversampling works fine for me. And for 4x oversampling or even higher ressources would become a problem.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/jans-contributions/1445/13">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/jans-contributions/1445/13</link>
        <pubDate>Fri, 13 May 2016 18:49:45 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1445-13</guid>
        <source url="http://community.axoloti.com/t/jans-contributions/1445.rss">Jan&#39;s contributions</source>
      </item>
      <item>
        <title>Jan&#39;s contributions</title>
        <dc:creator><![CDATA[@toneburst alx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/toneburst">@toneburst</a> wrote:</p>
          <blockquote>
              <p>That's great, thank you Jan!</p>

<p>Maybe in the longterm, there should be an inlet/outlet type for oversampled audio signals.</p>

<p>a|x</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/jans-contributions/1445/12">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/jans-contributions/1445/12</link>
        <pubDate>Fri, 13 May 2016 18:38:10 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1445-12</guid>
        <source url="http://community.axoloti.com/t/jans-contributions/1445.rss">Jan&#39;s contributions</source>
      </item>
      <item>
        <title>Jan&#39;s contributions</title>
        <dc:creator><![CDATA[@Jan Jan Hofmann]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/jan">@Jan</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="10" data-topic="1445"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//community.axoloti.com/letter_avatar_proxy/v2/letter/t/b9e5f3/40.png" class="avatar">toneburst:</div>
<blockquote><p>If so, is there anything special I need to add to my oscillator code, other than having it create two buffers and output them through two outlets, as you do with your oversampled objects?</p></blockquote></aside>

<p>No, that's all - the first outlet should contain the first 16 samples, the second outlet the remaining 16 samples. My downsample object uses an FIR anti-aliasing filter (for details yo can take a look at the comments in jho_oversampling.h)</p>

<p>Jan</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/jans-contributions/1445/11">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/jans-contributions/1445/11</link>
        <pubDate>Fri, 13 May 2016 18:36:06 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1445-11</guid>
        <source url="http://community.axoloti.com/t/jans-contributions/1445.rss">Jan&#39;s contributions</source>
      </item>
      <item>
        <title>Jan&#39;s contributions</title>
        <dc:creator><![CDATA[@toneburst alx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/toneburst">@toneburst</a> wrote:</p>
          <blockquote>
              <p>Hi Jan,</p>

<p>If I wanted to make a 2x oversampled oscillator object, could I use your downsampling object to downsample back to 48kHz?</p>

<p>If so, is there anything special I need to add to my oscillator code, other than having it create two buffers and output them through two outlets, as you do with your oversampled objects?</p>

<p>I'm assuming your downsampling object also applies anti-aliasing filtering to attenuate frequencies above the Nyquist limit before downsampling (or is that done 'upstream' of the downsampling object)?</p>

<p>a|x</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/jans-contributions/1445/10">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/jans-contributions/1445/10</link>
        <pubDate>Fri, 13 May 2016 16:30:47 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1445-10</guid>
        <source url="http://community.axoloti.com/t/jans-contributions/1445.rss">Jan&#39;s contributions</source>
      </item>
      <item>
        <title>Jan&#39;s contributions</title>
        <dc:creator><![CDATA[@anon5189335]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/anon5189335">@anon5189335</a> wrote:</p>
          <blockquote>
              <p>Thank you for the info <img src="/images/emoji/emoji_one/smile.png?v=0" title=":smile:" class="emoji" alt=":smile:"> </p>

<p>Will look into it <img src="/images/emoji/emoji_one/smile.png?v=0" title=":smile:" class="emoji" alt=":smile:"></p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/jans-contributions/1445/9">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/jans-contributions/1445/9</link>
        <pubDate>Sun, 10 Apr 2016 17:29:05 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1445-9</guid>
        <source url="http://community.axoloti.com/t/jans-contributions/1445.rss">Jan&#39;s contributions</source>
      </item>
      <item>
        <title>Jan&#39;s contributions</title>
        <dc:creator><![CDATA[@Jan Jan Hofmann]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/jan">@Jan</a> wrote:</p>
          <blockquote>
              <p>Thanx <a class="mention" href="/users/jaffasplaffa">@jaffasplaffa</a></p>

<p>I haven't documented the oversampling objects yet, but you can check out the help files. For an optical feedback I would recommend a spectrum analyzer like the free Voxengo SPAN.</p>

<p>These oversampling filters are really cool for center frequencies above 14 kHz - you can create brutal filter sweeps. </p>

<p>I'm not shure though for standard juse - center freq below 14 kHz. I just made a blind test with my classical guitar, filtered by one vcf, standard versus oversampling version. (using the phi/probabiltiy bang as a random switch). It's hard for me to tell the difference.</p>

<p>About the code. Have a look at: <a href="http://www.analog.com/media/en/technical-documentation/dsp-book/dsp_book_Ch16.pdf" rel="nofollow">dsp_book_Ch16.pdf</a>. Everything is in there. In my table <code>jho_downsample_coefs_q30</code> (see file <code>jho_oversampling.h</code>), the sinc-function is allready windowed (otherwise it would be infinitely long). I simply calculated the table with <em>open office calc</em>.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/jans-contributions/1445/8">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/jans-contributions/1445/8</link>
        <pubDate>Sun, 10 Apr 2016 15:43:21 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1445-8</guid>
        <source url="http://community.axoloti.com/t/jans-contributions/1445.rss">Jan&#39;s contributions</source>
      </item>
      <item>
        <title>Jan&#39;s contributions</title>
        <dc:creator><![CDATA[@anon5189335]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/anon5189335">@anon5189335</a> wrote:</p>
          <blockquote>
              <p>Hey <a class="mention" href="/users/jan">@Jan</a>  <img src="/images/emoji/emoji_one/smile.png?v=0" title=":smile:" class="emoji" alt=":smile:"> </p>

<p>Awesome collection of modules you have added <img src="/images/emoji/emoji_one/+1.png?v=0" title=":+1:" class="emoji" alt=":+1:"></p>

<p>When I was looking through them, I noticed that the jho/filter/downsample has got a Hamming window for sync. I looked through the code(noob) and I could not find out how it was implemented. </p>

<p>Could you give a tip on where the Hamming function comes from? I would like to try and extract it and create a regular window function(like the Hanning that Axoloti all ready has got).</p>

<p>Thanks!</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/jans-contributions/1445/7">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/jans-contributions/1445/7</link>
        <pubDate>Sun, 10 Apr 2016 14:57:38 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1445-7</guid>
        <source url="http://community.axoloti.com/t/jans-contributions/1445.rss">Jan&#39;s contributions</source>
      </item>
      <item>
        <title>Jan&#39;s contributions</title>
        <dc:creator><![CDATA[@Jan Jan Hofmann]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/jan">@Jan</a> wrote:</p>
          <blockquote>
              <h2>jho/osc/phasor fast sync.axo</h2>

<h2>status</h2>

<p>For Axoloti 1.0.9. First version, any feedback is welcome</p>

<h2>description</h2>

<p>Phasor with signal rate reset. An abrupt decrease at the sync inlet resets the phase. This way, the factory phasor object (which doesn't necessarily go back to zero at the beginnig of a new cycle due to the wraparound technique) can be used as sync input. The help-file <em>phasor fast sync.axh</em> shows an implementation of the VOSIM-algorithm (classic voice/formant-simulation, see <a href="http://quod.lib.umich.edu/cgi/p/pod/dod-idx/midim-system.pdf?c=icmc;idno=bbp2372.1983.019" rel="nofollow">W. Kaegi 1983</a>).</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/jans-contributions/1445/6">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/jans-contributions/1445/6</link>
        <pubDate>Sun, 10 Apr 2016 12:13:07 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1445-6</guid>
        <source url="http://community.axoloti.com/t/jans-contributions/1445.rss">Jan&#39;s contributions</source>
      </item>
      <item>
        <title>Jan&#39;s contributions</title>
        <dc:creator><![CDATA[@Jan Jan Hofmann]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/jan">@Jan</a> wrote:</p>
          <blockquote>
              <p>Yes, a notch filter is the opposite of a band pass filter.</p>

<p>By the way: I found a good tutorial about parametric eq's:<br><a href="http://music.tutsplus.com/tutorials/how-to-use-a-parametric-equalizer--audio-2301" rel="nofollow">How to Use a Parametric Equalizer</a></p>

<p>To build a similar equalizer as used in this tutorial, you would have to chain five para-objects, one high-pass and one low-pass in series. I guess it would be best to place the high pass filter as first object (to get rid of unwanted low frequencies which can cause distortion), the parametric filters in the middle and the low pass at the end (that way the high frequency part of rounding noise of the other filter stages will be reduced).</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/jans-contributions/1445/5">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/jans-contributions/1445/5</link>
        <pubDate>Tue, 05 Apr 2016 16:04:14 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1445-5</guid>
        <source url="http://community.axoloti.com/t/jans-contributions/1445.rss">Jan&#39;s contributions</source>
      </item>
      <item>
        <title>Jan&#39;s contributions</title>
        <dc:creator><![CDATA[@keyman Antonio Machado]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/keyman">@keyman</a> wrote:</p>
          <blockquote>
              <p>Thanks for sharing, works well;</p>

<p>So, this is the "opposite" of a band pass filter?</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/jans-contributions/1445/4">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/jans-contributions/1445/4</link>
        <pubDate>Tue, 05 Apr 2016 12:05:53 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1445-4</guid>
        <source url="http://community.axoloti.com/t/jans-contributions/1445.rss">Jan&#39;s contributions</source>
      </item>
      <item>
        <title>Jan&#39;s contributions</title>
        <dc:creator><![CDATA[@Jan Jan Hofmann]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/jan">@Jan</a> wrote:</p>
          <blockquote>
              <h2>jho/filter/para.axo</h2>

<h2>status</h2>

<p>For Axoloti 1.0.9. First version, any feedback is welcome</p>

<h2>description</h2>

<p>A biquad parametric equalizer stage. In addition to the common parameters freq and reso, the parameter gain allows a boost/cut of +/- 20 db.</p>

<p>Important: To cut frequencies with maximum resonance (Q=infinity) is not possible because of self-oscillation. For sound corrections, a value of 63.5 (Q=64.6) or lower should be used.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/jans-contributions/1445/3">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/jans-contributions/1445/3</link>
        <pubDate>Mon, 04 Apr 2016 16:45:25 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1445-3</guid>
        <source url="http://community.axoloti.com/t/jans-contributions/1445.rss">Jan&#39;s contributions</source>
      </item>
      <item>
        <title>Jan&#39;s contributions</title>
        <dc:creator><![CDATA[@Jan Jan Hofmann]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/jan">@Jan</a> wrote:</p>
          <blockquote>
              <h2>jho/filter/notch.axo</h2>

<h2>status</h2>

<p>For Axoloti 1.0.9. First version, any feedback is welcome</p>

<h2>description</h2>

<p>A simple biquad notch filter (or band-stop filter, band-rejection filter) with two parameters: pitch and reso.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/jans-contributions/1445/2">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/jans-contributions/1445/2</link>
        <pubDate>Mon, 04 Apr 2016 16:22:42 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1445-2</guid>
        <source url="http://community.axoloti.com/t/jans-contributions/1445.rss">Jan&#39;s contributions</source>
      </item>
      <item>
        <title>Jan&#39;s contributions</title>
        <dc:creator><![CDATA[@Jan Jan Hofmann]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/jan">@Jan</a> wrote:</p>
          <blockquote>
              <p><strong>Forum profile:</strong> <a class="mention" href="/users/jan">@Jan</a> <br><strong>Contribution prefix:</strong> jho</p>

<p><strong>objects</strong><br><a href="//community.axoloti.com/t/jans-contributions/1445/2">jho/filter/notch.axo</a> - notch filter object<br><a href="//community.axoloti.com/t/jans-contributions/1445/3">jho/filter/para.axo</a> - parametric equalizer object<br><a href="//community.axoloti.com/t/jans-contributions/1445/6">jho/osc/phasor fast sync.axo</a> - phasor with signal rate reset suitable for voice/formant-simulation<br><strong>patches</strong><br>none yet</p>

<p><strong>firmware</strong><br>none yet</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/jans-contributions/1445/1">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/jans-contributions/1445/1</link>
        <pubDate>Mon, 04 Apr 2016 16:05:36 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1445-1</guid>
        <source url="http://community.axoloti.com/t/jans-contributions/1445.rss">Jan&#39;s contributions</source>
      </item>
  </channel>
</rss>
