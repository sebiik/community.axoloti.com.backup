<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Working with 8bit integers</title>
    <link>https://sebiik.github.io/community.axoloti.com.backup/t/working-with-8bit-integers/2432</link>
    <description>I wanted to try something fancy: convert an input signal to 8bit (maybe applying some dither) and doing further processing on it (i wanted to build some sort of glitch-esque sample looper-mangler, hoping not to turn it into vapor).
As far as my coding understanding goes: conversion between two types of variable is resource-expensive, but i can try to contain conversions to the minimum.

now, will it be an advantage to use 8bit? (cpu-wise and memory-wise)
I was thinking to use both sdram and sram, so i&#39;ll need to rework some objects to do the trick. Should i expect an increase in cpu load?

Edit: i also noticed that uint8_t and int8_t don&#39;t seem to work. :confused:  does this have something to do with the compiler or the firmware?</description>
    
    <lastBuildDate>Fri, 28 Oct 2016 21:59:41 +0000</lastBuildDate>
    <category>AxoObject coding</category>
    <atom:link href="https://sebiik.github.io/community.axoloti.com.backup/t/working-with-8bit-integers/2432.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Working with 8bit integers</title>
        <dc:creator><![CDATA[@Sputnki Filippo Tamagnini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/sputnki">@Sputnki</a> wrote:</p>
          <blockquote>
              <p>I found a relatively simple way to solve the problem: saving the 8bit words into temporary variables and then casting to int32_t and bitshifting.</p>

<p>i made a patch, you can find it in library/community/sptnk/4x8bit looper.axp</p>

<p>The next thing i want to do is to acquire transient data (i have to figure some way to implement this, i guess i might edit the table/alloc object) and make a granular quantized looper (is this going vapor?)</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/working-with-8bit-integers/2432/9">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/working-with-8bit-integers/2432/9</link>
        <pubDate>Fri, 28 Oct 2016 21:59:41 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2432-9</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/working-with-8bit-integers/2432.rss">Working with 8bit integers</source>
      </item>
      <item>
        <title>Working with 8bit integers</title>
        <dc:creator><![CDATA[@Sputnki Filippo Tamagnini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/sputnki">@Sputnki</a> wrote:</p>
          <blockquote>
              <p>I started working with the 32 bit / 4 x 8bit packed array<br>I'm still not sure about the cpu advantage of such approach, but it definitely cuts down memory usage. <br>A 4-track looper is starting to take form, however i still need to get grip with the 2-complement representation of numbers.</p>

<p>I'll explain:<br>the conversion from 32bit to 8 bit is done this way: </p>

<p>There are 4 s-rate inputs (32bit, signed, Q27 format) <br>Each one is bitshifted to take the fractional part in the correct position and then bitwise and-ed with a mask</p>

<p>For example input1 must be fit into the leftmost 8 bits, so it's bitshifted left 5 bits and and-ed with the number 0b11111111000000000000000000000000 (it's a bit mask)</p>

<p><strong>As my current understanding of 2-complement notation goes, this operation should saturate and preserve sign</strong> (but stop me here if my current understanding is wrong)<br>Experiments made summing two 8-bit numbers (with sign) obtained this way showed that the approach is somewhat correct.</p>

<p>I iterate this procedure for all 4 inputs, so</p>

<pre><code>A = (input1&lt;&lt;5 ) &amp; 11111111000000000000000000000000
B = (input2&gt;&gt;3 ) &amp; 00000000111111110000000000000000
C = (input3&gt;&gt;11) &amp; 00000000000000001111111100000000
D = (input4&gt;&gt;19) &amp; 00000000000000000000000011111111</code></pre>

<p>the 4x8bit packet is finally obtained or-ing A, B, C, D (actually it's all done in one line of code) and sent to an sdram array</p>

<p>As i mentioned before, operations made with ARM functions perform how they're expected.</p>

<p><strong>The problem</strong> comes when it's time to convert the packed array back to 32bit format, in particular when the 8bit word has negative sign (which i'd be happy to use to take full advantage of SHADD8, since it's the only way i have to control volume)</p>

<p>what currently happens in the "unpacker" object is this:</p>

<pre><code>   outlet_o1= (bitmask1&amp;attr_table.array[pos])&gt;&gt;5;
   outlet_o2= (bitmask2&amp;attr_table.array[pos])&lt;&lt;3;
   outlet_o3= (bitmask3&amp;attr_table.array[pos])&lt;&lt;11;
   outlet_o4= (bitmask4&amp;attr_table.array[pos])&lt;&lt;19;</code></pre>

<p>attr_table.array[pos] is the 32bit 4x8bit packet created with the first procedure from the table record object.<br>Say i want to retrieve the second 8-bit word (the one which goes in outlet_o2:</p>

<pre><code>attr_table.array[pos] = xxxxxxxxwordwordyyyyyyyyzzzzzzzz //(just to let you see where the 8-bit word is)
bitmask2 = 00000000111111110000000000000000
NUMBER = attr_table.array[pos] &amp; bitmask2 = 00000000wordword0000000000000000
outlet_o2 = NUMBER &lt;&lt; 3 = 00000wordword0000000000000000000 //take it back to Q27 format</code></pre>

<p>You can see now, that if the word i'm retrieving had sign, that is forever gone thanks to those 5 zeros before it.</p>

<p>Is there some clever way to retain sign in this conversion?</p>

<p>Sorry for the very long post, you know, the 20 characters limitation <img src="//community.axoloti.com/images/emoji/emoji_one/grin.png?v=3" title=":grin:" class="emoji" alt=":grin:"></p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/working-with-8bit-integers/2432/8">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/working-with-8bit-integers/2432/8</link>
        <pubDate>Wed, 26 Oct 2016 16:58:13 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2432-8</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/working-with-8bit-integers/2432.rss">Working with 8bit integers</source>
      </item>
      <item>
        <title>Working with 8bit integers</title>
        <dc:creator><![CDATA[@toneburst alx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/toneburst">@toneburst</a> wrote:</p>
          <blockquote>
              <p>That is strange. I've definitely used int outlets with 8-bit ints before. I'll dig out some code later (can't get to my Axoloti at the moment).</p>

<p>a|x</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/working-with-8bit-integers/2432/7">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/working-with-8bit-integers/2432/7</link>
        <pubDate>Sat, 22 Oct 2016 10:49:09 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2432-7</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/working-with-8bit-integers/2432.rss">Working with 8bit integers</source>
      </item>
      <item>
        <title>Working with 8bit integers</title>
        <dc:creator><![CDATA[@Sputnki Filippo Tamagnini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/sputnki">@Sputnki</a> wrote:</p>
          <blockquote>
              <p>That's odd, i tried outputting an int8_t to an integer outlet and output was always zero</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/working-with-8bit-integers/2432/6">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/working-with-8bit-integers/2432/6</link>
        <pubDate>Sat, 22 Oct 2016 10:37:01 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2432-6</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/working-with-8bit-integers/2432.rss">Working with 8bit integers</source>
      </item>
      <item>
        <title>Working with 8bit integers</title>
        <dc:creator><![CDATA[@toneburst alx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/toneburst">@toneburst</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="4" data-topic="2432"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//community.axoloti.com/user_avatar/community.axoloti.com/sputnki/40/175_1.png" class="avatar">Sputnki:</div>
<blockquote><p>Did you use them just internally or did you find the way to use them in output?</p></blockquote></aside>

<p>Both, I think. I usually bit-shifted up for output.</p>

<p>a|x</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/working-with-8bit-integers/2432/5">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/working-with-8bit-integers/2432/5</link>
        <pubDate>Sat, 22 Oct 2016 09:54:20 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2432-5</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/working-with-8bit-integers/2432.rss">Working with 8bit integers</source>
      </item>
      <item>
        <title>Working with 8bit integers</title>
        <dc:creator><![CDATA[@Sputnki Filippo Tamagnini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/sputnki">@Sputnki</a> wrote:</p>
          <blockquote>
              <p><a class="mention" href="/users/toneburst">@toneburst</a> Did you use them just internally or did you find the way to use them in output?</p>

<p><a class="mention" href="/users/johannes">@johannes</a> those instructions might suffice, actually. I might try doing multiplication outside the 8-bit world and then use the resulting variables just to store and recall data without fancy editing</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/working-with-8bit-integers/2432/4">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/working-with-8bit-integers/2432/4</link>
        <pubDate>Sat, 22 Oct 2016 09:20:45 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2432-4</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/working-with-8bit-integers/2432.rss">Working with 8bit integers</source>
      </item>
      <item>
        <title>Working with 8bit integers</title>
        <dc:creator><![CDATA[@toneburst alx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/toneburst">@toneburst</a> wrote:</p>
          <blockquote>
              <p>I've used int8_t variables in custom objects a lot without any problems.</p>

<p>a|x</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/working-with-8bit-integers/2432/3">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/working-with-8bit-integers/2432/3</link>
        <pubDate>Fri, 21 Oct 2016 11:07:16 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2432-3</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/working-with-8bit-integers/2432.rss">Working with 8bit integers</source>
      </item>
      <item>
        <title>Working with 8bit integers</title>
        <dc:creator><![CDATA[@johannes johannes]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/johannes">@johannes</a> wrote:</p>
          <blockquote>
              <p>The CPU registers and SRAM memory buses are 32 bits wide, if a performance advantage can be found, it is by using a 32 bit value as a packed array of four 8 bit values. But there are only a few processor instructions that can deal with such packed arrays: </p>

<ul>
<li>(signed/unsigned) (halving/not-halving) (add/substract)<br><code>SADD8</code>, <code>SSUB8</code>, <code>SHADD8</code>, <code>SHSUB8</code>, <code>UADD8</code>, <code>USUB8</code>, <code>UHADD8</code>, <code>UHSUB8</code>
</li>
<li>Unsigned Sum of Absolute Differences and Unsigned Sum of Absolute Differences and Accumulate<br><code>USAD8</code>, <code>USADA8</code>
</li>
<li>and bitwise manipulations like AND also operate (implicitly) on packed array of four 8 bit values</li>
</ul>

<p>But there is no 8 bit multiply instruction, which limits the practical use of 8-bit signal processing.</p>

<p><a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0553aCHDHCBHA.html">instruction set reference</a></p>

<p>The situation is quite different for two 16 bit "halfwords" packed into a 32 bit word, for instance the <code>SMLALD</code> instruction effectively computes two multiplies and two additions in a single instruction cycle. The <code>filter/convolution</code> object takes benefit of this.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/working-with-8bit-integers/2432/2">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/working-with-8bit-integers/2432/2</link>
        <pubDate>Fri, 21 Oct 2016 09:59:45 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2432-2</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/working-with-8bit-integers/2432.rss">Working with 8bit integers</source>
      </item>
      <item>
        <title>Working with 8bit integers</title>
        <dc:creator><![CDATA[@Sputnki Filippo Tamagnini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/sputnki">@Sputnki</a> wrote:</p>
          <blockquote>
              <p>I wanted to try something fancy: convert an input signal to 8bit (maybe applying some dither) and doing further processing on it (i wanted to build some sort of glitch-esque sample looper-mangler, hoping not to turn it into vapor).<br>As far as my coding understanding goes: conversion between two types of variable is resource-expensive, but i can try to contain conversions to the minimum.</p>

<p>now, will it be an advantage to use 8bit? (cpu-wise and memory-wise)<br>I was thinking to use both sdram and sram, so i'll need to rework some objects to do the trick. Should i expect an increase in cpu load?</p>

<p>Edit: i also noticed that uint8_t and int8_t don't seem to work. <img src="//community.axoloti.com/images/emoji/emoji_one/confused.png?v=3" title=":confused:" class="emoji" alt=":confused:">  does this have something to do with the compiler or the firmware?</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/working-with-8bit-integers/2432/1">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/working-with-8bit-integers/2432/1</link>
        <pubDate>Fri, 21 Oct 2016 08:38:34 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2432-1</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/working-with-8bit-integers/2432.rss">Working with 8bit integers</source>
      </item>
  </channel>
</rss>
