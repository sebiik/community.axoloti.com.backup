<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Driving seven-segment display with MCP23S17 IO expander</title>
    <link>https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421</link>
    <description>Hello everyone,
I&#39;ve been playing with my axoloti and imagining some potential hardware designs for it, and I picked up a few components to use in a mono-synth box I want to build. I have a rotary encoder and 2-digit seven-segment display that I&#39;d like to use for patch or parameter changes, and I picked up a an MCP23S17 16-bit digital IO expander ([datasheet here][1]) so as not to use up 14 pins for the display alone. So I&#39;ve been trying for two days now and still can&#39;t get any output from the GPIO pins. :confused: 

I should say that I&#39;m a computer programmer by trade but have never really done embedded/serial/chip programming (or much of anything in C) so a lot of my confusion is just my inexperience. I put together a patch and script based on the LKM1638 example patch Johannes recommended, as well as some elements from @paul&#39;s 74HC595 shift register patch. I also took the register addresses from [this tutorial][2].

I know that the chip select, SPI clock, and data output/input pins should be PA4, PA5, PA6, and PA7, but their arrangement seems to inconsistent between patches. I&#39;ve tried several combinations, but is this documented somewhere?

Below is a photo of my breadboard and the patch is also attached. I&#39;m sure there are some obvious mistakes throughout. I can get segments to light up if I connect the &quot;interrupt output&quot; pins (19 or 20) to the display, so it clearly has power, but otherwise no dice. Can someone point me in the right direction?

&lt;img src=&quot;/uploads/default/original/1X/29ae9896193102f10226207a2f6bf8d23485545e.jpg&quot; width=&quot;666&quot; height=&quot;500&quot;&gt; 

&lt;a class=&quot;attachment&quot; href=&quot;/uploads/default/original/1X/a1a9a8bbd8beaab0def157cc13e1ab3768cf00e5.axp&quot;&gt;mcp23s17 io expander.axp&lt;/a&gt; (3.1 KB) 


  [1]: http://ww1.microchip.com/downloads/en/DeviceDoc/21952b.pdf
  [2]: http://www.ermicro.com/blog/?p=1846</description>
    
    <lastBuildDate>Thu, 07 Jul 2016 21:19:51 +0000</lastBuildDate>
    <category>Hardware</category>
    <atom:link href="https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Driving seven-segment display with MCP23S17 IO expander</title>
        <dc:creator><![CDATA[@matthewcieplak Matthew Cieplak]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/matthewcieplak">@matthewcieplak</a> wrote:</p>
          <blockquote>
              <p>Yes, I think you could drive the 8x8 dot matrix with the MCP23s17, but for complex shapes you would have to do line-by-line scan (multiplexing) within the axoloti code. So it might be better to use a matrix driver chip. Ditto for 3-digit displays, as you would need 21 output pins to manage it in an analog fashion as I have done with the MCP. Here is an example multiplexed setup with the MSP430:<br><a href="http://forum.allaboutcircuits.com/blog/msp430-multiplexed-7-segment-displays.559/" class="onebox" target="_blank" rel="nofollow">http://forum.allaboutcircuits.com/blog/msp430-multiplexed-7-segment-displays.559/</a></p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421/14">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421/14</link>
        <pubDate>Thu, 07 Jul 2016 21:19:51 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-421-14</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421.rss">Driving seven-segment display with MCP23S17 IO expander</source>
      </item>
      <item>
        <title>Driving seven-segment display with MCP23S17 IO expander</title>
        <dc:creator><![CDATA[@philoop]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/philoop">@philoop</a> wrote:</p>
          <blockquote>
              <p>Could i drive this 8*8 dot matrix too with the MCP23S17?<br><a href="https://www.led-tech.de/de/Displays-und-Matrixen/Dotmatrixen/Dotmatrix-Anzeige-8x8-60x60mm-LT-1374_127_130.html" class="onebox" target="_blank" rel="nofollow">https://www.led-tech.de/de/Displays-und-Matrixen/Dotmatrixen/Dotmatrix-Anzeige-8x8-60x60mm-LT-1374_127_130.html</a><br>I noticed that your counter only goes to 64, so it is somehow similar..<br>And what if i would like to drive a 3 7segment display?</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421/13">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421/13</link>
        <pubDate>Thu, 07 Jul 2016 18:04:12 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-421-13</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421.rss">Driving seven-segment display with MCP23S17 IO expander</source>
      </item>
      <item>
        <title>Driving seven-segment display with MCP23S17 IO expander</title>
        <dc:creator><![CDATA[@johannes johannes]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/johannes">@johannes</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="11" data-topic="421"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//community.axoloti.com/user_avatar/community.axoloti.com/matthewcieplak/40/280_1.png" class="avatar">matthewcieplak:</div>
<blockquote><p>It took me a whole lot of head scratching (and a run to the store for IC sockets) to figure out that the reset pin (labeled as an output on the MCP23S17 block diagram) is actually an input that must be externally biased (to +3v/5v) to keep sync with the master SPI clock.</p></blockquote></aside>

<p>Reset is to reset the complete state of the MCP23S17, for syncing, connect the CS input to NSS (not slave select) of the stm32 SPI peripheral.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421/12">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421/12</link>
        <pubDate>Mon, 21 Sep 2015 12:20:39 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-421-12</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421.rss">Driving seven-segment display with MCP23S17 IO expander</source>
      </item>
      <item>
        <title>Driving seven-segment display with MCP23S17 IO expander</title>
        <dc:creator><![CDATA[@matthewcieplak Matthew Cieplak]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/matthewcieplak">@matthewcieplak</a> wrote:</p>
          <blockquote>
              <p>Finally got this thing working properly. I took my display and encoder circuits and built a protoboard with them (my first project that didn't involve electrical tape!). It looks like this:</p>

<p><div class="lightbox-wrapper"><a data-download-href="//community.axoloti.com/uploads/default/49202244760cb063b940aced5d5abde694e88217" href="//community.axoloti.com/uploads/default/original/1X/49202244760cb063b940aced5d5abde694e88217.jpg" class="lightbox" title="IMG_20150920_233156.jpg"><img src="//community.axoloti.com/uploads/default/optimized/1X/49202244760cb063b940aced5d5abde694e88217_1_666x500.jpg" width="666" height="500"><div class="meta">
<span class="filename">IMG_20150920_233156.jpg</span><span class="informations">1000x750 438 KB</span><span class="expand"></span>
</div></a></div> </p>

<p>It took me a whole lot of head scratching (and a run to the store for IC sockets) to figure out that the reset pin (labeled as an output on the MCP23S17 block diagram) is actually an input that must be externally biased (to +3v/5v) to keep sync with the master SPI clock. (Thought I'd fried the IC, but turns out I'd just failed to read the datasheet...) After that incidient, it was pretty easy to convert the encoder output into 2 digits for the display, and now it works like a charm!</p>

<p><img src="//community.axoloti.com/uploads/default/original/1X/cd64991b56243aa37398a79659ddd2f641121059.gif" width="320" height="180"> </p>

<p>Now I'm off to figure out where to buy potentiometers in bulk. The patch is included below for anyone trying to work this out later:</p>

<p><a class="attachment" href="//community.axoloti.com/uploads/default/original/1X/3bf8bbe14adad4ece1d018f0d82d987705d872a2.axp">mcp23s17_seven_segment.axp</a> (7.8 KB)</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421/11">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421/11</link>
        <pubDate>Mon, 21 Sep 2015 06:58:25 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-421-11</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421.rss">Driving seven-segment display with MCP23S17 IO expander</source>
      </item>
      <item>
        <title>Driving seven-segment display with MCP23S17 IO expander</title>
        <dc:creator><![CDATA[@johannes johannes]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/johannes">@johannes</a> wrote:</p>
          <blockquote>
              <p>You can skip the 10k resistors if you configure the gpio/in/digital mode to "pulldown", and probably can skip the 0.01uF caps too.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421/10">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421/10</link>
        <pubDate>Sun, 13 Sep 2015 11:00:44 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-421-10</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421.rss">Driving seven-segment display with MCP23S17 IO expander</source>
      </item>
      <item>
        <title>Driving seven-segment display with MCP23S17 IO expander</title>
        <dc:creator><![CDATA[@matthewcieplak Matthew Cieplak]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/matthewcieplak">@matthewcieplak</a> wrote:</p>
          <blockquote>
              <p>Yep, just a regular rotary quadrature encoder. I built the input circuit and patch today, just following the recommended "input filter circuit" from the manufacturer's <a href="http://www.mouser.com/ds/2/54/PEC12R-221222.pdf" rel="nofollow">datasheet</a>. (just some 10k resistors in parallel and 0.01uF caps to ground). I connected Terminal A and B to 2 digital input pads on axoloti, and the below patch decodes into an increment/decrement pair it pretty perfectly, even at high speeds. </p>

<p><img src="//community.axoloti.com/uploads/default/original/1X/e0eee82cef97ed0b391ee0d43002729a1a2bc2ce.png" width="608" height="258"> </p>

<p><a class="attachment" href="//community.axoloti.com/uploads/default/original/1X/a32bef8fab8cb6db5a854382114f9f0254901bdf.axp">encoder_quadrature.axp</a> (3.1 KB) </p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421/9">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421/9</link>
        <pubDate>Sun, 13 Sep 2015 08:13:03 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-421-9</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421.rss">Driving seven-segment display with MCP23S17 IO expander</source>
      </item>
      <item>
        <title>Driving seven-segment display with MCP23S17 IO expander</title>
        <dc:creator><![CDATA[@johannes johannes]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/johannes">@johannes</a> wrote:</p>
          <blockquote>
              <p>I recommend putting a 100nF capacitor across VDD and VSS of the mcp23s17, as close to that chip as possible, for decoupling. May not make a difference in stability now, but it is common good practice.</p>

<p>What sort of encoder and input circuit do you have in mind? Just a rotary quadrature encoder?</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421/8">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421/8</link>
        <pubDate>Mon, 07 Sep 2015 22:51:12 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-421-8</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421.rss">Driving seven-segment display with MCP23S17 IO expander</source>
      </item>
      <item>
        <title>Driving seven-segment display with MCP23S17 IO expander</title>
        <dc:creator><![CDATA[@matthewcieplak Matthew Cieplak]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/matthewcieplak">@matthewcieplak</a> wrote:</p>
          <blockquote>
              <p>Thanks for the help, guys! Addressing the chip properly, lowering the baudrate and double-checking the connections seems to work. It's still very brittle (sometimes turns off after a few minutes use) but I'll chalk that up to my horrendous connectors... </p>

<p>Next I need figure out how to convert float input from the script object into int array indices for the truth table (just counting change events now...) Then I'll breadboard the encoder input circuit and then I can get to prototyping.</p>

<p><img src="//community.axoloti.com/uploads/default/original/1X/da26673dda9d5f1164aab3c129f938ee54c1e607.gif" width="240" height="135"></p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421/7">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421/7</link>
        <pubDate>Mon, 07 Sep 2015 22:16:59 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-421-7</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421.rss">Driving seven-segment display with MCP23S17 IO expander</source>
      </item>
      <item>
        <title>Driving seven-segment display with MCP23S17 IO expander</title>
        <dc:creator><![CDATA[@johannes johannes]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/johannes">@johannes</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="4" data-topic="421"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//community.axoloti.com/user_avatar/community.axoloti.com/matthewcieplak/40/280_1.png" class="avatar">matthewcieplak:</div>
<blockquote><p>called DIO</p></blockquote></aside>

<p>In the lkm1638 case, MOSI and MISO are wired together for bidirectional communication, and then called "Digital Input Output"...</p>

<aside class="quote" data-post="4" data-topic="421"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//community.axoloti.com/user_avatar/community.axoloti.com/matthewcieplak/40/280_1.png" class="avatar">matthewcieplak:</div>
<blockquote><p>"SPI output"</p></blockquote></aside>

<p>output of the master or output of the slave, can be confusing. I like MOSI/MISO best. But SPI is really a "jungle standard"...</p>

<p>Oh I think you need to address the mcp23S17 too...</p>

<pre><code>// MCP23S17 SPI Slave Device
#define SPI_SLAVE_ID    0x40
#define SPI_SLAVE_ADDR  0x00      // A2=0,A1=0,A0=0
#define SPI_SLAVE_WRITE 0x00
#define SPI_SLAVE_READ  0x01

      void mcp_send_command(uint8_t reg, uint8_t val){
        spiSelect(&amp;SPID1);
        txbuf[0] = SPI_SLAVE_ID | ((SPI_SLAVE_ADDR &lt;&lt; 1) &amp; 0x0E)| SPI_SLAVE_WRITE;
        txbuf[1] = reg;
        txbuf[2] = val;
        spiSend(&amp;SPID1,3, txbuf);
        spiUnselect(&amp;SPID1);
      }</code></pre>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421/6">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421/6</link>
        <pubDate>Sun, 06 Sep 2015 22:46:38 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-421-6</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421.rss">Driving seven-segment display with MCP23S17 IO expander</source>
      </item>
      <item>
        <title>Driving seven-segment display with MCP23S17 IO expander</title>
        <dc:creator><![CDATA[@matthewcieplak Matthew Cieplak]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/matthewcieplak">@matthewcieplak</a> wrote:</p>
          <blockquote>
              <p>And yes, I think the buffer is correctly declared – that part I copied directly from the LKM patch. It's a [32] byte array at the moment – perhaps that's the issue. Here's the script as of now:</p>

<pre><code>  // MCP23S17 I/O EXPANDER SPI
  // by matthew cieplak

  uint8_t *txbuf;

  #define MCP_IODIRA 0x00
  #define MCP_IODIRB 0x01
  #define MCP_IOCONA 0x0A
  #define MCP_GPPUA  0x0C
  #define MCP_GPPUB  0x0D
  #define MCP_GPIOA  0x12
  #define MCP_GPIOB  0x13

  void setup(void){
  	
  	static uint8_t _txbuf[32] __attribute__ ((section (".sram2")));
  	txbuf = _txbuf;

  	mcp_send_command(MCP_IOCONA,0x28);   // I/O Control Register: BANK=0, SEQOP=1, HAEN=1 (Enable Addressing)
  	mcp_send_command(MCP_IODIRA,0x00);   // GPIOA As Output
  	mcp_send_command(MCP_IODIRB,0x00);   // GPIOB As Output
  	mcp_send_command(MCP_GPIOA,0x00);    // Reset Output on GPIOA
  	mcp_send_command(MCP_GPIOB,0x00);    // Reset Output on GPIOA
  	
  }

  void mcp_send_command(uint8_t reg, uint8_t val){
  	spiSelect(&amp;SPID1);
  	txbuf[0] = reg;
  	txbuf[1] = val;
  	spiSend(&amp;SPID1,2, txbuf);
  	spiUnselect(&amp;SPID1);
  }

  void loop(void){
  	spiSelect(&amp;SPID1);
  	//txbuf[0] = (in1&gt;&gt;8);     // FOR PATCH INPUT
  	//txbuf[1] = (in1);	   // FOR PATCH INPUT
  	txbuf[0] = MCP_GPIOB;
  	txbuf[1] = 0xff;
  	spiSend(&amp;SPID1,2,txbuf);
  	spiUnselect(&amp;SPID1);
  	chThdSleepMilliseconds(1);
  }</code></pre>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421/5">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421/5</link>
        <pubDate>Sun, 06 Sep 2015 22:26:22 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-421-5</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421.rss">Driving seven-segment display with MCP23S17 IO expander</source>
      </item>
      <item>
        <title>Driving seven-segment display with MCP23S17 IO expander</title>
        <dc:creator><![CDATA[@matthewcieplak Matthew Cieplak]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/matthewcieplak">@matthewcieplak</a> wrote:</p>
          <blockquote>
              <p>Thanks for the quick replies!  I think the documentation is probably consistent, but PA6 and PA7 are variously called DIO, MOSI, and "SPI output" in people's demo patches, so I was confused as to whether they were switched depending on configuration.</p>

<p>Clock speed could definitely be a culprit – will try the lowest baudrates first. I do have an old cathode ray scope I could hook up, but I have no probes for it at the moment (have just been using it for A/V graphics stuff).</p>

<p>Yes, the bare wire is probably not helping either. It makes a solid enough connection for analog stuff (operates smoothly when turning potentiometers for example), but now that I know the pinout properly I can just solder some leads on for now. Header strip is not a bad idea – though I think I'll want a big ribbon cable connector when I actually prototype it. Do you know offhand if there's an appropriate molex-type header at 2.54mm pitch?</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421/4">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421/4</link>
        <pubDate>Sun, 06 Sep 2015 22:20:18 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-421-4</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421.rss">Driving seven-segment display with MCP23S17 IO expander</source>
      </item>
      <item>
        <title>Driving seven-segment display with MCP23S17 IO expander</title>
        <dc:creator><![CDATA[@johannes johannes]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/johannes">@johannes</a> wrote:</p>
          <blockquote>
              <p>Pin out is as rvsense says<br>PA6 is most often called "MISO" : master input, slave output. <br>PA7 is "MOSI", master output, slave input.<br>Axoloti is the master. </p>

<p>Where do you find contradicting info? I'd like to correct/clear up confusing info.</p>

<p>Are you using DMA capable memory in your code? All data buffers used in spiSend(), spiReceive or spiExchange must be declared like this:</p>

<pre><code>static uint8_t _txbuf[8] __attribute__ ((section (".sram2")));
static uint8_t _rxbuf[8] __attribute__ ((section (".sram2")));</code></pre>

<p>You're just hooking wire into the prototyping holes of Axoloti? That will not give a reliable connection. I suggest soldering a strip of female headers into the holes of Axoloti, that is the common way to do it in arduino world. Still, inserting an unstranded wire into a female header strip comes loose very quickly, I am not a big fan. An alternative is soldering a male pinheader strip to the bottom side of Axoloti Core, and then plugging that into your solderless breadboard.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421/3">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421/3</link>
        <pubDate>Sun, 06 Sep 2015 21:53:56 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-421-3</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421.rss">Driving seven-segment display with MCP23S17 IO expander</source>
      </item>
      <item>
        <title>Driving seven-segment display with MCP23S17 IO expander</title>
        <dc:creator><![CDATA[@rvense]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/rvense">@rvense</a> wrote:</p>
          <blockquote>
              <p>I don't know the chip and I can't test your patch right now, but the data sheet says its maximum clock is 10MHz. As I remember, the default SPI settings give a clock of 20MHz, try setting it slower in the SPI config object. The SPI pinout is always the same: PA4 is the chip select, PA5 is clock, PA6 is input (from the point of view of Axoloti) and PA7 is output.</p>

<p>Do you have access to an oscilloscope of any sort? Seeing the signals as you poke around will make this much easier for you.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421/2">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421/2</link>
        <pubDate>Sun, 06 Sep 2015 21:37:43 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-421-2</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421.rss">Driving seven-segment display with MCP23S17 IO expander</source>
      </item>
      <item>
        <title>Driving seven-segment display with MCP23S17 IO expander</title>
        <dc:creator><![CDATA[@matthewcieplak Matthew Cieplak]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/matthewcieplak">@matthewcieplak</a> wrote:</p>
          <blockquote>
              <p>Hello everyone,<br>I've been playing with my axoloti and imagining some potential hardware designs for it, and I picked up a few components to use in a mono-synth box I want to build. I have a rotary encoder and 2-digit seven-segment display that I'd like to use for patch or parameter changes, and I picked up a an MCP23S17 16-bit digital IO expander (<a href="http://ww1.microchip.com/downloads/en/DeviceDoc/21952b.pdf" rel="nofollow">datasheet here</a>) so as not to use up 14 pins for the display alone. So I've been trying for two days now and still can't get any output from the GPIO pins. <img src="/images/emoji/emoji_one/confused.png?v=0" title=":confused:" class="emoji" alt="confused"> </p>

<p>I should say that I'm a computer programmer by trade but have never really done embedded/serial/chip programming (or much of anything in C) so a lot of my confusion is just my inexperience. I put together a patch and script based on the LKM1638 example patch Johannes recommended, as well as some elements from <a class="mention" href="/users/paul">@paul</a>'s 74HC595 shift register patch. I also took the register addresses from <a href="http://www.ermicro.com/blog/?p=1846" rel="nofollow">this tutorial</a>.</p>

<p>I know that the chip select, SPI clock, and data output/input pins should be PA4, PA5, PA6, and PA7, but their arrangement seems to inconsistent between patches. I've tried several combinations, but is this documented somewhere?</p>

<p>Below is a photo of my breadboard and the patch is also attached. I'm sure there are some obvious mistakes throughout. I can get segments to light up if I connect the "interrupt output" pins (19 or 20) to the display, so it clearly has power, but otherwise no dice. Can someone point me in the right direction?</p>

<p><div class="lightbox-wrapper"><a data-download-href="//community.axoloti.com/uploads/default/29ae9896193102f10226207a2f6bf8d23485545e" href="//community.axoloti.com/uploads/default/original/1X/29ae9896193102f10226207a2f6bf8d23485545e.jpg" class="lightbox" title="IMG_20150906_140429.jpg"><img src="//community.axoloti.com/uploads/default/optimized/1X/29ae9896193102f10226207a2f6bf8d23485545e_1_666x500.jpg" width="666" height="500"><div class="meta">
<span class="filename">IMG_20150906_140429.jpg</span><span class="informations">2592x1944 1.68 MB</span><span class="expand"></span>
</div></a></div> </p>

<p><a class="attachment" href="//community.axoloti.com/uploads/default/original/1X/a1a9a8bbd8beaab0def157cc13e1ab3768cf00e5.axp">mcp23s17 io expander.axp</a> (3.1 KB) </p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421/1">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421/1</link>
        <pubDate>Sun, 06 Sep 2015 21:24:56 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-421-1</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/driving-seven-segment-display-with-mcp23s17-io-expander/421.rss">Driving seven-segment display with MCP23S17 IO expander</source>
      </item>
  </channel>
</rss>
