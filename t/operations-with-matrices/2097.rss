<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Operations with matrices</title>
    <link>https://sebiik.github.io/community.axoloti.com.backup/t/operations-with-matrices/2097</link>
    <description>I had this bizarre idea to write some kind of &quot;vector space function&quot; to be used as a distortion object.
The basic concept is to provide two signals in input (x1,x2), which are fed to a vectorial function (f1(x1,x2),f2(x1,x2)) that returns a new set of coordinates (y1,y2)

The function i chose to use is a multivariable polynomial:

fi(x,y) = a11 + a21x + a31x^2 + y(a12+a22x+a32x^2) + y^2(a13 + a23x + a33x^2)

which can be easily expressed as a matrix product (in fact i got the formula above solving the matrix product):

[1 ,x ,x^2 ] X [ aij ] X [1 , y, y^2]T 
(which would result in 36 multiplications when considering this particular product)

now, how can i perform such operation in axoloti world in an efficient way?
I&#39;ve read somewhere that the fpu processor is capable of handling matrix operations. If that&#39;s the case, are the functions exposed at patcher level?

If that&#39;s not the case, how could i approach the problem in a non-painful way?</description>
    
    <lastBuildDate>Tue, 09 Aug 2016 10:28:02 +0000</lastBuildDate>
    <category>AxoObject coding</category>
    <atom:link href="https://sebiik.github.io/community.axoloti.com.backup/t/operations-with-matrices/2097.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Operations with matrices</title>
        <dc:creator><![CDATA[@Sputnki Filippo Tamagnini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/sputnki">@Sputnki</a> wrote:</p>
          <blockquote>
              <p>Oops, you'll have to forgive my lack of jargon, i meant the DSP functions.</p>

<p>However, i just coded the object using SMMUL and friends and it works quite nicely without excessive dsp load (i just had to cheat with numbers to get a decent scaling). 4x4 matrix.</p>

<p>I think i might try with a 6x6 ( i can already see the dsp bar shooting in the stars)</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/operations-with-matrices/2097/3">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/operations-with-matrices/2097/3</link>
        <pubDate>Tue, 09 Aug 2016 10:28:02 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2097-3</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/operations-with-matrices/2097.rss">Operations with matrices</source>
      </item>
      <item>
        <title>Operations with matrices</title>
        <dc:creator><![CDATA[@johannes johannes]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/johannes">@johannes</a> wrote:</p>
          <blockquote>
              <p>The FPU does not do matrices. There are some SIMD ("single instruction multiple data") instructions but in integer only. <br>There are matrix functions in CMSIS/DSP_Lib, but not linked in the firmware, I don't think they will offer a significant benefit for 3x3 matrices. <br>Just expressing the multiply/adds in regular code will be fine if you do floating point.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/operations-with-matrices/2097/2">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/operations-with-matrices/2097/2</link>
        <pubDate>Tue, 09 Aug 2016 09:09:00 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2097-2</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/operations-with-matrices/2097.rss">Operations with matrices</source>
      </item>
      <item>
        <title>Operations with matrices</title>
        <dc:creator><![CDATA[@Sputnki Filippo Tamagnini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/sputnki">@Sputnki</a> wrote:</p>
          <blockquote>
              <p>I had this bizarre idea to write some kind of "vector space function" to be used as a distortion object.<br>The basic concept is to provide two signals in input (x1,x2), which are fed to a vectorial function (f1(x1,x2),f2(x1,x2)) that returns a new set of coordinates (y1,y2)</p>

<p>The function i chose to use is a multivariable polynomial:</p>

<p>fi(x,y) = a11 + a21x + a31x^2 + y(a12+a22x+a32x^2) + y^2(a13 + a23x + a33x^2)</p>

<p>which can be easily expressed as a matrix product (in fact i got the formula above solving the matrix product):</p>

<p>[1 ,x ,x^2 ] X [ aij ] X [1 , y, y^2]T <br>(which would result in 36 multiplications when considering this particular product)</p>

<p>now, how can i perform such operation in axoloti world in an efficient way?<br>I've read somewhere that the fpu processor is capable of handling matrix operations. If that's the case, are the functions exposed at patcher level?</p>

<p>If that's not the case, how could i approach the problem in a non-painful way?</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/operations-with-matrices/2097/1">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/operations-with-matrices/2097/1</link>
        <pubDate>Tue, 09 Aug 2016 08:03:24 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2097-1</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/operations-with-matrices/2097.rss">Operations with matrices</source>
      </item>
  </channel>
</rss>
