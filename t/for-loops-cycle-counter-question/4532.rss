<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>For loops - cycle counter question</title>
    <link>https://sebiik.github.io/community.axoloti.com.backup/t/for-loops-cycle-counter-question/4532</link>
    <description>Hello!

I have been working on an object that uses 8 times of the same code, so I thought I&#39;d put a **single** version in a for loop X 8, since its much easier to work with.

Then I thought I&#39;d test it with the cycle counter and see if there performance was better. But, I was very surprised to see that the for loop version now used about 8 times as many cycles to process the same code..... A for loops with a single version of the object times 8, uses 8 times as many cycles as just 8 copied version with in same object. 

But what does that actually mean?

I thought I could easily use a for loop for this, and actually maybe even gain some performance, but I got the totally opposite. So, I should overall avoid using for loops unless its really necessary i Axo world? I have attached the example from above.

Thanks!

&lt;a class=&quot;attachment&quot; href=&quot;/uploads/default/original/2X/8/82557fb31ac15ecdd88b13da54c9fb59da78b62f.axp&quot;&gt;For loop Test .axp&lt;/a&gt; (8.5 KB)</description>
    
    <lastBuildDate>Mon, 07 May 2018 18:00:56 +0000</lastBuildDate>
    <category>AxoObject coding</category>
    <atom:link href="https://sebiik.github.io/community.axoloti.com.backup/t/for-loops-cycle-counter-question/4532.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>For loops - cycle counter question</title>
        <dc:creator><![CDATA[@deadsy Jason T Harris]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/deadsy">@deadsy</a> wrote:</p>
          <blockquote>
              <p>You wouldn't normally expect to get any performance benefit by putting operations is a loop. Loops have to alter and check a loop variable and that takes some time.</p>

<p>total_time = N * (t0 + t1)</p>

<p>Where:<br>t0 = loop overhead time<br>t1 = operation time</p>

<p>If t0 and t1 are comparable in magnitude then loop unrolling gives a benefit.<br>if t0 &lt;&lt; t1 then loop unrolling won't reduce the total time much.</p>

<p>The secondary effect of loop unrolling is that the compiler has more registers/instructions to work with and can use the latency of loads/stores to do other operations. That's often the dominant effect with DSP style block operations.</p>

<p>Having said that:</p>

<p>"Premature optimization is the root of all evil."</p>

<p>So go ahead and write for loops - and unroll them if and when you have to make things faster.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/for-loops-cycle-counter-question/4532/4">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/for-loops-cycle-counter-question/4532/4</link>
        <pubDate>Mon, 07 May 2018 18:00:56 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-4532-4</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/for-loops-cycle-counter-question/4532.rss">For loops - cycle counter question</source>
      </item>
      <item>
        <title>For loops - cycle counter question</title>
        <dc:creator><![CDATA[@jaffasplaffa Mr. Grimm]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/jaffasplaffa">@jaffasplaffa</a> wrote:</p>
          <blockquote>
              <p><a class="mention" href="/u/deadsy">@deadsy</a> Thank you for the comment, Ill take a look at it <img src="//community.axoloti.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"> I am still learning coding, so I really appreciate it.</p>

<p>About the performance benefits, yeah I am only hoping that using a for loop would give better performance, but not expecting it. The main reason that I wated to use for loop was that its just easier to work with and one wants to expand the object later on, its really simple to do so.</p>

<aside class="quote" data-post="2" data-topic="4532"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//community.axoloti.com/user_avatar/community.axoloti.com/deadsy/40/5105_1.png" class="avatar">deadsy:</div>
<blockquote><p>You have to compare cases and measure carefully.</p></blockquote></aside>

<p>Yes I need to start getting into that side of it too, analysis of objects. I recently started using the cycle counter. For now i have just been focusing on understanding writing code... <img src="//community.axoloti.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:">  I am at the point now, where I can go back and edit a lot of my old code ande make it MUCH simpler. </p>

<p>Anyway, thank you again <img src="//community.axoloti.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/for-loops-cycle-counter-question/4532/3">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/for-loops-cycle-counter-question/4532/3</link>
        <pubDate>Mon, 07 May 2018 13:53:32 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-4532-3</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/for-loops-cycle-counter-question/4532.rss">For loops - cycle counter question</source>
      </item>
      <item>
        <title>For loops - cycle counter question</title>
        <dc:creator><![CDATA[@deadsy Jason T Harris]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/deadsy">@deadsy</a> wrote:</p>
          <blockquote>
              <p>Take a look at the produced C code.<br>When you unroll a loop it's often faster.</p>

<p>1) The code will have less loop overhead per operation.<br>2) The compiler will have more operations it can shuffle around to hide load/store latency in.</p>

<p>E.g.</p>

<p></p><pre><code class="lang-auto">// multiply a block by a scalar (2.31uS for n=128)
void block_mul_k(float *out, float k, size_t n) {
	for (size_t i = 0; i &lt; n; i++) {
		out[i] *= k;
	}
}

// multiply a block by a scalar (0.6uS for n=128)
void block_mul_k(float *out, float k, size_t n) {
	// unroll x4
	while (n &gt; 0) {
		out[0] *= k;
		out[1] *= k;
		out[2] *= k;
		out[3] *= k;
		out += 4;
		n -= 4;
	}
}</code></pre>

<p>It's instructive to look at the assembly output for the compilation to see what the compiler is doing. It's not generally true that unrolling will give a performance benefit. You have to compare cases and measure carefully.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/for-loops-cycle-counter-question/4532/2">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/for-loops-cycle-counter-question/4532/2</link>
        <pubDate>Sun, 06 May 2018 14:30:24 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-4532-2</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/for-loops-cycle-counter-question/4532.rss">For loops - cycle counter question</source>
      </item>
      <item>
        <title>For loops - cycle counter question</title>
        <dc:creator><![CDATA[@jaffasplaffa Mr. Grimm]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/jaffasplaffa">@jaffasplaffa</a> wrote:</p>
          <blockquote>
              <p>Hello!</p>

<p>I have been working on an object that uses 8 times of the same code, so I thought I'd put a <strong>single</strong> version in a for loop X 8, since its much easier to work with.</p>

<p>Then I thought I'd test it with the cycle counter and see if there performance was better. But, I was very surprised to see that the for loop version now used about 8 times as many cycles to process the same code..... A for loops with a single version of the object times 8, uses 8 times as many cycles as just 8 copied version with in same object. </p>

<p>But what does that actually mean?</p>

<p>I thought I could easily use a for loop for this, and actually maybe even gain some performance, but I got the totally opposite. So, I should overall avoid using for loops unless its really necessary i Axo world? I have attached the example from above.</p>

<p>Thanks!</p>

<p><a class="attachment" href="//community.axoloti.com/uploads/default/original/2X/8/82557fb31ac15ecdd88b13da54c9fb59da78b62f.axp">For loop Test .axp</a> (8.5 KB)</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/for-loops-cycle-counter-question/4532/1">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/for-loops-cycle-counter-question/4532/1</link>
        <pubDate>Fri, 04 May 2018 17:52:38 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-4532-1</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/for-loops-cycle-counter-question/4532.rss">For loops - cycle counter question</source>
      </item>
  </channel>
</rss>
