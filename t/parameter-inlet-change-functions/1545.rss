<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Parameter/inlet change functions</title>
    <link>http://community.axoloti.com/t/parameter-inlet-change-functions/1545</link>
    <description>Continuing the discussion from [Improvements/Wishes for the patcher](http://community.axoloti.com/t/improvements-wishes-for-the-patcher/257/184):

[quote=&quot;toneburst, post:184, topic:257, full:true&quot;]
I don&#39;t know if this is the best place for this, but there is one feature that would be really handy for custom object developers, I think.

JavaScript-style bindings for parameters and inlets. In JS/jQuery, they work something like this:

```
&lt;uielement&gt;.change(function(e) {
    //do something based on value of e
});
```

I realise anonymous functions may not be supported in C, so the syntax would be different, but I think the principle of providing ready-made bindings for parameter-changes would be really useful, removing the necessity for developers to create their own variables and control structures to track changes to parameters, and allowing them to concentrate on the DSP code and logic of their objects.

Events that could have functions bound to them:

* parameter change
* parameter up
* parameter down
* s-rate/k-rate input zero-crossing
* s-rate/k-rate input rising edge
* s-rate/k-rate input falling edge


Cheers,

a|x
[/quote]</description>
    
    <lastBuildDate>Thu, 21 Apr 2016 20:25:56 +0000</lastBuildDate>
    <category>Developer</category>
    <atom:link href="https://sebiik.github.io/community.axoloti.com.backup/t/parameter-inlet-change-functions/1545.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Parameter/inlet change functions</title>
        <dc:creator><![CDATA[@toneburst alx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/toneburst">@toneburst</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="8" data-topic="1545"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//community.axoloti.com/user_avatar/community.axoloti.com/thetechnobear/40/6_1.png" class="avatar">thetechnobear:</div>
<blockquote><p>I actually really liked the simplicity of axoloti when I started, just dsp/midi functions, just directly using the parameters/inlets. I generally don't like things that have a lot of syntax sugar... it means you have to know more, before you can just 'dig' in.</p></blockquote></aside>

<p>I guess there are two ways of looking at this. From my point of view, I'd rather 'dig in' to coding the 'exciting' bit of the object code - the bit that actually creates k or s-rate signals that make cool things happen further downstream.</p>

<p>Having to write reams of code just to transform parameter values so controls work in an intuitive manner, or even more boringly, just handle gate on/off inputs takes time away from the interesting stuff, and means I end up writing the same logic structures over again and again.</p>

<p>Personal viewpoint, of course, but I imagine others probably feel the same.</p>

<p>a|x</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/parameter-inlet-change-functions/1545/11">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/parameter-inlet-change-functions/1545/11</link>
        <pubDate>Thu, 21 Apr 2016 20:25:56 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1545-11</guid>
        <source url="http://community.axoloti.com/t/parameter-inlet-change-functions/1545.rss">Parameter/inlet change functions</source>
      </item>
      <item>
        <title>Parameter/inlet change functions</title>
        <dc:creator><![CDATA[@toneburst alx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/toneburst">@toneburst</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="8" data-topic="1545"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//community.axoloti.com/user_avatar/community.axoloti.com/thetechnobear/40/6_1.png" class="avatar">thetechnobear:</div>
<blockquote><p>perhaps the DSL topic/idea might get you closer to what you want? ( e.g. a JS interface)  and though that talked of generating patches, you could write something that generated objects/C code.</p></blockquote></aside>

<p>I do think JS support on some level would be cool, but that's because I have more experience using JS than C. In this case, though, I was just using JS as an example of an event-driven paradigm that I thought could perhaps be applied in a very limited sense, for a particular task. I'm sure it could be done using C syntax, however, so there's no need to shoehorn full JS support into the Editor, just for this.</p>

<p>Where I've used JavaScript in a node-based editor in the past (in Quartz Composer, though I understand Max also has JS support), it's been for complex logic, that would otherwise require a large number of discrete nodes. Beyond a certain level of complexity, or when dealing with arrays of data, it becomes easier to write and annotate code to create the logic or control values than to use a large number of discrete nodes connected together in a complicated tangle of virtual wires.</p>

<p>Having given the matter some thought, I'm now tending towards thinking that he fact that all Axoloti objects are defined in easily-edited XML makes the need for support for other languages less of a necessity. </p>

<p>We may be moving a bit OT, here though.</p>

<p>a|x</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/parameter-inlet-change-functions/1545/10">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/parameter-inlet-change-functions/1545/10</link>
        <pubDate>Thu, 21 Apr 2016 20:15:47 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1545-10</guid>
        <source url="http://community.axoloti.com/t/parameter-inlet-change-functions/1545.rss">Parameter/inlet change functions</source>
      </item>
      <item>
        <title>Parameter/inlet change functions</title>
        <dc:creator><![CDATA[@toneburst alx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/toneburst">@toneburst</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="8" data-topic="1545"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//community.axoloti.com/user_avatar/community.axoloti.com/thetechnobear/40/6_1.png" class="avatar">thetechnobear:</div>
<blockquote><p>Id also like more (and flexible) transformation functions (scaling, curves, offset) as its a pretty common thing to want to do, and is not trivial with the Q number format, and data definitions.</p></blockquote></aside>

<p>Absolutely! I'm still struggling to get my head around fixed-point maths.</p>

<p>Here are some interactive graphs of the standard CSS3 easing curves<br><a href="http://easings.net" class="onebox" target="_blank" rel="nofollow">http://easings.net</a><br>Not all of these would be useful in terms of parameter pre-transformation, but quite a few would be, I think. It might also be cool to be able to specify you own cubic bezier curves, using floating-point coordinates for the two handles, like<br><a href="http://cubic-bezier.com/" class="onebox" target="_blank" rel="nofollow">http://cubic-bezier.com/</a></p>

<p>In terms of adding complexity, I do see where you're coming from. I think actually, though, it wouldn't have to have that effect. If there were some new XML tags, or even a few additional properties to add to existing tags in the parameter definition section of the object code, that wouldn't be introducing another language, just a handful of new properties.</p>

<p>At the risk of getting irritating you by suggesting implementations, I'm thinking something along these lines<br></p>

<p></p><pre><code class="lang-auto">&lt;frac32.s.map name="myparam" description="description" interpolation="exponential"/&gt;</code></pre>

<p>That's not complex (and a hell of a lot less complex, as you point out, than transforming the param value in the object code itself). You could even add a dropdown menu or some other UI device in the Parameters section of the Object Definition editor to choose the interpolation-type. Easy-peasy.</p>

<p>a|x</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/parameter-inlet-change-functions/1545/9">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/parameter-inlet-change-functions/1545/9</link>
        <pubDate>Thu, 21 Apr 2016 19:58:56 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1545-9</guid>
        <source url="http://community.axoloti.com/t/parameter-inlet-change-functions/1545.rss">Parameter/inlet change functions</source>
      </item>
      <item>
        <title>Parameter/inlet change functions</title>
        <dc:creator><![CDATA[@thetechnobear Mark Harris]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/thetechnobear">@thetechnobear</a> wrote:</p>
          <blockquote>
              <p>Id also like more (and flexible) transformation functions (scaling, curves, offset) as its a pretty common thing to want to do, and is not trivial with the Q number format, and data definitions.</p>

<p>my only concern with adding the event type stuff, is its another layer.. <br>another thing for new users to have to learn/be familiar with, and its a pretty high barrier to enter already.... and its more stuff to be documented , a more complex XML/editor.</p>

<p>(Im assuming we are talking about adding the above to the XML, I would now want to move the code away from standard C/C++... to some kind of axoloti 'C' with JS extensions.)</p>

<p>I actually really liked the simplicity of axoloti when I started, just dsp/midi functions, just directly using the parameters/inlets. I generally don't like things that have a lot of syntax sugar... it means you have to know more, before you can just 'dig' in.<br>But I do understand, Im from a C background, so not the 'target audience' </p>

<p>also is this the right direction?</p>

<p>its not going to turn Axoloti into javascript, so those users will still need to be familiar with C, and general DSP processing and many other concepts custom object programming requires.</p>

<p>perhaps the <a href="//community.axoloti.com/t/dsl-alternative-to-gui-patcher/1326">DSL topic/idea</a> might get you closer to what you want? ( e.g. a JS interface)  and though that talked of generating patches, you could write something that generated objects/C code.</p>

<p>I think other similar environments (e.g. max) take this kind of approach i.e. providing different language support...  and gen in max, they provide their own language.</p>

<p>of course, I do recognise adding other language support, is pretty ambitious for a project like Axoloti, and fear a bit too much with current resources.</p>

<p>anyway, just my thoughts... Id love to hear others opinions too... <br>how many JS coders out there do we have? (its been mentioned a couple of times already)</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/parameter-inlet-change-functions/1545/8">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/parameter-inlet-change-functions/1545/8</link>
        <pubDate>Thu, 21 Apr 2016 16:40:55 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1545-8</guid>
        <source url="http://community.axoloti.com/t/parameter-inlet-change-functions/1545.rss">Parameter/inlet change functions</source>
      </item>
      <item>
        <title>Parameter/inlet change functions</title>
        <dc:creator><![CDATA[@toneburst alx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/toneburst">@toneburst</a> wrote:</p>
          <blockquote>
              <p>I can see inlets and parameters work in different ways. I'd assumed parameters were updated at k-rate, but you seem to imply that's not the case. It doesn't actually matter, as long as some kind of flag is passed to the next cycle of the object that can be used to trigger a function when the parameter value changes, and utilised something like this, in the object code:</p>

<p><code>param_myparam.change = functionname();</code></p>

<p>(again, syntax could be different, but you get the idea).</p>

<p>The idea of arbitrary pre-transform algorithms for parameter values is a good one, I think. On the other hand maybe just a larger set of pre-defined pre-transform functions would save time. Again, I'm falling back on my knowledge of webdesign coding conventions/standards here, but a range of preset interpolation functions a little like those provided for CSS3 transition/animation would be super-handy, I think. These could be applied to parameters in the XML definition.</p>

<p>a|x</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/parameter-inlet-change-functions/1545/7">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/parameter-inlet-change-functions/1545/7</link>
        <pubDate>Thu, 21 Apr 2016 14:46:54 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1545-7</guid>
        <source url="http://community.axoloti.com/t/parameter-inlet-change-functions/1545.rss">Parameter/inlet change functions</source>
      </item>
      <item>
        <title>Parameter/inlet change functions</title>
        <dc:creator><![CDATA[@johannes johannes]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/johannes">@johannes</a> wrote:</p>
          <blockquote>
              <p>First let me clarify: there is a distinction between parameters and inlets. Inlets are assumed to be able to change at control rate. While parameters are assumed to change only occasionally.</p>

<p>So parameter changes can be processed outside the dsp loop at a lower priority.</p>

<p>Some parameter types have bound functions, but so far they can only transform the parameter value, not access any other object variables. And so far they're defined as distinct parameter types, objects cannot provide their own. This is a limitation I'd like to lift somehow, but it's not really easy. Current parameter functions are sharing code across objects, that avoids duplicate code which would waste binary code space.<br>The goal of avoiding code duplication conflicts with the desire to access object variables, and providing parameter functions in an object definition.</p>

<p>Inlets have a different constraint, since changes at control rate are to be expected. So far there are no inlet change functions.<br>Inlet functions benefit from code inlining, function call overhead is better avoided here. I don't think there is a performance or code size advantage in separating inlet change function. There is a demand to unify parameters and inlets, so there should be a way added to apply the same parameter transform function to inlets, where this function can be inlined.</p>

<p>I think boolean inlet rising edge triggers are a special and common case. What I have in mind here is a adding specific boolean inlet type, that converts "running" booleans to one that is only true on an incoming rising edge. This 'd be the same mechanism that emits data type conversion glue code cfr. src/main/java/axoloti/datatypes<br>That would de-duplicate rising edge detecting code, the object would still need</p>

<pre><code>if (inlet1_rising) {
}</code></pre>

<p>in its dsp function.</p>

<p>Thoughts/comments welcome!</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/parameter-inlet-change-functions/1545/6">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/parameter-inlet-change-functions/1545/6</link>
        <pubDate>Thu, 21 Apr 2016 12:06:14 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1545-6</guid>
        <source url="http://community.axoloti.com/t/parameter-inlet-change-functions/1545.rss">Parameter/inlet change functions</source>
      </item>
      <item>
        <title>Parameter/inlet change functions</title>
        <dc:creator><![CDATA[@toneburst alx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/toneburst">@toneburst</a> wrote:</p>
          <blockquote>
              <p>Cool.</p>

<p>The way I'd envisage it working is that you'd bind a (named) function to a particular event on a particular param or inlet.</p>

<p>When that event occurred, the function would be triggered for that cycle only (though of course the function could set a flag variable that would cause other things to happen on subsequent cycles).</p>

<p>Multiple bound functions could be triggered on the same cycle.</p>

<p>It just eliminates the need for potentially unwieldy (with several params/inlets) boilerplate code.</p>

<p>While I understand that JS event-driven model isn't necessarily directly applicable to Axoloti, on a code level, the event-binding paradigm is well understood by anyone who's worked in Web-Design (and that constituency is way larger than the number of people with C experience), and provides an easy way of making sure things happen when you want them to.</p>

<p>a|x</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/parameter-inlet-change-functions/1545/5">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/parameter-inlet-change-functions/1545/5</link>
        <pubDate>Thu, 21 Apr 2016 11:13:53 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1545-5</guid>
        <source url="http://community.axoloti.com/t/parameter-inlet-change-functions/1545.rss">Parameter/inlet change functions</source>
      </item>
      <item>
        <title>Parameter/inlet change functions</title>
        <dc:creator><![CDATA[@johannes johannes]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/johannes">@johannes</a> wrote:</p>
          <blockquote>
              <p>Worth a separate thread, moved to the developer corner, sure.<br></p>

<aside class="quote" data-post="3" data-topic="1545"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//community.axoloti.com/letter_avatar_proxy/v2/letter/t/b9e5f3/40.png" class="avatar">toneburst:</div>
<blockquote><p>OK if I chip in here?</p></blockquote></aside>

<p>Sure!</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/parameter-inlet-change-functions/1545/4">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/parameter-inlet-change-functions/1545/4</link>
        <pubDate>Thu, 21 Apr 2016 11:08:25 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1545-4</guid>
        <source url="http://community.axoloti.com/t/parameter-inlet-change-functions/1545.rss">Parameter/inlet change functions</source>
      </item>
      <item>
        <title>Parameter/inlet change functions</title>
        <dc:creator><![CDATA[@toneburst alx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/toneburst">@toneburst</a> wrote:</p>
          <blockquote>
              <p>OK if I chip in here?</p>

<p>a|x</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/parameter-inlet-change-functions/1545/3">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/parameter-inlet-change-functions/1545/3</link>
        <pubDate>Thu, 21 Apr 2016 11:07:06 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1545-3</guid>
        <source url="http://community.axoloti.com/t/parameter-inlet-change-functions/1545.rss">Parameter/inlet change functions</source>
      </item>
      <item>
        <title>Parameter/inlet change functions</title>
        <dc:creator><![CDATA[@thetechnobear Mark Harris]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/thetechnobear">@thetechnobear</a> wrote:</p>
          <blockquote>
              <p>EDIT: moved to new thread</p>

<aside class="quote" data-post="184" data-topic="257"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//community.axoloti.com/letter_avatar_proxy/v2/letter/t/b9e5f3/40.png" class="avatar"><a href="//community.axoloti.com/t/improvements-wishes-for-the-patcher/257/184">Improvements/Wishes for the patcher</a>
</div>
<blockquote>
<p>I don't know if this is the best place for this, but there is one feature that would be really handy for custom object developers, I think.</p>
<p>JavaScript-style bindings for parameters and inlets. In JS/jQuery, they work something like this:</p>
</blockquote></aside>

<p>Its an interesting idea, <br>probably worthy of a separate thread.... the reason I say this is...  it would be interesting to discuss how this is used in practice.</p>

<p>the thing is, axoloti is not 'event driven', unlike JS etc , so I wonder how it applies. (not saying it doesn't, just wondering how)  e.g. its possible for 2 parameters and the incoming signal all to change in the same execution cycle... they are not applied in series as in JS etc. also all parameters etc are evaluated every cycle.</p>

<p>(perhaps some use-case examples you have in mind could help)</p>

<p>I do agree, we do have some 'boiler plate' code going on at times.. e.g. copying inlets into member variables, and things like 'gates' and triggers and how they interact. but Im a little unclear on how this would work with the above, or generally how we can improve this.</p>

<p>that said, we know that the rising/falling triggers could be more than booleans, ie. I think they should only be true when they cross, this would remove some of the boiler plate code.<br>(though code migration, because a big concern to change this behaviour)</p>

<p>anyway, as I said, perhaps something we need to understand better?</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/parameter-inlet-change-functions/1545/2">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/parameter-inlet-change-functions/1545/2</link>
        <pubDate>Thu, 21 Apr 2016 10:59:21 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1545-2</guid>
        <source url="http://community.axoloti.com/t/parameter-inlet-change-functions/1545.rss">Parameter/inlet change functions</source>
      </item>
      <item>
        <title>Parameter/inlet change functions</title>
        <dc:creator><![CDATA[@johannes johannes]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/johannes">@johannes</a> wrote:</p>
          <blockquote>
              <p>Continuing the discussion from <a href="//community.axoloti.com/t/improvements-wishes-for-the-patcher/257/184">Improvements/Wishes for the patcher</a>:</p>

<aside class="quote" data-post="184" data-topic="257" data-full="true"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//community.axoloti.com/letter_avatar_proxy/v2/letter/t/b9e5f3/40.png" class="avatar"><a href="//community.axoloti.com/t/improvements-wishes-for-the-patcher/257/184">Improvements/Wishes for the patcher</a>
</div>
<blockquote>
<p>I don't know if this is the best place for this, but there is one feature that would be really handy for custom object developers, I think.</p>
<p>JavaScript-style bindings for parameters and inlets. In JS/jQuery, they work something like this:</p>
<p><code><br>&lt;uielement&gt;.change(function(e) {
    //do something based on value of e
});<br></code></p>
<p>I realise anonymous functions may not be supported in C, so the syntax would be different, but I think the principle of providing ready-made bindings for parameter-changes would be really useful, removing the necessity for developers to create their own variables and control structures to track changes to parameters, and allowing them to concentrate on the DSP code and logic of their objects.</p>
<p>Events that could have functions bound to them:</p>
<p>* parameter change<br>* parameter up<br>* parameter down<br>* s-rate/k-rate input zero-crossing<br>* s-rate/k-rate input rising edge<br>* s-rate/k-rate input falling edge</p>
<p>Cheers,</p>
<p>a|x</p>
</blockquote></aside>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/parameter-inlet-change-functions/1545/1">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/parameter-inlet-change-functions/1545/1</link>
        <pubDate>Thu, 21 Apr 2016 10:49:54 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1545-1</guid>
        <source url="http://community.axoloti.com/t/parameter-inlet-change-functions/1545.rss">Parameter/inlet change functions</source>
      </item>
  </channel>
</rss>
