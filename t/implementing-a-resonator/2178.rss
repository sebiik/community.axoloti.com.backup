<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Implementing a resonator</title>
    <link>https://sebiik.github.io/community.axoloti.com.backup/t/implementing-a-resonator/2178</link>
    <description>Hi, 

I&#39;ve become interested in implementing a resonator found in Parasites, an [alternative firmware](https://mqtthiqs.github.io/parasites/clouds.html) for mutable instruments&#39; Clouds eurorack module. They actually describe how they&#39;ve implemented, so I have not had to look into the code itself. These are the two key figures/diagrams that shows it:

&lt;img src=&#39;/uploads/default/original/2X/3/39c27c05b6074b98d81ecc93946608eede235d0d.jpg&#39;&gt;

Detail of the COMB box

&lt;img src=&#39;/uploads/default/original/2X/c/c4cc1874e11682fcce18877cf3a208d0dd4d63c4.jpg&#39;&gt;

I&#39;m interested in understanding how could one implement this in Axoloti:

1) Using current blocks such as delay write/read - I confess that they are very unintuitive to me, especially since the order seems to matter. And where is a documented description of what the knob do on both read and write and how they interplay with each other? Is this knob related to write SIZE and how to calculate exact sample numbers?

2) Coding this in a typical C++ block. Is there a &quot;tutorial-like&quot; or what block should one look into in order to simply see how to access the samples, or sample array ?

Thank you for all help</description>
    
    <lastBuildDate>Mon, 29 Aug 2016 18:30:46 +0000</lastBuildDate>
    <category>Patching</category>
    <atom:link href="https://sebiik.github.io/community.axoloti.com.backup/t/implementing-a-resonator/2178.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Implementing a resonator</title>
        <dc:creator><![CDATA[@jaffasplaffa Mr. Grimm]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/jaffasplaffa">@jaffasplaffa</a> wrote:</p>
          <blockquote>
              <p>Tutorial 18 is a combfilter. You could easily just copy some of the set up and paste it into a patcher or subpatch as a starter. Then you have 1 "comb voice" that you can copy 8 times.</p>

<p>For this:<br>I think it would be a great idea to set all parameters in the patch settings to zero. ESPECIALLY on the comb voice. This way you save some SDram that  you need for the comb voices. </p>

<p>From looking at it, I dont find any feedback loop. Maybe I am missing something. Feedback loop is usually pretty important on a combfilter. Axoloti tutorial doesnt have it either, but that is pretty easy to add manually.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/implementing-a-resonator/2178/2">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/implementing-a-resonator/2178/2</link>
        <pubDate>Mon, 29 Aug 2016 18:24:46 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2178-2</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/implementing-a-resonator/2178.rss">Implementing a resonator</source>
      </item>
      <item>
        <title>Implementing a resonator</title>
        <dc:creator><![CDATA[@bafonso]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/bafonso">@bafonso</a> wrote:</p>
          <blockquote>
              <p>Hi, </p>

<p>I've become interested in implementing a resonator found in Parasites, an <a href="https://mqtthiqs.github.io/parasites/clouds.html" rel="nofollow">alternative firmware</a> for mutable instruments' Clouds eurorack module. They actually describe how they've implemented, so I have not had to look into the code itself. These are the two key figures/diagrams that shows it:</p>

<p><div class="lightbox-wrapper"><a data-download-href="//community.axoloti.com/uploads/default/39c27c05b6074b98d81ecc93946608eede235d0d" href="//community.axoloti.com/uploads/default/original/2X/3/39c27c05b6074b98d81ecc93946608eede235d0d.jpg" class="lightbox" title="resonator-dia.jpg"><img src="//community.axoloti.com/uploads/default/optimized/2X/3/39c27c05b6074b98d81ecc93946608eede235d0d_1_690x358.jpg" width="690" height="358"><div class="meta">
<span class="filename">resonator-dia.jpg</span><span class="informations">2448x1271 951 KB</span><span class="expand"></span>
</div></a></div></p>

<p>Detail of the COMB box</p>

<p><div class="lightbox-wrapper"><a data-download-href="//community.axoloti.com/uploads/default/c4cc1874e11682fcce18877cf3a208d0dd4d63c4" href="//community.axoloti.com/uploads/default/original/2X/c/c4cc1874e11682fcce18877cf3a208d0dd4d63c4.jpg" class="lightbox" title="comb-dia.jpg"><img src="//community.axoloti.com/uploads/default/optimized/2X/c/c4cc1874e11682fcce18877cf3a208d0dd4d63c4_1_690x250.jpg" width="690" height="250"><div class="meta">
<span class="filename">comb-dia.jpg</span><span class="informations">2323x844 478 KB</span><span class="expand"></span>
</div></a></div></p>

<p>I'm interested in understanding how could one implement this in Axoloti:</p>

<p>1) Using current blocks such as delay write/read - I confess that they are very unintuitive to me, especially since the order seems to matter. And where is a documented description of what the knob do on both read and write and how they interplay with each other? Is this knob related to write SIZE and how to calculate exact sample numbers?</p>

<p>2) Coding this in a typical C++ block. Is there a "tutorial-like" or what block should one look into in order to simply see how to access the samples, or sample array ?</p>

<p>Thank you for all help</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/implementing-a-resonator/2178/1">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/implementing-a-resonator/2178/1</link>
        <pubDate>Mon, 29 Aug 2016 15:26:35 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2178-1</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/implementing-a-resonator/2178.rss">Implementing a resonator</source>
      </item>
  </channel>
</rss>
