<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Practical fixed point math</title>
    <link>https://sebiik.github.io/community.axoloti.com.backup/t/practical-fixed-point-math/2223</link>
    <description>I&#39;d like to ask some tips and guidance on how to convert this type math in float world into fixed point. 

Let&#39;s say we have the floating point expression:
`
float a = 1.0f/(1.0f+alpha)
`

The final result is obviously bound to be &lt;1 if alpha &gt;=0 but the required intermediate calculation for the denominator would be higher than 1 and potential bigger than the highest value in q5.27 for example. 

I thought about dividing by 8, doing the math and the rescaling back. Is this an ideal approach?  I&#39;d like to know of best practices or most common approaches typically used in DSP programming. If you could provide code that would be great. 

Building a small repertoire of examples such as this could lower the barrier for new axoloti users interested in object coding.</description>
    
    <lastBuildDate>Fri, 07 Jul 2017 16:15:07 +0000</lastBuildDate>
    <category>AxoObject coding</category>
    <atom:link href="https://sebiik.github.io/community.axoloti.com.backup/t/practical-fixed-point-math/2223.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Practical fixed point math</title>
        <dc:creator><![CDATA[@otoskope Palle Dahlstedt]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/otoskope">@otoskope</a> wrote:</p>
          <blockquote>
              <p>Thanks - great post. I had searched around, but somehow missed <a class="mention" href="/u/sputnki">@Sputnki</a>'s post. I think it contains enough info for me to get going! Great.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/practical-fixed-point-math/2223/10">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/practical-fixed-point-math/2223/10</link>
        <pubDate>Fri, 07 Jul 2017 16:15:07 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2223-10</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/practical-fixed-point-math/2223.rss">Practical fixed point math</source>
      </item>
      <item>
        <title>Practical fixed point math</title>
        <dc:creator><![CDATA[@SmashedTransistors]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/smashedtransistors">@SmashedTransistors</a> wrote:</p>
          <blockquote>
              <p>Thanks for the tip <a class="mention" href="/users/otoskope">@otoskope</a> </p>

<p><a class="mention" href="/users/sputnki">@Sputnki</a> did a nice doc here:<br><aside class="quote" data-post="1" data-topic="2606">
  <div class="title">
    <div class="quote-controls"></div>
    <img alt="" width="20" height="20" src="/user_avatar/community.axoloti.com/sputnki/40/175_1.png" class="avatar">
    <a href="//community.axoloti.com/t/coding-axoloti-objects/2606#fixedpointmath?source_topic_id=2223">Coding axoloti objects</a> <a class="badge-wrapper  bullet" href="/c/user-guide"><span class="badge-category-bg" style="background-color: #3AB54A;"></span><span style="color: #FFFFFF;" class="badge-category clear-badge" title="This category contains posts to help users use Axoloti, a dynamic user guide.">User Guide</span></a>
  </div>
  <blockquote>
    A pretty big subject, but i think it might be useful to shed some light for newbies: 

Contents


<a href="#needtoknow">What do you need to know to code objects</a>
<a href="#startcoding">How do you start coding an object?</a>
<a href="#editlibrary">How do you edit a library object?</a>
<a href="#codeinout">Coding with input/output (and parameters)</a>
<a href="#localdata">Local data</a>
<a href="#initcode">Init code</a>
<a href="#kratesrate">K-rate and S-rate cycles</a>
<a href="#inletsoutlets">Inlets/Outlets</a>
<a href="#parameters">Parameters</a>
<a href="#rangeformat">Normal range and number format</a>
<a href="#elementarymath">Elementary math in axoloti</a>
<a href="#32bitvar">32bit variables</a>
<a href="#bitshifts">Bitshifts</a>
<a href="#fixedpointmath">Fixed point math</a>
<a href="#functions">Functions</a>
<a href="#assembly">Assembly functions</a>
<a href="#bitwise">Bitwise operations</a>





<a name="needtoknow"></a>What do you need to knowâ€¦
  </blockquote>
</aside>
</p>

<p>On the Axoloti the __SMMUL and SMMLA functions with additional shifting allow fixed point 32 bit multiplications.</p>

<p>Note that the floating point calc on the Axoloti is quite efficient (1 cycle for basic for mul add sub, 14 cycle for div) and that conversions (int to/from float) are fast too (1 cycle).</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/practical-fixed-point-math/2223/9">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/practical-fixed-point-math/2223/9</link>
        <pubDate>Thu, 06 Jul 2017 18:39:04 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2223-9</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/practical-fixed-point-math/2223.rss">Practical fixed point math</source>
      </item>
      <item>
        <title>Practical fixed point math</title>
        <dc:creator><![CDATA[@otoskope Palle Dahlstedt]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/otoskope">@otoskope</a> wrote:</p>
          <blockquote>
              <p>Trying to find my way into coding axoloti objects, I found <a href="https://courses.cs.washington.edu/courses/cse467/08au/labs/l5/fp.pdf" rel="nofollow noopener">this document</a>, covering the basics of fixed point arithmetics. Not exhaustive, but certainly helpful.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/practical-fixed-point-math/2223/8">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/practical-fixed-point-math/2223/8</link>
        <pubDate>Sun, 02 Jul 2017 11:18:25 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2223-8</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/practical-fixed-point-math/2223.rss">Practical fixed point math</source>
      </item>
      <item>
        <title>Practical fixed point math</title>
        <dc:creator><![CDATA[@Sputnki Filippo Tamagnini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/sputnki">@Sputnki</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="6" data-topic="2223"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//community.axoloti.com/letter_avatar_proxy/v2/letter/t/90db22/40.png" class="avatar">TheSlowGrowth:</div>
<blockquote><p>According to this post the result has to be shifted to the left by 5 bits. Why shift the operands by 3 and 2 bits respectively when you could simply shift the result by 5 bits and as a result make overflows much less likely?</p></blockquote></aside>

<p>The "normal" signal range is -2^27 ; +2^27, the  code was written with that in mind, so except for pathological situations you don't risk overflows.<br>This way you can preserve five of the least significant bits, which would be lost if you shifted left at the end of the operation. <br>Saving 5 least significant bits might seem overkill (and probably it is), however i think (it's just a supposition!) that if you do a lot of operations you could lose more quality in the signal if you perform the left shift in one take than if you do it in two takes.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/practical-fixed-point-math/2223/7">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/practical-fixed-point-math/2223/7</link>
        <pubDate>Tue, 21 Feb 2017 16:44:04 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2223-7</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/practical-fixed-point-math/2223.rss">Practical fixed point math</source>
      </item>
      <item>
        <title>Practical fixed point math</title>
        <dc:creator><![CDATA[@TheSlowGrowth]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/theslowgrowth">@TheSlowGrowth</a> wrote:</p>
          <blockquote>
              <p>necro-ing this thread because I feel like opening a new one would only clog the forum.</p>

<p>I'm trying to wrap my head aroung some of the fixed-point math. I know the basics, but I never did any fixed-point stuff and some things I just don't get.<br>Lets consider the code of the math/* object:<br><code>outlet_result= ___SMMUL(inlet_a&lt;&lt;3,inlet_b&lt;&lt;2);</code></p>

<ol>
<li>AFAIK, inlet_a and inlet_b are signed q10.21 numbers, right? So after the shift, they are signed q7.24 and signed q8.23 respectively. After multiplying they would be signed q15.47 but SMMUL only keeps the upper 32bit (including the sign) so it really is q15.16. This is then output as a q10.21 number?! I clearly have an error in my thinking here.</li>
<li>Why is the left shift even allowed? If inlet_a is larger than q7.21, it would overflow. Shouldn't it have to be <code>outlet_result= ___SMMUL(__SSAT(inlet_a,28)&lt;&lt;3,__SSAT(inlet_b, 29)&lt;&lt;2);</code>? Is the possible overflow traded in for better performance? (If so: why? It doesn't bring much benefit for k-rate signals!)</li>
<li>According to <a href="//community.axoloti.com/t/coding-axoloti-objects/2606#fixedpointmath">this post</a> the result has to be shifted to the left by 5 bits. Why shift the operands by 3 and 2 bits respectively when you could simply shift the result by 5 bits and as a result make overflows much less likely?</li>
</ol>

<p>Thanks for anyone for helping my understand this mess.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/practical-fixed-point-math/2223/6">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/practical-fixed-point-math/2223/6</link>
        <pubDate>Mon, 20 Feb 2017 10:19:30 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2223-6</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/practical-fixed-point-math/2223.rss">Practical fixed point math</source>
      </item>
      <item>
        <title>Practical fixed point math</title>
        <dc:creator><![CDATA[@johannes johannes]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/johannes">@johannes</a> wrote:</p>
          <blockquote>
              <p>forgot to add the definitions of <code>q_to_float()</code> and <code>float_to_q()</code>...</p>

<pre><code>__attribute__ ( ( always_inline ) ) __STATIC_INLINE float q_to_float(int32_t op1, int q) {
  float fop1 = *(float*)(&amp;op1);
  __ASM volatile ("VCVT.F32.S32 %0, %0, %1" : "+w" (fop1) : "i" (q));
  return(fop1);
}

__attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t float_to_q(float op1, int q) {
  __ASM volatile ("VCVT.S32.F32 %0, %0, %1" : "+w" (op1) : "i" (q));
  return(*(int32_t*)(&amp;op1));
}</code></pre>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/practical-fixed-point-math/2223/5">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/practical-fixed-point-math/2223/5</link>
        <pubDate>Fri, 09 Sep 2016 13:25:00 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2223-5</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/practical-fixed-point-math/2223.rss">Practical fixed point math</source>
      </item>
      <item>
        <title>Practical fixed point math</title>
        <dc:creator><![CDATA[@johannes johannes]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/johannes">@johannes</a> wrote:</p>
          <blockquote>
              <p>What's the expected range of alpha?</p>

<h3>Using floating point division</h3>

<p><code>float xf = q_to_float(x,31);<br>float yf = 1.0f/(1.0f+xf);<br>int y = float_to_q(yf,31);</code></p>

<p>measured 24 clock cycles, the floating point divide is 14 cycles by itself<br>But, interesting <a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0553a/CHDIABBH.html" rel="nofollow">note</a>: </p>

<blockquote><p>Integer-only instructions following VDIVR or VSQRT instructions complete out-of-order. VDIV and VSQRT instructions take one cycle if no further floating-point instructions are executed.</p></blockquote>

<h3>Using integer division</h3>

<p><code>int32_t q = 0x10000+(x&gt;&gt;15);<br>y = (0x7FFFFFFF/q)&lt;&lt;16;</code></p>

<p>This output only has the 16 top bits used, and the 15 LSB's of the input are ignored.<br>Measured: 4 clock cycles.</p>

<h3>Using a Taylor series approximation</h3>

<p><code>1/(1-x) = 1 + x + x^2 + x^3 + x^4 + ...</code><br>but this is only slowly convergent when |x| &gt; 0.5</p>

<p><code>int32_t mx = -alpha;<br>y = mx + 0x7FFFFFFF;<br>int32_t mxx = ___SMMUL(mx,mx)&lt;&lt;1;<br>y +=  mxx;<br>int32_t mxxx = ___SMMUL(mxx,mx)&lt;&lt;1;<br>y +=  mxxx;<br>int32_t mxxxx = ___SMMUL(mxxx,mx)&lt;&lt;1;<br>y +=  mxxxx;<br>int32_t mxxxxx = ___SMMUL(mxxxx,mx)&lt;&lt;1;<br>y +=  mxxxxx;<br></code><br>measured 14 clock cycles</p>

<p>This can further be accelerated by replacing <code>___SMMUL(....,mx)&lt;&lt;1</code> with <code>___SMMUL(....,mx&lt;&lt;1)</code> but that overflows when <code>|x|&gt;=0.5</code></p>

<p>All these implementations assume q31 input and output. The 1st one saturates at conversion from float to integer, the 2nd and 3rd overflow. </p>

<p>And probably other approximations are possible too...</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/practical-fixed-point-math/2223/4">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/practical-fixed-point-math/2223/4</link>
        <pubDate>Fri, 09 Sep 2016 12:45:09 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2223-4</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/practical-fixed-point-math/2223.rss">Practical fixed point math</source>
      </item>
      <item>
        <title>Practical fixed point math</title>
        <dc:creator><![CDATA[@MrBim Bim ]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/mrbim">@MrBim</a> wrote:</p>
          <blockquote>
              <p>That link is awesome. Thank you for sharing.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/practical-fixed-point-math/2223/3">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/practical-fixed-point-math/2223/3</link>
        <pubDate>Fri, 09 Sep 2016 12:35:09 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2223-3</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/practical-fixed-point-math/2223.rss">Practical fixed point math</source>
      </item>
      <item>
        <title>Practical fixed point math</title>
        <dc:creator><![CDATA[@Jens_Groh]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/jens_groh">@Jens_Groh</a> wrote:</p>
          <blockquote>
              <p>On <a href="http://www.musicdsp.org/archive.php" rel="nofollow">http://www.musicdsp.org/archive.php</a> , there are some fixed-point code examples. Not Axoloti-related though, but you can learn something.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/practical-fixed-point-math/2223/2">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/practical-fixed-point-math/2223/2</link>
        <pubDate>Fri, 09 Sep 2016 07:08:05 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2223-2</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/practical-fixed-point-math/2223.rss">Practical fixed point math</source>
      </item>
      <item>
        <title>Practical fixed point math</title>
        <dc:creator><![CDATA[@bafonso]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/bafonso">@bafonso</a> wrote:</p>
          <blockquote>
              <p>I'd like to ask some tips and guidance on how to convert this type math in float world into fixed point. </p>

<p>Let's say we have the floating point expression:<br><code><br>float a = 1.0f/(1.0f+alpha)<br></code></p>

<p>The final result is obviously bound to be &lt;1 if alpha &gt;=0 but the required intermediate calculation for the denominator would be higher than 1 and potential bigger than the highest value in q5.27 for example. </p>

<p>I thought about dividing by 8, doing the math and the rescaling back. Is this an ideal approach?  I'd like to know of best practices or most common approaches typically used in DSP programming. If you could provide code that would be great. </p>

<p>Building a small repertoire of examples such as this could lower the barrier for new axoloti users interested in object coding.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/practical-fixed-point-math/2223/1">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/practical-fixed-point-math/2223/1</link>
        <pubDate>Fri, 09 Sep 2016 01:46:03 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2223-1</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/practical-fixed-point-math/2223.rss">Practical fixed point math</source>
      </item>
  </channel>
</rss>
