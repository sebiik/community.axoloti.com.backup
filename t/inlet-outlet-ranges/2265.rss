<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Inlet/Outlet Ranges</title>
    <link>https://sebiik.github.io/community.axoloti.com.backup/t/inlet-outlet-ranges/2265</link>
    <description>I&#39;m working on a suite of objects at the moment that require integer in/outlet values within a much narrower range that the 27 bits used by factory objects.

The objects themselves are able to communicate with each other fine, but I&#39;m wondering if it would be better to bit-shift all outlet values to 27 bits, and shift inlets down to the correct internal range.

Doing this would allow other objects to interact more easily with my customs ones, but would add a small additional CPU overhead.

I&#39;d be interested in hearing anyone&#39;s view on the pros and cons of doing this.

a|x</description>
    
    <lastBuildDate>Tue, 20 Sep 2016 21:29:19 +0000</lastBuildDate>
    <category>AxoObject coding</category>
    <atom:link href="https://sebiik.github.io/community.axoloti.com.backup/t/inlet-outlet-ranges/2265.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Inlet/Outlet Ranges</title>
        <dc:creator><![CDATA[@toneburst alx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/toneburst">@toneburst</a> wrote:</p>
          <blockquote>
              <p>Hi, thanks for getting back to me, and sorry for the late reply.</p>

<p>The in/outlets in question are of 3 types:</p>

<ol>
<li>Lookup table indices (positive ints using no more than 6 bits)</li>
<li>Control signals (signed ints using no more than 16 bits)</li>
<li>Audio signals (8 bit signed integer)</li>
</ol>

<p>The reason for shifting the control signals to 27 bits would be so that k-rate objects (LFOs, envelopes etc.) could be connected to them without requiring any additional signal-scaling objects.</p>

<p>Though the suite of custom objects includes noise and pitched wave sources, their output is 8 bits, so they're too quiet to be used in place of standard sound-sources.</p>

<p>The filter object these audio sources feed into also expects 8 bit signals, so can't be used with Factory audio sources without pre-scaling.</p>

<p>All the objects work fine together as they are, but I think I'm persuading myself that I should make sure at least the audio and control signals operate in the expected ranges.</p>

<p>When I get some free time to work on Axoloti stuff, I'll try and implement this, and see if it makes any significant difference to resource-usage. If each shift is a single instruction, then I guess I should be ok.</p>

<p>a|x</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/inlet-outlet-ranges/2265/3">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/inlet-outlet-ranges/2265/3</link>
        <pubDate>Tue, 20 Sep 2016 21:29:19 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2265-3</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/inlet-outlet-ranges/2265.rss">Inlet/Outlet Ranges</source>
      </item>
      <item>
        <title>Inlet/Outlet Ranges</title>
        <dc:creator><![CDATA[@johannes johannes]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/johannes">@johannes</a> wrote:</p>
          <blockquote>
              <p>Could you explain what the in- and outlets serve for?<br>Sometimes the shift can be absorbed into an already existing multiplication coefficients in your algorithms. <br>Some processor instructions like ADD or AND can also do a (free) shift, the compiler will figure that out. Worst case, an explicit shift is a single instruction cycle.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/inlet-outlet-ranges/2265/2">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/inlet-outlet-ranges/2265/2</link>
        <pubDate>Mon, 19 Sep 2016 21:44:58 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2265-2</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/inlet-outlet-ranges/2265.rss">Inlet/Outlet Ranges</source>
      </item>
      <item>
        <title>Inlet/Outlet Ranges</title>
        <dc:creator><![CDATA[@toneburst alx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/toneburst">@toneburst</a> wrote:</p>
          <blockquote>
              <p>I'm working on a suite of objects at the moment that require integer in/outlet values within a much narrower range that the 27 bits used by factory objects.</p>

<p>The objects themselves are able to communicate with each other fine, but I'm wondering if it would be better to bit-shift all outlet values to 27 bits, and shift inlets down to the correct internal range.</p>

<p>Doing this would allow other objects to interact more easily with my customs ones, but would add a small additional CPU overhead.</p>

<p>I'd be interested in hearing anyone's view on the pros and cons of doing this.</p>

<p>a|x</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/inlet-outlet-ranges/2265/1">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/inlet-outlet-ranges/2265/1</link>
        <pubDate>Mon, 19 Sep 2016 21:09:26 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2265-1</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/inlet-outlet-ranges/2265.rss">Inlet/Outlet Ranges</source>
      </item>
  </channel>
</rss>
