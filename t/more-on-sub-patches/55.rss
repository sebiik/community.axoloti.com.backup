<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>More on Sub Patches</title>
    <link>https://sebiik.github.io/community.axoloti.com.backup/t/more-on-sub-patches/55</link>
    <description>#Overview
Sub patches are building block patches expected to be used in a main patch. 
They will normally contain inlets and outlets through which the main patch can send/receive (similar to Reaktors Macros or Max Encapsulations).

As mentioned in the user guide, normally these subpatches are saved as sub patch files AXS, however axoloti also support &#39;embedded&#39; sub patches, which are stored in the the main patch.

#Subpatch file (AXS)

There are 2 ways that a sub-patch is loaded into a main patch

 - direct reference relative to main patch
 - it is on the object search path 

##direct reference, (this is the &#39;preferred method&#39;)
Entering ./mysubpatch into the search dialog will look for mysubpatch in same directory as the main patch.
You can also use ./sub/mysubpatch to look in the subdirectory sub, or ../mysubpatch to look in parent directory. This can be useful when sharing sub-patches between a few main patches.

(note: you should save the main (or parent) patch first so you are clear where it is located!)

##search path
Subpatches will be searched for in the search path, and will be shown in the search window.
In preferences you can add new directories to the search path.

This is particularly useful for &#39;utility&#39; patches that you might use in many patches. (you can see Axoloti does this with the FX objects)

The disadvantage of this is that it&#39;s more difficult to keep track of where these subpatches are being loaded from. Adding many new directories to the search path can become confusing, so don&#39;t use this for subpatches that only get used in a couple of patches.

##editing a subpatch

 - a subpatch edited whilst the parent is live, will have no effect until the patch is re-compiled and uploaded to the board
 - always use the &#39;edit object definition&#39; to edit a sub patch rather than opening the sub patch from the file menu, this ensures you are editing the version on the main patch, and its effects will be propagated when you go live.

#Embedded sub patches
These are created using a special object called &#39;patcher&#39; you can load one by using the object search frame and typing: patch/patcher

the advantage of these embedded patches is you don&#39;t need to save them separately, so managing them is easier.
the disadvantage is that they cannot be reused in other patches.

to edit the contents of this patcher hit the edit button, and then you will be given a patch frame as normal.
the difference is you do not need to save it.
so if you close the window, you will not be asked to save
this is because its contents will be saved in the main patch.  
(so you will be asked to save the main patch if you edit the embedded patch)

currently (still in development!) when you update a patcher, you must press &#39;update&#39; button on the patcher object on the main patch for the changes to be reflected, including seeing controls,  inlets and outlets.
(remember to show control, just like an sub patch file you must mark controls with &#39;parameter on parent&#39; option)

# Sub patch mode
The sub patch mode is specified in the patch settings of the sub patch, and it determines how voices are handled and mapped to midi channels

Sub patch modes:

- No  - no voicing is allocated
- Mono - only one voice is used
- Mono with bypass -  not implemented yet
- Polyphonic - multiple voices , midi data is received on the channel specified, or on the parent if the midi channel attritbute is specified. this is the &#39;normal&#39; polyphonic mode for most midi controllers
- Polyphonic multichannel, this implements &#39;voice per channel&#39; midi, where each voice is controlled on a different midi channel , commonly used on midi guitars and expressive controllers e.g. Haken Continuum/Eigenharp
- Polyphonic expression, this is also a voice per channel midi mode, but support the Multidimensional Polyphonic Expression (MPE) specification, currently supported by Eigenharp, Madrona Labs Soundplane and Linnstrument. This mode should be used in conjunction with the MPE object (midi/device/mpe)</description>
    
    <lastBuildDate>Sun, 26 Jul 2015 18:37:46 +0000</lastBuildDate>
    <category>User Guide</category>
    <atom:link href="https://sebiik.github.io/community.axoloti.com.backup/t/more-on-sub-patches/55.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>More on Sub Patches</title>
        <dc:creator><![CDATA[@thetechnobear Mark Harris]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/thetechnobear">@thetechnobear</a> wrote:</p>
          <blockquote>
              <h1>Overview</h1>

<p>Sub patches are building block patches expected to be used in a main patch. <br>They will normally contain inlets and outlets through which the main patch can send/receive (similar to Reaktors Macros or Max Encapsulations).</p>

<p>As mentioned in the user guide, normally these subpatches are saved as sub patch files AXS, however axoloti also support 'embedded' sub patches, which are stored in the the main patch.</p>

<h1>Subpatch file (AXS)</h1>

<p>There are 2 ways that a sub-patch is loaded into a main patch</p>

<ul>
<li>direct reference relative to main patch</li>
<li>it is on the object search path </li>
</ul>

<h2>direct reference, (this is the 'preferred method')</h2>

<p>Entering ./mysubpatch into the search dialog will look for mysubpatch in same directory as the main patch.<br>You can also use ./sub/mysubpatch to look in the subdirectory sub, or ../mysubpatch to look in parent directory. This can be useful when sharing sub-patches between a few main patches.</p>

<p>(note: you should save the main (or parent) patch first so you are clear where it is located!)</p>

<h2>search path</h2>

<p>Subpatches will be searched for in the search path, and will be shown in the search window.<br>In preferences you can add new directories to the search path.</p>

<p>This is particularly useful for 'utility' patches that you might use in many patches. (you can see Axoloti does this with the FX objects)</p>

<p>The disadvantage of this is that it's more difficult to keep track of where these subpatches are being loaded from. Adding many new directories to the search path can become confusing, so don't use this for subpatches that only get used in a couple of patches.</p>

<h2>editing a subpatch</h2>

<ul>
<li>a subpatch edited whilst the parent is live, will have no effect until the patch is re-compiled and uploaded to the board</li>
<li>always use the 'edit object definition' to edit a sub patch rather than opening the sub patch from the file menu, this ensures you are editing the version on the main patch, and its effects will be propagated when you go live.</li>
</ul>

<h1>Embedded sub patches</h1>

<p>These are created using a special object called 'patcher' you can load one by using the object search frame and typing: patch/patcher</p>

<p>the advantage of these embedded patches is you don't need to save them separately, so managing them is easier.<br>the disadvantage is that they cannot be reused in other patches.</p>

<p>to edit the contents of this patcher hit the edit button, and then you will be given a patch frame as normal.<br>the difference is you do not need to save it.<br>so if you close the window, you will not be asked to save<br>this is because its contents will be saved in the main patch.<br>(so you will be asked to save the main patch if you edit the embedded patch)</p>

<p>currently (still in development!) when you update a patcher, you must press 'update' button on the patcher object on the main patch for the changes to be reflected, including seeing controls,  inlets and outlets.<br>(remember to show control, just like an sub patch file you must mark controls with 'parameter on parent' option)</p>

<h1>Sub patch mode</h1>

<p>The sub patch mode is specified in the patch settings of the sub patch, and it determines how voices are handled and mapped to midi channels</p>

<p>Sub patch modes:</p>

<ul>
<li>No  - no voicing is allocated</li>
<li>Mono - only one voice is used</li>
<li>Mono with bypass -  not implemented yet</li>
<li>Polyphonic - multiple voices , midi data is received on the channel specified, or on the parent if the midi channel attritbute is specified. this is the 'normal' polyphonic mode for most midi controllers</li>
<li>Polyphonic multichannel, this implements 'voice per channel' midi, where each voice is controlled on a different midi channel , commonly used on midi guitars and expressive controllers e.g. Haken Continuum/Eigenharp</li>
<li>Polyphonic expression, this is also a voice per channel midi mode, but support the Multidimensional Polyphonic Expression (MPE) specification, currently supported by Eigenharp, Madrona Labs Soundplane and Linnstrument. This mode should be used in conjunction with the MPE object (midi/device/mpe)</li>
</ul>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/more-on-sub-patches/55/1">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/more-on-sub-patches/55/1</link>
        <pubDate>Thu, 23 Jul 2015 10:49:38 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-55-1</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/more-on-sub-patches/55.rss">More on Sub Patches</source>
      </item>
  </channel>
</rss>
