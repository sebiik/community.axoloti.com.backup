<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>MLRV (live slicing sampler)</title>
    <link>https://sebiik.github.io/community.axoloti.com.backup/t/mlrv-live-slicing-sampler/5748</link>
    <description>A decade ago I used to perform on this thing called the Monome. I used a max patch that was able to slice live sample using a simple equal spaced slice grid. Here&#39;s a video to show what it is to those who don&#39;t know it already: https://vimeo.com/2441155

I started looking at the object that loaded samples but got a little bit stuck regarding getting the sample size. 

At the moment I tried @Sputnki slicer i but I was able to get the sample exact size size since the table alloc 16 objects only load on fixed size buffer. My goal here is to get the size of each sample and driving the play head with a value from 0 to 1.

Then I played with the wave/ play fn stereo object which was able to tell when the sample playback ended so I was able with a couple of logic object to loop the sample. Still slicing gets tricky unless you take the time to manually set the aize of each sample. 

So my question are : 

Is there a way (an object a C function) to allocate a sample with a buffer the exact size of it ?
Is there a way to get the sample length ?</description>
    
    <lastBuildDate>Sun, 02 Jun 2019 22:39:11 +0000</lastBuildDate>
    <category>AxoObject coding</category>
    <atom:link href="https://sebiik.github.io/community.axoloti.com.backup/t/mlrv-live-slicing-sampler/5748.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>MLRV (live slicing sampler)</title>
        <dc:creator><![CDATA[@Suburb_Animal Vincent Palumbo]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/suburb_animal">@Suburb_Animal</a> wrote:</p>
          <blockquote>
              <p>Thank you very much for your help and for the objects. I'll give it a try this week <img src="//community.axoloti.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/mlrv-live-slicing-sampler/5748/3">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/mlrv-live-slicing-sampler/5748/3</link>
        <pubDate>Sun, 02 Jun 2019 22:39:11 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-5748-3</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/mlrv-live-slicing-sampler/5748.rss">MLRV (live slicing sampler)</source>
      </item>
      <item>
        <title>MLRV (live slicing sampler)</title>
        <dc:creator><![CDATA[@rbrt]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/rbrt">@rbrt</a> wrote:</p>
          <blockquote>
              <p>...check out rbrt/poly/polymaster smplr <br>and open the help-patch..<br>there's an object called 'rbrt/smplr/smplr', part of the all-new 'smplr - family'.</p>

<p>please note: I have NOT really released/documented 'smplr' yet,<br>so eventually,there will be some changes..</p>

<p>cheers<br>R</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/mlrv-live-slicing-sampler/5748/2">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/mlrv-live-slicing-sampler/5748/2</link>
        <pubDate>Sun, 02 Jun 2019 12:16:57 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-5748-2</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/mlrv-live-slicing-sampler/5748.rss">MLRV (live slicing sampler)</source>
      </item>
      <item>
        <title>MLRV (live slicing sampler)</title>
        <dc:creator><![CDATA[@Suburb_Animal Vincent Palumbo]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/suburb_animal">@Suburb_Animal</a> wrote:</p>
          <blockquote>
              <p>A decade ago I used to perform on this thing called the Monome. I used a max patch that was able to slice live sample using a simple equal spaced slice grid. Here's a video to show what it is to those who don't know it already: <a href="https://vimeo.com/2441155" rel="nofollow noopener">https://vimeo.com/2441155</a></p>

<p>I started looking at the object that loaded samples but got a little bit stuck regarding getting the sample size. </p>

<p>At the moment I tried <a class="mention" href="/u/sputnki">@Sputnki</a> slicer i but I was able to get the sample exact size size since the table alloc 16 objects only load on fixed size buffer. My goal here is to get the size of each sample and driving the play head with a value from 0 to 1.</p>

<p>Then I played with the wave/ play fn stereo object which was able to tell when the sample playback ended so I was able with a couple of logic object to loop the sample. Still slicing gets tricky unless you take the time to manually set the aize of each sample. </p>

<p>So my question are : </p>

<p>Is there a way (an object a C function) to allocate a sample with a buffer the exact size of it ?<br>Is there a way to get the sample length ?</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/mlrv-live-slicing-sampler/5748/1">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/mlrv-live-slicing-sampler/5748/1</link>
        <pubDate>Sun, 02 Jun 2019 11:09:12 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-5748-1</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/mlrv-live-slicing-sampler/5748.rss">MLRV (live slicing sampler)</source>
      </item>
  </channel>
</rss>
