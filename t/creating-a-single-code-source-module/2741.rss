<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Creating a single code-source module</title>
    <link>http://community.axoloti.com/t/creating-a-single-code-source-module/2741</link>
    <description>Just figured, if we make a single module featuring codes for multiple kinds of algorythms, we could make a &quot;source&quot; module that can be used by other modules, turning these other modules into multi-function-modules without having to copy all those codes for every single added module.

So my idea is to make some community-objects with a pre-defined amount of controls and functions (different soundsources, fast/slow modulations (LFO&#39;s/envelopes), distortions or delays etc etc).

The source module will then contain all the functions written out as object-based-algorithms. Each algorithm will write to the same internal value  &quot;out&quot;.
like:

int32_t out;
int32_t sine(int32_t phase)
{
      SINE2TINTERP(phase,out)
}
int32_t cos(int32_t phase)
{
     SINE2TINTERP(phase+(1&lt;&lt;30),out)
}


The multifunction modules will contain a switch-function, switching between the different algorithms to select a certain algorithm to be used.
like:

phase+=freq;

switch(inlet_s&gt;0?inlet_s:0)
{
      case 0: attr_source.sine(phase);break;
      case 1: attr_source.cos(phase);break;
}

outlet_out=attr_source.out&gt;&gt;5;



This will allow universal modules that can do multiple functions.
So instead of having to add both a LFO, envelope and sequencer to be able to use any one of these, we have just a single &quot;source-code&quot; module and could add lots of &quot;universal&quot; modules that can all choose between different kinds of algorithms.

To get this all together, I propose we write down our algorithm in this post and then I or someone else could add them to the source/use modules (code into the source module, the reference into the &quot;use&quot; module).
Also it might be a good idea to make some subdivisions based on the amount of controls needed, function, a/k-rate, and whether or not table-arrays are needed. But, I have to quit writing now.. gotta go to work..</description>
    
    <lastBuildDate>Sun, 08 Jan 2017 12:20:08 +0000</lastBuildDate>
    <category>AxoObject coding</category>
    <atom:link href="https://sebiik.github.io/community.axoloti.com.backup/t/creating-a-single-code-source-module/2741.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Creating a single code-source module</title>
        <dc:creator><![CDATA[@SirSickSik Remco]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/sirsicksik">@SirSickSik</a> wrote:</p>
          <blockquote>
              <p>Just figured, if we make a single module featuring codes for multiple kinds of algorythms, we could make a "source" module that can be used by other modules, turning these other modules into multi-function-modules without having to copy all those codes for every single added module.</p>

<p>So my idea is to make some community-objects with a pre-defined amount of controls and functions (different soundsources, fast/slow modulations (LFO's/envelopes), distortions or delays etc etc).</p>

<p>The source module will then contain all the functions written out as object-based-algorithms. Each algorithm will write to the same internal value  "out".<br>like:</p>

<p>int32_t out;<br>int32_t sine(int32_t phase)<br>{<br>      SINE2TINTERP(phase,out)<br>}<br>int32_t cos(int32_t phase)<br>{<br>     SINE2TINTERP(phase+(1&lt;&lt;30),out)<br>}</p>

<p>The multifunction modules will contain a switch-function, switching between the different algorithms to select a certain algorithm to be used.<br>like:</p>

<p>phase+=freq;</p>

<p>switch(inlet_s&gt;0?inlet_s:0)<br>{<br>      case 0: attr_source.sine(phase);break;<br>      case 1: attr_source.cos(phase);break;<br>}</p>

<p>outlet_out=attr_source.out&gt;&gt;5;</p>

<p>This will allow universal modules that can do multiple functions.<br>So instead of having to add both a LFO, envelope and sequencer to be able to use any one of these, we have just a single "source-code" module and could add lots of "universal" modules that can all choose between different kinds of algorithms.</p>

<p>To get this all together, I propose we write down our algorithm in this post and then I or someone else could add them to the source/use modules (code into the source module, the reference into the "use" module).<br>Also it might be a good idea to make some subdivisions based on the amount of controls needed, function, a/k-rate, and whether or not table-arrays are needed. But, I have to quit writing now.. gotta go to work..</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/creating-a-single-code-source-module/2741/1">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/creating-a-single-code-source-module/2741/1</link>
        <pubDate>Sun, 08 Jan 2017 12:20:08 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2741-1</guid>
        <source url="http://community.axoloti.com/t/creating-a-single-code-source-module/2741.rss">Creating a single code-source module</source>
      </item>
  </channel>
</rss>
