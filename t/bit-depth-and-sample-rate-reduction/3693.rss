<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Bit-depth and Sample-rate Reduction</title>
    <link>https://sebiik.github.io/community.axoloti.com.backup/t/bit-depth-and-sample-rate-reduction/3693</link>
    <description>As there&#39;s no way to change the bit-depth and sample-rate of the hardware itself, what would be the simplest way to do each of these tasks in software using the Axoloti Patcher?

I mean by looking at them as completely individual patches; one patch for reducing bit-depth and one for reducing sample-rate, to say, exactly half, what would each patch look like in their simplest form?</description>
    
    <lastBuildDate>Sat, 16 Sep 2017 09:04:27 +0000</lastBuildDate>
    <category>Patching</category>
    <atom:link href="https://sebiik.github.io/community.axoloti.com.backup/t/bit-depth-and-sample-rate-reduction/3693.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Bit-depth and Sample-rate Reduction</title>
        <dc:creator><![CDATA[@axoman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/axoman">@axoman</a> wrote:</p>
          <blockquote>
              <p>Still haven't been able to play with this due to other things getting in the way, but regards the Commodore 64's SID, there's an interesting article about that on wikipedia which is definitely worth a read.  People often wonder why it's so hard to get a computer to sound like a genuine SID.  The 8-bit digital guys are often confused as to why it would be a problem to 100% perfectly emulate it.</p>

<p>The reason is because it's acutally an analogue chip, and it's imperfections in the design of the chip that makes it much harder to emulate than just modeling it's 8-bit aspect <img src="//community.axoloti.com/images/emoji/twitter/wink.png?v=5" title=":wink:" class="emoji" alt=":wink:"></p>

<p>So if the chip is analogue, why does it sound 8-bit?</p>

<p>The answer to that is in this thread, the only reason a SID sounds 8-bit (I'm guessing) is because it's being controlled in an 8-bit environment.  A SID chip therefore gives 8-bit fanboys the best of both worlds, 8-bit control of an analogue audio path.</p>

<p><em><strong>Axoman Industries - Decoding the Myth!</strong></em></p>

<aside class="onebox wikipedia">
  <header class="source">
    <a href="https://en.wikipedia.org/wiki/MOS_Technology_SID" target="_blank" rel="nofollow noopener">en.wikipedia.org</a>
  </header>
  <article class="onebox-body">
    <img src="//upload.wikimedia.org/wikipedia/commons/b/b7/MOS_Technologies_6581.jpg" class="thumbnail">

<h3><a href="https://en.wikipedia.org/wiki/MOS_Technology_SID" target="_blank" rel="nofollow noopener">MOS Technology SID</a></h3>

<p>The MOS Technology 6581/8580 SID (Sound Interface Device) is the built-in Programmable Sound Generator chip of Commodore's CBM-II, Commodore 64, Commodore 128 and Commodore MAX Machine home computers. It was one of the first sound chips of its kind to be included in a home computer prior to the digital sound revolution. Together with the VIC-II graphics chip, the SID was instrumental in making the C64 the best-selling computer in history, and is partly credited for initiating the demoscene.[citat...</p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/bit-depth-and-sample-rate-reduction/3693/11">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/bit-depth-and-sample-rate-reduction/3693/11</link>
        <pubDate>Sat, 16 Sep 2017 09:04:27 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3693-11</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/bit-depth-and-sample-rate-reduction/3693.rss">Bit-depth and Sample-rate Reduction</source>
      </item>
      <item>
        <title>Bit-depth and Sample-rate Reduction</title>
        <dc:creator><![CDATA[@SmashedTransistors]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/smashedtransistors">@SmashedTransistors</a> wrote:</p>
          <blockquote>
              <p>I used to play with a A Y 3 8912 chip connected to a Sinclair ZX Spectrum back in the 80s...<br>As far as i remember it used frequency division (like early electronic organs) and the volume "envelopes" where something like 16 levels, it was capable of 3 voice polyphony. <br>So quantifying control signals for amplitude and pitch can help to replicate these aspects.</p>

<hr>

<p>A trick to simulate "polyphony" on systems having a single 1 bit output (i.e. two levels) was to use very fast arpeggios of squarish waveforms.  These are symptomatic of early console games.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/bit-depth-and-sample-rate-reduction/3693/10">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/bit-depth-and-sample-rate-reduction/3693/10</link>
        <pubDate>Sun, 10 Sep 2017 16:24:52 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3693-10</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/bit-depth-and-sample-rate-reduction/3693.rss">Bit-depth and Sample-rate Reduction</source>
      </item>
      <item>
        <title>Bit-depth and Sample-rate Reduction</title>
        <dc:creator><![CDATA[@Sputnki Filippo Tamagnini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/sputnki">@Sputnki</a> wrote:</p>
          <blockquote>
              <p>Yes, but what about videogame consoles? <br>Without going back to the times of computer buzzers used to make sounds, how was sound generated?<br>Now that i think about it, i feel "we" young generations (and i'm speaking for people who are in their 20s) tend to accomunate under the 8-bit category a variety of different sounds, generally associated with retro games, but in fact different platforms used different chips (the commodore c64 used the sid chip, the nintendo game boy and the nes had their own sound systems, ms-dos allowed to use external sound cards: <a href="https://youtu.be/BMmFcs-_4x4?t=3m48s" rel="nofollow noopener">https://youtu.be/BMmFcs-_4x4?t=3m48s</a> )</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/bit-depth-and-sample-rate-reduction/3693/9">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/bit-depth-and-sample-rate-reduction/3693/9</link>
        <pubDate>Sun, 10 Sep 2017 14:59:25 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3693-9</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/bit-depth-and-sample-rate-reduction/3693.rss">Bit-depth and Sample-rate Reduction</source>
      </item>
      <item>
        <title>Bit-depth and Sample-rate Reduction</title>
        <dc:creator><![CDATA[@SmashedTransistors]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/smashedtransistors">@SmashedTransistors</a> wrote:</p>
          <blockquote>
              <p>Hi <a class="mention" href="/u/sputnki">@Sputnki</a> </p>

<p>In many digital synthesizers, the audio rate signals were high resolution (16 bit or so) but the control signals were quantified (so that, for example, the pre calculated filter coefficients fit in a table).</p>

<p>Here is a k signal quantifier : <a href="//community.axoloti.com/t/tiar-smashedtransistors-contributions/2737/80">Objects tiar/kfunc/quant</a><br>it allows to mimic zipper noise</p>

<hr>

<p>About the audio rate aliasing / sub sampling, here is an "anti aliased" aliaser.<br>I mean that it is antialiased vs 24kHz and it simulates aliasing vs a lower frequency (a simpler S&amp;H would alias against the desired frequency and agains 24kHz) :<br><a href="//community.axoloti.com/t/tiar-smashedtransistors-contributions/2737/43">Object: tiar/dist/SyncAlias</a></p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/bit-depth-and-sample-rate-reduction/3693/8">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/bit-depth-and-sample-rate-reduction/3693/8</link>
        <pubDate>Sun, 10 Sep 2017 13:53:12 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3693-8</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/bit-depth-and-sample-rate-reduction/3693.rss">Bit-depth and Sample-rate Reduction</source>
      </item>
      <item>
        <title>Bit-depth and Sample-rate Reduction</title>
        <dc:creator><![CDATA[@Sputnki Filippo Tamagnini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/sputnki">@Sputnki</a> wrote:</p>
          <blockquote>
              <p>Some considerations (and some experiments)</p>

<p>You can calculate the increment "i" of a phasor in order to produce an "f" frequency saw wave, if you work at "fs" sampling frequency with a "b" bit depth with this formula: <strong>i = 2^b * f/fs</strong><br>Of course the result is truncated to an integer.</p>

<p>So, if you work at 8bit depth, 48000 Hz sampling frequency, the lowest tone you can produce (if you add 1 at each increment) is f = 1 * 48000 / 256 = 187.5 Hz (which is between F#3 and G3)<br>Every other tone is a multiple of that. It sucks.<br>Using a 16bit phasor brings the smallest frequency down to 0.73 Hz (way below human earing), while the 32bit axoloti format takes that number to a dazzling 0.000011176 Hz</p>

<p>My point is: a true 8bit phasor is impractical to use. You can step it up to 16bit and could hardly tell the difference with 32bit, so unless you want to use intermediate bit depths (inefficient!) it's much better to stick with the 32bit axoloti format.<br>So, at least for oscillators, it's fair to bitcrush factory ones, you won't tell the difference.</p>

<p>As for filters: i tried making a custom 8bit - 4bit filter based on 1pole objects. It surely had a particular character to it, however it would only work at high frequencies and output dc at low frequencies. This could be due to truncation errors, however it's exactly what you'd get if you worked with a bitshifted regular filter, so again there's no point in making custom objects.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/bit-depth-and-sample-rate-reduction/3693/7">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/bit-depth-and-sample-rate-reduction/3693/7</link>
        <pubDate>Sun, 10 Sep 2017 11:28:45 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3693-7</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/bit-depth-and-sample-rate-reduction/3693.rss">Bit-depth and Sample-rate Reduction</source>
      </item>
      <item>
        <title>Bit-depth and Sample-rate Reduction</title>
        <dc:creator><![CDATA[@axoman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/axoman">@axoman</a> wrote:</p>
          <blockquote>
              <p>I've actually never noticed the quantize object, nevemind used it, at least I don't recall ever seeing it but it does sound like it's what I need - so we'll see.  You just gave me a lot of ammo to play with, so as soon as I put the Axo computer back together I'm going to turn-on my 8-bit fanboy mode and absorb myself with these 8-bit-making objects for a good while!</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/bit-depth-and-sample-rate-reduction/3693/6">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/bit-depth-and-sample-rate-reduction/3693/6</link>
        <pubDate>Tue, 05 Sep 2017 14:30:12 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3693-6</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/bit-depth-and-sample-rate-reduction/3693.rss">Bit-depth and Sample-rate Reduction</source>
      </item>
      <item>
        <title>Bit-depth and Sample-rate Reduction</title>
        <dc:creator><![CDATA[@Sputnki Filippo Tamagnini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/sputnki">@Sputnki</a> wrote:</p>
          <blockquote>
              <p>I'm not completely sure about it, but it should be possible to use a regular 32bit 1-pole filter to process a signal that was previously bitshifted down to 8 bits, I think you'll have some problems with the 2-pole filters though, as they involve a division (and dividing something with small numbers usually causes big problems in the numerical world of microcontrollers).<br>If I were you I'd try to stuff a quantize object after each block and compare it with the bitshifted counterpart. I have a gut feeling that the first one adds a shitload of noise to the output (and I'd choose it for that exact reason), but maybe working with 2-pole filters in a low headroom environment will take you to the digital glitch Valhalla. Who knows?</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/bit-depth-and-sample-rate-reduction/3693/5">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/bit-depth-and-sample-rate-reduction/3693/5</link>
        <pubDate>Tue, 05 Sep 2017 13:55:45 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3693-5</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/bit-depth-and-sample-rate-reduction/3693.rss">Bit-depth and Sample-rate Reduction</source>
      </item>
      <item>
        <title>Bit-depth and Sample-rate Reduction</title>
        <dc:creator><![CDATA[@axoman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/axoman">@axoman</a> wrote:</p>
          <blockquote>
              <p>And here's a thought; what about putting one before <em>and</em> after the filter?<br>And if it provided sound would it technically be doing what I'm wanting it to do?</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/bit-depth-and-sample-rate-reduction/3693/4">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/bit-depth-and-sample-rate-reduction/3693/4</link>
        <pubDate>Tue, 05 Sep 2017 13:24:36 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3693-4</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/bit-depth-and-sample-rate-reduction/3693.rss">Bit-depth and Sample-rate Reduction</source>
      </item>
      <item>
        <title>Bit-depth and Sample-rate Reduction</title>
        <dc:creator><![CDATA[@axoman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/axoman">@axoman</a> wrote:</p>
          <blockquote>
              <p>Cheers mate, lol, you can imagine I did a facepalm as soon as you mentioned sample and hold <img src="//community.axoloti.com/images/emoji/twitter/blush.png?v=5" title=":blush:" class="emoji" alt=":blush:"></p>

<p>Brilliiant, and yup, I'm wanting to be able to work in 8-bit so that all the processing that goes on in the patch is done in 8-bit rather than Axoloti's default 32-bit.  Can't test it right now, but I'm pretty sure I understand what you told me, at least reasonably well anyway.</p>

<p>Right, so if I lower the sample rate of a sinewave by sample and hold and do the bitshift thing, I'll hear an 8-bit sinewave.  If I then put that 8-bit sinewave through a low pass filter, I'll hear what an 8-bit sinewave sounds like through a 32-bit filter.  So that's my next question; how do I make the filter do it's processing in the same reduced 8-bit fashion?  I can't sample and hold a filter, or can I?  You mentioned putting a bitshift at the end of the signal path, and that does sound like it's what I'm getting at, but wouldn't that just take the final audio and reduce the bit-depth?</p>

<p>So what I'm getting at is how would I make something like a filter do it's processing in 8-bit rather than 32-bit?</p>

<p>I want to put the 8-bit sinewave through the filter and to ensure that the processing it's doing over that 8-bit sinewave is also done with 8-bit precision.  For example, if I could use sample and hold on a filter, would putting it before the filter or after the filter be doing it right or worng, or wouldn't it effect the way it gets processed at all?</p>

<p>Same with envelopes, they're obviously going to be done using 32-bit precision by default so I'd need to change that so that they behave the same as 8-bit envelope processing would.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/bit-depth-and-sample-rate-reduction/3693/3">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/bit-depth-and-sample-rate-reduction/3693/3</link>
        <pubDate>Tue, 05 Sep 2017 13:05:41 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3693-3</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/bit-depth-and-sample-rate-reduction/3693.rss">Bit-depth and Sample-rate Reduction</source>
      </item>
      <item>
        <title>Bit-depth and Sample-rate Reduction</title>
        <dc:creator><![CDATA[@Sputnki Filippo Tamagnini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/sputnki">@Sputnki</a> wrote:</p>
          <blockquote>
              <p>It depends, do you want to work in 8 bit or just to bitcrush?<br>In the latter case there are several objects that can do the job: math/quantize or sptnk/fx/bitcrusher, that cancel out the least significant bits.<br>If you want instead to work with real 8 bits you could use math/&gt;&gt; (bitshift right), the value you want to set in the box is 27-N, where N is the bit depth you want to achieve. At the end of your signal path you'll have to add math/&lt;&lt; (bitshift left) with the same number you set before, otherwise you'll hear nothing in the output.<br>However most objects are made to work with the full 32bit range, also there's no cpu benefit in using 8-bit, so it's better to use math/quantize.</p>

<p>As for the sample rate, you can use the sample and hold object provided in the library. There's a cheap one and a bandlimited one (that sounds strange, right?).<br>If you want to hear aliasing in your signal chain you can just put it after a sound source (like an oscillator) with no filtering.<br>If you instead want to downsample, you'll need some brickwall filter before the sample and hold (i suppose someone has already made such a filter. If you don't find it, you could simply use a number (like 2-4) filters in series.</p>

<p>And yes, i agree it would be quite cool to have some 8bit objects in the library.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/bit-depth-and-sample-rate-reduction/3693/2">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/bit-depth-and-sample-rate-reduction/3693/2</link>
        <pubDate>Mon, 04 Sep 2017 20:47:46 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3693-2</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/bit-depth-and-sample-rate-reduction/3693.rss">Bit-depth and Sample-rate Reduction</source>
      </item>
      <item>
        <title>Bit-depth and Sample-rate Reduction</title>
        <dc:creator><![CDATA[@axoman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/axoman">@axoman</a> wrote:</p>
          <blockquote>
              <p>As there's no way to change the bit-depth and sample-rate of the hardware itself, what would be the simplest way to do each of these tasks in software using the Axoloti Patcher?</p>

<p>I mean by looking at them as completely individual patches; one patch for reducing bit-depth and one for reducing sample-rate, to say, exactly half, what would each patch look like in their simplest form?</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/bit-depth-and-sample-rate-reduction/3693/1">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/bit-depth-and-sample-rate-reduction/3693/1</link>
        <pubDate>Mon, 04 Sep 2017 16:13:57 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3693-1</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/bit-depth-and-sample-rate-reduction/3693.rss">Bit-depth and Sample-rate Reduction</source>
      </item>
  </channel>
</rss>
