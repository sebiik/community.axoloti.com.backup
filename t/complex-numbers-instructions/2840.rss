<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Complex numbers instructions</title>
    <link>http://community.axoloti.com/t/complex-numbers-instructions/2840</link>
    <description>Hi everyone, it&#39;s been a while :) 

I&#39;m writing some code to work with complex numbers in fixed point (you can see the unfinished work in this patch: &lt;a class=&quot;attachment&quot; href=&quot;/uploads/default/original/2X/1/13d8d2644f0d960df1c2f2587d99141d3e70c219.axp&quot;&gt;complex numbers.axp&lt;/a&gt; (14.1 KB)



For now there&#39;s just a limited set of instructions: (cartesian assign, sum, subtract, multiply, divide, integer power, scale, interpolation, rotation and polar and cartesian output)

I plan to add some other stuff, at least to cover the basics (so a conversion from cartesian to polar and vice versa is the bare minimum).

Is there some other stuff that might be useful?

Update: i&#39;ve made a [list of the functions](#instruset)</description>
    
    <lastBuildDate>Wed, 15 Feb 2017 19:03:17 +0000</lastBuildDate>
    <category>AxoObject coding</category>
    <atom:link href="http://community.axoloti.com/t/complex-numbers-instructions/2840.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Complex numbers instructions</title>
        <dc:creator><![CDATA[@SmashedTransistors]]></dc:creator>
        <description><![CDATA[
          <p><a href="http://community.axoloti.com/u/smashedtransistors">@SmashedTransistors</a> wrote:</p>
          <blockquote>
              <p>Hi <a class="mention" href="/users/philoop">@philoop</a>, </p>

<p>This is not an patch (yet) it is a Reaper JSFX plugin.</p>
          </blockquote>
          <p><a href="http://community.axoloti.com/t/complex-numbers-instructions/2840/11">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/complex-numbers-instructions/2840/11</link>
        <pubDate>Wed, 15 Feb 2017 19:03:17 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2840-11</guid>
        <source url="http://community.axoloti.com/t/complex-numbers-instructions/2840.rss">Complex numbers instructions</source>
      </item>
      <item>
        <title>Complex numbers instructions</title>
        <dc:creator><![CDATA[@philoop]]></dc:creator>
        <description><![CDATA[
          <p><a href="http://community.axoloti.com/u/philoop">@philoop</a> wrote:</p>
          <blockquote>
              <p>would you share your patch please?</p>
          </blockquote>
          <p><a href="http://community.axoloti.com/t/complex-numbers-instructions/2840/10">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/complex-numbers-instructions/2840/10</link>
        <pubDate>Wed, 15 Feb 2017 18:59:03 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2840-10</guid>
        <source url="http://community.axoloti.com/t/complex-numbers-instructions/2840.rss">Complex numbers instructions</source>
      </item>
      <item>
        <title>Complex numbers instructions</title>
        <dc:creator><![CDATA[@SmashedTransistors]]></dc:creator>
        <description><![CDATA[
          <p><a href="http://community.axoloti.com/u/smashedtransistors">@SmashedTransistors</a> wrote:</p>
          <blockquote>
              <p>A complex resonator allows high Q and is very stable :<br><a href="https://ccrma.stanford.edu/~jos/smac03maxjos/smac03maxjos.pdf" class="onebox" target="_blank">https://ccrma.stanford.edu/~jos/smac03maxjos/smac03maxjos.pdf</a></p>

<p>I used the diamond Angle to perform a non linear self modulation of this kind of resonator.<br>The main advantage of the complex resonator is its stability, even when it is modulated at audio rate.</p>

<p>Here is an example:<br><iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?visual=false&amp;url=https%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F169218231&amp;show_artwork=true&amp;maxheight=166"></iframe></p>

<p>The plugin synth is based on sine oscillators processed by such "self modulated resonators".</p>

<p>Even if the diamond angle is not a numerically perfect atan, i think it is very useful for audio rate processing.</p>

<p>I believe that complex numbers can be very useful for non linear feedback systems because they can help with the normalisation issues as we have access to argument and modulus (i.e. angle and amplitude).</p>
          </blockquote>
          <p><a href="http://community.axoloti.com/t/complex-numbers-instructions/2840/9">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/complex-numbers-instructions/2840/9</link>
        <pubDate>Wed, 15 Feb 2017 18:48:58 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2840-9</guid>
        <source url="http://community.axoloti.com/t/complex-numbers-instructions/2840.rss">Complex numbers instructions</source>
      </item>
      <item>
        <title>Complex numbers instructions</title>
        <dc:creator><![CDATA[@Sputnki Filippo Tamagnini]]></dc:creator>
        <description><![CDATA[
          <p><a href="http://community.axoloti.com/u/sputnki">@Sputnki</a> wrote:</p>
          <blockquote>
              <h2>
<a name="instruset"></a> Instruction set:</h2>

<p><strong>Data structure:</strong> complex_number<br>It's composed of two variables: int32_t real and int32_t imaginary<br>Example of variable declaration: <br></p>

<p></p><pre><code class="lang-auto">complex_number z1;</code></pre>

<p><strong>cplx_assign(</strong>int32_t real <strong>,</strong> int32_t imaginary <strong>,</strong> complex_number *z <strong>)</strong><br>Stores inside the variable z (pointer), the complex number formed by the real part "real" and the imaginary part "imaginary".<br>Example:<br></p>

<p></p><pre><code class="lang-auto">cplx_assign(param_R1,param_I1,&amp;z1);</code></pre>

<p><strong>real(</strong>complex_number *z <strong>)</strong><br>Returns the real part of the complex number z.<br>Example:<br></p>

<p></p><pre><code class="lang-auto">disp_sumR = real(&amp;z3);</code></pre>

<p><strong>imaginary(</strong>complex_number *z <strong>)</strong><br>Returns the imaginary part of the complex number z.<br>Example:<br></p>

<p></p><pre><code class="lang-auto">disp_sumI = imaginary(&amp;z3);</code></pre>

<p><strong>cplx_sum(</strong>complex_number *z1 <strong>,</strong> complex_number *z2 ** <strong>,</strong> complex_number *z3)**<br>Performs the sum z1 + z2, stores the result in the variable z3. (Pointers!)<br>Example:<br></p>

<p></p><pre><code class="lang-auto">cplx_sum(&amp;z1,&amp;z2,&amp;z3);</code></pre>

<p><strong>cplx_subtract(</strong>complex_number *z1 <strong>,</strong> complex_number *z2 ** <strong>,</strong> complex_number *z3)**<br>Performs the sum z1 - z2, stores the result in the variable z3. (Pointers!)<br>Example:<br></p>

<p></p><pre><code class="lang-auto">cplx_subtract(&amp;z1,&amp;z2,&amp;z3);</code></pre>

<p><strong>cplx_mul_Q27(</strong>complex_number *z1 <strong>,</strong> complex_number *z2 <strong>,</strong> complex_number *out <strong>)</strong><br>Performs z1 * z2 in fixed point (using Q27 format) and stores the result into the variable "out"<br></p>

<p></p><pre><code class="lang-auto">cplx_mul_Q27(&amp;z1,&amp;z2,&amp;z4);</code></pre>

<p><strong>cplx_div_Q27(</strong>complex_number *z1 <strong>,</strong> complex_number *z2 <strong>,</strong> complex_number *out <strong>)</strong><br>Performs z1 / z2 in fixed point (using Q27 format) and stores the result into the variable "out"<br></p>

<p></p><pre><code class="lang-auto">cplx_div_Q27(&amp;z1,&amp;z2,&amp;z5);</code></pre>

<p><strong>cplx_pow_Q27(</strong>complex_number *z <strong>,</strong> int32_t exp <strong>,</strong> complex_number *out <strong>)</strong><br>Performs z^exp in fixed point (using Q27 format) and stores the result into the variable "out". <br></p>

<p></p><pre><code class="lang-auto">cplx_pow_Q27(&amp;z1,param_exp,&amp;z6);</code></pre>

<p> <br><strong>cplx_scale_Q27(</strong>complex_number *z <strong>,</strong> int32_t scale <strong>,</strong> complex_number *out <strong>)</strong><br>Performs a scalar multiplication between the complex number z and the integer scale (in fixed point, Q27 format) and stores the result into the complex number "out".<br></p>

<p></p><pre><code class="lang-auto">cplx_scale_Q27(&amp;z1,param_rate,&amp;z7);</code></pre>

<p><strong>cplx_interp_Q27(</strong>complex_number *z1 <strong>,</strong> complex_number *z2 <strong>,</strong> int32_t rate <strong>,</strong> complex_number *out <strong>)</strong><br>Interpolates linearly between two complex numbers z1 and z2 and stores the result into the variable "out". The amount of interpolation is set by the integer "rate".<br>Rate = 0 outputs z1<br>Rate = (1&lt;&lt;27) outputs z2<br></p>

<p></p><pre><code class="lang-auto">cplx_interp_Q27(&amp;z1,&amp;z2,param_rate,&amp;z8);</code></pre>

<p><strong>cplx_rotate(</strong>complex_number *z <strong>,</strong> uint32_t phase <strong>,</strong> complex_number *out <strong>)</strong><br>Rotates the complex number z by an amount "phase" and stores the result in the variable "out".<br>The phase is expressed in unsigned int.<br>phase = 0 corresponds to 0<br>phase = (1&lt;&lt;29) corresponds to pi/4<br>phase = (1&lt;&lt;30) corresponds to pi/2<br>phase = (1&lt;&lt;31) corresponds to pi<br>phase = (1&lt;&lt;32) corresponds to 2pi<br></p>

<p></p><pre><code class="lang-auto">cplx_rotate(&amp;z1,param_rate&lt;&lt;5,&amp;z10);</code></pre>

<p><strong>cplx_rotate_cheap(</strong>complex_number *z <strong>,</strong> uint32_t phase <strong>,</strong> complex_number *out <strong>)</strong><br>Rotates the complex number z by an amount "phase" and stores the result in the variable "out".<br>The phase is expressed in unsigned int.<br>This one is slightly cheaper than the previous, it just reads the sine2t table, without interpolation.<br></p>

<p></p><pre><code class="lang-auto">cplx_rotate_cheap(&amp;z1,param_rate&lt;&lt;5,&amp;z10);</code></pre>

<p><strong>cplx_polar_Q27(</strong>complex_number *z <strong>,</strong> int32_t *modulo <strong>,</strong>  uint32_t *phase <strong>)</strong><br>Converts the complex number z in polar form, and stores the components in the integer variables "modulo" and "phase".<br>Phase follows the format i described above for the rotate function.<br></p>

<p></p><pre><code class="lang-auto">cplx_polar(&amp;z10,&amp;disp_mod,&amp;phase);</code></pre>

<p><strong>cplx_cartesian(</strong>complex_number *z <strong>,</strong> int32_t *real_out <strong>,</strong> int32_t *imaginary_out <strong>)</strong><br>Outputs the complex number z in cartesian form in the variables real_out and imaginary_out. <br>It's really just a condensation of the real() and imaginary() functions..<br></p>

<p></p><pre><code class="lang-auto">cplx_cartesian(&amp;z4,&amp;disp_mulR,&amp;disp_mulI);</code></pre>
          </blockquote>
          <p><a href="http://community.axoloti.com/t/complex-numbers-instructions/2840/8">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/complex-numbers-instructions/2840/8</link>
        <pubDate>Tue, 07 Feb 2017 23:26:23 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2840-8</guid>
        <source url="http://community.axoloti.com/t/complex-numbers-instructions/2840.rss">Complex numbers instructions</source>
      </item>
      <item>
        <title>Complex numbers instructions</title>
        <dc:creator><![CDATA[@Sputnki Filippo Tamagnini]]></dc:creator>
        <description><![CDATA[
          <p><a href="http://community.axoloti.com/u/sputnki">@Sputnki</a> wrote:</p>
          <blockquote>
              <p>Thank you a lot! I've updated the patch with the diamond angle function. Just for curiosity, how did it behave in your plugin?</p>
          </blockquote>
          <p><a href="http://community.axoloti.com/t/complex-numbers-instructions/2840/7">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/complex-numbers-instructions/2840/7</link>
        <pubDate>Tue, 07 Feb 2017 21:31:56 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2840-7</guid>
        <source url="http://community.axoloti.com/t/complex-numbers-instructions/2840.rss">Complex numbers instructions</source>
      </item>
      <item>
        <title>Complex numbers instructions</title>
        <dc:creator><![CDATA[@SmashedTransistors]]></dc:creator>
        <description><![CDATA[
          <p><a href="http://community.axoloti.com/u/smashedtransistors">@SmashedTransistors</a> wrote:</p>
          <blockquote>
              <p>You can have a look at:<br><a href="http://dspguru.com/dsp/tricks/fixed-point-atan2-with-self-normalization" class="onebox" target="_blank">http://dspguru.com/dsp/tricks/fixed-point-atan2-with-self-normalization</a><br>and<br><a href="http://www.ntu.edu.sg/home/aukil/papers/conf/2011_IEEE-ISIE11_Fast-arctan.pdf" class="onebox" target="_blank">http://www.ntu.edu.sg/home/aukil/papers/conf/2011_IEEE-ISIE11_Fast-arctan.pdf</a></p>

<p>In my jsfx plugin i used a non normalized "diamond angle". It was good enough for my purpose ( self non linear modulation of the rotation speed/frequency of the complex filter ).<br>The jsfx code can be easily translated to C.</p>

<pre><code>//diamond angle 0..4
function CXF_diamAngle(x y) (
  y &gt;= 0 ? (
    x &gt;= 0 ?     y / (x + y) : 1 + x / (x - y);
  ) : (
    x &lt; 0  ? 2 + y / (x + y) : 3 + x / (x - y); 
  );
);</code></pre>
          </blockquote>
          <p><a href="http://community.axoloti.com/t/complex-numbers-instructions/2840/6">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/complex-numbers-instructions/2840/6</link>
        <pubDate>Fri, 03 Feb 2017 22:07:09 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2840-6</guid>
        <source url="http://community.axoloti.com/t/complex-numbers-instructions/2840.rss">Complex numbers instructions</source>
      </item>
      <item>
        <title>Complex numbers instructions</title>
        <dc:creator><![CDATA[@Gavin Gavin]]></dc:creator>
        <description><![CDATA[
          <p><a href="http://community.axoloti.com/u/gavin">@Gavin</a> wrote:</p>
          <blockquote>
              <p>get it now, "Complex numbers" and numbers that I find complex.... <img src="//community.axoloti.com/images/emoji/emoji_one/flushed.png?v=3" title=":flushed:" class="emoji" alt=":flushed:"></p>
          </blockquote>
          <p><a href="http://community.axoloti.com/t/complex-numbers-instructions/2840/5">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/complex-numbers-instructions/2840/5</link>
        <pubDate>Fri, 03 Feb 2017 09:39:45 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2840-5</guid>
        <source url="http://community.axoloti.com/t/complex-numbers-instructions/2840.rss">Complex numbers instructions</source>
      </item>
      <item>
        <title>Complex numbers instructions</title>
        <dc:creator><![CDATA[@Sputnki Filippo Tamagnini]]></dc:creator>
        <description><![CDATA[
          <p><a href="http://community.axoloti.com/u/sputnki">@Sputnki</a> wrote:</p>
          <blockquote>
              <p><a class="mention" href="/users/gavin">@gavin</a> I think you're a bit (a lot) off track. Complex numbers are combinations of real and imaginary numbers (and imaginary numbers are multiples of sqrt(-1) ). </p>

<p><a class="mention" href="/users/smashedtransistors">@SmashedTransistors</a> Yep, i hoped so! I used complex algebra just for chaotic oscillators, but i feel i'm missing a whole world of awesome functionalities..<br>I should ask you a question, however: do you have any idea on how to implement an arctan function that's fairly accurate and does not slow things down too much?</p>
          </blockquote>
          <p><a href="http://community.axoloti.com/t/complex-numbers-instructions/2840/4">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/complex-numbers-instructions/2840/4</link>
        <pubDate>Fri, 03 Feb 2017 08:45:24 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2840-4</guid>
        <source url="http://community.axoloti.com/t/complex-numbers-instructions/2840.rss">Complex numbers instructions</source>
      </item>
      <item>
        <title>Complex numbers instructions</title>
        <dc:creator><![CDATA[@Gavin Gavin]]></dc:creator>
        <description><![CDATA[
          <p><a href="http://community.axoloti.com/u/gavin">@Gavin</a> wrote:</p>
          <blockquote>
              <p>I have a problem that may be related as I cannot find math to achieve the result I need.<br>I have built a footswitch controller with 8 momentary switches, all are interconnected to one Axo analogue input with resistor divider so I get 8 values approx 8, 16, 24, 32, 40, 48, 56, 64. But as it is coming into the Analogue pin there is ripple so the value is always changing and fractioned. And here in lies the problem, to connect these 8 values to a Mux, I divide it by 8 as per bitshift&gt;&gt;3 object, and get values 1 to 8, and to get a cleanest value possible, I add it into the "round" object, but this is still not clean enough. As when it passes through the Mux, it bounces infrequently and randomly. So my only thought is the values are somewhat dirty.<br>My solution to the problem was to start back with the 0 to 64, and use a list of if statements to achieve a clean value if&lt;4=0, if&gt;4&amp;&lt;12=1, if&gt;12&amp;&lt;20=2 and so on till I get to 8. And this fixes the problem perfectly and efficiently.<br>However based on this workaround I am now led to believe the math is very different to what I thought it was, and am possibly dealing with very complex values hence my desire to add this here.<br>Do you have any insight into more efficient math for this ?<img src="//community.axoloti.com/images/emoji/emoji_one/smiley.png?v=3" title=":smiley:" class="emoji" alt=":smiley:"></p>
          </blockquote>
          <p><a href="http://community.axoloti.com/t/complex-numbers-instructions/2840/3">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/complex-numbers-instructions/2840/3</link>
        <pubDate>Thu, 02 Feb 2017 22:01:31 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2840-3</guid>
        <source url="http://community.axoloti.com/t/complex-numbers-instructions/2840.rss">Complex numbers instructions</source>
      </item>
      <item>
        <title>Complex numbers instructions</title>
        <dc:creator><![CDATA[@SmashedTransistors]]></dc:creator>
        <description><![CDATA[
          <p><a href="http://community.axoloti.com/u/smashedtransistors">@SmashedTransistors</a> wrote:</p>
          <blockquote>
              <p>That's impressive, especially with fixed point !</p>

<p>There is a lot of funny and experimental stuff to do with complex numbers such as non linear (and yet stable) filters.</p>
          </blockquote>
          <p><a href="http://community.axoloti.com/t/complex-numbers-instructions/2840/2">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/complex-numbers-instructions/2840/2</link>
        <pubDate>Thu, 02 Feb 2017 20:59:02 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2840-2</guid>
        <source url="http://community.axoloti.com/t/complex-numbers-instructions/2840.rss">Complex numbers instructions</source>
      </item>
      <item>
        <title>Complex numbers instructions</title>
        <dc:creator><![CDATA[@Sputnki Filippo Tamagnini]]></dc:creator>
        <description><![CDATA[
          <p><a href="http://community.axoloti.com/u/sputnki">@Sputnki</a> wrote:</p>
          <blockquote>
              <p>Hi everyone, it's been a while <img src="//community.axoloti.com/images/emoji/emoji_one/slight_smile.png?v=3" title=":slight_smile:" class="emoji" alt=":slight_smile:"> </p>

<p>I'm writing some code to work with complex numbers in fixed point (you can see the unfinished work in this patch: <a class="attachment" href="//community.axoloti.com/uploads/default/original/2X/1/13d8d2644f0d960df1c2f2587d99141d3e70c219.axp">complex numbers.axp</a> (14.1 KB)</p>

<p>For now there's just a limited set of instructions: (cartesian assign, sum, subtract, multiply, divide, integer power, scale, interpolation, rotation and polar and cartesian output)</p>

<p>I plan to add some other stuff, at least to cover the basics (so a conversion from cartesian to polar and vice versa is the bare minimum).</p>

<p>Is there some other stuff that might be useful?</p>

<p>Update: i've made a <a href="#instruset">list of the functions</a></p>
          </blockquote>
          <p><a href="http://community.axoloti.com/t/complex-numbers-instructions/2840/1">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/complex-numbers-instructions/2840/1</link>
        <pubDate>Thu, 02 Feb 2017 09:30:22 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-2840-1</guid>
        <source url="http://community.axoloti.com/t/complex-numbers-instructions/2840.rss">Complex numbers instructions</source>
      </item>
  </channel>
</rss>
