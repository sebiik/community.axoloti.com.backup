<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Offline Processing</title>
    <link>https://sebiik.github.io/community.axoloti.com.backup/t/offline-processing/1922</link>
    <description>Is it theoretically possible to create an object that, for example, processes a recorded sample (stored in a table presumably) &#39;offline&#39; (i.e. not in realtime), and writes the results back into a table/multiple tables for later recall?

Is there any way to allow a function in an object to monopolise all the resources on the MCU until a particular take is completed?

I realise this is quite an obscure thing to want to do, so just investigation possibilities...

a|x</description>
    
    <lastBuildDate>Wed, 29 Jun 2016 21:37:49 +0000</lastBuildDate>
    <category>AxoObject coding</category>
    <atom:link href="https://sebiik.github.io/community.axoloti.com.backup/t/offline-processing/1922.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Offline Processing</title>
        <dc:creator><![CDATA[@toneburst alx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/toneburst">@toneburst</a> wrote:</p>
          <blockquote>
              <p>I was thinking of silencing audio output while the processing took place, so that would get around the potential audio glitching issue.</p>

<p>Are there resource and other limits on objects using threads?</p>

<p>a|x</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/offline-processing/1922/4">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/offline-processing/1922/4</link>
        <pubDate>Wed, 29 Jun 2016 21:37:49 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1922-4</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/offline-processing/1922.rss">Offline Processing</source>
      </item>
      <item>
        <title>Offline Processing</title>
        <dc:creator><![CDATA[@johannes johannes]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/johannes">@johannes</a> wrote:</p>
          <blockquote>
              <p>At the end of a dsp k-rate cycle, the consumed cpu time is measured, and if too close to 100%, a one milliseconds sleep is inserted, giving other (lower priority) threads a chance, maintaining the pc connection is one of them. Still, if it takes over a second the pc communication will disconnect, the since the sleep is only inserted at the end of the k-rate cycle. While running over-time the contents of the audio double buffer will keep on getting fed into the audio DAC, so you'll get buzz.<br>Alternative to using the dsp cycle, is doing &lt;10 seconds of work in init code (the editor will disconnect when getting no response within 10 seconds), or using a low priority thread similar as script2 uses.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/offline-processing/1922/3">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/offline-processing/1922/3</link>
        <pubDate>Wed, 29 Jun 2016 19:16:58 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1922-3</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/offline-processing/1922.rss">Offline Processing</source>
      </item>
      <item>
        <title>Offline Processing</title>
        <dc:creator><![CDATA[@Sputnki Filippo Tamagnini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/sputnki">@Sputnki</a> wrote:</p>
          <blockquote>
              <p>Try with a for loop, see if the patcher disconnects. If it doesn't you have what you need (also, axoloti patcher does not disconnect anymore, even with 100% dsp load).</p>

<p>IF it does disconnect you can try splitting the task over several k-rate cycles (i tried this road once but i did not succeed, maybe you'll have more luck)</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/offline-processing/1922/2">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/offline-processing/1922/2</link>
        <pubDate>Wed, 29 Jun 2016 17:33:11 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1922-2</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/offline-processing/1922.rss">Offline Processing</source>
      </item>
      <item>
        <title>Offline Processing</title>
        <dc:creator><![CDATA[@toneburst alx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/toneburst">@toneburst</a> wrote:</p>
          <blockquote>
              <p>Is it theoretically possible to create an object that, for example, processes a recorded sample (stored in a table presumably) 'offline' (i.e. not in realtime), and writes the results back into a table/multiple tables for later recall?</p>

<p>Is there any way to allow a function in an object to monopolise all the resources on the MCU until a particular take is completed?</p>

<p>I realise this is quite an obscure thing to want to do, so just investigation possibilities...</p>

<p>a|x</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/offline-processing/1922/1">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/offline-processing/1922/1</link>
        <pubDate>Tue, 28 Jun 2016 14:41:41 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1922-1</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/offline-processing/1922.rss">Offline Processing</source>
      </item>
  </channel>
</rss>
