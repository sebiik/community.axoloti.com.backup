<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>How wrong is it to overflow a frac32 input?</title>
    <link>https://sebiik.github.io/community.axoloti.com.backup/t/how-wrong-is-it-to-overflow-a-frac32-input/7658</link>
    <description>Hello,
I´m making a patch in which I have a base value controlled by a ctrl/dial p object, and to that value I add a randomized value from zero to whatever I have dialed on another ctrl/dial p object.
Then those two values are added and sent to a frac32 inlet on another object.
In order to avoid sending a value higher than 64 I do some operations on the random signal to scale it so the resulting value received on the blue inlet never exceeds 64.
The thing is my patch is starting to get a bit big, and I have to take out stuff that is not needed in order to add the stuff I do need, so I´m thinking that maybe all that calculation is not really necessary, since doing tests on another simple patch nothing bad seems to happen if I do send a value higher than 64.
So my question is on the title: Is it bad to send values higher than 64 to a frac32 input, or it will just see it as 64 and just keep going? This seems to be the case, but who knows if it is messing with the code and might start having a wrong behaviour.
Here´s a picture of an example of what I´m talking about.
&lt;img src=&quot;/uploads/default/original/2X/d/dd7cea7f81ea07bcbe32e78676c871cedf0e5b94.png&quot; width=&quot;467&quot; height=&quot;317&quot;&gt;</description>
    
    <lastBuildDate>Mon, 21 Mar 2022 13:47:42 +0000</lastBuildDate>
    <category>Patching</category>
    <atom:link href="https://sebiik.github.io/community.axoloti.com.backup/t/how-wrong-is-it-to-overflow-a-frac32-input/7658.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>How wrong is it to overflow a frac32 input?</title>
        <dc:creator><![CDATA[@TTotelka]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/ttotelka">@TTotelka</a> wrote:</p>
          <blockquote>
              <blockquote><p>But you can always check this by just sending a value to it that passes 27 bits to be sure (like adding two sliders together and passing that as an input).</p></blockquote>

<p>That is what I did, and it seems to work just fine <img src="//community.axoloti.com/images/emoji/twitter/slightly_smiling_face.png?v=5" title=":slightly_smiling_face:" class="emoji" alt=":slightly_smiling_face:"><br>Thanks!</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/how-wrong-is-it-to-overflow-a-frac32-input/7658/5">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/how-wrong-is-it-to-overflow-a-frac32-input/7658/5</link>
        <pubDate>Mon, 21 Mar 2022 13:47:42 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-7658-5</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/how-wrong-is-it-to-overflow-a-frac32-input/7658.rss">How wrong is it to overflow a frac32 input?</source>
      </item>
      <item>
        <title>How wrong is it to overflow a frac32 input?</title>
        <dc:creator><![CDATA[@SirSickSik Remco]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/sirsicksik">@SirSickSik</a> wrote:</p>
          <blockquote>
              <p>it does still depend on the code in his module. If his function can't handle inputs higher then unipolar 27 or bipolar 28 bits and he didn't use a clipper to saveguard this, it could still give a weird behavior.<br>For example, if, for some reason, he bitshifted the input to the right by 4 bits without clipping, going over the 27 bits would still lead to some unexpected behavior. But you can always check this by just sending a value to it that passes 27 bits to be sure (like adding two sliders together and passing that as an input). If it dóes wrap, you can always add the clipping function yourself:</p>

<p>__USAT ( param _p+inlet _p,27) (without the space between param and _p, where p would be the name of the inlet/parameter)</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/how-wrong-is-it-to-overflow-a-frac32-input/7658/4">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/how-wrong-is-it-to-overflow-a-frac32-input/7658/4</link>
        <pubDate>Sat, 19 Mar 2022 11:21:07 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-7658-4</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/how-wrong-is-it-to-overflow-a-frac32-input/7658.rss">How wrong is it to overflow a frac32 input?</source>
      </item>
      <item>
        <title>How wrong is it to overflow a frac32 input?</title>
        <dc:creator><![CDATA[@TTotelka]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/ttotelka">@TTotelka</a> wrote:</p>
          <blockquote>
              <p>All right, thank you so much!<br>The adsr module was just for showing what I was talking about in the simplest possible way, I´m actually sending the signal to <a class="mention" href="/u/cpwitz">@cpwitz</a> 's grain-player (used in grain-mill).<br>Anyway, from your explanation I understand that still I won´t overflow anything, since the biggest amount I could send is double of 64, and unless these 32 bits don´t behave like the binary bits I know, 5 bits (it is unipolar) gives me way more margin than that.<br>Again, thanks a lot! <img src="//community.axoloti.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/how-wrong-is-it-to-overflow-a-frac32-input/7658/3">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/how-wrong-is-it-to-overflow-a-frac32-input/7658/3</link>
        <pubDate>Fri, 18 Mar 2022 13:16:18 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-7658-3</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/how-wrong-is-it-to-overflow-a-frac32-input/7658.rss">How wrong is it to overflow a frac32 input?</source>
      </item>
      <item>
        <title>How wrong is it to overflow a frac32 input?</title>
        <dc:creator><![CDATA[@SirSickSik Remco]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/sirsicksik">@SirSickSik</a> wrote:</p>
          <blockquote>
              <p>The common way to clip signals between 0/-64 and 64 is the function: <br>__USAT(...,27) (unipolar) <br>and <br>__SSAT(....,28) (bipolar)</p>

<p>As far as I know, this is already build into the adsr's modulation+parameter calculation, so you won't need anything before it to clip the signal.<br>The fractional values normally being used are between -64 and 64 (which is -/+ 1&lt;&lt;27, which means it uses 27 bits for unipolar and 28 bits for bipolar signals). As the total bits that are allowed internally in the code is mostly bipolar 32 bits, this means you got 4 bits left to "go over" without the integer losing bits that it can't "hold". As soon as you dó go over this, the signal will wrap around from max to min (when you go up from zero, when you reach 1&lt;&lt;31 it will become -1&lt;&lt;31 and it will go up to zero again from there)</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/how-wrong-is-it-to-overflow-a-frac32-input/7658/2">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/how-wrong-is-it-to-overflow-a-frac32-input/7658/2</link>
        <pubDate>Fri, 18 Mar 2022 10:25:29 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-7658-2</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/how-wrong-is-it-to-overflow-a-frac32-input/7658.rss">How wrong is it to overflow a frac32 input?</source>
      </item>
      <item>
        <title>How wrong is it to overflow a frac32 input?</title>
        <dc:creator><![CDATA[@TTotelka]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/ttotelka">@TTotelka</a> wrote:</p>
          <blockquote>
              <p>Hello,<br>I´m making a patch in which I have a base value controlled by a ctrl/dial p object, and to that value I add a randomized value from zero to whatever I have dialed on another ctrl/dial p object.<br>Then those two values are added and sent to a frac32 inlet on another object.<br>In order to avoid sending a value higher than 64 I do some operations on the random signal to scale it so the resulting value received on the blue inlet never exceeds 64.<br>The thing is my patch is starting to get a bit big, and I have to take out stuff that is not needed in order to add the stuff I do need, so I´m thinking that maybe all that calculation is not really necessary, since doing tests on another simple patch nothing bad seems to happen if I do send a value higher than 64.<br>So my question is on the title: Is it bad to send values higher than 64 to a frac32 input, or it will just see it as 64 and just keep going? This seems to be the case, but who knows if it is messing with the code and might start having a wrong behaviour.<br>Here´s a picture of an example of what I´m talking about.<br><img src="//community.axoloti.com/uploads/default/original/2X/d/dd7cea7f81ea07bcbe32e78676c871cedf0e5b94.png" width="467" height="317"></p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/how-wrong-is-it-to-overflow-a-frac32-input/7658/1">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/how-wrong-is-it-to-overflow-a-frac32-input/7658/1</link>
        <pubDate>Fri, 18 Mar 2022 09:52:10 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-7658-1</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/how-wrong-is-it-to-overflow-a-frac32-input/7658.rss">How wrong is it to overflow a frac32 input?</source>
      </item>
  </channel>
</rss>
