<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Hardware interface concept question</title>
    <link>https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884</link>
    <description>Hi Guys,


I am presently muzing about what my personal ideal hardware interface would look like.

Is it possible to use the hardware interface in a sort of menu driven configuration? For instance by connecting the 5 digital inputs with switches and use them to reconfigure the functions of all 15 analog inputs at once?

So what I want to do is build a sort of generic interface that I can use to control 5 seperate groups. For instance for a LFO section, an oscillator section, a filter section, an amp section and an effects section.

I know this sounds a bit like going back to the &quot;good old days&quot; of menu driven digital synths but if this can be done one would for instance be able to configure 15 analog inputs to control 5 x 15 = 75 parameters when just using the 5 digital inputs to scan for simple selection bits. So in the above example I would go to the LFO section if I press switch 1 and go to the filter section when I press switch 3.

Or can such things only be done with a MIDI controller using a dedicated MIDI controller number per function?


Marc Brassé</description>
    
    <lastBuildDate>Sat, 11 Nov 2017 21:35:04 +0000</lastBuildDate>
    <category>Hardware</category>
    <atom:link href="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Hardware interface concept question</title>
        <dc:creator><![CDATA[@brasso Marc Brassé]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/brasso">@brasso</a> wrote:</p>
          <blockquote>
              <p>OK. Interesting.</p>

<p>I must confess that everything I use until now is MIDI via Din. I just assumed that would mean the same speed for MIDI via USB bercause a maximum reading speed would be part of the MIDI-standard. Stiil, running everything via USB, so digital audio and MIDI etc., might again create latency. One would have to compare hard measurement data. </p>

<p>That <a class="mention" href="/u/johannes">@johannes</a> is already working on some sort of additional interface is good news. That might indeed make the implementation of my idea's a lot easier as well.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/33">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/33</link>
        <pubDate>Sat, 11 Nov 2017 21:35:04 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3884-33</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884.rss">Hardware interface concept question</source>
      </item>
      <item>
        <title>Hardware interface concept question</title>
        <dc:creator><![CDATA[@Blindsmyth Simon]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/blindsmyth">@Blindsmyth</a> wrote:</p>
          <blockquote>
              <p>I agree that USB midi is usually a lot faster the din!</p>

<p>Me persoannly I would also prefer to have an all in one hardware with the gpio but I realized that designing and building your own hardware interface is a very tedious process and that I actually want to make music with the axoloti. So with midi controllers I can realize my Ideas already, try things in the practical world and can then converge these Ideas into my own hardware (at some undefined point in the future)<br>So this was more meant to be an advice for starting somewhere and testing if and how your instrument concepts actually work in practice. I personally realized during this process that with some clever patching I can do it with less controlls than expected!</p>

<p>One thing to bear in mind is that Johannes is also working on a control board with 4 encoders and some buttons. This might be already your "Param" part. <br>Then you only need to add the "levels" and "times" control.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/32">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/32</link>
        <pubDate>Fri, 10 Nov 2017 02:37:47 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3884-32</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884.rss">Hardware interface concept question</source>
      </item>
      <item>
        <title>Hardware interface concept question</title>
        <dc:creator><![CDATA[@Gavin Gavin]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/gavin">@Gavin</a> wrote:</p>
          <blockquote>
              <p>I do believe a lot of those "Midi Latency" issues you are referring to can be solved with Midi over USB, a lot faster. But obviously the downside is the Axo only has one port for that.. Wait a minute, that's right, they are working on a solution so that a USB hub can be used, yes that will fix it.. !! This is an upgrade I think can make a massive difference. There are many microcontrollers that can be used to make midi controllers over USB. <img src="//community.axoloti.com/images/emoji/twitter/grin.png?v=5" title=":grin:" class="emoji" alt=":grin:"></p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/31">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/31</link>
        <pubDate>Thu, 09 Nov 2017 21:29:02 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3884-31</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884.rss">Hardware interface concept question</source>
      </item>
      <item>
        <title>Hardware interface concept question</title>
        <dc:creator><![CDATA[@brasso Marc Brassé]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/brasso">@brasso</a> wrote:</p>
          <blockquote>
              <p>I actually think the on-board inputs are a mighty big advantage.</p>

<p>Since most digital systems nowadays work with a higher clock- / scanrates then MIDI they often react faster when processing their own interface inputs. On paper the difference might not seem that significant (what differnce makes a milliseconds) )but I a few instruments I own feel a lot vaguer when driven via MIDI then they do when played directly. Some of the direct man too machine interface experiences still get lost in those seemingly small MIDI latencies.</p>

<p>Furhtermore the on-board in- and outputs actually turn the Axoloti intot the nifty and unique solution it is. You can now really build your own personal hardware synth (with all them nice knobby thingies) without loosing the option to go extra deep via the screen.</p>

<p>Marc</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/30">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/30</link>
        <pubDate>Thu, 09 Nov 2017 20:41:07 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3884-30</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884.rss">Hardware interface concept question</source>
      </item>
      <item>
        <title>Hardware interface concept question</title>
        <dc:creator><![CDATA[@Blindsmyth Simon]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/blindsmyth">@Blindsmyth</a> wrote:</p>
          <blockquote>
              <p>Hey there,</p>

<p>my main experience in building interfaces lies with midi controllers. I built a little axoloti footpedal with knobs and leds stuff but all the wiring was killing me, never really got it to work.</p>

<p>So right now I mainly work with midi controllers thus. I would really advice against using analog inputs, as when you switch layer you don't know anymore where your values are and you got to figure out all of this take over etc stuff.</p>

<p>So your options in that case would be:<br>1 motorized faders<br>2 touch strips with led strip indicating the value (like on livid base)<br>3 encoder with led ring (like the encoders on akai apc40)</p>

<p>BUT all of these are pretty hard to DIY. So my advice is really look for a midi controller that has all the elements to realize your concept and go patching.</p>

<p>From the first look I think good old Behringer BCF or the newer X-touch compact seem to have all the elements you need.<br>The faders would be your envelope thing, the encoders your parameters and you can use the buttons to do all the switching you want<br>From what I know the BCF really had sophistacted possibiliets of custimozing the midi messages. For example you might be able to get something like rough and fine control that goes beyond the typical 0-127 out of the encoders, or use pitchbend on the faders if that is a concern.</p>

<p>Then eventually it is all just about clever multiplexing. You already got your concept, wich is good! So you only need to execute your plan in small steps. That is where having a hardware ready (like a midi controller) really helps from my experience!</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/29">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/29</link>
        <pubDate>Wed, 08 Nov 2017 00:54:19 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3884-29</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884.rss">Hardware interface concept question</source>
      </item>
      <item>
        <title>Hardware interface concept question</title>
        <dc:creator><![CDATA[@brasso Marc Brassé]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/brasso">@brasso</a> wrote:</p>
          <blockquote>
              <p>We've all got our strenghts and weaknesses. I have seen all major developments in music technology of the last 40 years and worked with most synthesis methods out there. My weakness however is that I have untill now avoided working on homecomputers as much as possible. So I still have to work out the sort of basic stuff that will be totally obvious to the USB / Blue Tooth / Facebook generation.</p>

<p>So I am glad this community exist, even though some of you will probably think I am some sort of pre-digital dinosaur. <img src="//community.axoloti.com/images/emoji/twitter/sauropod.png?v=5" title=":sauropod:" class="emoji" alt=":sauropod:"></p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/28">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/28</link>
        <pubDate>Sun, 05 Nov 2017 20:18:43 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3884-28</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884.rss">Hardware interface concept question</source>
      </item>
      <item>
        <title>Hardware interface concept question</title>
        <dc:creator><![CDATA[@MC_DETH]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/mc_deth">@MC_DETH</a> wrote:</p>
          <blockquote>
              <p><a class="mention" href="/u/brasso">@brasso</a> speaking for myself here; I am an utter noob when it comes to sound synthesis (analogue or digital);  axoloti; and diy hardware <img src="//community.axoloti.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:">  I have been a noise artist for over ten years but it's only very recently that I became interested in crafting my own instrument and electronical music in particular. I am currently cutting my teeth on my first hardware build and progress has been slow, but I will post updates on how I get on with patching once I get going!</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/27">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/27</link>
        <pubDate>Sun, 05 Nov 2017 18:33:37 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3884-27</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884.rss">Hardware interface concept question</source>
      </item>
      <item>
        <title>Hardware interface concept question</title>
        <dc:creator><![CDATA[@brasso Marc Brassé]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/brasso">@brasso</a> wrote:</p>
          <blockquote>
              <p>Hi yah all,</p>

<p>To get a more specific insight into why I am looking for the sort of solution discussed in thist thread you can visit <strong>The Holy Grail</strong> <a href="//community.axoloti.com/t/the-holy-grail-second-reprise/2996/181">https://sebiik.github.io/community.axoloti.com.backup/t/the-holy-grail-second-reprise/2996/181</a></p>

<p>This is my first sketch of the sort of controller design I am aiming at:</p>

<p><div class="lightbox-wrapper"><a data-download-href="//community.axoloti.com/uploads/default/432e6c7474da2d598a219eedb1d0593404aee64d" href="//community.axoloti.com/uploads/default/original/2X/4/432e6c7474da2d598a219eedb1d0593404aee64d.jpg" class="lightbox" title="Grailer One hardware interface V1.jpg"><img src="//community.axoloti.com/uploads/default/optimized/2X/4/432e6c7474da2d598a219eedb1d0593404aee64d_1_690x333.jpg" width="690" height="333"><div class="meta">
<span class="filename">Grailer One hardware interface V1.jpg</span><span class="informations">2543x1230 463 KB</span><span class="expand"></span>
</div></a></div></p>

<p>Marc</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/26">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/26</link>
        <pubDate>Sun, 05 Nov 2017 15:45:19 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3884-26</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884.rss">Hardware interface concept question</source>
      </item>
      <item>
        <title>Hardware interface concept question</title>
        <dc:creator><![CDATA[@brasso Marc Brassé]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/brasso">@brasso</a> wrote:</p>
          <blockquote>
              <p>Hi <a class="mention" href="/u/mc_deth">@MC_DETH</a> and <a class="mention" href="/u/blindsmyth">@Blindsmyth</a>,</p>

<p>You guys are probably already way ahead of us. Please explain in laymans terms as soon as you get close to a solution us amateurs would understand or at least be able to use.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/25">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/25</link>
        <pubDate>Sun, 05 Nov 2017 13:40:28 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3884-25</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884.rss">Hardware interface concept question</source>
      </item>
      <item>
        <title>Hardware interface concept question</title>
        <dc:creator><![CDATA[@brasso Marc Brassé]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/brasso">@brasso</a> wrote:</p>
          <blockquote>
              <p>Hi Gavin,</p>

<p>I fully understand what you mean. It is just that I cannot imagine that the data amount and thus the processing power needed will be that big, expecially when compared to other demands on the Axoloti, such as DSP.</p>

<p>Imagine a 75 line 2 column table in which every address is mentioned plus a single value for that address, the contents of the cells based on the users last visit to the accompanying object control input. O.K. that also might neccesitate the use of a 3rd column mentioning the number of the submenu but still; the rest of the processing would only be concerned with using the right value for the right object connection and updating the table every time a value is actually changed by the user.</p>

<p>But I am not a code writer either. At this moment I am actually getting to grips with the user interface. That's the disadvantage when you think (too?) far ahead. <img src="//community.axoloti.com/images/emoji/twitter/blush.png?v=5" title=":blush:" class="emoji" alt=":blush:"></p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/24">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/24</link>
        <pubDate>Sun, 05 Nov 2017 13:34:39 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3884-24</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884.rss">Hardware interface concept question</source>
      </item>
      <item>
        <title>Hardware interface concept question</title>
        <dc:creator><![CDATA[@brasso Marc Brassé]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/brasso">@brasso</a> wrote:</p>
          <blockquote>
              <p>Dear Ricard,</p>

<p>Yep, that is basically the sort of thing I am thinking of.  Too many pages and submenus do not make the expreience of programming very pleasurable/ practical. A matrix of 5 menu's with 20 prameters, would, as discussed, already be a killer. For even deeper programming one could still use the normal screen option of the PC-software.</p>

<p>I do however assume you are doing all data exchange via midi and my question concerns the possibilites to implement a similar solution using  the Axoloti's own hardware input points, so to build hardware interface that does noto use midi for data exchange</p>

<p>But still, midi or not: Does the P6 in your case provide al lthe handling and tabling options (remembering the precvious contets of the sumenu'sand stuff) or does the Axoloti itself do that for you?</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/23">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/23</link>
        <pubDate>Sun, 05 Nov 2017 13:07:58 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3884-23</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884.rss">Hardware interface concept question</source>
      </item>
      <item>
        <title>Hardware interface concept question</title>
        <dc:creator><![CDATA[@MC_DETH]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/mc_deth">@MC_DETH</a> wrote:</p>
          <blockquote>
              <p>This is a different patch, but giving me the same problem. Solution was to adjust the settings for the MCP 23S17<br><div class="lightbox-wrapper"><a data-download-href="//community.axoloti.com/uploads/default/1954fa1d7d02619ee25867ccc37d854c364153bf" href="//community.axoloti.com/uploads/default/original/2X/1/1954fa1d7d02619ee25867ccc37d854c364153bf.JPG" class="lightbox" title="IMG_3543.JPG"><img src="//community.axoloti.com/uploads/default/optimized/2X/1/1954fa1d7d02619ee25867ccc37d854c364153bf_1_690x430.JPG" width="690" height="430"><div class="meta">
<span class="filename">IMG_3543.JPG</span><span class="informations">2794x1745 1.79 MB</span><span class="expand"></span>
</div></a></div></p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/22">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/22</link>
        <pubDate>Sat, 04 Nov 2017 18:42:01 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3884-22</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884.rss">Hardware interface concept question</source>
      </item>
      <item>
        <title>Hardware interface concept question</title>
        <dc:creator><![CDATA[@ricard Ricard Wanderlof]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/ricard">@ricard</a> wrote:</p>
          <blockquote>
              <p>From time to time I've been working on a project to run the Axoloti software on an Audiothingies P6 (<a href="https://www.audiothingies.com/p6/" rel="nofollow noopener">https://www.audiothingies.com/p6/</a>) hardware. The reason for this was ultimately to experiment with synthesizer design without having to build a hardware interface, as all that is already done in the P6. More importantly, the MCU used in the P6 is almost the same as in the Axoloti.</p>

<p>All this is slow work-in-progress, but basically I have accomplished three major tasks:<br>a) Porting the Axoloti firmware to the P6 platform, and <br>b) Implementing Axoloti objects for handling the P6 hardware, most importantly the 2x24 character LCD display and the rotary encoders, as well as<br>c) A basic menu system centered around a few objects holding tables with various menus.</p>

<p>The point of the exercise is to be able to emulate the P6 UI in a fairly simple way in the Axoloti environment.</p>

<p>Now, a), will probably not be very useful to most people, especially since Audiothingies ceased production of the P6, but b) and c) would be useful in other contexts as well.</p>

<p>The P6 uses 74HC165 and 74HC595 chips to essentially handle all digital I/O using a simple serial protocol - basically a clock line and a data line, which reads data from the latched shift registers in the 74HC165 chips or sends data to the shift registers in the 74HC595 chips which are then latched to the relevant outputs.</p>

<p>Unfortunately, I have not gotten around to uploading any of this to the contrib section mainly because it's been work-in-progress and I've only recently acheived something which I would consider useful.</p>

<p>A side note here is the UI concept used in the P6. Basically, there is a 2x24 character LCD display, which at any one time can display (up to) 6 parameters. Underneath the display there are 6 knobs which control the 6 parameters displayed. The top line displays a parameter name (abbreviated, as there are only 4 character positions available for each parameter, which in practice ends up as 3 characters, as you'll need a space between the parameter names for readability), and the bottom line displays the actual parameter. The buttons on the panel select a menu page, and for the P6 firmware this is cunningly laid out so that each 'module' (i.e. oscillator, filter, etc) occupies a single 'page' of 6 parameters.</p>

<p>The whole idea is that it's not a deep menu based system, you basically press the OSC button which brings up the parameters for oscillator 1, pressing OSC again brings up the parameters for oscillator 2, etc. So it's much easier and direct to work with than a menu based system where you have to navigate to some menu somewhere and then change a single parameter, go to another menu to change another parameter, etc. For me this is the ultimate compromise between having a full panel of pots/encoders with dedicated displays/led rings, and a 'letterbox' type menu system where you select a parameter with one knob and change its value with another.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/21">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/21</link>
        <pubDate>Fri, 03 Nov 2017 06:01:08 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3884-21</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884.rss">Hardware interface concept question</source>
      </item>
      <item>
        <title>Hardware interface concept question</title>
        <dc:creator><![CDATA[@Gavin Gavin]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/gavin">@Gavin</a> wrote:</p>
          <blockquote>
              <p>Apologies <a class="mention" href="/u/brasso">@Brasso</a>,<br>Somehow I am worried I could be steering you incorrectly here. Apologies if I have, not my intention at all.<br>I have thought about something very similar to what you have explained, but with the experience of my own setup, reluctance has overwhelmed me to try it myself.<br>The factor I am trying to express is the size of the patch required to allow your control.<br>If I have it right, 15 pots connected to Axo analog inputs, 5 momentary buttons connected to digital inputs to select the mode group of the pots.<br>20 connections, each requiring their own object to read the pins state, this isn’t too much for the Axo, until you need to multiply it out to give a total of 75 controls in a patch.<br>So in theory somewhere in you objects and or code, you will need 75 separate conditions to send and or receive your control data at the correct place.<br>It’s the code and or objects x 75 times that will chew up resources, well at least how I see it from my experience which I have been commenting on.<br>I am not an experienced coder, but I do get by and find way around what I need.<br>But if you have found a way of getting around this, would love to know how you achieve it.<img src="//community.axoloti.com/images/emoji/twitter/grin.png?v=5" title=":grin:" class="emoji" alt=":grin:"></p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/20">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/20</link>
        <pubDate>Wed, 01 Nov 2017 22:40:57 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3884-20</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884.rss">Hardware interface concept question</source>
      </item>
      <item>
        <title>Hardware interface concept question</title>
        <dc:creator><![CDATA[@brasso Marc Brassé]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/brasso">@brasso</a> wrote:</p>
          <blockquote>
              <p>Hi Gavin,</p>

<p>You'd have to eloborate a bit further for me to fully get what you mean. What we where discussing here is more of a pure data management problem: How to store and get back to previous settings in a submenu. In that case no extra processing would be needed. Only a sort of lookup table.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/19">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/19</link>
        <pubDate>Wed, 01 Nov 2017 11:05:06 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3884-19</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884.rss">Hardware interface concept question</source>
      </item>
      <item>
        <title>Hardware interface concept question</title>
        <dc:creator><![CDATA[@Gavin Gavin]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/gavin">@Gavin</a> wrote:</p>
          <blockquote>
              <p><a class="mention" href="/u/brasso">@brasso</a>, The "only few numbers can be processed" is not so straight forward. The objects I developed were designed in such away with 32 that it could be extended to the level I was seeking which was 64. Because of the approach I took, this itself added processing, even finding out 32 was too big. But my needs were different to yours. Hence why if I did it again, I would start with much smaller design to get to the goal.<br>I haven't seen anyone's projects yet try this approach, would be really cool to see if it can work. <img src="//community.axoloti.com/images/emoji/twitter/yum.png?v=5" title=":yum:" class="emoji" alt=":yum:"></p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/18">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/18</link>
        <pubDate>Tue, 31 Oct 2017 00:01:53 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3884-18</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884.rss">Hardware interface concept question</source>
      </item>
      <item>
        <title>Hardware interface concept question</title>
        <dc:creator><![CDATA[@MC_DETH]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/mc_deth">@MC_DETH</a> wrote:</p>
          <blockquote>
              <p>I suspect its a hardware issue, going to look into it  later this week.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/17">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/17</link>
        <pubDate>Mon, 30 Oct 2017 22:02:41 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3884-17</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884.rss">Hardware interface concept question</source>
      </item>
      <item>
        <title>Hardware interface concept question</title>
        <dc:creator><![CDATA[@brasso Marc Brassé]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/brasso">@brasso</a> wrote:</p>
          <blockquote>
              <p><img src="//community.axoloti.com/images/emoji/twitter/thinking.png?v=5" title=":thinking:" class="emoji" alt=":thinking:"></p>

<p>Hm,  as already mentioned I expect a practical limit depending on how much you can / want to set aside for such functions without taking too much proccesing power away from the really important things (like actually making musical noises). That only so few numbers can be processed does however surprise me. When managing a model Axoloti must be doing loads of such stuff in the background anyway.</p>

<p>Marc</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/16">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/16</link>
        <pubDate>Mon, 30 Oct 2017 21:55:14 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3884-16</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884.rss">Hardware interface concept question</source>
      </item>
      <item>
        <title>Hardware interface concept question</title>
        <dc:creator><![CDATA[@Gavin Gavin]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/gavin">@Gavin</a> wrote:</p>
          <blockquote>
              <p><a class="mention" href="/u/mc_deth">@MC_DETH</a>, I have never seen the behavior you describe.<br>Have you checked how its all connected ?</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/15">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/15</link>
        <pubDate>Mon, 30 Oct 2017 21:45:13 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3884-15</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884.rss">Hardware interface concept question</source>
      </item>
      <item>
        <title>Hardware interface concept question</title>
        <dc:creator><![CDATA[@Gavin Gavin]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/gavin">@Gavin</a> wrote:</p>
          <blockquote>
              <p><a class="mention" href="/u/brasso">@brasso</a>,<br>Its good to see you understand what you want, every ones needs are different....<br>I would strongly recommend you begin small, maybe 2 digital and 3 analog, so you can develop your proof of concept, and design it in a way so you can expand it as it all comes together and at that point deal with the Axo's limits. <br>I have ran into issues where I have asked too much of the Axo to drive controls, it was 32 selectable values using mux's, my goal was to get to 64, I found with the object setup I had, I would have to settle with 20 at the most, and this was without considering the size of patches likely to be used. So I ditched it and went with homebuilt midi controller.<img src="//community.axoloti.com/images/emoji/twitter/grinning.png?v=5" title=":grinning:" class="emoji" alt=":grinning:"></p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/14">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/14</link>
        <pubDate>Mon, 30 Oct 2017 21:44:00 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3884-14</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884.rss">Hardware interface concept question</source>
      </item>
      <item>
        <title>Hardware interface concept question</title>
        <dc:creator><![CDATA[@brasso Marc Brassé]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/brasso">@brasso</a> wrote:</p>
          <blockquote>
              <p>Dear MC,</p>

<p>Nothing wrong with this! So if preset management is important to you why not go for it? You could actually start up an additional thread to discuss this idea more widely.</p>

<p>For me personally it however is a less emmediate concern. </p>

<p>Marc</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/13">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/13</link>
        <pubDate>Mon, 30 Oct 2017 12:24:52 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3884-13</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884.rss">Hardware interface concept question</source>
      </item>
      <item>
        <title>Hardware interface concept question</title>
        <dc:creator><![CDATA[@brasso Marc Brassé]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/brasso">@brasso</a> wrote:</p>
          <blockquote>
              <p>Hi guys,</p>

<p>Great to see you become so enthousiastic so quickly.<img src="//community.axoloti.com/images/emoji/twitter/grin.png?v=5" title=":grin:" class="emoji" alt=":grin:"></p>

<p>However: As happens so often in these hallowed halls a simple question starts to move in all sorts of hardly expected directions as soon as one posts it. So I do fear that it is already time to drag you back to the concepetual phase first, even if some of you might only go there screaming and lkicking.</p>

<p>I do not have anything against digital input devices, such as rotary encoders (with or without led rims) but please consider this:</p>

<p>If we look at the Axoloti in isolation we only have 5 available digital in/outputs. Working with 5 rotary encoders will quickly lead to the old mistake of trying to see the whole house through a letterbox. Every time you want to get aquiainted with any of the houses occupants or objects they will first have to be placed in front of the, all too tiny letterbox. This is actually what made most early digital synths difficult to stomage. The Yamaha DX 7, which promissed to be able to do everyhting but was a pig to master, immediately springs to mind. Believe me, I've been there.<img src="//community.axoloti.com/images/emoji/twitter/disappointed.png?v=5" title=":disappointed:" class="emoji" alt=":disappointed:"></p>

<p>5 inputs are very meagre in that respect anyway. Such stuff only tends to work well if you add a display directly above the controllers reminding you of the present address of the inputs. But that display would need a digital output from the Axoliti itself, bringing the number of digital input controllers back to 4. Then you'd need one controller to actually select the submenu, bringing the number of menu data input channels back to 3. Etc.. See where I am going?  </p>

<p>Yep, I see 2 counter arguments coming anyway:</p>

<p>1 - MIDI can provide loads of control numbers and even work with data dumps. True, but the world is full of nifty and affordable MIDI control devices so why not buy one of them anyway.</p>

<p>OK, the best interface ever will never be marketed. So if that is your thing just go ahead an build a wall sized personal controller anyway. Been there as well.<img src="//community.axoloti.com/images/emoji/twitter/smiling_imp.png?v=5" title=":smiling_imp:" class="emoji" alt=":smiling_imp:"></p>

<p>I pesonally however have a clear reason to not go to MIDI. I am totally hooked on using polyphonic aftertouch and stuff. So MIDI already has enough trouble anaging pure musical input data when I am around. That alone will clutter up your MIDI data stream quickly enough and lead to all sorts of MIDI lag situations if you want to include a lot of addional traffic. So in that respect the direct in and outs of the Axoloti board are not only a bonus but can actually be a lifesaver.</p>

<p>2 - 5 rotary encoders could of course be used to work in conjunction with the analog inputs. So why not hook up all controls you want "permanent" acces to in your instrument to the analog inputs and add a small rotary coder matrix as an additional source for more esoteric parameters.. The rotary encoders could then provide an almost endless number of tiny submenus.</p>

<p>The disadvantage of that would however again be that one will loose oversight very quyickly. You'd again need lots of notes, overlay and spreadsheets to keep your mind from exploding. Thast is actually why I propased a "simple" 5 x 15 matrix. Anyhting more then that will be difficult to keep track of for mere mortals anyway.  </p>

<p>But even if you would personally be able to wrap your own mind around an even bigger matrix: Will the Axoloti itself then not become cluttered up with all the data management routines needed for such a (theoretically) limitless system?</p>

<p>As a samller expansion on my original pushbutton selction idea this could however still be viable</p>

<p>Wrapping things up: I do have no qualms with using digital input dervices but I'd prefer it if we, at least for now, concentrate on <strong>ergonimically viable direct Axoloti hardware controllers</strong>, which are as we have already established limited to 5 digital ports anyway. In my opinion that makes an analog / digital input hybrid unavoidable.</p>

<p>Cheers,</p>

<p>Marc</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/12">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/12</link>
        <pubDate>Mon, 30 Oct 2017 12:14:39 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3884-12</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884.rss">Hardware interface concept question</source>
      </item>
      <item>
        <title>Hardware interface concept question</title>
        <dc:creator><![CDATA[@MC_DETH]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/mc_deth">@MC_DETH</a> wrote:</p>
          <blockquote>
              <p>This is the concept (which still is a concept only, while I am slowly getting acquainted with basic patching). I am <br>Looking to create a four-step preset-saver/loader. I am trying to make this work through pressing combinations of three led-illuminated buttons and dialing a rotary encoder to select a load/store location. Added difficulty: I would like to be able to store presets relative to their patch. I.e. When using 'patch A'; all stores and loads automatically come from/go to a dedicated 'patch A' directory on the sd card.</p>

<p>The parameter controls are divided up into four groups of 8 potentiometers. Each group is indicated by one of the three button leds, except group 4 which is represented by all three leds lighting up. <br>When turning a pot, the corresponding button led (indicating group 1-4) lights up and the display briefly reads the pot number (01-28) after which its position value (1-64) shows on the display. <br>When a new preset is loaded, potentiometers that are out of sync remain unresponsive to dialing until their position is aligned to their individual preset value.</p>

<p>Save preset:<br>1. Keep button one pressed and briefly push button two.<br>2. Release button one.<br>Button two blinks.<br>Display blinks.<br>(To cancel, press button one. Buttons are back in current mode.)<br>3. Turn encoder dial to select storage bank (1-99) in directory. <br>4. Press button two to confirm.<br>Display stops blinking.<br>Buttons return to current mode.</p>

<p>To overwrite current preset, skip step 3</p>

<p>Load preset:<br>1. Keep button one pressed and briefly push button three.<br>2. Release button one.<br>Button three blinks.<br>Display blinks.<br>(To cancel, press button one. Buttons are back in current mode.)<br>3. Turn encoder to select load bank (1-99) in directory.<br>4. Press button three to confirm.<br>Display stops blinking.<br>Buttons and pots are in loaded preset mode.</p>

<p>To reload current preset, skip step 3.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/11">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/11</link>
        <pubDate>Mon, 30 Oct 2017 07:38:31 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3884-11</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884.rss">Hardware interface concept question</source>
      </item>
      <item>
        <title>Hardware interface concept question</title>
        <dc:creator><![CDATA[@MC_DETH]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/mc_deth">@MC_DETH</a> wrote:</p>
          <blockquote>
              <p>Hey <a class="mention" href="/u/brasso">@brasso</a>,<br>I am also looking to use the most basic version of preset recall through led light indication. I am basically looking to make this work using a rotary encoder and three led illuminated buttons, as my hardware enclosure is based on the layout of the xylobox by matthewcieplak: 24 pots, a two digit display, one encoder and three buttons with leds.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/10">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/10</link>
        <pubDate>Mon, 30 Oct 2017 07:35:22 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3884-10</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884.rss">Hardware interface concept question</source>
      </item>
      <item>
        <title>Hardware interface concept question</title>
        <dc:creator><![CDATA[@MC_DETH]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/mc_deth">@MC_DETH</a> wrote:</p>
          <blockquote>
              <p>Hi <a class="mention" href="/u/gavin">@Gavin</a> <br>I have been trying different things with your rotary encoder objects -a great addition to the library- and I ran into some unexpected behavior which I can't seem to figure out. The integer display object won't scale across the numeric values when I rotate the dial, but behaves jittery and jumpy; going back and forth between a few values only. It will jump to the maximum set value (e.g.64) and keeps jumping back and forth between the highest values when I move the encoder instead of moving back towards 0.<br>Same thing happens with the encoder patch <a class="mention" href="/u/matthewcieplak">@matthewcieplak</a> has posted on here. Have you come across this behavior?<br>Sebastian</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/9">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884/9</link>
        <pubDate>Mon, 30 Oct 2017 07:24:45 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-3884-9</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/hardware-interface-concept-question/3884.rss">Hardware interface concept question</source>
      </item>
  </channel>
</rss>
