<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>MIDI transpose patch example</title>
    <link>http://community.axoloti.com/t/midi-transpose-patch-example/1328</link>
    <description>Ok, so this is probably the most wasteful usage of an Axoloti, but I wanted to see how it would be to do some MIDI processing, as well as get some exercise in patches and object writing.

What I wanted is a MIDI transpose function that I can connect to any MIDI keyboard which will simply shift the MIDI notes up or down by octaves. As an added complexity, I want it to work even if the transpose button is pressed while notes are held down, so simply shifting the note number won&#39;t work. And I want it to work polyphonically too.

So to this avail I created a MIDI transpose object, which takes MIDI in data on any channel, transposes it by an amount governed by its input, and outputs it on the same channel.

In the patch, the transposition is controlled by using MIDI program change: MIDI program numbers 0,1,2,3,4,5,6,7 set the transposition to -4,-3-,2-,1,0,1,2 or 3 octaves, respectively. Actually, any group of divisible-by-8 program numbers achieve the same thing.

I noticed by the way, that the MIDI input objects such as midi/in/pgm have an internal channel attribute that is undefined, so they only react to channel 1 (I suppose undefined attributes default to 0), and the channel cannot be set. So currently, the patch only responds to program changes on channel 0 even though the actual transposition can take place on any channel.

A limitation currently with the transpose object is that it only functions correctly one a single channel at a time. It has an internal vector storing the transpositions at the time of the note on in order to retain that transposition for the subsequent note off, and all note on events regardless of channel are stored in the vector. To do this properly would require a multi-dimensional vector, but that would head up 16 times more memory too (ok, so it only ends up being about 2 kbytes in the end, but still...). Room for future improvement.

The sample-and-hold is there so that a new transposition is only performed when a program change is actually received; since the output from the midi/in/pgm object defaults to 0, that would give a start-up transposition of -4 octaves otherwise.

There&#39;s also the added bonus of the red led on the Axoloti board lighting up every time a note on is received. It&#39;s not part of the transpose function.

I wasn&#39;t sure where to put the transpose object definition (I&#39;m using version 1.0.6). It is currently in axoloti/objects/midi .

&lt;img src=&quot;/uploads/default/original/2X/1/14a0b37312f02196fc93c60dcc7a444a05cb89a0.jpg&quot; width=&quot;690&quot; height=&quot;393&quot;&gt;

&lt;a class=&quot;attachment&quot; href=&quot;/uploads/default/original/2X/9/960bfcc001096f1d6fc3d750e0226fa5979a5dff.axp&quot;&gt;miditranspose.axp&lt;/a&gt; (4.7 KB)

&lt;a class=&quot;attachment&quot; href=&quot;/uploads/default/original/2X/d/d07f271bf1bbe78e1c390ea2085b84a83793b267.axo&quot;&gt;transpose.axo&lt;/a&gt; (2.4 KB)</description>
    
    <lastBuildDate>Tue, 21 Mar 2017 13:39:56 +0000</lastBuildDate>
    <category>Patching</category>
    <atom:link href="https://sebiik.github.io/community.axoloti.com.backup/t/midi-transpose-patch-example/1328.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>MIDI transpose patch example</title>
        <dc:creator><![CDATA[@Doublecoolbossman Mike]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/doublecoolbossman">@Doublecoolbossman</a> wrote:</p>
          <blockquote>
              <p>D'oh! Thanks, I'll try it out with midi cc!</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/midi-transpose-patch-example/1328/12">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/midi-transpose-patch-example/1328/12</link>
        <pubDate>Tue, 21 Mar 2017 13:39:56 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1328-12</guid>
        <source url="http://community.axoloti.com/t/midi-transpose-patch-example/1328.rss">MIDI transpose patch example</source>
      </item>
      <item>
        <title>MIDI transpose patch example</title>
        <dc:creator><![CDATA[@thetechnobear Mark Harris]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/thetechnobear">@thetechnobear</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="10" data-topic="1328"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//community.axoloti.com/letter_avatar_proxy/v2/letter/d/bc79bd/40.png" class="avatar">Doublecoolbossman:</div>
<blockquote><p>Is there a way to convert a signal to program change (like there is with midi CC's) within the axoloti?</p></blockquote></aside>

<p>Im not quite sure what you mean really, you can use midi/in/cc in a same way as the example above instead of midi/in/pgm.... </p>

<aside class="quote" data-post="10" data-topic="1328"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//community.axoloti.com/letter_avatar_proxy/v2/letter/d/bc79bd/40.png" class="avatar">Doublecoolbossman:</div>
<blockquote><p>Id like to be able to transpose via push buttons into the gpios.</p></blockquote></aside>

<p>sure you can use gpio/in/digital</p>

<p>really it all comes down to what you want to do exactly, basically in a patch, if the input comes from midi or gpio, it all gets converted into the same data types, from which you can then add your own transpose logic. (which depends on your needs e.g. do you want a simple up/down 1 octave, or to be able to select octaves from a dial/pot etc )</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/midi-transpose-patch-example/1328/11">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/midi-transpose-patch-example/1328/11</link>
        <pubDate>Tue, 21 Mar 2017 12:35:33 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1328-11</guid>
        <source url="http://community.axoloti.com/t/midi-transpose-patch-example/1328.rss">MIDI transpose patch example</source>
      </item>
      <item>
        <title>MIDI transpose patch example</title>
        <dc:creator><![CDATA[@Doublecoolbossman Mike]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/doublecoolbossman">@Doublecoolbossman</a> wrote:</p>
          <blockquote>
              <p>Is there a way to convert a signal to program change (like there is with midi CC's) within the axoloti? I need a simple way to shift up and down octaves and I will be using a midi controller that doesn't send program change. Id like to be able to transpose via push buttons into the gpios.</p>

<p> I've thought about adding/subtracting constants (12) to the midi notes using flip/flops, vcas, and mixers, but if there is a more elegant way, I would prefer it.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/midi-transpose-patch-example/1328/10">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/midi-transpose-patch-example/1328/10</link>
        <pubDate>Tue, 21 Mar 2017 11:26:48 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1328-10</guid>
        <source url="http://community.axoloti.com/t/midi-transpose-patch-example/1328.rss">MIDI transpose patch example</source>
      </item>
      <item>
        <title>MIDI transpose patch example</title>
        <dc:creator><![CDATA[@ricard Ricard Wanderlof]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/ricard">@ricard</a> wrote:</p>
          <blockquote>
              <p>Ok, here's an updated version, which has a configurable midi/thru object so that it echos other MIDI messages than note on and off. I've also added an omni attribute to the midi/transpose and midi/thru objects so that they either operate on any MIDI channel, or the specific one set for the patch.</p>

<p>When I tried adding parameters I got an 'out of scope' error when referencing them in the MIDI code. What I seemed to need to do is have internal local variables to which I copy the parameter values in the k-rate code, which in turn are accessed by the MIDI code.</p>

<p>I've been toying with the idea of creating 'note on any' and 'note off any' objects, similar to 'cc any', which would allow me to do the MIDI processing in the actual patch and not inside an object. It would incur more latency though, as each step of processing would incur a k-rate sample time delay (which admittedly is only 333Âµs).</p>

<p><div class="lightbox-wrapper"><a data-download-href="//community.axoloti.com/uploads/default/b18423206a1e356d8a736ffa98e86f6c24a2dc45" href="//community.axoloti.com/uploads/default/original/2X/b/b18423206a1e356d8a736ffa98e86f6c24a2dc45.jpg" class="lightbox" title="miditranspose2.jpg"><img src="//community.axoloti.com/uploads/default/optimized/2X/b/b18423206a1e356d8a736ffa98e86f6c24a2dc45_1_690x399.jpg" width="690" height="399"><div class="meta">
<span class="filename">miditranspose2.jpg</span><span class="informations">1186x687 65.7 KB</span><span class="expand"></span>
</div></a></div><br><a class="attachment" href="//community.axoloti.com/uploads/default/original/2X/1/1e275cecd161a9ce5898df8271e7997c33f20f36.axp">miditranspose.axp</a> (5.6 KB) <a class="attachment" href="//community.axoloti.com/uploads/default/original/2X/2/27b4fd4af7a4162cf94f8fd6d56eaf896d5048aa.axo">transpose.axo</a> (2.7 KB) <a class="attachment" href="//community.axoloti.com/uploads/default/original/2X/6/6638b89426c96667609226233cb64148b6b37de4.axo">thru.axo</a> (3.6 KB)</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/midi-transpose-patch-example/1328/9">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/midi-transpose-patch-example/1328/9</link>
        <pubDate>Tue, 22 Mar 2016 05:35:25 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1328-9</guid>
        <source url="http://community.axoloti.com/t/midi-transpose-patch-example/1328.rss">MIDI transpose patch example</source>
      </item>
      <item>
        <title>MIDI transpose patch example</title>
        <dc:creator><![CDATA[@thetechnobear Mark Harris]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/thetechnobear">@thetechnobear</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="6" data-topic="1328"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//community.axoloti.com/user_avatar/community.axoloti.com/ricard/40/163_1.png" class="avatar">ricard:</div>
<blockquote><p>Can I set up an array in SDRAM using a C declaration with some qualifier of some sort, or does one need special functions for that?</p></blockquote></aside>

<p>yes, you can of course see this in the alloc table sdram object </p>

<pre><code>static int16_t _array[attr_poly][LENGTH] __attribute__ ((section (".sdram")));</code></pre>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/midi-transpose-patch-example/1328/8">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/midi-transpose-patch-example/1328/8</link>
        <pubDate>Mon, 21 Mar 2016 13:48:39 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1328-8</guid>
        <source url="http://community.axoloti.com/t/midi-transpose-patch-example/1328.rss">MIDI transpose patch example</source>
      </item>
      <item>
        <title>MIDI transpose patch example</title>
        <dc:creator><![CDATA[@keyman Antonio Machado]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/keyman">@keyman</a> wrote:</p>
          <blockquote>
              <p>Sdram 8Mb (is available for user applications)</p>

<aside class="quote" data-topic="613" data-slug="recording-audio-to-sdcard" data-post="14"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//community.axoloti.com/user_avatar/community.axoloti.com/johannes/40/8_1.png" class="avatar"><a href="//community.axoloti.com/t/recording-audio-to-sdcard/613/14">Recording audio to sdcard</a>
</div>
<blockquote><p>SDram is unrelated to SDcard. The only similarity is the SD letters.   Sdram  - is volatile storage (contents lost when you remove power) - allows random access (read a single sample from a given location)   Sdcard - non-volatile storage, preserves contents when you remove power, "flash" memory - only allows block access, can't just read a single sample but needs to setup a block transfer, which is extremely inefficient when only a single sample is needed.</p></blockquote></aside>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/midi-transpose-patch-example/1328/7">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/midi-transpose-patch-example/1328/7</link>
        <pubDate>Mon, 21 Mar 2016 11:57:23 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1328-7</guid>
        <source url="http://community.axoloti.com/t/midi-transpose-patch-example/1328.rss">MIDI transpose patch example</source>
      </item>
      <item>
        <title>MIDI transpose patch example</title>
        <dc:creator><![CDATA[@ricard Ricard Wanderlof]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/ricard">@ricard</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="5" data-topic="1328" data-full="true"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//community.axoloti.com/user_avatar/community.axoloti.com/thetechnobear/40/6_1.png" class="avatar">thetechnobear:</div>
<blockquote>
<p>no, thats not how it works...</p>
<p>attr_midichannel is replaced when the patch is compiled, and is set to the channel that is set in patch settings. (and 0 can = omni), the messages are then routed directly, no 'internal port'</p>
</blockquote></aside>

<p>Ok, thanks for clarifying that, I hadn't really noticed the MIDI channel settings in the settings window. It all makes more sense now, I was otherwise wondering why I didn't get an 'undefined variable' error when attr_midichannel was being referenced in the object but there was no definition for it.</p>

<p>However, I can't seem to set the midi channel to 0 for omni, and as the code is written it tests directly against attr_midichannel with no special case for 0.</p>

<aside class="quote" data-post="5" data-topic="1328" data-full="true"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//community.axoloti.com/user_avatar/community.axoloti.com/thetechnobear/40/6_1.png" class="avatar">thetechnobear:</div>
<blockquote><p>so the principle is, that it is the patch settings that determine the midi channel in use. (so yes there is an indication of which midi channels, its there!)<br>this way you can have an different sub patches set for different midi channels e.g. one for lead sound, another for bass another for drums etc.</p></blockquote></aside>

<p>Yes, that is really the way I was hoping it would work.<br></p>

<aside class="quote" data-post="5" data-topic="1328" data-full="true"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//community.axoloti.com/user_avatar/community.axoloti.com/thetechnobear/40/6_1.png" class="avatar">thetechnobear:</div>
<blockquote><p>my point was its could be a bit different in the top level patch , where you might want to deal with this differently, e.g. have some objects that were tied to a particular channel, without having to create a subpatch to do the filtering.</p></blockquote></aside>

<p>How about two different types if midi/input objects, one with a local channel selection and one using the global one? Or perhaps even better having a channel selector that by default is set to the special value 'patch', where it gets the setting from attr_midichannel. That way if you through up a midi input object, it by default just follows the patch settings, but you can always change it if you want.<br></p>

<aside class="quote" data-post="5" data-topic="1328" data-full="true"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//community.axoloti.com/user_avatar/community.axoloti.com/thetechnobear/40/6_1.png" class="avatar">thetechnobear:</div>
<blockquote><p>Id not like a global or even patch midi object, too easy for users to miss, and again, doesn't help when you want a single patch to handle multiple channels.</p></blockquote></aside>

<p>I agree, yes it's much better the way it is.<br></p>

<aside class="quote" data-post="5" data-topic="1328" data-full="true"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//community.axoloti.com/user_avatar/community.axoloti.com/thetechnobear/40/6_1.png" class="avatar">thetechnobear:</div>
<blockquote><p>was just a suggestions vs. what seemed a pretty large memory usage, which is going to me mainly filled with zeros <img src="/images/emoji/emoji_one/wink.png?v=0" title=":wink:" class="emoji" alt=":wink:"> <br>but hey, its your object, so your choice... you decide the 'constraints'.</p></blockquote></aside>

<p>After I wrote my reply I realized that the search would be done when a MIDI event occurs, not at the k-rate code so I guess it would not impact too much on the available DSP performance which was what I was getting at - but of course when something does happen it will take time at that particular point.<br></p>

<aside class="quote" data-post="5" data-topic="1328" data-full="true"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//community.axoloti.com/user_avatar/community.axoloti.com/thetechnobear/40/6_1.png" class="avatar">thetechnobear:</div>
<blockquote><p>you have plenty of memory as long as you use sdram tables. but of course the larger you make it, the less likely it is it can be used with other patches.</p></blockquote></aside>

<p>I suppose if I just declare an array it goes into the internal RAM of the STM32F427? That's why I was wondering if there's a rough idea of how much is actually available in this application.</p>

<p>Can I set up an array in SDRAM using a C declaration with some qualifier of some sort, or does one need special functions for that?</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/midi-transpose-patch-example/1328/6">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/midi-transpose-patch-example/1328/6</link>
        <pubDate>Mon, 21 Mar 2016 05:35:19 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1328-6</guid>
        <source url="http://community.axoloti.com/t/midi-transpose-patch-example/1328.rss">MIDI transpose patch example</source>
      </item>
      <item>
        <title>MIDI transpose patch example</title>
        <dc:creator><![CDATA[@thetechnobear Mark Harris]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/thetechnobear">@thetechnobear</a> wrote:</p>
          <blockquote>
              <p>no, thats not how it works...</p>

<p>attr_midichannel is replaced when the patch is compiled, and is set to the channel that is set in patch settings. (and 0 can = omni), the messages are then routed directly, no 'internal port'<br>so the principle is, that it is the patch settings that determine the midi channel in use. (so yes there is an indication of which midi channels, its there!)<br>this way you can have an different sub patches set for different midi channels e.g. one for lead sound, another for bass another for drums etc.</p>

<p>my point was its could be a bit different in the top level patch , where you might want to deal with this differently, e.g. have some objects that were tied to a particular channel, without having to create a subpatch to do the filtering.</p>

<p>Id not like a global or even patch midi object, too easy for users to miss, and again, doesn't help when you want a single patch to handle multiple channels.</p>

<p>its ok the way it is, I was trying to explain why it is as it is, and that its not hard coded to 1, as you said... and then got a bit side tracked.</p>

<p>touches vs notes, as with all things, you have to make design choices, there are always trade-offs.<br>was just a suggestions vs. what seemed a pretty large memory usage, which is going to me mainly filled with zeros <img src="/images/emoji/emoji_one/wink.png?v=0" title=":wink:" class="emoji" alt=":wink:"> <br>but hey, its your object, so your choice... you decide the 'constraints'.</p>

<p>you have plenty of memory as long as you use sdram tables. but of course the larger you make it, the less likely it is it can be used with other patches.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/midi-transpose-patch-example/1328/5">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/midi-transpose-patch-example/1328/5</link>
        <pubDate>Mon, 21 Mar 2016 00:25:01 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1328-5</guid>
        <source url="http://community.axoloti.com/t/midi-transpose-patch-example/1328.rss">MIDI transpose patch example</source>
      </item>
      <item>
        <title>MIDI transpose patch example</title>
        <dc:creator><![CDATA[@ricard Ricard Wanderlof]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/ricard">@ricard</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="2" data-topic="1328" data-full="true"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//community.axoloti.com/user_avatar/community.axoloti.com/thetechnobear/40/6_1.png" class="avatar">thetechnobear:</div>
<blockquote><p>yeah the thing is most of the time you want the midi in objects to be 'omni', to react to any channel, and then its the patch that restricts this down... but in the case of the top level patch, in particular, this is not always desirable.<br>actually I think, once in dev, I did put the channel selector on all in objects, but its was deemed as potentially confusing, a source for user bugs... perhaps we should review this again.</p></blockquote></aside>

<p>I'm not sure I follow you, do you mean that you'd have MIDI reception at a top level, and then transfer the data to subpatches using an internal MIDI port, or something like that?</p>

<p>Perhaps there could be a "global" MIDI channel object for the whole patch, and each MIDI input object could follow the global object, as it is likely that all MIDI input objects would respond to the same channel. If no global object were present, the inputs could default to omni.</p>

<p>As it is right now it is largely confusing, because there's no indication that there's any channel being selected, and it's hard coded to channel 1. Perhaps most people use channel 1 for the outputs from their master keyboards, so it doesn't really matter in most cases?</p>

<aside class="quote" data-post="2" data-topic="1328" data-full="true"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//community.axoloti.com/user_avatar/community.axoloti.com/thetechnobear/40/6_1.png" class="avatar">thetechnobear:</div>
<blockquote>
<aside class="quote" data-post="1" data-topic="1328"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//community.axoloti.com/user_avatar/community.axoloti.com/ricard/40/163_1.png" class="avatar">ricard:</div>
<blockquote><p>To do this properly would require a multi-dimensional vector, but that would head up 16 times more memory too</p></blockquote></aside><p>I think I would probably store active notes, i.e. if you have 5 notes held down, you only need an array with 5 elements, so number of channels becomes irrelevant.</p>
</blockquote></aside>

<p>You don't know beforehand how many simultaneous notes there will be held (although it's unlikely to be many more than the number of fingers for an average person! <img src="/images/emoji/emoji_one/smile.png?v=0" title=":smile:" class="emoji" alt=":smile:"> in theory it could be the number of available MIDI notes though), so you don't know how large to make the array, and also, that approach means you have to search through the list in order when receiving the note off. If the patch doesn't do much else it would be ok, but I think there's a point to keeping the CPU load as low as possible so I'd like to avoid searches whenever possible.</p>

<p>A relevant question is: roughly how much RAM is available for a patch for this type of data?</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/midi-transpose-patch-example/1328/4">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/midi-transpose-patch-example/1328/4</link>
        <pubDate>Sun, 20 Mar 2016 22:08:35 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1328-4</guid>
        <source url="http://community.axoloti.com/t/midi-transpose-patch-example/1328.rss">MIDI transpose patch example</source>
      </item>
      <item>
        <title>MIDI transpose patch example</title>
        <dc:creator><![CDATA[@keyman Antonio Machado]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/keyman">@keyman</a> wrote:</p>
          <blockquote>
              <p>Not much to add as i'm with thetechnobear opinion; it works great!<br>Nice to have along a Controller object? but for me this would have to be addressed to CC number, leaving PGM for patch change <img src="/images/emoji/emoji_one/wink.png?v=0" title=":wink:" class="emoji" alt=":wink:"> easy to change?</p>

<p>Just end to say you can be part of :<br><a href="//community.axoloti.com/c/community-library" class="onebox" target="_blank">http://community.axoloti.com/c/community-library</a></p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/midi-transpose-patch-example/1328/3">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/midi-transpose-patch-example/1328/3</link>
        <pubDate>Sun, 20 Mar 2016 12:36:28 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1328-3</guid>
        <source url="http://community.axoloti.com/t/midi-transpose-patch-example/1328.rss">MIDI transpose patch example</source>
      </item>
      <item>
        <title>MIDI transpose patch example</title>
        <dc:creator><![CDATA[@thetechnobear Mark Harris]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/thetechnobear">@thetechnobear</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="1" data-topic="1328"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//community.axoloti.com/user_avatar/community.axoloti.com/ricard/40/163_1.png" class="avatar">ricard:</div>
<blockquote><p>Ok, so this is probably the most wasteful usage of an Axoloti,</p></blockquote></aside>

<p>Oh, Id not say its a waste of Axoloti resources, to the contrary I think of axoloti as a swiss army knife, you can use  it for all sorts of things, sometimes simultaneous, sometimes just for a particular use.<br>(its why its nice to a have more than one, means you just have a few blocks you can move around <img src="/images/emoji/emoji_one/smile.png?v=0" title=":smile:" class="emoji" alt=":smile:"> ) </p>

<aside class="quote" data-post="1" data-topic="1328"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//community.axoloti.com/user_avatar/community.axoloti.com/ricard/40/163_1.png" class="avatar">ricard:</div>
<blockquote><p>I noticed by the way, that the MIDI input objects such as midi/in/pgm have an internal channel attribute that is undefined,</p></blockquote></aside>

<p>yeah the thing is most of the time you want the midi in objects to be 'omni', to react to any channel, and then its the patch that restricts this down... but in the case of the top level patch, in particular, this is not always desirable.<br>actually I think, once in dev, I did put the channel selector on all in objects, but its was deemed as potentially confusing, a source for user bugs... perhaps we should review this again.</p>

<aside class="quote" data-post="1" data-topic="1328"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//community.axoloti.com/user_avatar/community.axoloti.com/ricard/40/163_1.png" class="avatar">ricard:</div>
<blockquote><p>To do this properly would require a multi-dimensional vector, but that would head up 16 times more memory too</p></blockquote></aside>

<p>I think I would probably store active notes, i.e. if you have 5 notes held down, you only need an array with 5 elements, so number of channels becomes irrelevant.</p>

<aside class="quote" data-post="1" data-topic="1328"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//community.axoloti.com/user_avatar/community.axoloti.com/ricard/40/163_1.png" class="avatar">ricard:</div>
<blockquote><p>There's also the added bonus of the red led on the Axoloti board lighting up every time a note on is received. It's not part of the transpose function.</p></blockquote></aside>

<p>this is cool, actually Ive been meaning to just put a controller script together to flash this LED on any midi activity, its so handy knowing when there is midi being received <img src="/images/emoji/emoji_one/smile.png?v=0" title=":smile:" class="emoji" alt=":smile:"></p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/midi-transpose-patch-example/1328/2">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/midi-transpose-patch-example/1328/2</link>
        <pubDate>Sun, 20 Mar 2016 12:15:52 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1328-2</guid>
        <source url="http://community.axoloti.com/t/midi-transpose-patch-example/1328.rss">MIDI transpose patch example</source>
      </item>
      <item>
        <title>MIDI transpose patch example</title>
        <dc:creator><![CDATA[@ricard Ricard Wanderlof]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/ricard">@ricard</a> wrote:</p>
          <blockquote>
              <p>Ok, so this is probably the most wasteful usage of an Axoloti, but I wanted to see how it would be to do some MIDI processing, as well as get some exercise in patches and object writing.</p>

<p>What I wanted is a MIDI transpose function that I can connect to any MIDI keyboard which will simply shift the MIDI notes up or down by octaves. As an added complexity, I want it to work even if the transpose button is pressed while notes are held down, so simply shifting the note number won't work. And I want it to work polyphonically too.</p>

<p>So to this avail I created a MIDI transpose object, which takes MIDI in data on any channel, transposes it by an amount governed by its input, and outputs it on the same channel.</p>

<p>In the patch, the transposition is controlled by using MIDI program change: MIDI program numbers 0,1,2,3,4,5,6,7 set the transposition to -4,-3-,2-,1,0,1,2 or 3 octaves, respectively. Actually, any group of divisible-by-8 program numbers achieve the same thing.</p>

<p>I noticed by the way, that the MIDI input objects such as midi/in/pgm have an internal channel attribute that is undefined, so they only react to channel 1 (I suppose undefined attributes default to 0), and the channel cannot be set. So currently, the patch only responds to program changes on channel 0 even though the actual transposition can take place on any channel.</p>

<p>A limitation currently with the transpose object is that it only functions correctly one a single channel at a time. It has an internal vector storing the transpositions at the time of the note on in order to retain that transposition for the subsequent note off, and all note on events regardless of channel are stored in the vector. To do this properly would require a multi-dimensional vector, but that would head up 16 times more memory too (ok, so it only ends up being about 2 kbytes in the end, but still...). Room for future improvement.</p>

<p>The sample-and-hold is there so that a new transposition is only performed when a program change is actually received; since the output from the midi/in/pgm object defaults to 0, that would give a start-up transposition of -4 octaves otherwise.</p>

<p>There's also the added bonus of the red led on the Axoloti board lighting up every time a note on is received. It's not part of the transpose function.</p>

<p>I wasn't sure where to put the transpose object definition (I'm using version 1.0.6). It is currently in axoloti/objects/midi .</p>

<p><div class="lightbox-wrapper"><a data-download-href="//community.axoloti.com/uploads/default/14a0b37312f02196fc93c60dcc7a444a05cb89a0" href="//community.axoloti.com/uploads/default/original/2X/1/14a0b37312f02196fc93c60dcc7a444a05cb89a0.jpg" class="lightbox" title="miditranspose.jpg"><img src="//community.axoloti.com/uploads/default/optimized/2X/1/14a0b37312f02196fc93c60dcc7a444a05cb89a0_1_690x393.jpg" width="690" height="393"><div class="meta">
<span class="filename">miditranspose.jpg</span><span class="informations">1182x674 61.3 KB</span><span class="expand"></span>
</div></a></div></p>

<p><a class="attachment" href="//community.axoloti.com/uploads/default/original/2X/9/960bfcc001096f1d6fc3d750e0226fa5979a5dff.axp">miditranspose.axp</a> (4.7 KB)</p>

<p><a class="attachment" href="//community.axoloti.com/uploads/default/original/2X/d/d07f271bf1bbe78e1c390ea2085b84a83793b267.axo">transpose.axo</a> (2.4 KB)</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/midi-transpose-patch-example/1328/1">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/midi-transpose-patch-example/1328/1</link>
        <pubDate>Sat, 19 Mar 2016 23:03:13 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1328-1</guid>
        <source url="http://community.axoloti.com/t/midi-transpose-patch-example/1328.rss">MIDI transpose patch example</source>
      </item>
  </channel>
</rss>
