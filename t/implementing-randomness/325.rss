<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Implementing randomness</title>
    <link>http://community.axoloti.com/t/implementing-randomness/325</link>
    <description>Hi all

I&#39;m trying to alter the adsr object in a way that all parameters can be altered by a random generator. Not just modulated, but fully randomized. Like the random function used in Crystal VST synth. It can be done via MIDI, but for learning purposes I&#39;m trying it to achieve via altering the object. But I&#39;m stuck now. For instance, if I want to let release value (param_r in code) be dependent of inlet_r (extra frac32 inlet), the mapping between input value (-64-&gt;64) and release value is not ok. Can this be achieved this way? Or am I missing something basic here and are there other ways of fully manipulating the parameters by external input (not MIDI)?

Thanks for the help!

BTW: axoloti&#39;s being really quite addictive....</description>
    
    <lastBuildDate>Wed, 26 Aug 2015 21:37:23 +0000</lastBuildDate>
    <category>Software</category>
    <atom:link href="http://community.axoloti.com/t/implementing-randomness/325.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Implementing randomness</title>
        <dc:creator><![CDATA[@johannes johannes]]></dc:creator>
        <description><![CDATA[
          <p><a href="http://community.axoloti.com/u/johannes">@johannes</a> wrote:</p>
          <blockquote>
              <p>Some parameter types (for example those used on the adsr envelope) have a remapping between parameter value shown in the GUI and the value in the dsp code ("pfunction"). For instance from logarithmic scaling to linear scaling.<br>This enables moving some computations out of the dsp-code, increasing efficiency. But also assumes parameters are changing less frequently than control rate.</p>

<p>Manipulating parameters without creating an custom object variant: check objects/patch/modulator.axh</p>
          </blockquote>
          <p><a href="http://community.axoloti.com/t/implementing-randomness/325/2">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/implementing-randomness/325/2</link>
        <pubDate>Wed, 26 Aug 2015 21:37:23 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-325-2</guid>
        <source url="http://community.axoloti.com/t/implementing-randomness/325.rss">Implementing randomness</source>
      </item>
      <item>
        <title>Implementing randomness</title>
        <dc:creator><![CDATA[@WimRoose]]></dc:creator>
        <description><![CDATA[
          <p><a href="http://community.axoloti.com/u/wimroose">@WimRoose</a> wrote:</p>
          <blockquote>
              <p>Hi all</p>

<p>I'm trying to alter the adsr object in a way that all parameters can be altered by a random generator. Not just modulated, but fully randomized. Like the random function used in Crystal VST synth. It can be done via MIDI, but for learning purposes I'm trying it to achieve via altering the object. But I'm stuck now. For instance, if I want to let release value (param_r in code) be dependent of inlet_r (extra frac32 inlet), the mapping between input value (-64-&gt;64) and release value is not ok. Can this be achieved this way? Or am I missing something basic here and are there other ways of fully manipulating the parameters by external input (not MIDI)?</p>

<p>Thanks for the help!</p>

<p>BTW: axoloti's being really quite addictive....</p>
          </blockquote>
          <p><a href="http://community.axoloti.com/t/implementing-randomness/325/1">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/implementing-randomness/325/1</link>
        <pubDate>Wed, 26 Aug 2015 06:23:01 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-325-1</guid>
        <source url="http://community.axoloti.com/t/implementing-randomness/325.rss">Implementing randomness</source>
      </item>
  </channel>
</rss>
