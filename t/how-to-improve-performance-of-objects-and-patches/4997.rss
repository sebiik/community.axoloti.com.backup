<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>How to improve performance of objects and patches</title>
    <link>http://community.axoloti.com/t/how-to-improve-performance-of-objects-and-patches/4997</link>
    <description>Hey there, 
I am trying io improve the performance of my polyphonic synthesizer project which is full of customized objects...
I wonder what is worth a try to improve the performance. I used many uint8_t types of variables to store ccNumbers and all midi data, I also used uint8_t for every iterator variable which is in that range. 
The next thing is that I have many shifts to get the 8bit midi integer to 32bit value:
&lt;CODE&gt;
octaveFaderValue = attr_synthControlTable.array[attr_ref.PARAMS-&gt;source1Octave.tIndex];
		level = attr_synthControlTable.array[attr_ref.PARAMS-&gt;source5Level.tIndex] &lt;&lt; (27-7);
		tune = attr_synthControlTable.array[attr_ref.PARAMS-&gt;source1Tune.tIndex] &lt;&lt; (27-7);
		attack = (attr_synthControlTable.array[attr_ref.PARAMS-&gt;source5Attack.tIndex] &lt;&lt; (27-7)) - (1&lt;&lt;26)&lt;&lt;1;
		decay = (attr_synthControlTable.array[attr_ref.PARAMS-&gt;source5Decay.tIndex] &lt;&lt; (27-7)) - (1&lt;&lt;26)&lt;&lt;1;
		sustain = attr_synthControlTable.array[attr_ref.PARAMS-&gt;source5Sustain.tIndex] &lt;&lt; (27-7);
		glideTime = (attr_synthControlTable.array[attr_ref.PARAMS-&gt;source1GlideTime.tIndex] &lt;&lt; (27-7)) - (1&lt;&lt;26)&lt;&lt;1;
		glideOffset = ((attr_synthControlTable.array[attr_ref.PARAMS-&gt;source1GlideOffset.tIndex] &lt;&lt; (27-7)) - (1&lt;&lt;26)&lt;&lt;1);
&lt;/CODE&gt;
I also have many math utitlity objects combined to control modulation sources for filter vca and so on.

What do think is worth the effort to increase performance ?
This is the patch at the moment (it is work in progress)
&lt;a class=&quot;attachment&quot; href=&quot;/uploads/default/original/2X/f/f33a68ca1c390d13f40da9c369f0f395996d90fb.axp&quot;&gt;controller30.axp&lt;/a&gt; (203.9 KB)

-Flub</description>
    
    <lastBuildDate>Sun, 30 Sep 2018 18:04:11 +0000</lastBuildDate>
    <category>AxoObject coding</category>
    <atom:link href="https://sebiik.github.io/community.axoloti.com.backup/t/how-to-improve-performance-of-objects-and-patches/4997.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>How to improve performance of objects and patches</title>
        <dc:creator><![CDATA[@Flub Flo]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/flub">@Flub</a> wrote:</p>
          <blockquote>
              <p>I will check this tomorrow but i actually dont know how to see the sram consumption. Does the sram consumption really affect the performance of the patch?</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/how-to-improve-performance-of-objects-and-patches/4997/3">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/how-to-improve-performance-of-objects-and-patches/4997/3</link>
        <pubDate>Sun, 30 Sep 2018 18:04:11 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-4997-3</guid>
        <source url="http://community.axoloti.com/t/how-to-improve-performance-of-objects-and-patches/4997.rss">How to improve performance of objects and patches</source>
      </item>
      <item>
        <title>How to improve performance of objects and patches</title>
        <dc:creator><![CDATA[@Captain_Burek Daniel BÃ¼ring]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/captain_burek">@Captain_Burek</a> wrote:</p>
          <blockquote>
              <p>About the variable type (8bit vs. 16 etc), maybe <a href="//community.axoloti.com/t/variable-types-their-range-their-sram-consumption/4941">http://community.axoloti.com/t/variable-types-their-range-their-sram-consumption/4941</a> will be useful.</p>

<p>Have you checked whether using send/receive objects uses more sram than using cables?</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/how-to-improve-performance-of-objects-and-patches/4997/2">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/how-to-improve-performance-of-objects-and-patches/4997/2</link>
        <pubDate>Sun, 30 Sep 2018 13:13:10 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-4997-2</guid>
        <source url="http://community.axoloti.com/t/how-to-improve-performance-of-objects-and-patches/4997.rss">How to improve performance of objects and patches</source>
      </item>
      <item>
        <title>How to improve performance of objects and patches</title>
        <dc:creator><![CDATA[@Flub Flo]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/flub">@Flub</a> wrote:</p>
          <blockquote>
              <p>Hey there, <br>I am trying io improve the performance of my polyphonic synthesizer project which is full of customized objects...<br>I wonder what is worth a try to improve the performance. I used many uint8_t types of variables to store ccNumbers and all midi data, I also used uint8_t for every iterator variable which is in that range. <br>The next thing is that I have many shifts to get the 8bit midi integer to 32bit value:<br><code><br>octaveFaderValue = attr_synthControlTable.array[attr_ref.PARAMS-&gt;source1Octave.tIndex];<br>		level = attr_synthControlTable.array[attr_ref.PARAMS-&gt;source5Level.tIndex] &lt;&lt; (27-7);<br>		tune = attr_synthControlTable.array[attr_ref.PARAMS-&gt;source1Tune.tIndex] &lt;&lt; (27-7);<br>		attack = (attr_synthControlTable.array[attr_ref.PARAMS-&gt;source5Attack.tIndex] &lt;&lt; (27-7)) - (1&lt;&lt;26)&lt;&lt;1;<br>		decay = (attr_synthControlTable.array[attr_ref.PARAMS-&gt;source5Decay.tIndex] &lt;&lt; (27-7)) - (1&lt;&lt;26)&lt;&lt;1;<br>		sustain = attr_synthControlTable.array[attr_ref.PARAMS-&gt;source5Sustain.tIndex] &lt;&lt; (27-7);<br>		glideTime = (attr_synthControlTable.array[attr_ref.PARAMS-&gt;source1GlideTime.tIndex] &lt;&lt; (27-7)) - (1&lt;&lt;26)&lt;&lt;1;<br>		glideOffset = ((attr_synthControlTable.array[attr_ref.PARAMS-&gt;source1GlideOffset.tIndex] &lt;&lt; (27-7)) - (1&lt;&lt;26)&lt;&lt;1);<br></code><br>I also have many math utitlity objects combined to control modulation sources for filter vca and so on.</p>

<p>What do think is worth the effort to increase performance ?<br>This is the patch at the moment (it is work in progress)<br><a class="attachment" href="//community.axoloti.com/uploads/default/original/2X/f/f33a68ca1c390d13f40da9c369f0f395996d90fb.axp">controller30.axp</a> (203.9 KB)</p>

<p>-Flub</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/how-to-improve-performance-of-objects-and-patches/4997/1">Read full topic</a></p>
        ]]></description>
        <link>http://community.axoloti.com/t/how-to-improve-performance-of-objects-and-patches/4997/1</link>
        <pubDate>Sat, 29 Sep 2018 13:34:55 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-4997-1</guid>
        <source url="http://community.axoloti.com/t/how-to-improve-performance-of-objects-and-patches/4997.rss">How to improve performance of objects and patches</source>
      </item>
  </channel>
</rss>
