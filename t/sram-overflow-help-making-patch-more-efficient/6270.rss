<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>SRAM overflow: help making patch more efficient</title>
    <link>https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270</link>
    <description>Hi again. 

I&#39;ve hit a brick wall with the development of my first Axoloti project. I need your expert help.

I was just adding the finishing touches to my patch: a mod matrix. But have now run out of ram. 

The mod matrix is essential to the design of my synth, so it would be great to get this going. 

`SRAM&#39; overflowed by 38504 bytes
`CCMSRAM&#39; overflowed by 26400 bytes

that&#39;s a lot!

my mod matrix is rather large, if I remove it the patch runs... I just can&#39;t map any of my modulation points. 

Since it is an MPE synth, a lot of the mod targets are inside the voice subpatch. The way it works is I have &quot;modreceive&quot; supbatch for each modulation target inside my voice subpatch. Each of these modreceive subpatches receives ALL the mod sources, and these get multiplied together in the interface-specified amounts in order to produce one grand total mod amount for each target. 

This is obviously very costly, but I&#39;m not sure how else to implement it. 
Perhaps it would be more efficient if I could hard code a modreceive object? 

Any help, tips, concepts or strategies would be appreciated.</description>
    
    <lastBuildDate>Thu, 19 Dec 2019 13:12:57 +0000</lastBuildDate>
    <category>Patching</category>
    <atom:link href="https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>SRAM overflow: help making patch more efficient</title>
        <dc:creator><![CDATA[@Ke10g]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/ke10g">@Ke10g</a> wrote:</p>
          <blockquote>
              <p>So I've implemented the mod matrix with tables. Right now there is a table for each source that contains the amounts of mod applied to each of the targets. Next I'll implement a table for the modulation sources. </p>

<p><div class="lightbox-wrapper"><a data-download-href="//community.axoloti.com/uploads/default/d448bbf804e8af36b140764a86aa92ab2f67a333" href="//community.axoloti.com/uploads/default/original/2X/d/d448bbf804e8af36b140764a86aa92ab2f67a333.png" class="lightbox" title="image.png"><img src="//community.axoloti.com/uploads/default/optimized/2X/d/d448bbf804e8af36b140764a86aa92ab2f67a333_1_690x314.png" width="690" height="314"><div class="meta">
<span class="filename">image.png</span><span class="informations">958x437 71.4 KB</span><span class="expand"></span>
</div></a></div><br><div class="lightbox-wrapper"><a data-download-href="//community.axoloti.com/uploads/default/3860124a4c9a004957e2219b66ba32619d378ab7" href="//community.axoloti.com/uploads/default/original/2X/3/3860124a4c9a004957e2219b66ba32619d378ab7.png" class="lightbox" title="image.png"><img src="//community.axoloti.com/uploads/default/optimized/2X/3/3860124a4c9a004957e2219b66ba32619d378ab7_1_690x462.png" width="690" height="462"><div class="meta">
<span class="filename">image.png</span><span class="informations">1142x766 90.9 KB</span><span class="expand"></span>
</div></a></div></p>

<p>The first image is how my interface distributes modulation amounts from sources to destinations. <br>The second is how these are received inside my voice subpatch. This is to be encapsulated into multiple "mod receive" subpatches inside my voice. </p>

<p>But I still need to figure out how to do this. Right now I can't read from a table two levels up (in the main patch) making it quite difficult to place everything in the voice supbatch. Can someone please indicate how this is done?</p>

<p>Also right now there is a fair amount of processing that happens within the mod receive subpatch. I would like suggestions on how to make it more efficient as I feel this still won't cut it, memory wise.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270/12">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270/12</link>
        <pubDate>Thu, 19 Dec 2019 13:07:24 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-6270-12</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270.rss">SRAM overflow: help making patch more efficient</source>
      </item>
      <item>
        <title>SRAM overflow: help making patch more efficient</title>
        <dc:creator><![CDATA[@Ke10g]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/ke10g">@Ke10g</a> wrote:</p>
          <blockquote>
              <p><a class="mention" href="/u/thetechnobear">@thetechnobear</a> Ok I'm getting there. But I'm having trouble accessing my tables from within a subpatch within my voice subpatch.</p>

<p>I know the that to read a table from the main patch in the subpatch, you address it with ../mytable</p>

<p>But what if rour tableread is two patch levels deep? <br>I tried ../../mytable but that doesn't work...</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270/11">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270/11</link>
        <pubDate>Thu, 19 Dec 2019 10:31:27 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-6270-11</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270.rss">SRAM overflow: help making patch more efficient</source>
      </item>
      <item>
        <title>SRAM overflow: help making patch more efficient</title>
        <dc:creator><![CDATA[@Ke10g]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/ke10g">@Ke10g</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="9" data-topic="6270"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//community.axoloti.com/user_avatar/community.axoloti.com/thetechnobear/40/6_1.png" class="avatar">thetechnobear:</div>
<blockquote><p>yes, use a table ….</p></blockquote></aside>

<p>That is an excellent idea!</p>

<p>I'll try this first thing tomorrow.</p>

<p>I don't know c++ but if it will allow me to finish this synth the way I want it, I'm willing to learn what I have to.</p>

<p>I'll try the table approach first and report back.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270/10">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270/10</link>
        <pubDate>Wed, 18 Dec 2019 22:32:48 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-6270-10</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270.rss">SRAM overflow: help making patch more efficient</source>
      </item>
      <item>
        <title>SRAM overflow: help making patch more efficient</title>
        <dc:creator><![CDATA[@thetechnobear Mark Harris]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/thetechnobear">@thetechnobear</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="6" data-topic="6270"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//community.axoloti.com/letter_avatar_proxy/v2/letter/k/e5b9ba/40.png" class="avatar">Ke10g:</div>
<blockquote><p>For instance: is there a way to have global variables that are exposed to all subpatch without the use of inlets and patch cords?</p></blockquote></aside>

<p>yes, use a table ….</p>

<p>ive done this a few times, think of the table as raw data, and you can use an offset via polyindex for voices. with a bit of thought, and design, tables can be used as a way to implement alternatives to lots of things</p>

<p>my personal approach is if things are getting too complex is to create a custom object in c++.</p>

<p>as <a class="mention" href="/u/jaffasplaffa">@jaffasplaffa</a> said, its often hard to generalise optimisation, since it its highly dependent on how you have patched things and what you are trying to achieve... and 'compromise' can sometimes be part of the solution, and that requires knowing whats the important or problematics parts are.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270/9">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270/9</link>
        <pubDate>Wed, 18 Dec 2019 21:11:20 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-6270-9</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270.rss">SRAM overflow: help making patch more efficient</source>
      </item>
      <item>
        <title>SRAM overflow: help making patch more efficient</title>
        <dc:creator><![CDATA[@Ke10g]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/ke10g">@Ke10g</a> wrote:</p>
          <blockquote>
              <p>OK I'll post some hing when I get home. Thanks for the help!</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270/8">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270/8</link>
        <pubDate>Wed, 18 Dec 2019 17:08:00 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-6270-8</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270.rss">SRAM overflow: help making patch more efficient</source>
      </item>
      <item>
        <title>SRAM overflow: help making patch more efficient</title>
        <dc:creator><![CDATA[@jaffasplaffa Mr. Grimm]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/jaffasplaffa">@jaffasplaffa</a> wrote:</p>
          <blockquote>
              <p>If you post the patch or at least  a screenshot, it's going to be a lot easier to see what you have done.</p>

<p>Without it's pretty much like shooting in the dark.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270/7">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270/7</link>
        <pubDate>Wed, 18 Dec 2019 16:58:41 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-6270-7</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270.rss">SRAM overflow: help making patch more efficient</source>
      </item>
      <item>
        <title>SRAM overflow: help making patch more efficient</title>
        <dc:creator><![CDATA[@Ke10g]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/ke10g">@Ke10g</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="5" data-topic="6270"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//community.axoloti.com/letter_avatar_proxy/v2/letter/m/e8c25b/40.png" class="avatar">MattilynMattroe:</div>
<blockquote><p>Also, maybe the patch is just too ambitious?</p></blockquote></aside>

<p>I hope not!</p>

<p>Yes I've read about these methods of optimization. I think I was pretty good at laying things out from left to right, top to bottom, but I'll go over it again and see what else I can do. </p>

<p>Also I've kept my LFOs outside the voice patch, but since it is mpe polyphonic, i have my envelopes and of course x, y, and z controls inside the voice. </p>

<aside class="quote" data-post="4" data-topic="6270"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//community.axoloti.com/user_avatar/community.axoloti.com/thetechnobear/40/6_1.png" class="avatar">thetechnobear:</div>
<blockquote><p>Axoloti is not like your desktop, its ram/cpu is limited, thats part of the fun, seeing how much we can squeeze out of a small/inexpensive thing.</p></blockquote></aside>

<p>I agree that this is part of the fun. And I like the challenge...</p>

<p>But I was hoping for more advanced ideas like perhaps another strategy for making a mod matrix that combines several sources to each target... </p>

<p>For instance: is there a way to have global variables that are exposed to all subpatch without the use of inlets and patch cords? Right now I'm using send and receives... </p>

<p>And perhaps it would be more efficient if my mod receive subpatch were replaced by a coded object doing the same thing? </p>

<p>Would love to hear your thoughts about other ways to approach this. I'm not giving up!<br>cheers! thanks for your help.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270/6">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270/6</link>
        <pubDate>Wed, 18 Dec 2019 16:53:31 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-6270-6</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270.rss">SRAM overflow: help making patch more efficient</source>
      </item>
      <item>
        <title>SRAM overflow: help making patch more efficient</title>
        <dc:creator><![CDATA[@MattilynMattroe]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/mattilynmattroe">@MattilynMattroe</a> wrote:</p>
          <blockquote>
              <p>EDIT - spent too long writing and technobear beat me too it!</p>

<p>Some things to think about with sram-</p>

<p>Execution order is important, especially for audio signals, make sure no output wires are going to objects above or directly to the left. </p>

<p>It can help to remove any unneeded inlets/dials from objects. It's coding, but pretty simple</p>

<p>Try alternative methods - I've found nearly everything can be implemented in different ways. There may be alternative ways of doing things in your patch, or alternative objects, that use less sram.</p>

<p>Changing the amount of voices in poly sub patches can help. Also, make sure anything that doesn't need to be polyphonic isn't in the subpatch. I.e. If you have an lfo in the subpatch there is an lfo per voice. So unless you need poly lfos, keep it out of the subpatch and feed it into an inlet. In my first patch I had a bunch of control scaling going on in the poly subpatch which overflowed sram, but I moved the scaling to the main patch and it was fine.</p>

<p>Also, maybe the patch is just too ambitious?</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270/5">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270/5</link>
        <pubDate>Wed, 18 Dec 2019 15:59:41 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-6270-5</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270.rss">SRAM overflow: help making patch more efficient</source>
      </item>
      <item>
        <title>SRAM overflow: help making patch more efficient</title>
        <dc:creator><![CDATA[@thetechnobear Mark Harris]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/thetechnobear">@thetechnobear</a> wrote:</p>
          <blockquote>
              <p>there are I think quite a few topics discussing this...<br>the one to start with is: <br><aside class="quote" data-post="1" data-topic="52">
  <div class="title">
    <div class="quote-controls"></div>
    <img alt="" width="20" height="20" src="/user_avatar/community.axoloti.com/thetechnobear/40/6_1.png" class="avatar">
    <a href="//community.axoloti.com/t/using-precious-resources/52?source_topic_id=6270" rel="nofollow noopener">Using precious resources</a> <a class="badge-wrapper  bullet" href="/c/user-guide"><span class="badge-category-bg" style="background-color: #3AB54A;"></span><span style="color: #FFFFFF;" class="badge-category clear-badge" title="This category contains posts to help users use Axoloti, a dynamic user guide.">User Guide</span></a>
  </div>
  <blockquote>
    Overview

The axoloti board is a powerful board, but like everything it has only a finite amount of memory and processing power. 

The good news is axoloti is also very flexible, so there are lots of ways to get to similar results! 

Here are some tips about how to best make use of the resources it has. 

General

Dont get too worried about 'optimisation' when creating a patch, its better to make it understandable and functioning initial - but try to keep it efficient as you build it. 

Keep it …
  </blockquote>
</aside>
</p>

<p>perhaps the tip that is least obvious, is making sure execution is done in the right order.<br>the reason is simply, if you do something that is required to be executed on the next cycle, <br>the the previous value is stored in ram..<br>on a large patch, thats not kept this in mind, this can add up really quickly</p>

<p>(also yes, modulation sources/targets and presets can eat memory fast - so minimise these) </p>

<p>generally with DSP (actually most coding <img src="//community.axoloti.com/images/emoji/twitter/wink.png?v=5" title=":wink:" class="emoji" alt=":wink:"> ) its best to try to keep in mind 'best practice' as you go along like those above, rather than trying to come back and fix things later.<br>ok, you do have to avoid premature optimisation... thats why i say best practices, rather than optimise as you go along.</p>

<p>of course, at the end of the day Axoloti is not like your desktop, its ram/cpu is limited, thats part of the fun, seeing how much we can squeeze out of a small/inexpensive thing.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270/4">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270/4</link>
        <pubDate>Wed, 18 Dec 2019 15:48:21 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-6270-4</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270.rss">SRAM overflow: help making patch more efficient</source>
      </item>
      <item>
        <title>SRAM overflow: help making patch more efficient</title>
        <dc:creator><![CDATA[@Ke10g]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/ke10g">@Ke10g</a> wrote:</p>
          <blockquote>
              <p>So I just passed all my tables to sd ram and it did not help much at all. I'm getting these numbers now:</p>

<p>`SRAM' overflowed by 37368 bytes</p>

<p>`CCMSRAM' overflowed by 25408 bytes</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270/3">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270/3</link>
        <pubDate>Wed, 18 Dec 2019 14:07:02 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-6270-3</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270.rss">SRAM overflow: help making patch more efficient</source>
      </item>
      <item>
        <title>SRAM overflow: help making patch more efficient</title>
        <dc:creator><![CDATA[@Ke10g]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/ke10g">@Ke10g</a> wrote:</p>
          <blockquote>
              <p>Another thing that is using up ram is the midi interface... I am using midi rotary encoders and led-lit buttons and changing the behavior of the interface in order to access every part of the synth. </p>

<p>I have 16b tables for recording the position of the encoders and these are currently in sram. I tried placing those tables in sdram, but that seemed to overload the dsp. I'll try again, and try to make the oscillators and effects more efficient, but I'm not sure even that would be enough.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270/2">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270/2</link>
        <pubDate>Wed, 18 Dec 2019 13:55:36 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-6270-2</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270.rss">SRAM overflow: help making patch more efficient</source>
      </item>
      <item>
        <title>SRAM overflow: help making patch more efficient</title>
        <dc:creator><![CDATA[@Ke10g]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/ke10g">@Ke10g</a> wrote:</p>
          <blockquote>
              <p>Hi again. </p>

<p>I've hit a brick wall with the development of my first Axoloti project. I need your expert help.</p>

<p>I was just adding the finishing touches to my patch: a mod matrix. But have now run out of ram. </p>

<p>The mod matrix is essential to the design of my synth, so it would be great to get this going. </p>

<p><code>SRAM' overflowed by 38504 bytes<br></code>CCMSRAM' overflowed by 26400 bytes</p>

<p>that's a lot!</p>

<p>my mod matrix is rather large, if I remove it the patch runs... I just can't map any of my modulation points. </p>

<p>Since it is an MPE synth, a lot of the mod targets are inside the voice subpatch. The way it works is I have "modreceive" supbatch for each modulation target inside my voice subpatch. Each of these modreceive subpatches receives ALL the mod sources, and these get multiplied together in the interface-specified amounts in order to produce one grand total mod amount for each target. </p>

<p>This is obviously very costly, but I'm not sure how else to implement it. <br>Perhaps it would be more efficient if I could hard code a modreceive object? </p>

<p>Any help, tips, concepts or strategies would be appreciated.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270/1">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270/1</link>
        <pubDate>Wed, 18 Dec 2019 13:50:37 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-6270-1</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/sram-overflow-help-making-patch-more-efficient/6270.rss">SRAM overflow: help making patch more efficient</source>
      </item>
  </channel>
</rss>
