<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Brickwall Oversampling Filter</title>
    <link>https://sebiik.github.io/community.axoloti.com.backup/t/brickwall-oversampling-filter/1647</link>
    <description>Excuse the naive question, but could anyone point me in the direction of a relatively simple filter function that could be applied to an oversampled oscillator before downsampling back to 48kHz?

a|x</description>
    
    <lastBuildDate>Fri, 06 May 2016 10:14:12 +0000</lastBuildDate>
    <category>AxoObject coding</category>
    <atom:link href="https://sebiik.github.io/community.axoloti.com.backup/t/brickwall-oversampling-filter/1647.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Brickwall Oversampling Filter</title>
        <dc:creator><![CDATA[@toneburst alx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/toneburst">@toneburst</a> wrote:</p>
          <blockquote>
              <p>Thank you very much, Johannes. I will do a bit of reading.</p>

<p>a|x</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/brickwall-oversampling-filter/1647/3">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/brickwall-oversampling-filter/1647/3</link>
        <pubDate>Fri, 06 May 2016 10:14:12 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1647-3</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/brickwall-oversampling-filter/1647.rss">Brickwall Oversampling Filter</source>
      </item>
      <item>
        <title>Brickwall Oversampling Filter</title>
        <dc:creator><![CDATA[@johannes johannes]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/johannes">@johannes</a> wrote:</p>
          <blockquote>
              <p>I think "Cascaded integrator comb" filters are a good candidate for oversampled oscillators, very efficient, but also quite cryptic, as they can only be implemented in integer math and make deliberate use of overflow.<br>Here's an implementation<br><aside class="onebox githubblob">
  <header class="source">
    <a href="https://github.com/cHemingway/CM4_CIC_Filter/blob/master/cic.c" rel="nofollow">
      
      github.com
    </a>
  </header>
  <article class="onebox-body">
    <h4><a href="https://github.com/cHemingway/CM4_CIC_Filter/blob/master/cic.c" target="_blank" rel="nofollow">cHemingway/CM4_CIC_Filter/blob/master/cic.c</a></h4>
<pre><code class="lang-c">#include "cic.h"
#include &lt;stddef.h&gt;
#include &lt;string.h&gt;


int cic_decimate_init_q15(cic_decimate_instance_q15 *S, uint16_t M, uint8_t N, q32_t *pState, uint32_t blockSize) {

	if((S==NULL) || (pState==NULL)) { /* Check for null pointers */
		return -1;
	}

	if (blockSize%M != 0) { /* Block size is not a multiple of M */
		return -1;
	}

	S-&gt;M = M;
	S-&gt;N = N;
	S-&gt;pState = pState;
	return 0; /* Success */
}
</code></pre>

  This file has been truncated. <a href="https://github.com/cHemingway/CM4_CIC_Filter/blob/master/cic.c" target="_blank" rel="nofollow">show original</a>

  </article>
  <div style="clear: both">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
<br>but I suggest reading some theory too before trying<br><a href="http://www.dspguru.com/sites/dspguru/files/cic.pdf" class="onebox" target="_blank" rel="nofollow">http://www.dspguru.com/sites/dspguru/files/cic.pdf</a><br>If you implement something, I'd suggest to validate it with a sine oscillator, and verify the stop-band attenuation.</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/brickwall-oversampling-filter/1647/2">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/brickwall-oversampling-filter/1647/2</link>
        <pubDate>Fri, 06 May 2016 09:29:03 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1647-2</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/brickwall-oversampling-filter/1647.rss">Brickwall Oversampling Filter</source>
      </item>
      <item>
        <title>Brickwall Oversampling Filter</title>
        <dc:creator><![CDATA[@toneburst alx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/toneburst">@toneburst</a> wrote:</p>
          <blockquote>
              <p>Excuse the naive question, but could anyone point me in the direction of a relatively simple filter function that could be applied to an oversampled oscillator before downsampling back to 48kHz?</p>

<p>a|x</p>
          </blockquote>
          <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/brickwall-oversampling-filter/1647/1">Read full topic</a></p>
        ]]></description>
        <link>https://sebiik.github.io/community.axoloti.com.backup/t/brickwall-oversampling-filter/1647/1</link>
        <pubDate>Fri, 06 May 2016 08:42:34 +0000</pubDate>
        <guid isPermaLink="false">community.axoloti.com-post-1647-1</guid>
        <source url="https://sebiik.github.io/community.axoloti.com.backup/t/brickwall-oversampling-filter/1647.rss">Brickwall Oversampling Filter</source>
      </item>
  </channel>
</rss>
