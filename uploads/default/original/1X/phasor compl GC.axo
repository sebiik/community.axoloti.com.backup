<objdefs>
   <obj.normal id="phasor compl GC" uuid="ddcfd58b5dcf986a1dc8ef5e1ca9cc7644d7ca84" sha="eb9b83bd331b440ea12fcf12a06975eed7b3ba8c">
    
      <sDescription>FM phasor
 0 and 180 degree outputs</sDescription>
      <author>Johannes Taelman</author>
      <license>BSD</license>
      <helpPatch>osc.axh</helpPatch>
      <inlets>
         <frac32 name="pitch" description="phase increment"/>
         <frac32buffer name="freq" description="phase increment"/>
		 <bool32.rising name="reset" description="reset phase"/>
      </inlets>
      <outlets>
         <frac32buffer.positive name="phasor0" description="phasor wave"/>
         <frac32buffer.positive name="phasor180" description="phasor wave, 180 degrees shifted"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map.pitch name="pitch" noLabel="true"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[uint32_t Phase; uint32_t r;]]></code.declaration>
      <code.init><![CDATA[Phase = 0; r = 1;]]></code.init>
      <code.krate><![CDATA[   uint32_t freq;
   MTOFEXTENDED(param_pitch + inlet_pitch,freq);
]]></code.krate>
      <code.srate><![CDATA[
	   {
      if (inlet_reset && r) {
         Phase = 0;
         r = 0;
      } else { 
	  if (!inlet_reset) r = 1;
	  Phase += (freq>>0) + inlet_freq;}
   outlet_phasor0 = Phase>>5;
   outlet_phasor180 = (Phase+(1<<31))>>5;
   }
]]></code.srate>
   </obj.normal>
</objdefs>