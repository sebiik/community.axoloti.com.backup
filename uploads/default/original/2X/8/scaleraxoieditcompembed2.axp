<patch-1.0 appVersion="1.0.8">
   <obj type="lfo/square" uuid="de6909eb64db13af5b43f979a4c130024b3a4793" name="square_1" x="0" y="0">
      <params>
         <frac32.s.map name="pitch" value="7.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="bool_3" x="98" y="0">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="d9f44795bfd6115f91bc84d9b38087afd0709f6e" name="Density" x="434" y="0">
      <params>
         <frac32.s.map name="prob" value="64.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="e5bf3953ead204874692af5d85c0e44a027g74f1a027g74f1">
         <sDescription>probabilty latch</sDescription>
         <author>Philoop</author>
         <license>BSD</license>
         <inlets>
            <int32 name="i"/>
            <bool32 name="g"/>
         </inlets>
         <outlets>
            <int32 name="o"/>
            <bool32 name="g"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map name="prob" noLabel="false"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t val;
int ntrig;
int rnd;
int bang;
int latch;
int mtrig;
int ptrig;
int pval;]]></code.declaration>
         <code.init><![CDATA[val = (int32_t)(GenerateRandomNumber())>>4;
      ntrig = 0;
      rnd = 0;
      bang = 1;
      latch = 0;
      ptrig = 0;
	  pval = 0;
	  mtrig = 0;
      ]]></code.init>
         <code.krate><![CDATA[// change
if ((pval != inlet_i)&(!ptrig)) { 
  pval = inlet_i;
  ptrig = 1;
} else {
  ptrig = 0;
} 
     //prob
if ((ptrig>0) && !ntrig) { val = (int32_t)(GenerateRandomNumber())>>4; ntrig=1;}
      else if (!(ptrig>0)) ntrig=0;
      rnd=val;
      rnd = param_prob>val ;
      bang =rnd>0?1:0;
      //latch
      if ((bang>0) && !mtrig) {latch = inlet_i; mtrig=1;}
      if (!(bang>0)) mtrig=0; 
outlet_o= (rnd>0)?inlet_i:latch;
outlet_g=(rnd>0)?inlet_g:0;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="d9f44795bfd6115f91bc84d9b38087afd0709f6e" name="rndstep_2" x="504" y="0">
      <params>
         <frac32.s.map name="prob" value="-63.0"/>
         <int32 name="max" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="4e2a1eb9aae14e9fa00cf31c3d0c6b1a0145b690">
         <sDescription>probabiltiy switch inlet i or rnd number i  </sDescription>
         <author>Philoop</author>
         <license>BSD</license>
         <inlets>
            <int32 name="i1"/>
         </inlets>
         <outlets>
            <int32 name="o"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map name="prob" noLabel="false"/>
            <int32 name="max" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="65536"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int ptrig;
int32_t pval;
int32_t val;
int ntrig;
int rnd;
int32_t vali;
int itrig;
]]></code.declaration>
         <code.init><![CDATA[val = (int32_t)(GenerateRandomNumber())>>4;
      ntrig = 0;
      rnd = 0;
      ptrig = 0;
      pval = 0;
]]></code.init>
         <code.krate><![CDATA[ if ((pval != inlet_i1)&(!ptrig)) { 
  pval = inlet_i1;
  ptrig = 1;  
} else {
  ptrig = 0;  
}

if ((ptrig>0) && !ntrig) { val = (int32_t)(GenerateRandomNumber())>>4; ntrig=1;}
      else if (!(ptrig>0)) ntrig=0;
      rnd=val;
      rnd = param_prob>val ;     
      outlet_o= rnd>0?vali:inlet_i1;
 
 if ((ptrig>0) && !itrig) {
      if (param_max) 
         vali = (int32_t)(GenerateRandomNumber()% (param_max));
      else vali = 0;
   
   }
   
   

 ]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="d9f44795bfd6115f91bc84d9b38087afd0709f6e" name="rndstep_1" x="574" y="0">
      <params>
         <frac32.s.map name="prob" value="-64.0"/>
         <int32 name="max" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="4e2a1eb9aae14e9fa00cf31c3d0c6b1a0145b690">
         <sDescription>probabiltiy switch inlet i or rnd number i  </sDescription>
         <author>Philoop</author>
         <license>BSD</license>
         <inlets>
            <int32 name="i1"/>
         </inlets>
         <outlets>
            <int32 name="o"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map name="prob" noLabel="false"/>
            <int32 name="max" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="65536"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int ptrig;
int32_t pval;
int32_t val;
int ntrig;
int rnd;
int32_t vali;
int itrig;
]]></code.declaration>
         <code.init><![CDATA[val = (int32_t)(GenerateRandomNumber())>>4;
      ntrig = 0;
      rnd = 0;
      ptrig = 0;
      pval = 0;
]]></code.init>
         <code.krate><![CDATA[ if ((pval != inlet_i1)&(!ptrig)) { 
  pval = inlet_i1;
  ptrig = 1;  
} else {
  ptrig = 0;  
}

if ((ptrig>0) && !ntrig) { val = (int32_t)(GenerateRandomNumber())>>4; ntrig=1;}
      else if (!(ptrig>0)) ntrig=0;
      rnd=val;
      rnd = param_prob>val ;     
      outlet_o= rnd>0?vali:inlet_i1;
 
 if ((ptrig>0) && !itrig) {
      if (param_max) 
         vali = (int32_t)(GenerateRandomNumber()% (param_max));
      else vali = 0;
   
   }
   
   

 ]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="d9f44795bfd6115f91bc84d9b38087afd0709f6e" name="note repeat" x="644" y="0">
      <params>
         <frac32.s.map name="prob" value="-64.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="e5bf3953ead204874692af5d85c0e44a027g74f1a027g74f1">
         <sDescription>probabilty latch</sDescription>
         <author>Philoop</author>
         <license>BSD</license>
         <inlets>
            <int32 name="i"/>
         </inlets>
         <outlets>
            <int32 name="o"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map name="prob" noLabel="false"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t val;
int ntrig;
int rnd;
int bang;
int latch;
int mtrig;
int ptrig;
int pval;]]></code.declaration>
         <code.init><![CDATA[val = (int32_t)(GenerateRandomNumber())>>4;
      ntrig = 0;
      rnd = 0;
      bang = 1;
      latch = 0;
      ptrig = 0;
	  pval = 0;
	  mtrig = 0;
      ]]></code.init>
         <code.krate><![CDATA[// change
if ((pval != inlet_i)&(!ptrig)) { 
  pval = inlet_i;
  ptrig = 1;
} else {
  ptrig = 0;
} 
     //prob
if ((ptrig>0) && !ntrig) { val = (int32_t)(GenerateRandomNumber())>>4; ntrig=1;}
      else if (!(ptrig>0)) ntrig=0;
      rnd=val;
      rnd = param_prob>val ;
      bang =rnd>0?1:0;
      //latch
      if ((bang>0) && !mtrig) {latch = inlet_i; mtrig=1;}
      if (!(bang>0)) mtrig=0; 
outlet_o= (rnd>0)?latch:inlet_i;
]]></code.krate>
      </object>
   </patchobj>
   <obj type="math/*c" uuid="7a66f52a9594e7e9eb31328ea725cb3641a80b55" name="volume" x="1484" y="28">
      <params>
         <frac32.u.map name="amp" value="55.0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="856" y="74" text=" mixers are 0 at 32  inv at 0 noninv at 64"/>
   <comment type="patch/comment" x="0" y="98" text="long quencer"/>
   <obj type="sel/sel dial 4" uuid="2bf0aa0779d8476013c6151d55fa9452b204d852" name="sel_1" x="0" y="112">
      <params>
         <frac32.u.map name="v0" value="24.5"/>
         <frac32.u.map name="v1" value="43.5"/>
         <frac32.u.map name="v2" value="10.0"/>
         <frac32.u.map name="v3" value="7.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="sel/sel dial 4" uuid="2bf0aa0779d8476013c6151d55fa9452b204d852" name="sel_2" x="84" y="112">
      <params>
         <frac32.u.map name="v0" value="11.0"/>
         <frac32.u.map name="v1" value="37.5"/>
         <frac32.u.map name="v2" value="49.0"/>
         <frac32.u.map name="v3" value="10.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="sel/sel dial 4" uuid="2bf0aa0779d8476013c6151d55fa9452b204d852" name="sel_3" x="168" y="112">
      <params>
         <frac32.u.map name="v0" value="48.5"/>
         <frac32.u.map name="v1" value="46.0"/>
         <frac32.u.map name="v2" value="13.0"/>
         <frac32.u.map name="v3" value="6.5"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="d9f44795bfd6115f91bc84d9b38087afd0709f6e" name="mix_1____tmp" x="266" y="112">
      <params>
         <frac32.u.map name="inv" value="31.0"/>
         <frac32.u.map name="inv1" value="21.0"/>
         <frac32.u.map name="inv2" value="53.5"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="f536e36a05a0083eea7de9aeb7c3e9444i3jgc8rc87">
         <sDescription>dual crossfade between inv/noniverted </sDescription>
         <author>Philoop</author>
         <license>BSD</license>
         <inlets>
            <frac32 name="i1" description="input"/>
            <frac32 name="i2" description="input"/>
            <frac32 name="i3" description="input"/>
         </inlets>
         <outlets>
            <frac32.bipolar name="o"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="inv" noLabel="false"/>
            <frac32.u.map name="inv1" noLabel="false"/>
            <frac32.u.map name="inv2" noLabel="false"/>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[   {
      int64_t a = (int64_t)inlet_i1 * param_inv;
      a -= (int64_t)inlet_i1 * ((128<<20)-param_inv);
	  int64_t b = (int64_t)inlet_i2 * param_inv1;
      b -= (int64_t)inlet_i1 * ((128<<20)-param_inv1); 
	   int64_t c = (int64_t)inlet_i3 * param_inv2;
      c -= (int64_t)inlet_i2 * ((128<<20)-param_inv2);
      a>>27;b>>27;c>>27;
	  outlet_o= (a>>27)+(b>>27)+(c>>27);
   }
]]></code.krate>
      </object>
   </patchobj>
   <obj type="disp/chart b" uuid="d2bdf496f96ee521628490a038411210fbe29b15" name="chart_5" x="350" y="112">
      <params/>
      <attribs/>
   </obj>
   <patcher type="patch/patcher" uuid="a245c220448000c901caef03c8b07740d533914a" name="patcher_1" x="420" y="112">
      <params>
         <frac32.u.map name="1" value="51.0"/>
         <frac32.u.map name="2" value="35.0"/>
         <frac32.u.map name="3" value="31.5"/>
         <frac32.u.map name="M" value="54.0"/>
      </params>
      <attribs/>
      <subpatch appVersion="1.0.8">
         <obj type="patch/inlet f" uuid="5c585d2dcd9c05631e345ac09626a22a639d7c13" name="i1" x="56" y="42">
            <params/>
            <attribs/>
         </obj>
         <patchobj type="patch/object" uuid="d9f44795bfd6115f91bc84d9b38087afd0709f6e" name="1" x="140" y="42">
            <params>
               <frac32.u.map name="inv" onParent="true" value="0.0"/>
            </params>
            <attribs/>
            <object id="patch/object" uuid="f536e36a05a0083eea7de9aeb7c3e944473bgc87c87">
               <sDescription>dual crossfade between inv/noniverted </sDescription>
               <author>Philoop</author>
               <license>BSD</license>
               <inlets>
                  <frac32 name="i1" description="input"/>
               </inlets>
               <outlets>
                  <frac32.bipolar name="o"/>
               </outlets>
               <displays/>
               <params>
                  <frac32.u.map name="inv" noLabel="false"/>
               </params>
               <attribs/>
               <includes/>
               <code.krate><![CDATA[   {
      int64_t a = (int64_t)inlet_i1 * param_inv;
      a -= (int64_t)inlet_i1 * ((128<<20)-param_inv);
      outlet_o = a>>27;	  
   }
    
]]></code.krate>
            </object>
         </patchobj>
         <obj type="math/+3in" uuid="8747f22d9d5c8f537a783c4f0018b1ab696370b9" name="+3in_1" x="238" y="98">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/inlet f" uuid="5c585d2dcd9c05631e345ac09626a22a639d7c13" name="i2" x="56" y="126">
            <params/>
            <attribs/>
         </obj>
         <patchobj type="patch/object" uuid="d9f44795bfd6115f91bc84d9b38087afd0709f6e" name="2" x="140" y="154">
            <params>
               <frac32.u.map name="inv" onParent="true" value="0.0"/>
            </params>
            <attribs/>
            <object id="patch/object" uuid="f536e36a05a0083eea7de9aeb7c3e944473bgc87c87">
               <sDescription>dual crossfade between inv/noniverted </sDescription>
               <author>Philoop</author>
               <license>BSD</license>
               <inlets>
                  <frac32 name="i1" description="input"/>
               </inlets>
               <outlets>
                  <frac32.bipolar name="o"/>
               </outlets>
               <displays/>
               <params>
                  <frac32.u.map name="inv" noLabel="false"/>
               </params>
               <attribs/>
               <includes/>
               <code.krate><![CDATA[   {
      int64_t a = (int64_t)inlet_i1 * param_inv;
      a -= (int64_t)inlet_i1 * ((128<<20)-param_inv);
      outlet_o = a>>27;	  
   }
    
]]></code.krate>
            </object>
         </patchobj>
         <obj type="patch/inlet f" uuid="5c585d2dcd9c05631e345ac09626a22a639d7c13" name="i3" x="56" y="210">
            <params/>
            <attribs/>
         </obj>
         <patchobj type="patch/object" uuid="d9f44795bfd6115f91bc84d9b38087afd0709f6e" name="3" x="140" y="266">
            <params>
               <frac32.u.map name="inv" onParent="true" value="0.0"/>
            </params>
            <attribs/>
            <object id="patch/object" uuid="f536e36a05a0083eea7de9aeb7c3e944473bgc87c87">
               <sDescription>dual crossfade between inv/noniverted </sDescription>
               <author>Philoop</author>
               <license>BSD</license>
               <inlets>
                  <frac32 name="i1" description="input"/>
               </inlets>
               <outlets>
                  <frac32.bipolar name="o"/>
               </outlets>
               <displays/>
               <params>
                  <frac32.u.map name="inv" noLabel="false"/>
               </params>
               <attribs/>
               <includes/>
               <code.krate><![CDATA[   {
      int64_t a = (int64_t)inlet_i1 * param_inv;
      a -= (int64_t)inlet_i1 * ((128<<20)-param_inv);
      outlet_o = a>>27;	  
   }
    
]]></code.krate>
            </object>
         </patchobj>
         <obj type="patch/outlet f" uuid="d18a9a550bcaaebac94e25983bd0e27dbfd7233c" name="outlet_1" x="238" y="294">
            <params/>
            <attribs/>
         </obj>
         <patchobj type="patch/object" uuid="d9f44795bfd6115f91bc84d9b38087afd0709f6e" name="M" x="140" y="378">
            <params>
               <frac32.u.map name="inv" onParent="true" value="0.0"/>
            </params>
            <attribs/>
            <object id="patch/object" uuid="f536e36a05a0083eea7de9aeb7c3e944473bgc87c87">
               <sDescription>dual crossfade between inv/noniverted </sDescription>
               <author>Philoop</author>
               <license>BSD</license>
               <inlets>
                  <frac32 name="i1" description="input"/>
               </inlets>
               <outlets>
                  <frac32.bipolar name="o"/>
               </outlets>
               <displays/>
               <params>
                  <frac32.u.map name="inv" noLabel="false"/>
               </params>
               <attribs/>
               <includes/>
               <code.krate><![CDATA[   {
      int64_t a = (int64_t)inlet_i1 * param_inv;
      a -= (int64_t)inlet_i1 * ((128<<20)-param_inv);
      outlet_o = a>>27;	  
   }
    
]]></code.krate>
            </object>
         </patchobj>
         <nets>
            <net>
               <source obj="i1" outlet="inlet"/>
               <dest obj="1" inlet="i1"/>
            </net>
            <net>
               <source obj="1" outlet="o"/>
               <dest obj="+3in_1" inlet="in1"/>
            </net>
            <net>
               <source obj="i2" outlet="inlet"/>
               <dest obj="2" inlet="i1"/>
            </net>
            <net>
               <source obj="2" outlet="o"/>
               <dest obj="+3in_1" inlet="in2"/>
            </net>
            <net>
               <source obj="i3" outlet="inlet"/>
               <dest obj="3" inlet="i1"/>
            </net>
            <net>
               <source obj="3" outlet="o"/>
               <dest obj="+3in_1" inlet="in3"/>
            </net>
            <net>
               <source obj="M" outlet="o"/>
               <dest obj="outlet_1" inlet="outlet"/>
            </net>
            <net>
               <source obj="+3in_1" outlet="out"/>
               <dest obj="M" inlet="i1"/>
            </net>
         </nets>
         <settings>
            <subpatchmode>no</subpatchmode>
         </settings>
         <notes><![CDATA[]]></notes>
      </subpatch>
   </patcher>
   <obj type="sel/sel fb 16D" uuid="783b6b176f88db16247c25edf082edf4277ef182" name="sel_4" x="616" y="112">
      <params>
         <frac32.s.mapvsl name="b0" value="-33.0"/>
         <frac32.s.mapvsl name="b1" value="17.0"/>
         <frac32.s.mapvsl name="b2" value="36.0"/>
         <frac32.s.mapvsl name="b3" value="-7.0"/>
         <frac32.s.mapvsl name="b4" value="26.0"/>
         <frac32.s.mapvsl name="b5" value="-32.0"/>
         <frac32.s.mapvsl name="b6" value="-47.0"/>
         <frac32.s.mapvsl name="b7" value="14.0"/>
         <frac32.s.mapvsl name="b8" value="38.0"/>
         <frac32.s.mapvsl name="b9" value="-36.0"/>
         <frac32.s.mapvsl name="b10" value="38.0"/>
         <frac32.s.mapvsl name="b11" value="-14.0"/>
         <frac32.s.mapvsl name="b12" value="-49.0"/>
         <frac32.s.mapvsl name="b13" value="-34.0"/>
         <frac32.s.mapvsl name="b14" value="-10.0"/>
         <frac32.s.mapvsl name="b15" value="-64.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="d9f44795bfd6115f91bc84d9b38087afd0709f6e" name="matrixscalerswitch_1" x="826" y="112">
      <params>
         <bool32.tgl name="in" value="1"/>
         <bool32.tgl name="seq" value="1"/>
         <bool32.tgl name="oct" value="1"/>
         <int32 name="transpose" value="0"/>
         <bool32.tgl name="on" value="1"/>
         <int32.hradio name="C" value="0"/>
         <int32.hradio name="Cis" value="0"/>
         <int32.hradio name="D" value="2"/>
         <int32.hradio name="Dis" value="2"/>
         <int32.hradio name="E" value="4"/>
         <int32.hradio name="F" value="4"/>
         <int32.hradio name="Fis" value="5"/>
         <int32.hradio name="G" value="7"/>
         <int32.hradio name="Gis" value="7"/>
         <int32.hradio name="A" value="9"/>
         <int32.hradio name="Ais" value="9"/>
         <int32.hradio name="B" value="11"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="363d17ef-2be8-4231-b497-fc9c96163b50">
         <sDescription>matrix scaler </sDescription>
         <inlets>
            <int32.positive name="in" description="select"/>
            <int32.bipolar name="seq"/>
            <int32.bipolar name="octave"/>
            <int32.bipolar name="keyafter"/>
            <int32.bipolar name="transafter"/>
         </inlets>
         <outlets>
            <int32.bipolar name="o"/>
         </outlets>
         <displays/>
         <params>
            <bool32.tgl name="in"/>
            <bool32.tgl name="seq"/>
            <bool32.tgl name="oct"/>
            <int32 name="transpose" noLabel="false">
               <MinValue i="-60"/>
               <MaxValue i="60"/>
            </int32>
            <bool32.tgl name="on"/>
            <int32.hradio name="C">
               <MaxValue i="12"/>
            </int32.hradio>
            <int32.hradio name="Cis">
               <MaxValue i="12"/>
            </int32.hradio>
            <int32.hradio name="D">
               <MaxValue i="12"/>
            </int32.hradio>
            <int32.hradio name="Dis">
               <MaxValue i="12"/>
            </int32.hradio>
            <int32.hradio name="E">
               <MaxValue i="12"/>
            </int32.hradio>
            <int32.hradio name="F">
               <MaxValue i="12"/>
            </int32.hradio>
            <int32.hradio name="Fis">
               <MaxValue i="12"/>
            </int32.hradio>
            <int32.hradio name="G">
               <MaxValue i="12"/>
            </int32.hradio>
            <int32.hradio name="Gis">
               <MaxValue i="12"/>
            </int32.hradio>
            <int32.hradio name="A">
               <MaxValue i="12"/>
            </int32.hradio>
            <int32.hradio name="Ais">
               <MaxValue i="12"/>
            </int32.hradio>
            <int32.hradio name="B">
               <MaxValue i="12"/>
            </int32.hradio>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t val;
int ins;
int rem;
int oct;
int scl;
   ]]></code.declaration>
         <code.init><![CDATA[val = (int32_t)(GenerateRandomNumber())>>4;
      ins = 0;
      rem = 0;
      oct = 0;
      scl = 0;
	  ]]></code.init>
         <code.krate><![CDATA[
      ins = ((param_seq)?inlet_seq*0.094:0)+((param_oct)?inlet_octave:0)+((param_in)?inlet_in:0);
 int r;
      if (ins >=0)
      r = ((unsigned int)ins)/12;
else  r = -(((unsigned int)(12-ins))/12);
rem = ins-(r*12);
oct = ((r*12)-4);

      switch(rem>0?rem:0){
      case 0: scl = (param_C)+oct;break;
      case 1: scl = (param_Cis)+oct;break;
      case 2: scl = (param_D)+oct;break;
      case 3: scl = (param_Dis)+oct;break;
      case 4: scl = (param_E)+oct;break;
      case 5: scl = (param_F)+oct;break;
      case 6: scl = (param_Fis)+oct;break;
      case 7: scl = (param_G)+oct;break;
      case 8: scl = (param_Gis)+oct;break;
      case 9: scl = (param_A)+oct;break;
      case 10: scl = (param_Ais)+oct;break;
      case 11: scl = (param_B)+oct;break;          
      default: scl = (param_C)+oct;break;	  
}
outlet_o= param_on?(scl+(param_transpose-12)+inlet_keyafter+inlet_transafter):
(ins+param_transpose+inlet_keyafter+inlet_transafter);
]]></code.krate>
      </object>
   </patchobj>
   <obj type="math/glide" uuid="cfa0324c7cc8ebfd6e03c6b92f41115e3172d0d9" name="glide_1" x="1078" y="112">
      <params>
         <frac32.u.map name="time" value="2.5"/>
      </params>
      <attribs/>
   </obj>
   <patcher type="patch/patcher" uuid="a245c220448000c901caef03c8b07740d533914a" name="patcher_4" x="1148" y="112">
      <params>
         <frac32.s.map name="Pi:all" value="0.0"/>
         <frac32.s.map name="Pi:cv 2" value="-12.0"/>
         <frac32.s.map name="Pi:Cv 3" value="-24.0"/>
         <frac32.u.map name="Squ" value="30.5"/>
         <frac32.u.map name="saw" value="42.5"/>
         <frac32.u.map name="tri" value="51.0"/>
      </params>
      <attribs/>
      <subpatch appVersion="1.0.8">
         <obj type="patch/inlet f" uuid="5c585d2dcd9c05631e345ac09626a22a639d7c13" name="in" x="28" y="28">
            <params/>
            <attribs/>
         </obj>
         <patchobj type="patch/object" uuid="d9f44795bfd6115f91bc84d9b38087afd0709f6e" name="Pi" x="98" y="28">
            <params>
               <frac32.s.map name="all" onParent="true" value="-34.0"/>
               <frac32.s.map name="cv 2" onParent="true" value="-12.0"/>
               <frac32.s.map name="Cv 3" onParent="true" value="-24.0"/>
            </params>
            <attribs/>
            <object class="axoloti.object.AxoObjectFromPatch" id="patch/object">
               <sDescription></sDescription>
               <inlets>
                  <frac32 name="cvin" description="cvin"/>
               </inlets>
               <outlets>
                  <frac32 name="cv1" description="cv1"/>
                  <frac32 name="cv2" description="cv2"/>
                  <frac32 name="cv3" description="cv3"/>
               </outlets>
               <displays/>
               <params>
                  <frac32.s.map name="all">
                     <DefaultValue v="-34.0"/>
                  </frac32.s.map>
                  <frac32.s.map name="cv 2">
                     <DefaultValue v="-12.0"/>
                  </frac32.s.map>
                  <frac32.s.map name="Cv 3">
                     <DefaultValue v="-24.0"/>
                  </frac32.s.map>
               </params>
               <attribs/>
               <includes/>
               <depends/>
               <code.declaration><![CDATA[    static const uint32_t NPEXCH = 3;
    ParameterExchange_t PExch[NPEXCH];
    int32_t displayVector[3];
    static const uint32_t NPRESETS = 8;
    static const uint32_t NPRESET_ENTRIES = 32;
    static const uint32_t NMODULATIONSOURCES = 8;
    static const uint32_t NMODULATIONTARGETS = 8;
    int32_t PExModulationPrevVal[1][NMODULATIONSOURCES];
/* modsource defines */
/* parameter instance indices */
static const int PARAM_INDEX_all_value = 0;
static const int PARAM_INDEX_cv_space_2_value = 1;
static const int PARAM_INDEX_Cv_space_3_value = 2;
/* controller classes */
/* object classes */
class instancecvin{
  public: // v1
  attr_parent *parent;
int32_t _inlet;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & outlet_inlet  ){
  outlet_inlet = _inlet;

}
}
;class instancecv1{
  public: // v1
  attr_parent *parent;
int32_t _outlet;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_outlet  ){
  _outlet = inlet_outlet;

}
}
;class instanceall{
  public: // v1
  attr_parent *parent;
KeyValuePair KVP_instanceall_value;
  public: void Init(attr_parent * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX_all_value].pfunction = pfun_signed_clamp;
  SetKVP_IPVP(&KVP_instanceall_value,ObjectKvpRoot, "all" ,&parent->PExch[PARAM_INDEX_all_value], -1<<27, 1<<27);
  KVP_RegisterObject(&KVP_instanceall_value);
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & outlet_out,
int param_value  ){
outlet_out= param_value;

}
}
;class instance_plus___2{
  public: // v1
  attr_parent *parent;
  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_in1,
const int32_t  inlet_in2,
int32_t  & outlet_out  ){
outlet_out= inlet_in1+inlet_in2 ;
}
}
;class instance_plus___1{
  public: // v1
  attr_parent *parent;
  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_in1,
const int32_t  inlet_in2,
int32_t  & outlet_out  ){
outlet_out= inlet_in1+inlet_in2 ;
}
}
;class instancecv2{
  public: // v1
  attr_parent *parent;
int32_t _outlet;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_outlet  ){
  _outlet = inlet_outlet;

}
}
;class instancecv_space_2{
  public: // v1
  attr_parent *parent;
KeyValuePair KVP_instancecv_space_2_value;
  public: void Init(attr_parent * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX_cv_space_2_value].pfunction = pfun_signed_clamp;
  SetKVP_IPVP(&KVP_instancecv_space_2_value,ObjectKvpRoot, "cv 2" ,&parent->PExch[PARAM_INDEX_cv_space_2_value], -1<<27, 1<<27);
  KVP_RegisterObject(&KVP_instancecv_space_2_value);
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & outlet_out,
int param_value  ){
outlet_out= param_value;

}
}
;class instance_plus___5{
  public: // v1
  attr_parent *parent;
  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_in1,
const int32_t  inlet_in2,
int32_t  & outlet_out  ){
outlet_out= inlet_in1+inlet_in2 ;
}
}
;class instancecv3{
  public: // v1
  attr_parent *parent;
int32_t _outlet;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_outlet  ){
  _outlet = inlet_outlet;

}
}
;class instanceCv_space_3{
  public: // v1
  attr_parent *parent;
KeyValuePair KVP_instanceCv_space_3_value;
  public: void Init(attr_parent * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX_Cv_space_3_value].pfunction = pfun_signed_clamp;
  SetKVP_IPVP(&KVP_instanceCv_space_3_value,ObjectKvpRoot, "Cv 3" ,&parent->PExch[PARAM_INDEX_Cv_space_3_value], -1<<27, 1<<27);
  KVP_RegisterObject(&KVP_instanceCv_space_3_value);
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & outlet_out,
int param_value  ){
outlet_out= param_value;

}
}
;/* controller instances */
/* object instances */
     instancecvin instancecvin_i;
     instancecv1 instancecv1_i;
     instanceall instanceall_i;
     instance_plus___2 instance_plus___2_i;
     instance_plus___1 instance_plus___1_i;
     instancecv2 instancecv2_i;
     instancecv_space_2 instancecv_space_2_i;
     instance_plus___5 instance_plus___5_i;
     instancecv3 instancecv3_i;
     instanceCv_space_3 instanceCv_space_3_i;
/* net latches */
    int32_t  net1Latch;
    int32_t  net2Latch;
    int32_t  net3Latch;
static const int polyIndex = 0;
   static int32_t * GetInitParams(void){
      static const int32_t p[3]= {
      -71303168,
      -25165824,
      -50331648
      };
      return (int32_t *)&p[0];
   }   static const int32_t * GetPresets(void){
      static const int32_t p[NPRESETS][NPRESET_ENTRIES][2] = {
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         }
      };
   return &p[0][0][0];
   };
void ApplyPreset(int index){
   if (!index) {
     int i;
     int32_t *p = GetInitParams();
     for(i=0;i<NPEXCH;i++){
        PExParameterChange(&PExch[i],p[i],0xFFEF);
     }
   }
   index--;
   if (index < NPRESETS) {
     PresetParamChange_t *pa = (PresetParamChange_t *)(GetPresets());
     PresetParamChange_t *p = &pa[index*NPRESET_ENTRIES];
       int i;
       for(i=0;i<NPRESET_ENTRIES;i++){
         PresetParamChange_t *pp = &p[i];
         if ((pp->pexIndex>=0)&&(pp->pexIndex<NPEXCH)) {
           PExParameterChange(&PExch[pp->pexIndex],pp->value,0xFFEF);         }
         else break;
       }
   }
}
   static PExModulationTarget_t * GetModulationTable(void){
    static const PExModulationTarget_t PExModulationSources[NMODULATIONSOURCES][NMODULATIONTARGETS] = 
{{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}}};
   return (PExModulationTarget_t *)&PExModulationSources[0][0];
   };
]]></code.declaration>
               <code.init><![CDATA[   int i;
   int j;
   const int32_t *p;
   p = GetInitParams();
   for(j=0;j<3;j++){
      PExch[j].value = p[j];
      PExch[j].modvalue = p[j];
      PExch[j].signals = 0;
      PExch[j].pfunction = 0;
   }
   int32_t *pp = &PExModulationPrevVal[0][0];
   for(j=0;j<attr_poly*NMODULATIONSOURCES;j++){
      *pp = 0; pp++;
   }
     displayVector[0] = 0x446F7841;
     displayVector[1] = 0;
     displayVector[2] = 0;
   instancecvin_i.Init(this );
   instancecv1_i.Init(this );
   instanceall_i.Init(this );
   instance_plus___2_i.Init(this );
   instance_plus___1_i.Init(this );
   instancecv2_i.Init(this );
   instancecv_space_2_i.Init(this );
   instance_plus___5_i.Init(this );
   instancecv3_i.Init(this );
   instanceCv_space_3_i.Init(this );
      int k;
      for (k = 0; k < NPEXCH; k++) {
        if (PExch[k].pfunction){
          (PExch[k].pfunction)(&PExch[k]);
        } else {
          PExch[k].finalvalue = PExch[k].value;
        }
      }
]]></code.init>
               <code.dispose><![CDATA[   instanceCv_space_3_i.Dispose();
   instancecv3_i.Dispose();
   instance_plus___5_i.Dispose();
   instancecv_space_2_i.Dispose();
   instancecv2_i.Dispose();
   instance_plus___1_i.Dispose();
   instance_plus___2_i.Dispose();
   instanceall_i.Dispose();
   instancecv1_i.Dispose();
   instancecvin_i.Dispose();
]]></code.dispose>
               <code.krate><![CDATA[int i; /*...*/
   instancecvin_i._inlet = inlet_cvin;
//--------- <nets> -----------//
    int32_t  net0;
    int32_t  net1;
    int32_t  net2;
    int32_t  net3;
    int32_t  net4;
    int32_t  net5;
    int32_t  net6;
//--------- </nets> ----------//
//--------- <zero> ----------//
  int32_t UNCONNECTED_OUTPUT;
  static const int32_t UNCONNECTED_INPUT=0;
  static const int32buffer zerobuffer = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  int32buffer UNCONNECTED_OUTPUT_BUFFER;
//--------- </zero> ----------//
//--------- <controller calls> ----------//
//--------- <object calls> ----------//
  instancecvin_i.dsp(net4);
  instancecv1_i.dsp(net1Latch);
  instanceall_i.dsp(net0, PExch[PARAM_INDEX_all_value].finalvalue);
  instance_plus___2_i.dsp(net4, net0, net1);
  instance_plus___1_i.dsp(net2Latch, net1, net5);
  instancecv2_i.dsp(net5);
  instancecv_space_2_i.dsp(net2, PExch[PARAM_INDEX_cv_space_2_value].finalvalue);
  instance_plus___5_i.dsp(net3Latch, net1, net6);
  instancecv3_i.dsp(net6);
  instanceCv_space_3_i.dsp(net3, PExch[PARAM_INDEX_Cv_space_3_value].finalvalue);
//--------- </object calls> ----------//
//--------- <net latch copy> ----------//
net1Latch = net1;
net2Latch = net2;
net3Latch = net3;
//--------- </net latch copy> ----------//
   outlet_cv1 = instancecv1_i._outlet;
   outlet_cv2 = instancecv2_i._outlet;
   outlet_cv3 = instancecv3_i._outlet;
]]></code.krate>
               <code.midihandler><![CDATA[if ( attr_mididevice > 0 && dev > 0 && attr_mididevice != dev) return;
if ( attr_midiport > 0 && port > 0 && attr_midiport != port) return;
]]></code.midihandler>
            </object>
         </patchobj>
         <obj type="osc/pwm" uuid="a6b40ff63f161d8bac8ea2eba5b0dbffcf49b472" name="pwm_1" x="196" y="28">
            <params>
               <frac32.s.map name="pitch" value="-4.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="patch/inlet f" uuid="5c585d2dcd9c05631e345ac09626a22a639d7c13" name="pw" x="28" y="70">
            <params/>
            <attribs/>
         </obj>
         <obj type="osc/supersquare" uuid="ed9ce670bb2de7c801d5a1843f6669ce9d176b08" name="saw_1" x="196" y="126">
            <params>
               <frac32.s.map name="pitch" value="-4.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="mix/mix 1 sq" uuid="cf790039775b62697a4b34e7a5389a5a8cc36e30" name="Squ" x="322" y="126">
            <params>
               <frac32.u.map name="gain1" onParent="true" value="32.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="patch/outlet a" uuid="abd8c5fd3b0524a6630f65cad6dc27f6c58e2a3e" name="outlet_1" x="420" y="126">
            <params/>
            <attribs/>
         </obj>
         <obj type="osc/tri" uuid="905879afa8256b0ca207557d656949e476ca6f16" name="tri_1" x="196" y="210">
            <params>
               <frac32.s.map name="pitch" value="-4.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="mix/mix 1 sq" uuid="cf790039775b62697a4b34e7a5389a5a8cc36e30" name="saw" x="322" y="224">
            <params>
               <frac32.u.map name="gain1" onParent="true" value="32.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="mix/mix 1 sq" uuid="cf790039775b62697a4b34e7a5389a5a8cc36e30" name="tri" x="322" y="322">
            <params>
               <frac32.u.map name="gain1" onParent="true" value="32.0"/>
            </params>
            <attribs/>
         </obj>
         <nets>
            <net>
               <source obj="pwm_1" outlet="wave"/>
               <dest obj="Squ" inlet="in1"/>
            </net>
            <net>
               <source obj="saw_1" outlet="wave"/>
               <dest obj="saw" inlet="in1"/>
            </net>
            <net>
               <source obj="tri_1" outlet="wave"/>
               <dest obj="tri" inlet="bus_in"/>
            </net>
            <net>
               <source obj="Squ" outlet="out"/>
               <dest obj="outlet_1" inlet="outlet"/>
            </net>
            <net>
               <source obj="saw" outlet="out"/>
               <dest obj="Squ" inlet="bus_in"/>
            </net>
            <net>
               <source obj="tri" outlet="out"/>
               <dest obj="saw" inlet="bus_in"/>
            </net>
            <net>
               <source obj="Pi" outlet="cv1"/>
               <dest obj="pwm_1" inlet="pitch"/>
            </net>
            <net>
               <source obj="pw" outlet="inlet"/>
               <dest obj="pwm_1" inlet="pw"/>
            </net>
            <net>
               <source obj="in" outlet="inlet"/>
               <dest obj="Pi" inlet="cvin"/>
            </net>
            <net>
               <source obj="Pi" outlet="cv2"/>
               <dest obj="saw_1" inlet="pitch"/>
            </net>
            <net>
               <source obj="Pi" outlet="cv3"/>
               <dest obj="tri_1" inlet="pitch"/>
            </net>
         </nets>
         <settings>
            <subpatchmode>no</subpatchmode>
         </settings>
         <notes><![CDATA[]]></notes>
      </subpatch>
   </patcher>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_2" x="1246" y="112">
      <params/>
      <attribs/>
   </obj>
   <obj type="filter/multimode svf m" uuid="71d5f8b2131b691d591a9a9ee28771309f8938d" name="vcf3_1" x="1302" y="112">
      <params>
         <frac32.s.map name="pitch" value="-12.0"/>
         <frac32.u.map name="reso" value="20.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_1" x="1428" y="112">
      <params/>
      <attribs/>
   </obj>
   <obj type="mix/mix 1 sq" uuid="cf790039775b62697a4b34e7a5389a5a8cc36e30" name="crossfade" x="1568" y="112">
      <params>
         <frac32.u.map name="gain1" value="20.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="mix/mix 1 sq" uuid="cf790039775b62697a4b34e7a5389a5a8cc36e30" name="crossfader" x="1680" y="112">
      <params>
         <frac32.u.map name="gain1" value="64.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="audio/out stereo" uuid="a1ca7a567f535acc21055669829101d3ee7f0189" name="in_1" x="1792" y="112">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/note" uuid="ce3190ad98b73b468f22221f555b01feee03226a" name="note_1" x="1008" y="196">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="d9f44795bfd6115f91bc84d9b38087afd0709f6e" name="obj_1" x="1568" y="210">
      <params>
         <frac32.u.map name="dry/wet" value="9.5"/>
         <frac32.u.map name=":gain1" value="64.0"/>
         <frac32.s.map name="HP IN:pitch" value="64.0"/>
         <frac32.u.map name="Time" value="7.0"/>
         <frac32.s.map name="FbLp :pitch" value="33.0"/>
         <frac32.u.map name="fba" value="39.0"/>
      </params>
      <attribs/>
      <object class="axoloti.object.AxoObjectFromPatch" id="patch/object">
         <sDescription></sDescription>
         <author>philoop</author>
         <license>GPL</license>
         <inlets>
            <frac32buffer name="echo" description="echo"/>
            <frac32 name="time" description="time"/>
            <frac32 name="FB" description="FB"/>
         </inlets>
         <outlets>
            <frac32buffer name="Echoout" description="Echoout"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="dry/wet">
               <DefaultValue v="0.0"/>
            </frac32.u.map>
            <frac32.u.map.squaregain name=":gain1">
               <DefaultValue v="64.0"/>
            </frac32.u.map.squaregain>
            <frac32.s.map.pitch name="HP IN:pitch">
               <DefaultValue v="64.0"/>
            </frac32.s.map.pitch>
            <frac32.u.map name="Time">
               <DefaultValue v="48.5"/>
            </frac32.u.map>
            <frac32.s.map.pitch name="FbLp :pitch">
               <DefaultValue v="-64.0"/>
            </frac32.s.map.pitch>
            <frac32.u.map.gain name="fba">
               <DefaultValue v="0.0"/>
            </frac32.u.map.gain>
         </params>
         <attribs/>
         <includes/>
         <depends/>
         <code.declaration><![CDATA[    static const uint32_t NPEXCH = 9;
    ParameterExchange_t PExch[NPEXCH];
    int32_t displayVector[3];
    static const uint32_t NPRESETS = 0;
    static const uint32_t NPRESET_ENTRIES = 0;
    static const uint32_t NMODULATIONSOURCES = 0;
    static const uint32_t NMODULATIONTARGETS = 0;
    int32_t PExModulationPrevVal[1][NMODULATIONSOURCES];
/* modsource defines */
/* parameter instance indices */
static const int PARAM_INDEX_dry_slash_wet_value = 0;
static const int PARAM_INDEX__gain1 = 1;
static const int PARAM_INDEX__gain2 = 2;
static const int PARAM_INDEX_HP_space_IN_pitch = 3;
static const int PARAM_INDEX_HP_space_IN_reso = 4;
static const int PARAM_INDEX_Time_time = 5;
static const int PARAM_INDEX_FbLp_space__pitch = 6;
static const int PARAM_INDEX_FbLp_space__reso = 7;
static const int PARAM_INDEX_fba_amp = 8;
/* controller classes */
/* object classes */
class instanceecho{
  public: // v1
  attr_parent *parent;
int32buffer _inlet;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32buffer  & outlet_inlet  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   outlet_inlet[buffer_index] = _inlet[buffer_index];
}
}
}
;class instancedry_slash_wet{
  public: // v1
  attr_parent *parent;
KeyValuePair KVP_instancedry_slash_wet_value;
  public: void Init(attr_parent * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX_dry_slash_wet_value].pfunction = pfun_unsigned_clamp;
  SetKVP_IPVP(&KVP_instancedry_slash_wet_value,ObjectKvpRoot, "dry/wet" ,&parent->PExch[PARAM_INDEX_dry_slash_wet_value], 0, 1<<27);
  KVP_RegisterObject(&KVP_instancedry_slash_wet_value);
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & outlet_out,
int param_value  ){
outlet_out= param_value;

}
}
;class instance{
  public: // v1
  attr_parent *parent;
KeyValuePair KVP_instance_gain1;
KeyValuePair KVP_instance_gain2;
  public: void Init(attr_parent * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX__gain1].pfunction = pfun_signed_clamp_fullrange_squarelaw;
  SetKVP_IPVP(&KVP_instance_gain1,ObjectKvpRoot, ":gain1" ,&parent->PExch[PARAM_INDEX__gain1], 0, 1<<27);
  KVP_RegisterObject(&KVP_instance_gain1);
parent->PExch[PARAM_INDEX__gain2].pfunction = pfun_signed_clamp_fullrange_squarelaw;
  SetKVP_IPVP(&KVP_instance_gain2,ObjectKvpRoot, ":gain2" ,&parent->PExch[PARAM_INDEX__gain2], 0, 1<<27);
  KVP_RegisterObject(&KVP_instance_gain2);
}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_bus__in,
const int32buffer  inlet_in1,
const int32buffer  inlet_in2,
int32buffer  & outlet_out,
int param_gain1,
int param_gain2  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   int32_t accum = ___SMMUL(inlet_in1[buffer_index],param_gain1);
   accum = ___SMMLA(inlet_in2[buffer_index],param_gain2,accum);
;   outlet_out[buffer_index]=  __SSAT(inlet_bus__in[buffer_index] + (accum<<1),28);

}
}
}
;class instanceHP_space_IN{
  public: // v1
  attr_parent *parent;
KeyValuePair KVP_instanceHP_space_IN_pitch;
KeyValuePair KVP_instanceHP_space_IN_reso;
biquad_state bs;biquad_coefficients bc;

  public: void Init(attr_parent * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX_HP_space_IN_pitch].pfunction = pfun_signed_clamp;
  SetKVP_IPVP(&KVP_instanceHP_space_IN_pitch,ObjectKvpRoot, "HP IN:pitch" ,&parent->PExch[PARAM_INDEX_HP_space_IN_pitch], -1<<27, 1<<27);
  KVP_RegisterObject(&KVP_instanceHP_space_IN_pitch);
parent->PExch[PARAM_INDEX_HP_space_IN_reso].pfunction = pfun_unsigned_clamp;
  SetKVP_IPVP(&KVP_instanceHP_space_IN_reso,ObjectKvpRoot, "HP IN:reso" ,&parent->PExch[PARAM_INDEX_HP_space_IN_reso], 0, 1<<27);
  KVP_RegisterObject(&KVP_instanceHP_space_IN_reso);
biquad_clearstate(&bs);

}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_in,
const int32_t  inlet_pitch,
const int32_t  inlet_reso,
int32buffer  & outlet_out,
int param_pitch,
int param_reso  ){
      int32_t freq;
      MTOF(param_pitch + inlet_pitch,freq);
      biquad_lp_coefs(&bc,freq,INT_MAX - (__USAT(inlet_reso + param_reso,27)<<4));
      biquad_dsp(&bs,&bc,inlet_in,outlet_out);

}
}
;class instanceecholoti{
  public: // v1
  attr_parent *parent;
static const uint32_t LENGTHPOW = (15);
static const uint32_t LENGTH = (1<<15);
static const uint32_t LENGTHMASK = ((1<<15)-1);
int16_t *array;
uint32_t writepos;
  public: void Init(attr_parent * _parent) {
parent = _parent;
static int16_t _array[1][1<<15]  __attribute__ ((section (".sdram")));
array = &_array[parent->polyIndex][0];
   int i;
   writepos = 0;
   for(i=0;i<LENGTH;i++) array[i] = 0;

}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_in  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
  writepos = (writepos + 1)&LENGTHMASK;
   array[writepos] = __SSAT(inlet_in[buffer_index]>>14,16);

}
}
}
;class instancetime{
  public: // v1
  attr_parent *parent;
int32_t _inlet;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & outlet_inlet  ){
  outlet_inlet = _inlet;

}
}
;class instanceinterp__1{
  public: // v1
  attr_parent *parent;
   int32_t _prev;
    int32_t _step;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_i,
int32buffer  & outlet_o  ){
   _step = (inlet_i - _prev)>>4;
   int32_t _i = _prev;
   _prev = inlet_i;

int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   outlet_o[buffer_index] = _i;
   _i += _step;

}
}
}
;class instanceTime{
  public: // v1
  attr_parent *parent;
KeyValuePair KVP_instanceTime_time;
  public: void Init(attr_parent * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX_Time_time].pfunction = pfun_unsigned_clamp;
  SetKVP_IPVP(&KVP_instanceTime_time,ObjectKvpRoot, "Time" ,&parent->PExch[PARAM_INDEX_Time_time], 0, 1<<27);
  KVP_RegisterObject(&KVP_instanceTime_time);
}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_time,
int32buffer  & outlet_out,
int param_time  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
      uint32_t tmp_d =  __USAT(param_time + inlet_time[buffer_index],27);
      uint32_t tmp_di = parent->instanceecholoti_i.writepos - (tmp_d>>(27-parent->instanceecholoti_i.LENGTHPOW)) - BUFSIZE + buffer_index -1;
      uint32_t tmp_w1 = (tmp_d<<(parent->instanceecholoti_i.LENGTHPOW+3)) & 0x3FFFFFFF;
      uint32_t tmp_w2 = (1<<30) - tmp_w1;
      int32_t tmp_a1 = parent->instanceecholoti_i.array[tmp_di&parent->instanceecholoti_i.LENGTHMASK]<<16;
      int32_t tmp_a2 = parent->instanceecholoti_i.array[(tmp_di+1)&parent->instanceecholoti_i.LENGTHMASK]<<16;
      int32_t tmp_r = ___SMMUL(tmp_a1,tmp_w1);
      tmp_r = ___SMMLA(tmp_a2,tmp_w2,tmp_r);
      outlet_out[buffer_index]= tmp_r;

}
}
}
;class instancexfade__1{
  public: // v1
  attr_parent *parent;
  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_i1,
const int32buffer  inlet_i2,
const int32_t  inlet_c,
int32buffer  & outlet_o  ){
   int32_t ccompl = ((128<<20)-inlet_c);

int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   {
      int64_t a = (int64_t)inlet_i2[buffer_index] * inlet_c;
      a += (int64_t)inlet_i1[buffer_index] * ccompl;
      outlet_o[buffer_index]= a>>27;
   }

}
}
}
;class instanceEchoout{
  public: // v1
  attr_parent *parent;
int32buffer _outlet;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_outlet  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   _outlet[buffer_index] = inlet_outlet[buffer_index];

}
}
}
;class instanceFbLp_space_{
  public: // v1
  attr_parent *parent;
KeyValuePair KVP_instanceFbLp_space__pitch;
KeyValuePair KVP_instanceFbLp_space__reso;
biquad_state bs;biquad_coefficients bc;

  public: void Init(attr_parent * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX_FbLp_space__pitch].pfunction = pfun_signed_clamp;
  SetKVP_IPVP(&KVP_instanceFbLp_space__pitch,ObjectKvpRoot, "FbLp :pitch" ,&parent->PExch[PARAM_INDEX_FbLp_space__pitch], -1<<27, 1<<27);
  KVP_RegisterObject(&KVP_instanceFbLp_space__pitch);
parent->PExch[PARAM_INDEX_FbLp_space__reso].pfunction = pfun_unsigned_clamp;
  SetKVP_IPVP(&KVP_instanceFbLp_space__reso,ObjectKvpRoot, "FbLp :reso" ,&parent->PExch[PARAM_INDEX_FbLp_space__reso], 0, 1<<27);
  KVP_RegisterObject(&KVP_instanceFbLp_space__reso);
biquad_clearstate(&bs);

}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_in,
const int32_t  inlet_pitch,
const int32_t  inlet_reso,
int32buffer  & outlet_out,
int param_pitch,
int param_reso  ){
      int32_t freq;
      MTOF(param_pitch + inlet_pitch,freq);
      biquad_lp_coefs(&bc,freq,INT_MAX - (__USAT(inlet_reso + param_reso,27)<<4));
      biquad_dsp(&bs,&bc,inlet_in,outlet_out);

}
}
;class instancefba{
  public: // v1
  attr_parent *parent;
KeyValuePair KVP_instancefba_amp;
  public: void Init(attr_parent * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX_fba_amp].pfunction = pfun_unsigned_clamp_fullrange;
  SetKVP_IPVP(&KVP_instancefba_amp,ObjectKvpRoot, "fba" ,&parent->PExch[PARAM_INDEX_fba_amp], 0, 1<<27);
  KVP_RegisterObject(&KVP_instancefba_amp);
}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_in,
int32buffer  & outlet_out,
int param_amp  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
outlet_out[buffer_index]= ___SMMUL(param_amp,inlet_in[buffer_index])<<1;

}
}
}
;class instanceFB{
  public: // v1
  attr_parent *parent;
int32_t _inlet;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & outlet_inlet  ){
  outlet_inlet = _inlet;

}
}
;class instancevca__1{
  public: // v1
  attr_parent *parent;
   int32_t prev;
    int32_t step;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_v,
const int32buffer  inlet_a,
int32buffer  & outlet_o  ){
   step = (inlet_v - prev)>>4;
   int32_t i = prev;
   prev = inlet_v;

int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   outlet_o[buffer_index] =  ___SMMUL(inlet_a[buffer_index],i)<<5;
   i += step;

}
}
}
;/* controller instances */
/* object instances */
     instanceecho instanceecho_i;
     instancedry_slash_wet instancedry_slash_wet_i;
     instance instance_i;
     instanceHP_space_IN instanceHP_space_IN_i;
     instanceecholoti instanceecholoti_i;
     instancetime instancetime_i;
     instanceinterp__1 instanceinterp__1_i;
     instanceTime instanceTime_i;
     instancexfade__1 instancexfade__1_i;
     instanceEchoout instanceEchoout_i;
     instanceFbLp_space_ instanceFbLp_space__i;
     instancefba instancefba_i;
     instanceFB instanceFB_i;
     instancevca__1 instancevca__1_i;
/* net latches */
    int32buffer  net9Latch;
    int32buffer  net10Latch;
static const int polyIndex = 0;
   static int32_t * GetInitParams(void){
      static const int32_t p[9]= {
      0,
      134217728,
      134217728,
      134217728,
      0,
      101711872,
      -134217728,
      0,
      0
      };
      return (int32_t *)&p[0];
   }   static const int32_t * GetPresets(void){
      static const int32_t p[NPRESETS][NPRESET_ENTRIES][2] = {
      };
   return &p[0][0][0];
   };
void ApplyPreset(int index){
   if (!index) {
     int i;
     int32_t *p = GetInitParams();
     for(i=0;i<NPEXCH;i++){
        PExParameterChange(&PExch[i],p[i],0xFFEF);
     }
   }
   index--;
   if (index < NPRESETS) {
     PresetParamChange_t *pa = (PresetParamChange_t *)(GetPresets());
     PresetParamChange_t *p = &pa[index*NPRESET_ENTRIES];
       int i;
       for(i=0;i<NPRESET_ENTRIES;i++){
         PresetParamChange_t *pp = &p[i];
         if ((pp->pexIndex>=0)&&(pp->pexIndex<NPEXCH)) {
           PExParameterChange(&PExch[pp->pexIndex],pp->value,0xFFEF);         }
         else break;
       }
   }
}
   static PExModulationTarget_t * GetModulationTable(void){
    static const PExModulationTarget_t PExModulationSources[NMODULATIONSOURCES][NMODULATIONTARGETS] = 
{};
   return (PExModulationTarget_t *)&PExModulationSources[0][0];
   };
]]></code.declaration>
         <code.init><![CDATA[   int i;
   int j;
   const int32_t *p;
   p = GetInitParams();
   for(j=0;j<9;j++){
      PExch[j].value = p[j];
      PExch[j].modvalue = p[j];
      PExch[j].signals = 0;
      PExch[j].pfunction = 0;
   }
   int32_t *pp = &PExModulationPrevVal[0][0];
   for(j=0;j<attr_poly*NMODULATIONSOURCES;j++){
      *pp = 0; pp++;
   }
     displayVector[0] = 0x446F7841;
     displayVector[1] = 0;
     displayVector[2] = 0;
   instanceecho_i.Init(this );
   instancedry_slash_wet_i.Init(this );
   instance_i.Init(this );
   instanceHP_space_IN_i.Init(this );
   instanceecholoti_i.Init(this );
   instancetime_i.Init(this );
   instanceinterp__1_i.Init(this );
   instanceTime_i.Init(this );
   instancexfade__1_i.Init(this );
   instanceEchoout_i.Init(this );
   instanceFbLp_space__i.Init(this );
   instancefba_i.Init(this );
   instanceFB_i.Init(this );
   instancevca__1_i.Init(this );
      int k;
      for (k = 0; k < NPEXCH; k++) {
        if (PExch[k].pfunction){
          (PExch[k].pfunction)(&PExch[k]);
        } else {
          PExch[k].finalvalue = PExch[k].value;
        }
      }
]]></code.init>
         <code.dispose><![CDATA[   instancevca__1_i.Dispose();
   instanceFB_i.Dispose();
   instancefba_i.Dispose();
   instanceFbLp_space__i.Dispose();
   instanceEchoout_i.Dispose();
   instancexfade__1_i.Dispose();
   instanceTime_i.Dispose();
   instanceinterp__1_i.Dispose();
   instancetime_i.Dispose();
   instanceecholoti_i.Dispose();
   instanceHP_space_IN_i.Dispose();
   instance_i.Dispose();
   instancedry_slash_wet_i.Dispose();
   instanceecho_i.Dispose();
]]></code.dispose>
         <code.krate><![CDATA[int i; /*...*/
   for(i=0;i<BUFSIZE;i++) instanceecho_i._inlet[i] = inlet_echo[i];
   instancetime_i._inlet = inlet_time;
   instanceFB_i._inlet = inlet_FB;
//--------- <nets> -----------//
    int32buffer  net0;
    int32buffer  net1;
    int32buffer  net2;
    int32buffer  net3;
    int32buffer  net4;
    int32_t  net5;
    int32buffer  net6;
    int32_t  net7;
    int32_t  net8;
    int32buffer  net9;
    int32buffer  net10;
    int32buffer  net11;
//--------- </nets> ----------//
//--------- <zero> ----------//
  int32_t UNCONNECTED_OUTPUT;
  static const int32_t UNCONNECTED_INPUT=0;
  static const int32buffer zerobuffer = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  int32buffer UNCONNECTED_OUTPUT_BUFFER;
//--------- </zero> ----------//
//--------- <controller calls> ----------//
//--------- <object calls> ----------//
  instanceecho_i.dsp(net2);
  instancedry_slash_wet_i.dsp(net5, PExch[PARAM_INDEX_dry_slash_wet_value].finalvalue);
  instance_i.dsp(net10Latch, net2, net9Latch, net11, PExch[PARAM_INDEX__gain1].finalvalue, PExch[PARAM_INDEX__gain2].finalvalue);
  instanceHP_space_IN_i.dsp(net11, 0 , 0 , net0, PExch[PARAM_INDEX_HP_space_IN_pitch].finalvalue, PExch[PARAM_INDEX_HP_space_IN_reso].finalvalue);
  instanceecholoti_i.dsp(net0);
  instancetime_i.dsp(net7);
  instanceinterp__1_i.dsp(net7, net6);
  instanceTime_i.dsp(net6, net3, PExch[PARAM_INDEX_Time_time].finalvalue);
  instancexfade__1_i.dsp(net2, net3, net5, net4);
  instanceEchoout_i.dsp(net4);
  instanceFbLp_space__i.dsp(net3, 0 , 0 , net1, PExch[PARAM_INDEX_FbLp_space__pitch].finalvalue, PExch[PARAM_INDEX_FbLp_space__reso].finalvalue);
  instancefba_i.dsp(net1, net10, PExch[PARAM_INDEX_fba_amp].finalvalue);
  instanceFB_i.dsp(net8);
  instancevca__1_i.dsp(net8, net1, net9);
//--------- </object calls> ----------//
//--------- <net latch copy> ----------//
   for(i=0;i<BUFSIZE;i++)
      net9Latch[i]=net9[i];
   for(i=0;i<BUFSIZE;i++)
      net10Latch[i]=net10[i];
//--------- </net latch copy> ----------//
      for(i=0;i<BUFSIZE;i++) outlet_Echoout[i] = instanceEchoout_i._outlet[i];
]]></code.krate>
         <code.midihandler><![CDATA[if ( attr_mididevice > 0 && dev > 0 && attr_mididevice != dev) return;
if ( attr_midiport > 0 && port > 0 && attr_midiport != port) return;
]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="d9f44795bfd6115f91bc84d9b38087afd0709f6e" name="obj_6" x="1680" y="210">
      <params>
         <frac32.u.map name="dry/wet" value="31.5"/>
         <frac32.u.map name=":gain1" value="64.0"/>
         <frac32.s.map name="HP IN:pitch" value="64.0"/>
         <frac32.u.map name="Time" value="48.5"/>
         <frac32.s.map name="FbLp :pitch" value="46.0"/>
         <frac32.u.map name="fba" value="42.0"/>
      </params>
      <attribs/>
      <object class="axoloti.object.AxoObjectFromPatch" id="patch/object">
         <sDescription></sDescription>
         <author>philoop</author>
         <license>GPL</license>
         <inlets>
            <frac32buffer name="echo" description="echo"/>
            <frac32 name="time" description="time"/>
            <frac32 name="FB" description="FB"/>
         </inlets>
         <outlets>
            <frac32buffer name="Echoout" description="Echoout"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="dry/wet">
               <DefaultValue v="0.0"/>
            </frac32.u.map>
            <frac32.u.map.squaregain name=":gain1">
               <DefaultValue v="64.0"/>
            </frac32.u.map.squaregain>
            <frac32.s.map.pitch name="HP IN:pitch">
               <DefaultValue v="64.0"/>
            </frac32.s.map.pitch>
            <frac32.u.map name="Time">
               <DefaultValue v="48.5"/>
            </frac32.u.map>
            <frac32.s.map.pitch name="FbLp :pitch">
               <DefaultValue v="-64.0"/>
            </frac32.s.map.pitch>
            <frac32.u.map.gain name="fba">
               <DefaultValue v="0.0"/>
            </frac32.u.map.gain>
         </params>
         <attribs/>
         <includes/>
         <depends/>
         <code.declaration><![CDATA[    static const uint32_t NPEXCH = 9;
    ParameterExchange_t PExch[NPEXCH];
    int32_t displayVector[3];
    static const uint32_t NPRESETS = 0;
    static const uint32_t NPRESET_ENTRIES = 0;
    static const uint32_t NMODULATIONSOURCES = 0;
    static const uint32_t NMODULATIONTARGETS = 0;
    int32_t PExModulationPrevVal[1][NMODULATIONSOURCES];
/* modsource defines */
/* parameter instance indices */
static const int PARAM_INDEX_dry_slash_wet_value = 0;
static const int PARAM_INDEX__gain1 = 1;
static const int PARAM_INDEX__gain2 = 2;
static const int PARAM_INDEX_HP_space_IN_pitch = 3;
static const int PARAM_INDEX_HP_space_IN_reso = 4;
static const int PARAM_INDEX_Time_time = 5;
static const int PARAM_INDEX_FbLp_space__pitch = 6;
static const int PARAM_INDEX_FbLp_space__reso = 7;
static const int PARAM_INDEX_fba_amp = 8;
/* controller classes */
/* object classes */
class instanceecho{
  public: // v1
  attr_parent *parent;
int32buffer _inlet;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32buffer  & outlet_inlet  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   outlet_inlet[buffer_index] = _inlet[buffer_index];
}
}
}
;class instancedry_slash_wet{
  public: // v1
  attr_parent *parent;
KeyValuePair KVP_instancedry_slash_wet_value;
  public: void Init(attr_parent * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX_dry_slash_wet_value].pfunction = pfun_unsigned_clamp;
  SetKVP_IPVP(&KVP_instancedry_slash_wet_value,ObjectKvpRoot, "dry/wet" ,&parent->PExch[PARAM_INDEX_dry_slash_wet_value], 0, 1<<27);
  KVP_RegisterObject(&KVP_instancedry_slash_wet_value);
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & outlet_out,
int param_value  ){
outlet_out= param_value;

}
}
;class instance{
  public: // v1
  attr_parent *parent;
KeyValuePair KVP_instance_gain1;
KeyValuePair KVP_instance_gain2;
  public: void Init(attr_parent * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX__gain1].pfunction = pfun_signed_clamp_fullrange_squarelaw;
  SetKVP_IPVP(&KVP_instance_gain1,ObjectKvpRoot, ":gain1" ,&parent->PExch[PARAM_INDEX__gain1], 0, 1<<27);
  KVP_RegisterObject(&KVP_instance_gain1);
parent->PExch[PARAM_INDEX__gain2].pfunction = pfun_signed_clamp_fullrange_squarelaw;
  SetKVP_IPVP(&KVP_instance_gain2,ObjectKvpRoot, ":gain2" ,&parent->PExch[PARAM_INDEX__gain2], 0, 1<<27);
  KVP_RegisterObject(&KVP_instance_gain2);
}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_bus__in,
const int32buffer  inlet_in1,
const int32buffer  inlet_in2,
int32buffer  & outlet_out,
int param_gain1,
int param_gain2  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   int32_t accum = ___SMMUL(inlet_in1[buffer_index],param_gain1);
   accum = ___SMMLA(inlet_in2[buffer_index],param_gain2,accum);
;   outlet_out[buffer_index]=  __SSAT(inlet_bus__in[buffer_index] + (accum<<1),28);

}
}
}
;class instanceHP_space_IN{
  public: // v1
  attr_parent *parent;
KeyValuePair KVP_instanceHP_space_IN_pitch;
KeyValuePair KVP_instanceHP_space_IN_reso;
biquad_state bs;biquad_coefficients bc;

  public: void Init(attr_parent * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX_HP_space_IN_pitch].pfunction = pfun_signed_clamp;
  SetKVP_IPVP(&KVP_instanceHP_space_IN_pitch,ObjectKvpRoot, "HP IN:pitch" ,&parent->PExch[PARAM_INDEX_HP_space_IN_pitch], -1<<27, 1<<27);
  KVP_RegisterObject(&KVP_instanceHP_space_IN_pitch);
parent->PExch[PARAM_INDEX_HP_space_IN_reso].pfunction = pfun_unsigned_clamp;
  SetKVP_IPVP(&KVP_instanceHP_space_IN_reso,ObjectKvpRoot, "HP IN:reso" ,&parent->PExch[PARAM_INDEX_HP_space_IN_reso], 0, 1<<27);
  KVP_RegisterObject(&KVP_instanceHP_space_IN_reso);
biquad_clearstate(&bs);

}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_in,
const int32_t  inlet_pitch,
const int32_t  inlet_reso,
int32buffer  & outlet_out,
int param_pitch,
int param_reso  ){
      int32_t freq;
      MTOF(param_pitch + inlet_pitch,freq);
      biquad_lp_coefs(&bc,freq,INT_MAX - (__USAT(inlet_reso + param_reso,27)<<4));
      biquad_dsp(&bs,&bc,inlet_in,outlet_out);

}
}
;class instanceecholoti{
  public: // v1
  attr_parent *parent;
static const uint32_t LENGTHPOW = (15);
static const uint32_t LENGTH = (1<<15);
static const uint32_t LENGTHMASK = ((1<<15)-1);
int16_t *array;
uint32_t writepos;
  public: void Init(attr_parent * _parent) {
parent = _parent;
static int16_t _array[1][1<<15]  __attribute__ ((section (".sdram")));
array = &_array[parent->polyIndex][0];
   int i;
   writepos = 0;
   for(i=0;i<LENGTH;i++) array[i] = 0;

}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_in  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
  writepos = (writepos + 1)&LENGTHMASK;
   array[writepos] = __SSAT(inlet_in[buffer_index]>>14,16);

}
}
}
;class instancetime{
  public: // v1
  attr_parent *parent;
int32_t _inlet;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & outlet_inlet  ){
  outlet_inlet = _inlet;

}
}
;class instanceinterp__1{
  public: // v1
  attr_parent *parent;
   int32_t _prev;
    int32_t _step;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_i,
int32buffer  & outlet_o  ){
   _step = (inlet_i - _prev)>>4;
   int32_t _i = _prev;
   _prev = inlet_i;

int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   outlet_o[buffer_index] = _i;
   _i += _step;

}
}
}
;class instanceTime{
  public: // v1
  attr_parent *parent;
KeyValuePair KVP_instanceTime_time;
  public: void Init(attr_parent * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX_Time_time].pfunction = pfun_unsigned_clamp;
  SetKVP_IPVP(&KVP_instanceTime_time,ObjectKvpRoot, "Time" ,&parent->PExch[PARAM_INDEX_Time_time], 0, 1<<27);
  KVP_RegisterObject(&KVP_instanceTime_time);
}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_time,
int32buffer  & outlet_out,
int param_time  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
      uint32_t tmp_d =  __USAT(param_time + inlet_time[buffer_index],27);
      uint32_t tmp_di = parent->instanceecholoti_i.writepos - (tmp_d>>(27-parent->instanceecholoti_i.LENGTHPOW)) - BUFSIZE + buffer_index -1;
      uint32_t tmp_w1 = (tmp_d<<(parent->instanceecholoti_i.LENGTHPOW+3)) & 0x3FFFFFFF;
      uint32_t tmp_w2 = (1<<30) - tmp_w1;
      int32_t tmp_a1 = parent->instanceecholoti_i.array[tmp_di&parent->instanceecholoti_i.LENGTHMASK]<<16;
      int32_t tmp_a2 = parent->instanceecholoti_i.array[(tmp_di+1)&parent->instanceecholoti_i.LENGTHMASK]<<16;
      int32_t tmp_r = ___SMMUL(tmp_a1,tmp_w1);
      tmp_r = ___SMMLA(tmp_a2,tmp_w2,tmp_r);
      outlet_out[buffer_index]= tmp_r;

}
}
}
;class instancexfade__1{
  public: // v1
  attr_parent *parent;
  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_i1,
const int32buffer  inlet_i2,
const int32_t  inlet_c,
int32buffer  & outlet_o  ){
   int32_t ccompl = ((128<<20)-inlet_c);

int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   {
      int64_t a = (int64_t)inlet_i2[buffer_index] * inlet_c;
      a += (int64_t)inlet_i1[buffer_index] * ccompl;
      outlet_o[buffer_index]= a>>27;
   }

}
}
}
;class instanceEchoout{
  public: // v1
  attr_parent *parent;
int32buffer _outlet;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_outlet  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   _outlet[buffer_index] = inlet_outlet[buffer_index];

}
}
}
;class instanceFbLp_space_{
  public: // v1
  attr_parent *parent;
KeyValuePair KVP_instanceFbLp_space__pitch;
KeyValuePair KVP_instanceFbLp_space__reso;
biquad_state bs;biquad_coefficients bc;

  public: void Init(attr_parent * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX_FbLp_space__pitch].pfunction = pfun_signed_clamp;
  SetKVP_IPVP(&KVP_instanceFbLp_space__pitch,ObjectKvpRoot, "FbLp :pitch" ,&parent->PExch[PARAM_INDEX_FbLp_space__pitch], -1<<27, 1<<27);
  KVP_RegisterObject(&KVP_instanceFbLp_space__pitch);
parent->PExch[PARAM_INDEX_FbLp_space__reso].pfunction = pfun_unsigned_clamp;
  SetKVP_IPVP(&KVP_instanceFbLp_space__reso,ObjectKvpRoot, "FbLp :reso" ,&parent->PExch[PARAM_INDEX_FbLp_space__reso], 0, 1<<27);
  KVP_RegisterObject(&KVP_instanceFbLp_space__reso);
biquad_clearstate(&bs);

}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_in,
const int32_t  inlet_pitch,
const int32_t  inlet_reso,
int32buffer  & outlet_out,
int param_pitch,
int param_reso  ){
      int32_t freq;
      MTOF(param_pitch + inlet_pitch,freq);
      biquad_lp_coefs(&bc,freq,INT_MAX - (__USAT(inlet_reso + param_reso,27)<<4));
      biquad_dsp(&bs,&bc,inlet_in,outlet_out);

}
}
;class instancefba{
  public: // v1
  attr_parent *parent;
KeyValuePair KVP_instancefba_amp;
  public: void Init(attr_parent * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX_fba_amp].pfunction = pfun_unsigned_clamp_fullrange;
  SetKVP_IPVP(&KVP_instancefba_amp,ObjectKvpRoot, "fba" ,&parent->PExch[PARAM_INDEX_fba_amp], 0, 1<<27);
  KVP_RegisterObject(&KVP_instancefba_amp);
}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_in,
int32buffer  & outlet_out,
int param_amp  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
outlet_out[buffer_index]= ___SMMUL(param_amp,inlet_in[buffer_index])<<1;

}
}
}
;class instanceFB{
  public: // v1
  attr_parent *parent;
int32_t _inlet;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & outlet_inlet  ){
  outlet_inlet = _inlet;

}
}
;class instancevca__1{
  public: // v1
  attr_parent *parent;
   int32_t prev;
    int32_t step;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_v,
const int32buffer  inlet_a,
int32buffer  & outlet_o  ){
   step = (inlet_v - prev)>>4;
   int32_t i = prev;
   prev = inlet_v;

int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   outlet_o[buffer_index] =  ___SMMUL(inlet_a[buffer_index],i)<<5;
   i += step;

}
}
}
;/* controller instances */
/* object instances */
     instanceecho instanceecho_i;
     instancedry_slash_wet instancedry_slash_wet_i;
     instance instance_i;
     instanceHP_space_IN instanceHP_space_IN_i;
     instanceecholoti instanceecholoti_i;
     instancetime instancetime_i;
     instanceinterp__1 instanceinterp__1_i;
     instanceTime instanceTime_i;
     instancexfade__1 instancexfade__1_i;
     instanceEchoout instanceEchoout_i;
     instanceFbLp_space_ instanceFbLp_space__i;
     instancefba instancefba_i;
     instanceFB instanceFB_i;
     instancevca__1 instancevca__1_i;
/* net latches */
    int32buffer  net9Latch;
    int32buffer  net10Latch;
static const int polyIndex = 0;
   static int32_t * GetInitParams(void){
      static const int32_t p[9]= {
      0,
      134217728,
      134217728,
      134217728,
      0,
      101711872,
      -134217728,
      0,
      0
      };
      return (int32_t *)&p[0];
   }   static const int32_t * GetPresets(void){
      static const int32_t p[NPRESETS][NPRESET_ENTRIES][2] = {
      };
   return &p[0][0][0];
   };
void ApplyPreset(int index){
   if (!index) {
     int i;
     int32_t *p = GetInitParams();
     for(i=0;i<NPEXCH;i++){
        PExParameterChange(&PExch[i],p[i],0xFFEF);
     }
   }
   index--;
   if (index < NPRESETS) {
     PresetParamChange_t *pa = (PresetParamChange_t *)(GetPresets());
     PresetParamChange_t *p = &pa[index*NPRESET_ENTRIES];
       int i;
       for(i=0;i<NPRESET_ENTRIES;i++){
         PresetParamChange_t *pp = &p[i];
         if ((pp->pexIndex>=0)&&(pp->pexIndex<NPEXCH)) {
           PExParameterChange(&PExch[pp->pexIndex],pp->value,0xFFEF);         }
         else break;
       }
   }
}
   static PExModulationTarget_t * GetModulationTable(void){
    static const PExModulationTarget_t PExModulationSources[NMODULATIONSOURCES][NMODULATIONTARGETS] = 
{};
   return (PExModulationTarget_t *)&PExModulationSources[0][0];
   };
]]></code.declaration>
         <code.init><![CDATA[   int i;
   int j;
   const int32_t *p;
   p = GetInitParams();
   for(j=0;j<9;j++){
      PExch[j].value = p[j];
      PExch[j].modvalue = p[j];
      PExch[j].signals = 0;
      PExch[j].pfunction = 0;
   }
   int32_t *pp = &PExModulationPrevVal[0][0];
   for(j=0;j<attr_poly*NMODULATIONSOURCES;j++){
      *pp = 0; pp++;
   }
     displayVector[0] = 0x446F7841;
     displayVector[1] = 0;
     displayVector[2] = 0;
   instanceecho_i.Init(this );
   instancedry_slash_wet_i.Init(this );
   instance_i.Init(this );
   instanceHP_space_IN_i.Init(this );
   instanceecholoti_i.Init(this );
   instancetime_i.Init(this );
   instanceinterp__1_i.Init(this );
   instanceTime_i.Init(this );
   instancexfade__1_i.Init(this );
   instanceEchoout_i.Init(this );
   instanceFbLp_space__i.Init(this );
   instancefba_i.Init(this );
   instanceFB_i.Init(this );
   instancevca__1_i.Init(this );
      int k;
      for (k = 0; k < NPEXCH; k++) {
        if (PExch[k].pfunction){
          (PExch[k].pfunction)(&PExch[k]);
        } else {
          PExch[k].finalvalue = PExch[k].value;
        }
      }
]]></code.init>
         <code.dispose><![CDATA[   instancevca__1_i.Dispose();
   instanceFB_i.Dispose();
   instancefba_i.Dispose();
   instanceFbLp_space__i.Dispose();
   instanceEchoout_i.Dispose();
   instancexfade__1_i.Dispose();
   instanceTime_i.Dispose();
   instanceinterp__1_i.Dispose();
   instancetime_i.Dispose();
   instanceecholoti_i.Dispose();
   instanceHP_space_IN_i.Dispose();
   instance_i.Dispose();
   instancedry_slash_wet_i.Dispose();
   instanceecho_i.Dispose();
]]></code.dispose>
         <code.krate><![CDATA[int i; /*...*/
   for(i=0;i<BUFSIZE;i++) instanceecho_i._inlet[i] = inlet_echo[i];
   instancetime_i._inlet = inlet_time;
   instanceFB_i._inlet = inlet_FB;
//--------- <nets> -----------//
    int32buffer  net0;
    int32buffer  net1;
    int32buffer  net2;
    int32buffer  net3;
    int32buffer  net4;
    int32_t  net5;
    int32buffer  net6;
    int32_t  net7;
    int32_t  net8;
    int32buffer  net9;
    int32buffer  net10;
    int32buffer  net11;
//--------- </nets> ----------//
//--------- <zero> ----------//
  int32_t UNCONNECTED_OUTPUT;
  static const int32_t UNCONNECTED_INPUT=0;
  static const int32buffer zerobuffer = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  int32buffer UNCONNECTED_OUTPUT_BUFFER;
//--------- </zero> ----------//
//--------- <controller calls> ----------//
//--------- <object calls> ----------//
  instanceecho_i.dsp(net2);
  instancedry_slash_wet_i.dsp(net5, PExch[PARAM_INDEX_dry_slash_wet_value].finalvalue);
  instance_i.dsp(net10Latch, net2, net9Latch, net11, PExch[PARAM_INDEX__gain1].finalvalue, PExch[PARAM_INDEX__gain2].finalvalue);
  instanceHP_space_IN_i.dsp(net11, 0 , 0 , net0, PExch[PARAM_INDEX_HP_space_IN_pitch].finalvalue, PExch[PARAM_INDEX_HP_space_IN_reso].finalvalue);
  instanceecholoti_i.dsp(net0);
  instancetime_i.dsp(net7);
  instanceinterp__1_i.dsp(net7, net6);
  instanceTime_i.dsp(net6, net3, PExch[PARAM_INDEX_Time_time].finalvalue);
  instancexfade__1_i.dsp(net2, net3, net5, net4);
  instanceEchoout_i.dsp(net4);
  instanceFbLp_space__i.dsp(net3, 0 , 0 , net1, PExch[PARAM_INDEX_FbLp_space__pitch].finalvalue, PExch[PARAM_INDEX_FbLp_space__reso].finalvalue);
  instancefba_i.dsp(net1, net10, PExch[PARAM_INDEX_fba_amp].finalvalue);
  instanceFB_i.dsp(net8);
  instancevca__1_i.dsp(net8, net1, net9);
//--------- </object calls> ----------//
//--------- <net latch copy> ----------//
   for(i=0;i<BUFSIZE;i++)
      net9Latch[i]=net9[i];
   for(i=0;i<BUFSIZE;i++)
      net10Latch[i]=net10[i];
//--------- </net latch copy> ----------//
      for(i=0;i<BUFSIZE;i++) outlet_Echoout[i] = instanceEchoout_i._outlet[i];
]]></code.krate>
         <code.midihandler><![CDATA[if ( attr_mididevice > 0 && dev > 0 && attr_mididevice != dev) return;
if ( attr_midiport > 0 && port > 0 && attr_midiport != port) return;
]]></code.midihandler>
      </object>
   </patchobj>
   <obj type="disp/chart b" uuid="d2bdf496f96ee521628490a038411210fbe29b15" name="chart_7" x="350" y="224">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/chart b" uuid="d2bdf496f96ee521628490a038411210fbe29b15" name="chart_1" x="1008" y="252">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="d9f44795bfd6115f91bc84d9b38087afd0709f6e" name="%slide" x="1078" y="252">
      <params>
         <frac32.s.map name="prob" value="-64.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="4e2a1eb9aae14e9fa00cf31a3g0c6b1a0245b790">
         <sDescription>probabiltiy bang</sDescription>
         <author>Philoop</author>
         <license>BSD</license>
         <inlets>
            <bool32 name="trig"/>
         </inlets>
         <outlets>
            <bool32 name="o" description="output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map name="prob" noLabel="false"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t val;
int ntrig;
int rnd;]]></code.declaration>
         <code.init><![CDATA[val = (int32_t)(GenerateRandomNumber())>>4;
      ntrig = 0;
      rnd = 0;]]></code.init>
         <code.krate><![CDATA[ if ((inlet_trig>0) && !ntrig) { val = (int32_t)(GenerateRandomNumber())>>4; ntrig=1;}
      else if (!(inlet_trig>0)) ntrig=0;
      rnd=val;
      rnd = param_prob>val ;
      outlet_o = (rnd)&&(inlet_trig);
]]></code.krate>
      </object>
   </patchobj>
   <obj type="math/exp" uuid="3f0e6db61bc98c04b42a940e7a93abbf8a178317" name="exp_1" x="1302" y="252">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/half" uuid="d3aa9c64dbf1ec7871bbc3e2d8905f8e443c9823" name="*c_2" x="1372" y="252">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/counter" uuid="7a141ba82230e54e5f5cd12da5dbe5a74ba854a5" name="counter_6" x="0" y="308">
      <params>
         <int32 name="maximum" value="4"/>
      </params>
      <attribs/>
   </obj>
   <obj type="logic/counter" uuid="7a141ba82230e54e5f5cd12da5dbe5a74ba854a5" name="counter_2" x="84" y="308">
      <params>
         <int32 name="maximum" value="4"/>
      </params>
      <attribs/>
   </obj>
   <obj type="logic/counter" uuid="7a141ba82230e54e5f5cd12da5dbe5a74ba854a5" name="counter_4" x="168" y="308">
      <params>
         <int32 name="maximum" value="4"/>
      </params>
      <attribs/>
   </obj>
   <obj type="logic/counter" uuid="7a141ba82230e54e5f5cd12da5dbe5a74ba854a5" name="counter_5" x="252" y="308">
      <params>
         <int32 name="maximum" value="4"/>
      </params>
      <attribs/>
   </obj>
   <patcher type="patch/patcher" uuid="a245c220448000c901caef03c8b07740d533914a" name="patcher_7" x="588" y="308">
      <params>
         <int2x16 name="OctA" value="1177732528"/>
         <int2x16 name="GateA" value="2097512851"/>
         <bin16 name="SlideA" value="54997"/>
      </params>
      <attribs/>
      <subpatch appVersion="1.0.8">
         <obj type="patch/inlet b" sha="17c8e188371661163bfa55cea9974eecb785fb06" uuid="3b0d3eacb5bb978cb05d1372aa2714d5a4790844" name="gateinA" x="70" y="42">
            <params/>
            <attribs/>
         </obj>
         <obj type="sel/sel 4l 16" sha="9e3ae6a7db1c66667238470702a780a5e2d5fdd0" uuid="350102b0d3f1ca0bbba1cde09aedae8345ffb21a" name="OctA" x="182" y="42">
            <params>
               <int2x16 name="t1" onParent="true" value="0">
                  <presets>
                     <preset index="16">
                        <i i="1849591473"/>
                     </preset>
                  </presets>
               </int2x16>
            </params>
            <attribs/>
         </obj>
         <obj type="math/muls 12" uuid="d6b556443075484966ce9f99adf1bcc9662d0126" name="muls_6" x="378" y="42">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/outlet i" uuid="aae2176b26209e34e4fdeba5edb1ace82d178655" name="oct" x="462" y="42">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/inlet i" sha="525f64aba3d51dde5253cccedd116ec84bf5d5d1" uuid="f11927f00c59219df0c50f73056aa19f125540b7" name="countA" x="70" y="98">
            <params/>
            <attribs/>
         </obj>
         <comment type="patch/comment" x="434" y="112" text=" if slide is on"/>
         <comment type="patch/comment" x="434" y="126" text="Sustains the gate"/>
         <obj type="sel/sel 4l 16" sha="9e3ae6a7db1c66667238470702a780a5e2d5fdd0" uuid="350102b0d3f1ca0bbba1cde09aedae8345ffb21a" name="GateA" x="182" y="140">
            <params>
               <int2x16 name="t1" onParent="true" value="0">
                  <presets>
                     <preset index="16">
                        <i i="1849591473"/>
                     </preset>
                  </presets>
               </int2x16>
            </params>
            <attribs/>
         </obj>
         <comment type="patch/comment" x="434" y="140" text="or halfs note gate"/>
         <comment type="patch/comment" x="434" y="154" text="play"/>
         <comment type="patch/comment" x="434" y="168" text="only if gate is on"/>
         <comment type="patch/comment" x="616" y="168" text="keeps Acc when Slide is on"/>
         <patchobj type="patch/object" uuid="d9f44795bfd6115f91bc84d9b38087afd0709f6e" name="slide gate" x="434" y="182">
            <params/>
            <attribs/>
            <object id="patch/object" uuid="a0ed8193-bc99-4d5b-82aa-acdc479ca5f3">
               <sDescription>description</sDescription>
               <inlets>
                  <bool32 name="gateext"/>
                  <bool32 name="slide"/>
                  <bool32 name="gateint"/>
                  <int32 name="gatei"/>
               </inlets>
               <outlets>
                  <int32 name="o"/>
               </outlets>
               <displays/>
               <params/>
               <attribs/>
               <includes/>
               <code.krate><![CDATA[outlet_o = inlet_slide?(inlet_slide&&inlet_gateext):(inlet_gatei&&inlet_gateext)?inlet_gatei:0;		


]]></code.krate>
            </object>
         </patchobj>
         <obj type="mux/mux 2" uuid="16f90f81694766b0bc8187bfcba5a021e5701d81" name="when slide on keep acc" x="630" y="182">
            <params/>
            <attribs/>
         </obj>
         <obj type="math/*" uuid="6a31299e3a491edd8c4df0e809a519a35cc08a3b" name="+_1" x="798" y="182">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/outlet i" sha="9c18b5ec0ea721bb98852ab326891478ca87a360" uuid="aae2176b26209e34e4fdeba5edb1ace82d178655" name="Gate/Acca" x="910" y="182">
            <params/>
            <attribs/>
         </obj>
         <obj type="logic/latch" uuid="2a50e4657301542464c6a97931847b5e8e0e6d2b" name="latch" x="546" y="196">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/outlet b" sha="d53edf73b9c33108cbb6e5487759ac27b809cfcc" uuid="191792f616d4835dba0b55375474a12942e5bcbd" name="slidea" x="910" y="224">
            <params/>
            <attribs/>
         </obj>
         <obj type="sel/sel b 16" sha="6682fc38e0107fe6e8000e4bb0fc4bab7c74a256" uuid="ee021bac36292c167fe475835603aac88a83b3fd" name="SlideA" x="182" y="238">
            <params>
               <bin16 name="b16" onParent="true" value="0">
                  <presets>
                     <preset index="16">
                        <i i="27201"/>
                     </preset>
                  </presets>
               </bin16>
            </params>
            <attribs/>
         </obj>
         <comment type="patch/comment" x="742" y="252" text="only when gate is on"/>
         <obj type="ctrl/i" uuid="a3786816db6ea5bc6ac4193a5cccdb2c83b83496" name="i_1" x="742" y="266">
            <params>
               <int32 name="value" value="21"/>
            </params>
            <attribs/>
         </obj>
         <obj type="patch/inlet b" sha="17c8e188371661163bfa55cea9974eecb785fb06" uuid="3b0d3eacb5bb978cb05d1372aa2714d5a4790844" name="slide" x="70" y="280">
            <params/>
            <attribs/>
         </obj>
         <obj type="logic/xor 2" uuid="7902b0001a2672a9008b3882d3681ec3e33fec74" name="xor_1" x="812" y="322">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/outlet i" uuid="aae2176b26209e34e4fdeba5edb1ace82d178655" name="outlet_1" x="812" y="420">
            <params/>
            <attribs/>
         </obj>
         <nets>
            <net>
               <source obj="OctA" outlet="o"/>
               <dest obj="muls_6" inlet="in"/>
            </net>
            <net>
               <source obj="SlideA" outlet="o"/>
               <dest obj="slide gate" inlet="slide"/>
               <dest obj="latch" inlet="trig"/>
               <dest obj="when slide on keep acc" inlet="s"/>
               <dest obj="xor_1" inlet="i1"/>
            </net>
            <net>
               <source obj="GateA" outlet="o"/>
               <dest obj="slide gate" inlet="gateint"/>
               <dest obj="slide gate" inlet="gatei"/>
            </net>
            <net>
               <source obj="gateinA" outlet="inlet"/>
               <dest obj="slide gate" inlet="gateext"/>
            </net>
            <net>
               <source obj="countA" outlet="inlet"/>
               <dest obj="OctA" inlet="in"/>
               <dest obj="GateA" inlet="in"/>
               <dest obj="SlideA" inlet="in"/>
            </net>
            <net>
               <source obj="slide gate" outlet="o"/>
               <dest obj="latch" inlet="i"/>
               <dest obj="when slide on keep acc" inlet="i1"/>
               <dest obj="outlet_1" inlet="outlet"/>
            </net>
            <net>
               <source obj="latch" outlet="o"/>
               <dest obj="when slide on keep acc" inlet="i2"/>
            </net>
            <net>
               <source obj="when slide on keep acc" outlet="o"/>
               <dest obj="+_1" inlet="a"/>
            </net>
            <net>
               <source obj="i_1" outlet="out"/>
               <dest obj="+_1" inlet="b"/>
            </net>
            <net>
               <source obj="+_1" outlet="result"/>
               <dest obj="Gate/Acca" inlet="outlet"/>
            </net>
            <net>
               <source obj="xor_1" outlet="o"/>
               <dest obj="slidea" inlet="outlet"/>
            </net>
            <net>
               <source obj="slide" outlet="inlet"/>
               <dest obj="xor_1" inlet="i2"/>
            </net>
            <net>
               <source obj="muls_6" outlet="out"/>
               <dest obj="oct" inlet="outlet"/>
            </net>
         </nets>
         <settings>
            <subpatchmode>no</subpatchmode>
         </settings>
         <notes><![CDATA[]]></notes>
      </subpatch>
   </patcher>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="expo" x="1008" y="364">
      <params>
         <frac32.s.map name="value" value="2.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="d9f44795bfd6115f91bc84d9b38087afd0709f6e" name="obj_4" x="0" y="392">
      <params>
         <frac32.s.map name="Upspeed" value="-17.0"/>
         <frac32.u.map name="UpGain" value="33.5"/>
         <bool32.tgl name="sync" value="0"/>
         <frac32.s.map name="Downspeed" value="-38.0"/>
         <frac32.u.map name="DownGain" value="36.0"/>
         <frac32.u.map name="Xfade Rnd/Sine:gain1" value="14.0"/>
         <frac32.u.map name="Xfade Rnd/Sine:gain2" value="21.0"/>
         <bool32.tgl name="syncin/ext" value="0"/>
         <frac32.s.map name="Sine" value="-28.0"/>
         <frac32.u.map name="Sinespeedrnd" value="10.0"/>
      </params>
      <attribs/>
      <object class="axoloti.object.AxoObjectFromPatch" id="patch/object">
         <sDescription></sDescription>
         <inlets>
            <bool32 name="Reset" description="Reset"/>
            <frac32 name="UP/DOWN" description="UP/DOWN"/>
            <bool32 name="RndTrig" description="RndTrig"/>
         </inlets>
         <outlets>
            <frac32 name="UniPolar+" description="UniPolar+"/>
            <frac32 name="Bipolar" description="Bipolar"/>
            <frac32 name="Up-Down +-" description="Up-Down +-"/>
            <frac32 name="Up" description="Up"/>
            <frac32 name="Down" description="Down"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map name="Upspeed">
               <DefaultValue v="1.0"/>
            </frac32.s.map>
            <frac32.u.map.gain name="UpGain">
               <DefaultValue v="64.0"/>
            </frac32.u.map.gain>
            <bool32.tgl name="sync"/>
            <frac32.s.map name="Downspeed">
               <DefaultValue v="1.0"/>
            </frac32.s.map>
            <frac32.u.map.gain name="DownGain">
               <DefaultValue v="36.0"/>
            </frac32.u.map.gain>
            <frac32.u.map name="Xfade Rnd/Sine:gain1">
               <DefaultValue v="64.0"/>
            </frac32.u.map>
            <frac32.u.map name="Xfade Rnd/Sine:gain2">
               <DefaultValue v="0.0"/>
            </frac32.u.map>
            <bool32.tgl name="syncin/ext"/>
            <frac32.s.map.lfopitch name="Sine">
               <DefaultValue v="-28.0"/>
            </frac32.s.map.lfopitch>
            <frac32.u.map.gain name="Sinespeedrnd">
               <DefaultValue v="0.0"/>
            </frac32.u.map.gain>
         </params>
         <attribs/>
         <includes/>
         <depends/>
         <code.declaration><![CDATA[    static const uint32_t NPEXCH = 12;
    ParameterExchange_t PExch[NPEXCH];
    int32_t displayVector[3];
    static const uint32_t NPRESETS = 8;
    static const uint32_t NPRESET_ENTRIES = 32;
    static const uint32_t NMODULATIONSOURCES = 8;
    static const uint32_t NMODULATIONTARGETS = 8;
    int32_t PExModulationPrevVal[1][NMODULATIONSOURCES];
/* modsource defines */
/* parameter instance indices */
static const int PARAM_INDEX_Upspeed_value = 0;
static const int PARAM_INDEX_SawUp_pitch = 1;
static const int PARAM_INDEX_UpGain_amp = 2;
static const int PARAM_INDEX_sync_onoff = 3;
static const int PARAM_INDEX_Downspeed_value = 4;
static const int PARAM_INDEX_SawDown_pitch = 5;
static const int PARAM_INDEX_DownGain_amp = 6;
static const int PARAM_INDEX_Xfade_space_Rnd_slash_Sine_gain1 = 7;
static const int PARAM_INDEX_Xfade_space_Rnd_slash_Sine_gain2 = 8;
static const int PARAM_INDEX_syncin_slash_ext_onoff = 9;
static const int PARAM_INDEX_Sine_pitch = 10;
static const int PARAM_INDEX_Sinespeedrnd_amp = 11;
/* controller classes */
/* object classes */
class instanceUpspeed{
  public: // v1
  attr_parent *parent;
KeyValuePair KVP_instanceUpspeed_value;
  public: void Init(attr_parent * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX_Upspeed_value].pfunction = pfun_signed_clamp;
  SetKVP_IPVP(&KVP_instanceUpspeed_value,ObjectKvpRoot, "Upspeed" ,&parent->PExch[PARAM_INDEX_Upspeed_value], -1<<27, 1<<27);
  KVP_RegisterObject(&KVP_instanceUpspeed_value);
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & outlet_out,
int param_value  ){
outlet_out= param_value;

}
}
;class instanceSawUp{
  public: // v1
  attr_parent *parent;
KeyValuePair KVP_instanceSawUp_pitch;
uint32_t Phase;
int32_t pPhase;
uint32_t r;

  public: void Init(attr_parent * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX_SawUp_pitch].pfunction = pfun_signed_clamp;
  SetKVP_IPVP(&KVP_instanceSawUp_pitch,ObjectKvpRoot, "SawUp" ,&parent->PExch[PARAM_INDEX_SawUp_pitch], -1<<27, 1<<27);
  KVP_RegisterObject(&KVP_instanceSawUp_pitch);
Phase = 0;
pPhase = 0;
   r = 1;

}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_pitch,
const int32_t  inlet_reset,
int32_t  & outlet_wave,
int32_t  & outlet_sync,
int param_pitch  ){
   {
      if (inlet_reset && r) {
         Phase = 0;
         r = 0;
      } else {
         if (!inlet_reset) r = 1;
         int32_t freq;
         MTOFEXTENDED(param_pitch + inlet_pitch,freq);
         Phase += freq>>2;
      }
      outlet_sync = (((int32_t)Phase)>=0)&&(pPhase<0);
      outlet_wave= (Phase>>5);
      pPhase = Phase;
   }
}
}
;class instanceUpGain{
  public: // v1
  attr_parent *parent;
KeyValuePair KVP_instanceUpGain_amp;
  public: void Init(attr_parent * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX_UpGain_amp].pfunction = pfun_unsigned_clamp_fullrange;
  SetKVP_IPVP(&KVP_instanceUpGain_amp,ObjectKvpRoot, "UpGain" ,&parent->PExch[PARAM_INDEX_UpGain_amp], 0, 1<<27);
  KVP_RegisterObject(&KVP_instanceUpGain_amp);
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_in,
int32_t  & outlet_out,
int param_amp  ){
outlet_out= ___SMMUL(param_amp,inlet_in)<<1;

}
}
;class instancesync{
  public: // v1
  attr_parent *parent;
KeyValuePair KVP_instancesync_onoff;
    static const uint32_t NPEXCH = 1;
    ParameterExchange_t PExch[NPEXCH];
    int32_t displayVector[3];
    static const uint32_t NPRESETS = 0;
    static const uint32_t NPRESET_ENTRIES = 0;
    static const uint32_t NMODULATIONSOURCES = 0;
    static const uint32_t NMODULATIONTARGETS = 0;
    int32_t PExModulationPrevVal[1][NMODULATIONSOURCES];
/* modsource defines */
/* parameter instance indices */
static const int PARAM_INDEX_onoff_b = 0;
/* controller classes */
/* object classes */
class instancemux__1{
  public: // v1
  instancesync *parent;
  public: void Init(instancesync * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_i1,
const int32_t  inlet_i2,
const int32_t  inlet_s,
int32_t  & outlet_o  ){
   outlet_o= (inlet_s)?inlet_i2:inlet_i1;

}
}
;class instanceoutt{
  public: // v1
  instancesync *parent;
int32_t _outlet;

  public: void Init(instancesync * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_outlet  ){
  _outlet = inlet_outlet;

}
}
;class instanceinn{
  public: // v1
  instancesync *parent;
int32_t _inlet;

  public: void Init(instancesync * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & outlet_inlet  ){
  outlet_inlet = _inlet;

}
}
;class instanceonoff{
  public: // v1
  instancesync *parent;
KeyValuePair KVP_instanceonoff_b;
  public: void Init(instancesync * _parent) {
parent = _parent;
    parent->PExch[PARAM_INDEX_onoff_b].signals = 0;
    SetKVP_IPVP(&KVP_instanceonoff_b,ObjectKvpRoot, "KVP_instanceonoff_b" ,&parent->PExch[PARAM_INDEX_onoff_b],0,65535);
  KVP_RegisterObject(&KVP_instanceonoff_b);
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & outlet_o,
int param_b  ){
outlet_o=param_b;

}
}
;/* controller instances */
/* object instances */
     instancemux__1 instancemux__1_i;
     instanceoutt instanceoutt_i;
     instanceinn instanceinn_i;
     instanceonoff instanceonoff_i;
/* net latches */
    int32_t  net0Latch;
    int32_t  net2Latch;
static const int polyIndex = 0;
   static int32_t * GetInitParams(void){
      static const int32_t p[1]= {
      1
      };
      return (int32_t *)&p[0];
   }   static const int32_t * GetPresets(void){
      static const int32_t p[NPRESETS][NPRESET_ENTRIES][2] = {
      };
   return &p[0][0][0];
   };
void ApplyPreset(int index){
   if (!index) {
     int i;
     int32_t *p = GetInitParams();
     for(i=0;i<NPEXCH;i++){
        PExParameterChange(&PExch[i],p[i],0xFFEF);
     }
   }
   index--;
   if (index < NPRESETS) {
     PresetParamChange_t *pa = (PresetParamChange_t *)(GetPresets());
     PresetParamChange_t *p = &pa[index*NPRESET_ENTRIES];
       int i;
       for(i=0;i<NPRESET_ENTRIES;i++){
         PresetParamChange_t *pp = &p[i];
         if ((pp->pexIndex>=0)&&(pp->pexIndex<NPEXCH)) {
           PExParameterChange(&PExch[pp->pexIndex],pp->value,0xFFEF);         }
         else break;
       }
   }
}
   static PExModulationTarget_t * GetModulationTable(void){
    static const PExModulationTarget_t PExModulationSources[NMODULATIONSOURCES][NMODULATIONTARGETS] = 
{};
   return (PExModulationTarget_t *)&PExModulationSources[0][0];
   };

  public: void Init(attr_parent * _parent) {
parent = _parent;
// on Parent: propagate onoff true synconoff_b
parent->PExch[PARAM_INDEX_sync_onoff].pfunction = PropagateToSub;
parent->PExch[PARAM_INDEX_sync_onoff].finalvalue = (int32_t)(&(parent->instancesync_i.PExch[instancesync::PARAM_INDEX_onoff_b]));
   int i;
   int j;
   const int32_t *p;
   p = GetInitParams();
   for(j=0;j<1;j++){
      PExch[j].value = p[j];
      PExch[j].modvalue = p[j];
      PExch[j].signals = 0;
      PExch[j].pfunction = 0;
   }
   int32_t *pp = &PExModulationPrevVal[0][0];
   for(j=0;j<1*NMODULATIONSOURCES;j++){
      *pp = 0; pp++;
   }
     displayVector[0] = 0x446F7841;
     displayVector[1] = 0;
     displayVector[2] = 0;
   instancemux__1_i.Init(this );
   instanceoutt_i.Init(this );
   instanceinn_i.Init(this );
   instanceonoff_i.Init(this );
      int k;
      for (k = 0; k < NPEXCH; k++) {
        if (PExch[k].pfunction){
          (PExch[k].pfunction)(&PExch[k]);
        } else {
          PExch[k].finalvalue = PExch[k].value;
        }
      }

}
  public: void Dispose() {
   instanceonoff_i.Dispose();
   instanceinn_i.Dispose();
   instanceoutt_i.Dispose();
   instancemux__1_i.Dispose();

}
  public: void dsp (const int32_t  inlet_inn,
int32_t  & outlet_outt  ){
int i; /*...*/
   instanceinn_i._inlet = inlet_inn;
//--------- <nets> -----------//
    int32_t  net0;
    int32_t  net1;
    int32_t  net2;
//--------- </nets> ----------//
//--------- <zero> ----------//
  int32_t UNCONNECTED_OUTPUT;
  static const int32_t UNCONNECTED_INPUT=0;
  static const int32buffer zerobuffer = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  int32buffer UNCONNECTED_OUTPUT_BUFFER;
//--------- </zero> ----------//
//--------- <controller calls> ----------//
//--------- <object calls> ----------//
  instancemux__1_i.dsp(0, net2Latch, net0Latch, net1);
  instanceoutt_i.dsp(net1);
  instanceinn_i.dsp(net2);
  instanceonoff_i.dsp(net0, PExch[PARAM_INDEX_onoff_b].finalvalue);
//--------- </object calls> ----------//
//--------- <net latch copy> ----------//
net0Latch = net0;
net2Latch = net2;
//--------- </net latch copy> ----------//
   outlet_outt = instanceoutt_i._outlet;

}
void MidiInHandler(midi_device_t dev, uint8_t port, uint8_t status, uint8_t data1, uint8_t data2) {
{
if ( attr_mididevice > 0 && dev > 0 && attr_mididevice != dev) return;
if ( attr_midiport > 0 && port > 0 && attr_midiport != port) return;
}
}
}
;class instanceDownspeed{
  public: // v1
  attr_parent *parent;
KeyValuePair KVP_instanceDownspeed_value;
  public: void Init(attr_parent * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX_Downspeed_value].pfunction = pfun_signed_clamp;
  SetKVP_IPVP(&KVP_instanceDownspeed_value,ObjectKvpRoot, "Downspeed" ,&parent->PExch[PARAM_INDEX_Downspeed_value], -1<<27, 1<<27);
  KVP_RegisterObject(&KVP_instanceDownspeed_value);
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & outlet_out,
int param_value  ){
outlet_out= param_value;

}
}
;class instanceSawDown{
  public: // v1
  attr_parent *parent;
KeyValuePair KVP_instanceSawDown_pitch;
uint32_t Phase;
uint32_t r;

  public: void Init(attr_parent * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX_SawDown_pitch].pfunction = pfun_signed_clamp;
  SetKVP_IPVP(&KVP_instanceSawDown_pitch,ObjectKvpRoot, "SawDown" ,&parent->PExch[PARAM_INDEX_SawDown_pitch], -1<<27, 1<<27);
  KVP_RegisterObject(&KVP_instanceSawDown_pitch);
Phase = 0;
   r = 1;

}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_pitch,
const int32_t  inlet_reset,
int32_t  & outlet_wave,
int param_pitch  ){
   {
      if (inlet_reset && r) {
         Phase = 0;
         r = 0;
      } else {
         if (!inlet_reset) r = 1;
         int32_t freq;
         MTOFEXTENDED(param_pitch + inlet_pitch,freq);
         Phase -= freq>>2;
      }
      outlet_wave= (Phase>>5);
   }
}
}
;class instanceDownGain{
  public: // v1
  attr_parent *parent;
KeyValuePair KVP_instanceDownGain_amp;
  public: void Init(attr_parent * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX_DownGain_amp].pfunction = pfun_unsigned_clamp_fullrange;
  SetKVP_IPVP(&KVP_instanceDownGain_amp,ObjectKvpRoot, "DownGain" ,&parent->PExch[PARAM_INDEX_DownGain_amp], 0, 1<<27);
  KVP_RegisterObject(&KVP_instanceDownGain_amp);
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_in,
int32_t  & outlet_out,
int param_amp  ){
outlet_out= ___SMMUL(param_amp,inlet_in)<<1;

}
}
;class instancexfade__1{
  public: // v1
  attr_parent *parent;
  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_i1,
const int32_t  inlet_i2,
const int32_t  inlet_c,
int32_t  & outlet_o  ){
   {
      int64_t a = (int64_t)inlet_i2 * inlet_c;
      a += (int64_t)inlet_i1 * ((128<<20)-inlet_c);
      outlet_o= a>>27;
   }

}
}
;class instanceUniPolar_plus_{
  public: // v1
  attr_parent *parent;
int32_t _outlet;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_outlet  ){
  _outlet = inlet_outlet;

}
}
;class instanceor__1{
  public: // v1
  attr_parent *parent;
  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_i1,
const int32_t  inlet_i2,
int32_t  & outlet_o  ){
outlet_o = (inlet_i1)||(inlet_i2);

}
}
;class instance_plus___1{
  public: // v1
  attr_parent *parent;
  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_in1,
const int32_t  inlet_in2,
int32_t  & outlet_out  ){
outlet_out= inlet_in1+inlet_in2 ;
}
}
;class instanceReset{
  public: // v1
  attr_parent *parent;
int32_t _inlet;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & outlet_inlet  ){
  outlet_inlet = _inlet;

}
}
;class instanceunipolar2bipolar__1{
  public: // v1
  attr_parent *parent;
  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_i,
int32_t  & outlet_o  ){
   outlet_o= (inlet_i-(1<<26))<<1;

}
}
;class instanceBipolar{
  public: // v1
  attr_parent *parent;
int32_t _outlet;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_outlet  ){
  _outlet = inlet_outlet;

}
}
;class instanceUP_slash_DOWN{
  public: // v1
  attr_parent *parent;
int32_t _inlet;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & outlet_inlet  ){
  outlet_inlet = _inlet;

}
}
;class instanceXfade_space_Rnd_slash_Sine{
  public: // v1
  attr_parent *parent;
KeyValuePair KVP_instanceXfade_space_Rnd_slash_Sine_gain1;
KeyValuePair KVP_instanceXfade_space_Rnd_slash_Sine_gain2;
  public: void Init(attr_parent * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX_Xfade_space_Rnd_slash_Sine_gain1].pfunction = pfun_unsigned_clamp;
  SetKVP_IPVP(&KVP_instanceXfade_space_Rnd_slash_Sine_gain1,ObjectKvpRoot, "Xfade Rnd/Sine:gain1" ,&parent->PExch[PARAM_INDEX_Xfade_space_Rnd_slash_Sine_gain1], 0, 1<<27);
  KVP_RegisterObject(&KVP_instanceXfade_space_Rnd_slash_Sine_gain1);
parent->PExch[PARAM_INDEX_Xfade_space_Rnd_slash_Sine_gain2].pfunction = pfun_unsigned_clamp;
  SetKVP_IPVP(&KVP_instanceXfade_space_Rnd_slash_Sine_gain2,ObjectKvpRoot, "Xfade Rnd/Sine:gain2" ,&parent->PExch[PARAM_INDEX_Xfade_space_Rnd_slash_Sine_gain2], 0, 1<<27);
  KVP_RegisterObject(&KVP_instanceXfade_space_Rnd_slash_Sine_gain2);
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_bus__in,
const int32_t  inlet_in1,
const int32_t  inlet_in2,
int32_t  & outlet_out,
int param_gain1,
int param_gain2  ){
{   int32_t accum = ___SMMUL(inlet_in1,param_gain1);
   accum = ___SMMLA(inlet_in2,param_gain2,accum);
;   outlet_out=  __SSAT(inlet_bus__in + (accum<<5),28);
}

}
}
;class instancebipolar2unipolar__1{
  public: // v1
  attr_parent *parent;
  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_i,
int32_t  & outlet_o  ){
   outlet_o= (inlet_i>>1)+(1<<26);

}
}
;class instancemin__1{
  public: // v1
  attr_parent *parent;
  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_in1,
const int32_t  inlet_in2,
int32_t  & outlet_out  ){
outlet_out= inlet_in1+inlet_in2 ;
}
}
;class instanceUp_dash_Down_space__plus__dash_{
  public: // v1
  attr_parent *parent;
int32_t _outlet;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_outlet  ){
  _outlet = inlet_outlet;

}
}
;class instanceRndTrig{
  public: // v1
  attr_parent *parent;
int32_t _inlet;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & outlet_inlet  ){
  outlet_inlet = _inlet;

}
}
;class instanceinv__1{
  public: // v1
  attr_parent *parent;
  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_in,
int32_t  & outlet_out  ){
outlet_out= -inlet_in;
}
}
;class instancesyncin_slash_ext{
  public: // v1
  attr_parent *parent;
KeyValuePair KVP_instancesyncin_slash_ext_onoff;
    static const uint32_t NPEXCH = 1;
    ParameterExchange_t PExch[NPEXCH];
    int32_t displayVector[3];
    static const uint32_t NPRESETS = 0;
    static const uint32_t NPRESET_ENTRIES = 0;
    static const uint32_t NMODULATIONSOURCES = 0;
    static const uint32_t NMODULATIONTARGETS = 0;
    int32_t PExModulationPrevVal[1][NMODULATIONSOURCES];
/* modsource defines */
/* parameter instance indices */
static const int PARAM_INDEX_onoff_b = 0;
/* controller classes */
/* object classes */
class instancemux__1{
  public: // v1
  instancesyncin_slash_ext *parent;
  public: void Init(instancesyncin_slash_ext * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_i1,
const int32_t  inlet_i2,
const int32_t  inlet_s,
int32_t  & outlet_o  ){
   outlet_o= (inlet_s)?inlet_i2:inlet_i1;

}
}
;class instanceoutt{
  public: // v1
  instancesyncin_slash_ext *parent;
int32_t _outlet;

  public: void Init(instancesyncin_slash_ext * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_outlet  ){
  _outlet = inlet_outlet;

}
}
;class instanceinn{
  public: // v1
  instancesyncin_slash_ext *parent;
int32_t _inlet;

  public: void Init(instancesyncin_slash_ext * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & outlet_inlet  ){
  outlet_inlet = _inlet;

}
}
;class instanceonoff{
  public: // v1
  instancesyncin_slash_ext *parent;
KeyValuePair KVP_instanceonoff_b;
  public: void Init(instancesyncin_slash_ext * _parent) {
parent = _parent;
    parent->PExch[PARAM_INDEX_onoff_b].signals = 0;
    SetKVP_IPVP(&KVP_instanceonoff_b,ObjectKvpRoot, "KVP_instanceonoff_b" ,&parent->PExch[PARAM_INDEX_onoff_b],0,65535);
  KVP_RegisterObject(&KVP_instanceonoff_b);
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & outlet_o,
int param_b  ){
outlet_o=param_b;

}
}
;/* controller instances */
/* object instances */
     instancemux__1 instancemux__1_i;
     instanceoutt instanceoutt_i;
     instanceinn instanceinn_i;
     instanceonoff instanceonoff_i;
/* net latches */
    int32_t  net0Latch;
    int32_t  net2Latch;
static const int polyIndex = 0;
   static int32_t * GetInitParams(void){
      static const int32_t p[1]= {
      1
      };
      return (int32_t *)&p[0];
   }   static const int32_t * GetPresets(void){
      static const int32_t p[NPRESETS][NPRESET_ENTRIES][2] = {
      };
   return &p[0][0][0];
   };
void ApplyPreset(int index){
   if (!index) {
     int i;
     int32_t *p = GetInitParams();
     for(i=0;i<NPEXCH;i++){
        PExParameterChange(&PExch[i],p[i],0xFFEF);
     }
   }
   index--;
   if (index < NPRESETS) {
     PresetParamChange_t *pa = (PresetParamChange_t *)(GetPresets());
     PresetParamChange_t *p = &pa[index*NPRESET_ENTRIES];
       int i;
       for(i=0;i<NPRESET_ENTRIES;i++){
         PresetParamChange_t *pp = &p[i];
         if ((pp->pexIndex>=0)&&(pp->pexIndex<NPEXCH)) {
           PExParameterChange(&PExch[pp->pexIndex],pp->value,0xFFEF);         }
         else break;
       }
   }
}
   static PExModulationTarget_t * GetModulationTable(void){
    static const PExModulationTarget_t PExModulationSources[NMODULATIONSOURCES][NMODULATIONTARGETS] = 
{};
   return (PExModulationTarget_t *)&PExModulationSources[0][0];
   };

  public: void Init(attr_parent * _parent) {
parent = _parent;
// on Parent: propagate onoff true syncin_slash_extonoff_b
parent->PExch[PARAM_INDEX_syncin_slash_ext_onoff].pfunction = PropagateToSub;
parent->PExch[PARAM_INDEX_syncin_slash_ext_onoff].finalvalue = (int32_t)(&(parent->instancesyncin_slash_ext_i.PExch[instancesyncin_slash_ext::PARAM_INDEX_onoff_b]));
   int i;
   int j;
   const int32_t *p;
   p = GetInitParams();
   for(j=0;j<1;j++){
      PExch[j].value = p[j];
      PExch[j].modvalue = p[j];
      PExch[j].signals = 0;
      PExch[j].pfunction = 0;
   }
   int32_t *pp = &PExModulationPrevVal[0][0];
   for(j=0;j<1*NMODULATIONSOURCES;j++){
      *pp = 0; pp++;
   }
     displayVector[0] = 0x446F7841;
     displayVector[1] = 0;
     displayVector[2] = 0;
   instancemux__1_i.Init(this );
   instanceoutt_i.Init(this );
   instanceinn_i.Init(this );
   instanceonoff_i.Init(this );
      int k;
      for (k = 0; k < NPEXCH; k++) {
        if (PExch[k].pfunction){
          (PExch[k].pfunction)(&PExch[k]);
        } else {
          PExch[k].finalvalue = PExch[k].value;
        }
      }

}
  public: void Dispose() {
   instanceonoff_i.Dispose();
   instanceinn_i.Dispose();
   instanceoutt_i.Dispose();
   instancemux__1_i.Dispose();

}
  public: void dsp (const int32_t  inlet_inn,
int32_t  & outlet_outt  ){
int i; /*...*/
   instanceinn_i._inlet = inlet_inn;
//--------- <nets> -----------//
    int32_t  net0;
    int32_t  net1;
    int32_t  net2;
//--------- </nets> ----------//
//--------- <zero> ----------//
  int32_t UNCONNECTED_OUTPUT;
  static const int32_t UNCONNECTED_INPUT=0;
  static const int32buffer zerobuffer = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  int32buffer UNCONNECTED_OUTPUT_BUFFER;
//--------- </zero> ----------//
//--------- <controller calls> ----------//
//--------- <object calls> ----------//
  instancemux__1_i.dsp(0, net2Latch, net0Latch, net1);
  instanceoutt_i.dsp(net1);
  instanceinn_i.dsp(net2);
  instanceonoff_i.dsp(net0, PExch[PARAM_INDEX_onoff_b].finalvalue);
//--------- </object calls> ----------//
//--------- <net latch copy> ----------//
net0Latch = net0;
net2Latch = net2;
//--------- </net latch copy> ----------//
   outlet_outt = instanceoutt_i._outlet;

}
void MidiInHandler(midi_device_t dev, uint8_t port, uint8_t status, uint8_t data1, uint8_t data2) {
{
if ( attr_mididevice > 0 && dev > 0 && attr_mididevice != dev) return;
if ( attr_midiport > 0 && port > 0 && attr_midiport != port) return;
}
}
}
;class instanceuniform__1{
  public: // v1
  attr_parent *parent;
int32_t val;
int ntrig;

  public: void Init(attr_parent * _parent) {
parent = _parent;
val = (int32_t)(GenerateRandomNumber())>>4;
ntrig = 0;

}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_trig,
int32_t  & outlet_rand  ){
   if ((inlet_trig>0) && !ntrig) { val = (int32_t)(GenerateRandomNumber())>>4; ntrig=1;}
   else if (!(inlet_trig>0)) ntrig=0;
   outlet_rand= val;

}
}
;class instanceSine{
  public: // v1
  attr_parent *parent;
KeyValuePair KVP_instanceSine_pitch;
uint32_t Phase;uint32_t r;

  public: void Init(attr_parent * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX_Sine_pitch].pfunction = pfun_signed_clamp;
  SetKVP_IPVP(&KVP_instanceSine_pitch,ObjectKvpRoot, "Sine" ,&parent->PExch[PARAM_INDEX_Sine_pitch], -1<<27, 1<<27);
  KVP_RegisterObject(&KVP_instanceSine_pitch);
Phase = 0;r = 1;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_pitch,
const int32_t  inlet_reset,
const int32_t  inlet_phase,
int32_t  & outlet_wave,
int param_pitch  ){
      if (inlet_reset && r) {
         Phase = inlet_phase << 4;
         r = 0;
      } else {
         if (!inlet_reset) r = 1;
     }   {      int32_t freq;
      MTOFEXTENDED(param_pitch + inlet_pitch,freq);
      Phase += freq>>2;
      int32_t r;
      SINE2TINTERP(Phase,r)
      outlet_wave= (r>>4);
   }
}
}
;class instanceUp{
  public: // v1
  attr_parent *parent;
int32_t _outlet;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_outlet  ){
  _outlet = inlet_outlet;

}
}
;class instanceDown{
  public: // v1
  attr_parent *parent;
int32_t _outlet;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_outlet  ){
  _outlet = inlet_outlet;

}
}
;class instanceSinespeedrnd{
  public: // v1
  attr_parent *parent;
KeyValuePair KVP_instanceSinespeedrnd_amp;
  public: void Init(attr_parent * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX_Sinespeedrnd_amp].pfunction = pfun_unsigned_clamp_fullrange;
  SetKVP_IPVP(&KVP_instanceSinespeedrnd_amp,ObjectKvpRoot, "Sinespeedrnd" ,&parent->PExch[PARAM_INDEX_Sinespeedrnd_amp], 0, 1<<27);
  KVP_RegisterObject(&KVP_instanceSinespeedrnd_amp);
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_in,
int32_t  & outlet_out,
int param_amp  ){
outlet_out= ___SMMUL(param_amp,inlet_in)<<1;

}
}
;/* controller instances */
/* object instances */
     instanceUpspeed instanceUpspeed_i;
     instanceSawUp instanceSawUp_i;
     instanceUpGain instanceUpGain_i;
     instancesync instancesync_i;
     instanceDownspeed instanceDownspeed_i;
     instanceSawDown instanceSawDown_i;
     instanceDownGain instanceDownGain_i;
     instancexfade__1 instancexfade__1_i;
     instanceUniPolar_plus_ instanceUniPolar_plus__i;
     instanceor__1 instanceor__1_i;
     instance_plus___1 instance_plus___1_i;
     instanceReset instanceReset_i;
     instanceunipolar2bipolar__1 instanceunipolar2bipolar__1_i;
     instanceBipolar instanceBipolar_i;
     instanceUP_slash_DOWN instanceUP_slash_DOWN_i;
     instanceXfade_space_Rnd_slash_Sine instanceXfade_space_Rnd_slash_Sine_i;
     instancebipolar2unipolar__1 instancebipolar2unipolar__1_i;
     instancemin__1 instancemin__1_i;
     instanceUp_dash_Down_space__plus__dash_ instanceUp_dash_Down_space__plus__dash__i;
     instanceRndTrig instanceRndTrig_i;
     instanceinv__1 instanceinv__1_i;
     instancesyncin_slash_ext instancesyncin_slash_ext_i;
     instanceuniform__1 instanceuniform__1_i;
     instanceSine instanceSine_i;
     instanceUp instanceUp_i;
     instanceDown instanceDown_i;
     instanceSinespeedrnd instanceSinespeedrnd_i;
/* net latches */
    int32_t  net4Latch;
    int32_t  net5Latch;
    int32_t  net6Latch;
    int32_t  net7Latch;
    int32_t  net9Latch;
    int32_t  net11Latch;
    int32_t  net14Latch;
    int32_t  net15Latch;
    int32_t  net20Latch;
static const int polyIndex = 0;
   static int32_t * GetInitParams(void){
      static const int32_t p[12]= {
      2097152,
      -98566144,
      134217728,
      0,
      2097152,
      -98566144,
      75497472,
      134217728,
      0,
      0,
      -58720256,
      0
      };
      return (int32_t *)&p[0];
   }   static const int32_t * GetPresets(void){
      static const int32_t p[NPRESETS][NPRESET_ENTRIES][2] = {
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         }
      };
   return &p[0][0][0];
   };
void ApplyPreset(int index){
   if (!index) {
     int i;
     int32_t *p = GetInitParams();
     for(i=0;i<NPEXCH;i++){
        PExParameterChange(&PExch[i],p[i],0xFFEF);
     }
   }
   index--;
   if (index < NPRESETS) {
     PresetParamChange_t *pa = (PresetParamChange_t *)(GetPresets());
     PresetParamChange_t *p = &pa[index*NPRESET_ENTRIES];
       int i;
       for(i=0;i<NPRESET_ENTRIES;i++){
         PresetParamChange_t *pp = &p[i];
         if ((pp->pexIndex>=0)&&(pp->pexIndex<NPEXCH)) {
           PExParameterChange(&PExch[pp->pexIndex],pp->value,0xFFEF);         }
         else break;
       }
   }
}
   static PExModulationTarget_t * GetModulationTable(void){
    static const PExModulationTarget_t PExModulationSources[NMODULATIONSOURCES][NMODULATIONTARGETS] = 
{{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}}};
   return (PExModulationTarget_t *)&PExModulationSources[0][0];
   };
]]></code.declaration>
         <code.init><![CDATA[   int i;
   int j;
   const int32_t *p;
   p = GetInitParams();
   for(j=0;j<12;j++){
      PExch[j].value = p[j];
      PExch[j].modvalue = p[j];
      PExch[j].signals = 0;
      PExch[j].pfunction = 0;
   }
   int32_t *pp = &PExModulationPrevVal[0][0];
   for(j=0;j<attr_poly*NMODULATIONSOURCES;j++){
      *pp = 0; pp++;
   }
     displayVector[0] = 0x446F7841;
     displayVector[1] = 0;
     displayVector[2] = 0;
   instanceUpspeed_i.Init(this );
   instanceSawUp_i.Init(this );
   instanceUpGain_i.Init(this );
   instancesync_i.Init(this );
   instanceDownspeed_i.Init(this );
   instanceSawDown_i.Init(this );
   instanceDownGain_i.Init(this );
   instancexfade__1_i.Init(this );
   instanceUniPolar_plus__i.Init(this );
   instanceor__1_i.Init(this );
   instance_plus___1_i.Init(this );
   instanceReset_i.Init(this );
   instanceunipolar2bipolar__1_i.Init(this );
   instanceBipolar_i.Init(this );
   instanceUP_slash_DOWN_i.Init(this );
   instanceXfade_space_Rnd_slash_Sine_i.Init(this );
   instancebipolar2unipolar__1_i.Init(this );
   instancemin__1_i.Init(this );
   instanceUp_dash_Down_space__plus__dash__i.Init(this );
   instanceRndTrig_i.Init(this );
   instanceinv__1_i.Init(this );
   instancesyncin_slash_ext_i.Init(this );
   instanceuniform__1_i.Init(this );
   instanceSine_i.Init(this );
   instanceUp_i.Init(this );
   instanceDown_i.Init(this );
   instanceSinespeedrnd_i.Init(this );
      int k;
      for (k = 0; k < NPEXCH; k++) {
        if (PExch[k].pfunction){
          (PExch[k].pfunction)(&PExch[k]);
        } else {
          PExch[k].finalvalue = PExch[k].value;
        }
      }
]]></code.init>
         <code.dispose><![CDATA[   instanceSinespeedrnd_i.Dispose();
   instanceDown_i.Dispose();
   instanceUp_i.Dispose();
   instanceSine_i.Dispose();
   instanceuniform__1_i.Dispose();
   instancesyncin_slash_ext_i.Dispose();
   instanceinv__1_i.Dispose();
   instanceRndTrig_i.Dispose();
   instanceUp_dash_Down_space__plus__dash__i.Dispose();
   instancemin__1_i.Dispose();
   instancebipolar2unipolar__1_i.Dispose();
   instanceXfade_space_Rnd_slash_Sine_i.Dispose();
   instanceUP_slash_DOWN_i.Dispose();
   instanceBipolar_i.Dispose();
   instanceunipolar2bipolar__1_i.Dispose();
   instanceReset_i.Dispose();
   instance_plus___1_i.Dispose();
   instanceor__1_i.Dispose();
   instanceUniPolar_plus__i.Dispose();
   instancexfade__1_i.Dispose();
   instanceDownGain_i.Dispose();
   instanceSawDown_i.Dispose();
   instanceDownspeed_i.Dispose();
   instancesync_i.Dispose();
   instanceUpGain_i.Dispose();
   instanceSawUp_i.Dispose();
   instanceUpspeed_i.Dispose();
]]></code.dispose>
         <code.krate><![CDATA[int i; /*...*/
   instanceReset_i._inlet = inlet_Reset;
   instanceUP_slash_DOWN_i._inlet = inlet_UP_slash_DOWN;
   instanceRndTrig_i._inlet = inlet_RndTrig;
//--------- <nets> -----------//
    int32_t  net0;
    int32_t  net1;
    int32_t  net2;
    int32_t  net3;
    int32_t  net4;
    int32_t  net5;
    int32_t  net6;
    int32_t  net7;
    int32_t  net8;
    int32_t  net9;
    int32_t  net10;
    int32_t  net11;
    int32_t  net12;
    int32_t  net13;
    int32_t  net14;
    int32_t  net15;
    int32_t  net16;
    int32_t  net17;
    int32_t  net18;
    int32_t  net19;
    int32_t  net20;
    int32_t  net21;
    int32_t  net22;
//--------- </nets> ----------//
//--------- <zero> ----------//
  int32_t UNCONNECTED_OUTPUT;
  static const int32_t UNCONNECTED_INPUT=0;
  static const int32buffer zerobuffer = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  int32buffer UNCONNECTED_OUTPUT_BUFFER;
//--------- </zero> ----------//
//--------- <controller calls> ----------//
//--------- <object calls> ----------//
  instanceUpspeed_i.dsp(net3, PExch[PARAM_INDEX_Upspeed_value].finalvalue);
  instanceSawUp_i.dsp(net3, net6Latch, net0, net2, PExch[PARAM_INDEX_SawUp_pitch].finalvalue);
  instanceUpGain_i.dsp(net0, net10, PExch[PARAM_INDEX_UpGain_amp].finalvalue);
  instancesync_i.dsp(net2, net18);
  instanceDownspeed_i.dsp(net8, PExch[PARAM_INDEX_Downspeed_value].finalvalue);
  instanceSawDown_i.dsp(net8, net6Latch, net1, PExch[PARAM_INDEX_SawDown_pitch].finalvalue);
  instanceDownGain_i.dsp(net1, net19, PExch[PARAM_INDEX_DownGain_amp].finalvalue);
  instancexfade__1_i.dsp(net19, net10, net11Latch, net22);
  instanceUniPolar_plus__i.dsp(net22);
  instanceor__1_i.dsp(net18, net7Latch, net6);
  instance_plus___1_i.dsp(net14Latch, net9Latch, net11);
  instanceReset_i.dsp(net7);
  instanceunipolar2bipolar__1_i.dsp(net22, net12);
  instanceBipolar_i.dsp(net12);
  instanceUP_slash_DOWN_i.dsp(net9);
  instanceXfade_space_Rnd_slash_Sine_i.dsp(0 , net4Latch, net5Latch, net13, PExch[PARAM_INDEX_Xfade_space_Rnd_slash_Sine_gain1].finalvalue, PExch[PARAM_INDEX_Xfade_space_Rnd_slash_Sine_gain2].finalvalue);
  instancebipolar2unipolar__1_i.dsp(net13, net14);
  instancemin__1_i.dsp(net19, net20Latch, net21);
  instanceUp_dash_Down_space__plus__dash__i.dsp(net21);
  instanceRndTrig_i.dsp(net17);
  instanceinv__1_i.dsp(net10, net20);
  instancesyncin_slash_ext_i.dsp(net17, net16);
  instanceuniform__1_i.dsp(net16, net4);
  instanceSine_i.dsp(net15Latch, 0, 0 , net5, PExch[PARAM_INDEX_Sine_pitch].finalvalue);
  instanceUp_i.dsp(net0);
  instanceDown_i.dsp(net1);
  instanceSinespeedrnd_i.dsp(net4, net15, PExch[PARAM_INDEX_Sinespeedrnd_amp].finalvalue);
//--------- </object calls> ----------//
//--------- <net latch copy> ----------//
net4Latch = net4;
net5Latch = net5;
net6Latch = net6;
net7Latch = net7;
net9Latch = net9;
net11Latch = net11;
net14Latch = net14;
net15Latch = net15;
net20Latch = net20;
//--------- </net latch copy> ----------//
   outlet_UniPolar_plus_ = instanceUniPolar_plus__i._outlet;
   outlet_Bipolar = instanceBipolar_i._outlet;
   outlet_Up_dash_Down_space__plus__dash_ = instanceUp_dash_Down_space__plus__dash__i._outlet;
   outlet_Up = instanceUp_i._outlet;
   outlet_Down = instanceDown_i._outlet;
]]></code.krate>
         <code.midihandler><![CDATA[if ( attr_mididevice > 0 && dev > 0 && attr_mididevice != dev) return;
if ( attr_midiport > 0 && port > 0 && attr_midiport != port) return;
instancesync_i.MidiInHandler(dev, port, status, data1, data2);
instancesyncin_slash_ext_i.MidiInHandler(dev, port, status, data1, data2);
]]></code.midihandler>
      </object>
   </patchobj>
   <obj type="logic/latch" uuid="14750683752bd43205826430adb7168dae3cc2c" name="latch" x="154" y="392">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/chart b" uuid="d2bdf496f96ee521628490a038411210fbe29b15" name="chart_3" x="224" y="392">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/chart b" uuid="d2bdf496f96ee521628490a038411210fbe29b15" name="chart_11" x="1078" y="406">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/counter" uuid="7a141ba82230e54e5f5cd12da5dbe5a74ba854a5" name="counter_3" x="350" y="420">
      <params>
         <int32 name="maximum" value="16"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_4" x="154" y="448">
      <params>
         <frac32.s.map name="value" value="47.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="mix/xfade" uuid="bb87360199938d53d1183cdc80947ed0a39e3c9a" name="xfade_1" x="1008" y="448">
      <params/>
      <attribs/>
   </obj>
   <obj type="lfo/sine r" uuid="725d481acbefa181fa5d92f414d317c86b77b789" name="sine_3" x="1204" y="448">
      <params>
         <frac32.s.map name="pitch" value="-62.0"/>
      </params>
      <attribs/>
   </obj>
   <patcher type="patch/patcher" uuid="a245c220448000c901caef03c8b07740d533914a" name="vcf cv" x="1302" y="448">
      <params>
         <frac32.u.map name="1" value="38.0"/>
         <frac32.u.map name="2" value="45.0"/>
         <frac32.u.map name="3" value="23.5"/>
      </params>
      <attribs/>
      <subpatch appVersion="1.0.8">
         <obj type="patch/inlet f" uuid="5c585d2dcd9c05631e345ac09626a22a639d7c13" name="i1" x="56" y="42">
            <params/>
            <attribs/>
         </obj>
         <patchobj type="patch/object" uuid="d9f44795bfd6115f91bc84d9b38087afd0709f6e" name="1" x="140" y="42">
            <params>
               <frac32.u.map name="inv" onParent="true" value="0.0"/>
            </params>
            <attribs/>
            <object id="patch/object" uuid="f536e36a05a0083eea7de9aeb7c3e944473bgc87c87">
               <sDescription>dual crossfade between inv/noniverted </sDescription>
               <author>Philoop</author>
               <license>BSD</license>
               <inlets>
                  <frac32 name="i1" description="input"/>
               </inlets>
               <outlets>
                  <frac32.bipolar name="o"/>
               </outlets>
               <displays/>
               <params>
                  <frac32.u.map name="inv" noLabel="false"/>
               </params>
               <attribs/>
               <includes/>
               <code.krate><![CDATA[   {
      int64_t a = (int64_t)inlet_i1 * param_inv;
      a -= (int64_t)inlet_i1 * ((128<<20)-param_inv);
      outlet_o = a>>27;	  
   }
    
]]></code.krate>
            </object>
         </patchobj>
         <obj type="math/+3in" uuid="8747f22d9d5c8f537a783c4f0018b1ab696370b9" name="+3in_1" x="238" y="98">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/outlet f" uuid="d18a9a550bcaaebac94e25983bd0e27dbfd7233c" name="outlet_1" x="322" y="98">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/inlet f" uuid="5c585d2dcd9c05631e345ac09626a22a639d7c13" name="i2" x="56" y="126">
            <params/>
            <attribs/>
         </obj>
         <patchobj type="patch/object" uuid="d9f44795bfd6115f91bc84d9b38087afd0709f6e" name="2" x="140" y="154">
            <params>
               <frac32.u.map name="inv" onParent="true" value="0.0"/>
            </params>
            <attribs/>
            <object id="patch/object" uuid="f536e36a05a0083eea7de9aeb7c3e944473bgc87c87">
               <sDescription>dual crossfade between inv/noniverted </sDescription>
               <author>Philoop</author>
               <license>BSD</license>
               <inlets>
                  <frac32 name="i1" description="input"/>
               </inlets>
               <outlets>
                  <frac32.bipolar name="o"/>
               </outlets>
               <displays/>
               <params>
                  <frac32.u.map name="inv" noLabel="false"/>
               </params>
               <attribs/>
               <includes/>
               <code.krate><![CDATA[   {
      int64_t a = (int64_t)inlet_i1 * param_inv;
      a -= (int64_t)inlet_i1 * ((128<<20)-param_inv);
      outlet_o = a>>27;	  
   }
    
]]></code.krate>
            </object>
         </patchobj>
         <obj type="patch/inlet f" uuid="5c585d2dcd9c05631e345ac09626a22a639d7c13" name="i3" x="56" y="210">
            <params/>
            <attribs/>
         </obj>
         <patchobj type="patch/object" uuid="d9f44795bfd6115f91bc84d9b38087afd0709f6e" name="3" x="140" y="252">
            <params>
               <frac32.u.map name="inv" onParent="true" value="0.0"/>
            </params>
            <attribs/>
            <object id="patch/object" uuid="f536e36a05a0083eea7de9aeb7c3e944473bgc87c87">
               <sDescription>dual crossfade between inv/noniverted </sDescription>
               <author>Philoop</author>
               <license>BSD</license>
               <inlets>
                  <frac32 name="i1" description="input"/>
               </inlets>
               <outlets>
                  <frac32.bipolar name="o"/>
               </outlets>
               <displays/>
               <params>
                  <frac32.u.map name="inv" noLabel="false"/>
               </params>
               <attribs/>
               <includes/>
               <code.krate><![CDATA[   {
      int64_t a = (int64_t)inlet_i1 * param_inv;
      a -= (int64_t)inlet_i1 * ((128<<20)-param_inv);
      outlet_o = a>>27;	  
   }
    
]]></code.krate>
            </object>
         </patchobj>
         <nets>
            <net>
               <source obj="+3in_1" outlet="out"/>
               <dest obj="outlet_1" inlet="outlet"/>
            </net>
            <net>
               <source obj="i1" outlet="inlet"/>
               <dest obj="1" inlet="i1"/>
            </net>
            <net>
               <source obj="1" outlet="o"/>
               <dest obj="+3in_1" inlet="in1"/>
            </net>
            <net>
               <source obj="2" outlet="o"/>
               <dest obj="+3in_1" inlet="in2"/>
            </net>
            <net>
               <source obj="i2" outlet="inlet"/>
               <dest obj="2" inlet="i1"/>
            </net>
            <net>
               <source obj="3" outlet="o"/>
               <dest obj="+3in_1" inlet="in3"/>
            </net>
            <net>
               <source obj="i3" outlet="inlet"/>
               <dest obj="3" inlet="i1"/>
            </net>
         </nets>
         <settings>
            <subpatchmode>no</subpatchmode>
         </settings>
         <notes><![CDATA[]]></notes>
      </subpatch>
   </patcher>
   <obj type="lfo/sine r" uuid="725d481acbefa181fa5d92f414d317c86b77b789" name="sine_4" x="1386" y="448">
      <params>
         <frac32.s.map name="pitch" value="-56.0"/>
      </params>
      <attribs/>
   </obj>
   <patcher type="patch/patcher" uuid="a245c220448000c901caef03c8b07740d533914a" name="Reso cv" x="1484" y="448">
      <params>
         <frac32.u.map name="1" value="51.5"/>
         <frac32.u.map name="2" value="23.5"/>
         <frac32.u.map name="3" value="41.0"/>
      </params>
      <attribs/>
      <subpatch appVersion="1.0.8">
         <obj type="patch/inlet f" uuid="5c585d2dcd9c05631e345ac09626a22a639d7c13" name="i1" x="56" y="42">
            <params/>
            <attribs/>
         </obj>
         <patchobj type="patch/object" uuid="d9f44795bfd6115f91bc84d9b38087afd0709f6e" name="1" x="140" y="42">
            <params>
               <frac32.u.map name="inv" onParent="true" value="0.0"/>
            </params>
            <attribs/>
            <object id="patch/object" uuid="f536e36a05a0083eea7de9aeb7c3e944473bgc87c87">
               <sDescription>dual crossfade between inv/noniverted </sDescription>
               <author>Philoop</author>
               <license>BSD</license>
               <inlets>
                  <frac32 name="i1" description="input"/>
               </inlets>
               <outlets>
                  <frac32.bipolar name="o"/>
               </outlets>
               <displays/>
               <params>
                  <frac32.u.map name="inv" noLabel="false"/>
               </params>
               <attribs/>
               <includes/>
               <code.krate><![CDATA[   {
      int64_t a = (int64_t)inlet_i1 * param_inv;
      a -= (int64_t)inlet_i1 * ((128<<20)-param_inv);
      outlet_o = a>>27;	  
   }
    
]]></code.krate>
            </object>
         </patchobj>
         <obj type="math/+3in" uuid="8747f22d9d5c8f537a783c4f0018b1ab696370b9" name="+3in_1" x="238" y="98">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/outlet f" uuid="d18a9a550bcaaebac94e25983bd0e27dbfd7233c" name="outlet_1" x="322" y="98">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/inlet f" uuid="5c585d2dcd9c05631e345ac09626a22a639d7c13" name="i2" x="56" y="126">
            <params/>
            <attribs/>
         </obj>
         <patchobj type="patch/object" uuid="d9f44795bfd6115f91bc84d9b38087afd0709f6e" name="2" x="140" y="126">
            <params>
               <frac32.u.map name="inv" onParent="true" value="0.0"/>
            </params>
            <attribs/>
            <object id="patch/object" uuid="f536e36a05a0083eea7de9aeb7c3e944473bgc87c87">
               <sDescription>dual crossfade between inv/noniverted </sDescription>
               <author>Philoop</author>
               <license>BSD</license>
               <inlets>
                  <frac32 name="i1" description="input"/>
               </inlets>
               <outlets>
                  <frac32.bipolar name="o"/>
               </outlets>
               <displays/>
               <params>
                  <frac32.u.map name="inv" noLabel="false"/>
               </params>
               <attribs/>
               <includes/>
               <code.krate><![CDATA[   {
      int64_t a = (int64_t)inlet_i1 * param_inv;
      a -= (int64_t)inlet_i1 * ((128<<20)-param_inv);
      outlet_o = a>>27;	  
   }
    
]]></code.krate>
            </object>
         </patchobj>
         <obj type="patch/inlet f" uuid="5c585d2dcd9c05631e345ac09626a22a639d7c13" name="i3" x="56" y="210">
            <params/>
            <attribs/>
         </obj>
         <patchobj type="patch/object" uuid="d9f44795bfd6115f91bc84d9b38087afd0709f6e" name="3" x="140" y="210">
            <params>
               <frac32.u.map name="inv" onParent="true" value="0.0"/>
            </params>
            <attribs/>
            <object id="patch/object" uuid="f536e36a05a0083eea7de9aeb7c3e944473bgc87c87">
               <sDescription>dual crossfade between inv/noniverted </sDescription>
               <author>Philoop</author>
               <license>BSD</license>
               <inlets>
                  <frac32 name="i1" description="input"/>
               </inlets>
               <outlets>
                  <frac32.bipolar name="o"/>
               </outlets>
               <displays/>
               <params>
                  <frac32.u.map name="inv" noLabel="false"/>
               </params>
               <attribs/>
               <includes/>
               <code.krate><![CDATA[   {
      int64_t a = (int64_t)inlet_i1 * param_inv;
      a -= (int64_t)inlet_i1 * ((128<<20)-param_inv);
      outlet_o = a>>27;	  
   }
    
]]></code.krate>
            </object>
         </patchobj>
         <nets>
            <net>
               <source obj="+3in_1" outlet="out"/>
               <dest obj="outlet_1" inlet="outlet"/>
            </net>
            <net>
               <source obj="i3" outlet="inlet"/>
               <dest obj="3" inlet="i1"/>
            </net>
            <net>
               <source obj="3" outlet="o"/>
               <dest obj="+3in_1" inlet="in3"/>
            </net>
            <net>
               <source obj="2" outlet="o"/>
               <dest obj="+3in_1" inlet="in2"/>
            </net>
            <net>
               <source obj="1" outlet="o"/>
               <dest obj="+3in_1" inlet="in1"/>
            </net>
            <net>
               <source obj="i1" outlet="inlet"/>
               <dest obj="1" inlet="i1"/>
            </net>
            <net>
               <source obj="i2" outlet="inlet"/>
               <dest obj="2" inlet="i1"/>
            </net>
         </nets>
         <settings>
            <subpatchmode>no</subpatchmode>
         </settings>
         <notes><![CDATA[]]></notes>
      </subpatch>
   </patcher>
   <patchobj type="patch/object" uuid="d9f44795bfd6115f91bc84d9b38087afd0709f6e" name="obj_3" x="462" y="462">
      <params>
         <bool32.tgl name="on" value="1"/>
         <int32 name="div" value="0"/>
         <int32 name="count" value="8"/>
         <frac32.s.map name=":prob" value="24.0"/>
         <int32 name=":max" value="8"/>
      </params>
      <attribs/>
      <object class="axoloti.object.AxoObjectFromPatch" id="patch/object">
         <sDescription></sDescription>
         <inlets>
            <bool32 name="inlet_1" description="inlet_1"/>
         </inlets>
         <outlets>
            <int32 name="counto" description="counto"/>
         </outlets>
         <displays/>
         <params>
            <bool32.tgl name="on" description="on"/>
            <int32 name="div">
               <MinValue i="0"/>
               <MaxValue i="65536"/>
            </int32>
            <int32 name="count">
               <MinValue i="0"/>
               <MaxValue i="65536"/>
            </int32>
            <frac32.s.map name=":prob">
               <DefaultValue v="24.0"/>
            </frac32.s.map>
            <int32 name=":max">
               <MinValue i="0"/>
               <MaxValue i="65536"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <depends/>
         <code.declaration><![CDATA[    static const uint32_t NPEXCH = 5;
    ParameterExchange_t PExch[NPEXCH];
    int32_t displayVector[3];
    static const uint32_t NPRESETS = 8;
    static const uint32_t NPRESET_ENTRIES = 32;
    static const uint32_t NMODULATIONSOURCES = 8;
    static const uint32_t NMODULATIONTARGETS = 8;
    int32_t PExModulationPrevVal[1][NMODULATIONSOURCES];
/* modsource defines */
/* parameter instance indices */
static const int PARAM_INDEX_on_b = 0;
static const int PARAM_INDEX_div_maximum = 1;
static const int PARAM_INDEX_count_maximum = 2;
static const int PARAM_INDEX__prob = 3;
static const int PARAM_INDEX__max = 4;
/* controller classes */
/* object classes */
class instanceinlet__1{
  public: // v1
  attr_parent *parent;
int32_t _inlet;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & outlet_inlet  ){
  outlet_inlet = _inlet;

}
}
;class instanceon{
  public: // v1
  attr_parent *parent;
KeyValuePair KVP_instanceon_b;
  public: void Init(attr_parent * _parent) {
parent = _parent;
    parent->PExch[PARAM_INDEX_on_b].signals = 0;
    SetKVP_IPVP(&KVP_instanceon_b,ObjectKvpRoot, "KVP_instanceon_b" ,&parent->PExch[PARAM_INDEX_on_b],0,65535);
  KVP_RegisterObject(&KVP_instanceon_b);
}
  public: void Dispose() {
}
  public: void dsp (const int32_t inlet_i1,
int32_t & outlet_o,
int param_b  ){
   outlet_o= (param_b)?inlet_i1:0;

}
}
;class instancediv{
  public: // v1
  attr_parent *parent;
KeyValuePair KVP_instancediv_maximum;
   int ntrig;
   int rtrig;
   int count;

  public: void Init(attr_parent * _parent) {
parent = _parent;
    count=0;
   ntrig = 0;
   rtrig = 0;

}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_trig,
const int32_t  inlet_r,
int32_t & outlet_o,
int32_t  & outlet_c,
int param_maximum  ){
outlet_c=0;
if ((inlet_trig>0) && !ntrig) {
   count += 1; if (count>=param_maximum) {count = 0; outlet_c = 1;}
   ntrig=1;
}
else if (!(inlet_trig>0)) ntrig=0;
if ((inlet_r>0) && !rtrig) {count=0; rtrig = 1;}
else if (!(inlet_r>0)) rtrig=0;
outlet_o= count;

}
}
;class instancecount{
  public: // v1
  attr_parent *parent;
KeyValuePair KVP_instancecount_maximum;
   int ntrig;
   int rtrig;
   int count;

  public: void Init(attr_parent * _parent) {
parent = _parent;
    count=0;
   ntrig = 0;
   rtrig = 0;

}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_trig,
const int32_t  inlet_r,
int32_t & outlet_o,
int32_t  & outlet_c,
int param_maximum  ){
outlet_c=0;
if ((inlet_trig>0) && !ntrig) {
   count += 1; if (count>=param_maximum) {count = 0; outlet_c = 1;}
   ntrig=1;
}
else if (!(inlet_trig>0)) ntrig=0;
if ((inlet_r>0) && !rtrig) {count=0; rtrig = 1;}
else if (!(inlet_r>0)) rtrig=0;
outlet_o= count;

}
}
;class instance{
  public: // v1
  attr_parent *parent;
KeyValuePair KVP_instance_prob;
KeyValuePair KVP_instance_max;
int ptrig;
int32_t pval;
int32_t val;
int ntrig;
int rnd;
int32_t vali;
int itrig;

  public: void Init(attr_parent * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX__prob].pfunction = pfun_signed_clamp;
  SetKVP_IPVP(&KVP_instance_prob,ObjectKvpRoot, ":prob" ,&parent->PExch[PARAM_INDEX__prob], -1<<27, 1<<27);
  KVP_RegisterObject(&KVP_instance_prob);
val = (int32_t)(GenerateRandomNumber())>>4;
      ntrig = 0;
      rnd = 0;
      ptrig = 0;
      pval = 0;

}
  public: void Dispose() {
}
  public: void dsp (const int32_t inlet_i1,
int32_t & outlet_o,
int param_prob,
int param_max  ){
 if ((pval != inlet_i1)&(!ptrig)) { 
  pval = inlet_i1;
  ptrig = 1;  
} else {
  ptrig = 0;  
}

if ((ptrig>0) && !ntrig) { val = (int32_t)(GenerateRandomNumber())>>4; ntrig=1;}
      else if (!(ptrig>0)) ntrig=0;
      rnd=val;
      rnd = param_prob>val ;     
      outlet_o= rnd>0?vali:inlet_i1;
 
 if ((ptrig>0) && !itrig) {
      if (param_max) 
         vali = (int32_t)(GenerateRandomNumber()% (param_max));
      else vali = 0;
   
   }
   
   

 
}
}
;class instancecounto{
  public: // v1
  attr_parent *parent;
int32_t _outlet;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t inlet_outlet  ){
  _outlet = inlet_outlet;

}
}
;/* controller instances */
/* object instances */
     instanceinlet__1 instanceinlet__1_i;
     instanceon instanceon_i;
     instancediv instancediv_i;
     instancecount instancecount_i;
     instance instance_i;
     instancecounto instancecounto_i;
/* net latches */
static const int polyIndex = 0;
   static int32_t * GetInitParams(void){
      static const int32_t p[5]= {
      0,
      16,
      6,
      50331648,
      10
      };
      return (int32_t *)&p[0];
   }   static const int32_t * GetPresets(void){
      static const int32_t p[NPRESETS][NPRESET_ENTRIES][2] = {
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         }
      };
   return &p[0][0][0];
   };
void ApplyPreset(int index){
   if (!index) {
     int i;
     int32_t *p = GetInitParams();
     for(i=0;i<NPEXCH;i++){
        PExParameterChange(&PExch[i],p[i],0xFFEF);
     }
   }
   index--;
   if (index < NPRESETS) {
     PresetParamChange_t *pa = (PresetParamChange_t *)(GetPresets());
     PresetParamChange_t *p = &pa[index*NPRESET_ENTRIES];
       int i;
       for(i=0;i<NPRESET_ENTRIES;i++){
         PresetParamChange_t *pp = &p[i];
         if ((pp->pexIndex>=0)&&(pp->pexIndex<NPEXCH)) {
           PExParameterChange(&PExch[pp->pexIndex],pp->value,0xFFEF);         }
         else break;
       }
   }
}
   static PExModulationTarget_t * GetModulationTable(void){
    static const PExModulationTarget_t PExModulationSources[NMODULATIONSOURCES][NMODULATIONTARGETS] = 
{{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}}};
   return (PExModulationTarget_t *)&PExModulationSources[0][0];
   };
]]></code.declaration>
         <code.init><![CDATA[   int i;
   int j;
   const int32_t *p;
   p = GetInitParams();
   for(j=0;j<5;j++){
      PExch[j].value = p[j];
      PExch[j].modvalue = p[j];
      PExch[j].signals = 0;
      PExch[j].pfunction = 0;
   }
   int32_t *pp = &PExModulationPrevVal[0][0];
   for(j=0;j<attr_poly*NMODULATIONSOURCES;j++){
      *pp = 0; pp++;
   }
     displayVector[0] = 0x446F7841;
     displayVector[1] = 0;
     displayVector[2] = 0;
   instanceinlet__1_i.Init(this );
   instanceon_i.Init(this );
   instancediv_i.Init(this );
   instancecount_i.Init(this );
   instance_i.Init(this );
   instancecounto_i.Init(this );
      int k;
      for (k = 0; k < NPEXCH; k++) {
        if (PExch[k].pfunction){
          (PExch[k].pfunction)(&PExch[k]);
        } else {
          PExch[k].finalvalue = PExch[k].value;
        }
      }
]]></code.init>
         <code.dispose><![CDATA[   instancecounto_i.Dispose();
   instance_i.Dispose();
   instancecount_i.Dispose();
   instancediv_i.Dispose();
   instanceon_i.Dispose();
   instanceinlet__1_i.Dispose();
]]></code.dispose>
         <code.krate><![CDATA[int i; /*...*/
   instanceinlet__1_i._inlet = inlet_inlet__1;
//--------- <nets> -----------//
    int32_t  net0;
    int32_t net1;
    int32_t  net2;
    int32_t net3;
    int32_t net4;
//--------- </nets> ----------//
//--------- <zero> ----------//
  int32_t UNCONNECTED_OUTPUT;
  static const int32_t UNCONNECTED_INPUT=0;
  static const int32buffer zerobuffer = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  int32buffer UNCONNECTED_OUTPUT_BUFFER;
//--------- </zero> ----------//
//--------- <controller calls> ----------//
//--------- <object calls> ----------//
  instanceinlet__1_i.dsp(net2);
  instanceon_i.dsp((net2?1:0), net1, PExch[PARAM_INDEX_on_b].finalvalue);
  instancediv_i.dsp((net1>0), 0, UNCONNECTED_OUTPUT, net0, PExch[PARAM_INDEX_div_maximum].finalvalue);
  instancecount_i.dsp(net0, 0, net3, UNCONNECTED_OUTPUT, PExch[PARAM_INDEX_count_maximum].finalvalue);
  instance_i.dsp(net3, net4, PExch[PARAM_INDEX__prob].finalvalue, PExch[PARAM_INDEX__max].finalvalue);
  instancecounto_i.dsp(net4);
//--------- </object calls> ----------//
//--------- <net latch copy> ----------//
//--------- </net latch copy> ----------//
   outlet_counto = instancecounto_i._outlet;
]]></code.krate>
         <code.midihandler><![CDATA[if ( attr_mididevice > 0 && dev > 0 && attr_mididevice != dev) return;
if ( attr_midiport > 0 && port > 0 && attr_midiport != port) return;
]]></code.midihandler>
      </object>
   </patchobj>
   <obj type="conv/to f" uuid="bdd08445689602ce174689ccb6be085f627d9892" name="to_1" x="896" y="476">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/exp" uuid="3f0e6db61bc98c04b42a940e7a93abbf8a178317" name="exp_2" x="952" y="476">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="d9f44795bfd6115f91bc84d9b38087afd0709f6e" name="-+i_2" x="546" y="490">
      <params>
         <int32 name="c" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="e5bf3953ead204874692af5d85c0e43a027g74f1">
         <sDescription>subtract/add constanti</sDescription>
         <inlets>
            <int32 name="in" description="in"/>
         </inlets>
         <outlets>
            <int32 name="out" description="out"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="c" noLabel="true">
               <MinValue i="-32768"/>
               <MaxValue i="32768"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out= inlet_in+ param_c;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="d9f44795bfd6115f91bc84d9b38087afd0709f6e" name="Transpose after scaler" x="616" y="490">
      <params>
         <int32.small name="i0" value="0"/>
         <int32.small name="i1" value="0"/>
         <int32.small name="i2" value="-5"/>
         <int32.small name="i3" value="-5"/>
         <int32.small name="i4" value="0"/>
         <int32.small name="i5" value="0"/>
         <int32.small name="i6" value="7"/>
         <int32.small name="i7" value="12"/>
         <int32.small name="i8" value="0"/>
         <int32.small name="i9" value="0"/>
         <int32.small name="i10" value="0"/>
         <int32.small name="i11" value="0"/>
         <int32.small name="i12" value="0"/>
         <int32.small name="i13" value="0"/>
         <int32.small name="i14" value="0"/>
         <int32.small name="i15" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="fae5d888c7146829d98d4f7670698c46f06e3eb7">
         <sDescription>select one out of 16 integers +-, with chain i/o</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <rotatedParams>true</rotatedParams>
         <inlets>
            <int32 name="in" description="in"/>
            <int32 name="def" description="default value"/>
         </inlets>
         <outlets>
            <int32 name="chain" description="chain out (in-16)"/>
            <int32 name="o" description="output"/>
         </outlets>
         <displays>
            <int32.bar16 name="in" noLabel="true"/>
         </displays>
         <params>
            <int32.mini name="i0" noLabel="true">
               <MinValue i="-64"/>
               <MaxValue i="64"/>
            </int32.mini>
            <int32.mini name="i1" noLabel="true">
               <MinValue i="-64"/>
               <MaxValue i="64"/>
            </int32.mini>
            <int32.mini name="i2" noLabel="true">
               <MinValue i="-64"/>
               <MaxValue i="64"/>
            </int32.mini>
            <int32.mini name="i3" noLabel="true">
               <MinValue i="-64"/>
               <MaxValue i="64"/>
            </int32.mini>
            <int32.mini name="i4" noLabel="true">
               <MinValue i="-64"/>
               <MaxValue i="64"/>
            </int32.mini>
            <int32.mini name="i5" noLabel="true">
               <MinValue i="-64"/>
               <MaxValue i="64"/>
            </int32.mini>
            <int32.mini name="i6" noLabel="true">
               <MinValue i="-64"/>
               <MaxValue i="64"/>
            </int32.mini>
            <int32.mini name="i7" noLabel="true">
               <MinValue i="-64"/>
               <MaxValue i="64"/>
            </int32.mini>
            <int32.mini name="i8" noLabel="true">
               <MinValue i="-64"/>
               <MaxValue i="64"/>
            </int32.mini>
            <int32.mini name="i9" noLabel="true">
               <MinValue i="-64"/>
               <MaxValue i="64"/>
            </int32.mini>
            <int32.mini name="i10" noLabel="true">
               <MinValue i="-64"/>
               <MaxValue i="64"/>
            </int32.mini>
            <int32.mini name="i11" noLabel="true">
               <MinValue i="-64"/>
               <MaxValue i="64"/>
            </int32.mini>
            <int32.mini name="i12" noLabel="true">
               <MinValue i="-64"/>
               <MaxValue i="64"/>
            </int32.mini>
            <int32.mini name="i13" noLabel="true">
               <MinValue i="-64"/>
               <MaxValue i="64"/>
            </int32.mini>
            <int32.mini name="i14" noLabel="true">
               <MinValue i="-64"/>
               <MaxValue i="64"/>
            </int32.mini>
            <int32.mini name="i15" noLabel="true">
               <MinValue i="-64"/>
               <MaxValue i="64"/>
            </int32.mini>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[switch(inlet_in){
case 0: outlet_o = param_i0; break;
case 1: outlet_o = param_i1; break;
case 2: outlet_o = param_i2; break;
case 3: outlet_o = param_i3; break;
case 4: outlet_o = param_i4; break;
case 5: outlet_o = param_i5; break;
case 6: outlet_o = param_i6; break;
case 7: outlet_o = param_i7; break;
case 8: outlet_o = param_i8; break;
case 9: outlet_o = param_i9; break;
case 10: outlet_o = param_i10; break;
case 11: outlet_o = param_i11; break;
case 12: outlet_o = param_i12; break;
case 13: outlet_o = param_i13; break;
case 14: outlet_o = param_i14; break;
case 15: outlet_o = param_i15; break;
default: outlet_o = inlet_def;
}
outlet_chain = inlet_in-16;
disp_in=inlet_in;
]]></code.krate>
      </object>
   </patchobj>
   <obj type="disp/i" uuid="5e35fd0c62d81e70017289250cf28edd26e19e4a" name="i_1" x="840" y="490">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/i" uuid="5e35fd0c62d81e70017289250cf28edd26e19e4a" name="i_2" x="840" y="546">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/chart b" uuid="d2bdf496f96ee521628490a038411210fbe29b15" name="chart_4" x="1386" y="546">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/chart b" uuid="d2bdf496f96ee521628490a038411210fbe29b15" name="chart_6" x="1554" y="546">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="*c_5" x="210" y="616">
      <params>
         <frac32.u.map name="amp" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/smooth" uuid="6c5d08c282bb08bff24af85b4891447f99bcbc97" name="smooth_1" x="308" y="616">
      <params>
         <frac32.u.map name="time" value="12.5"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="994" y="616" text="envelope"/>
   <obj type="logic/counter" uuid="7a141ba82230e54e5f5cd12da5dbe5a74ba854a5" name="counter_7" x="742" y="630">
      <params>
         <int32 name="maximum" value="4"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="d9f44795bfd6115f91bc84d9b38087afd0709f6e" name="rndstep_4" x="826" y="630">
      <params>
         <frac32.s.map name="prob" value="0.0"/>
         <int32 name="max" value="4"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="4e2a1eb9aae14e9fa00cf31c3d0c6b1a0145b690">
         <sDescription>probabiltiy switch inlet i or rnd number i  </sDescription>
         <author>Philoop</author>
         <license>BSD</license>
         <inlets>
            <int32 name="i1"/>
         </inlets>
         <outlets>
            <int32 name="o"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map name="prob" noLabel="false"/>
            <int32 name="max" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="65536"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int ptrig;
int32_t pval;
int32_t val;
int ntrig;
int rnd;
int32_t vali;
int itrig;
]]></code.declaration>
         <code.init><![CDATA[val = (int32_t)(GenerateRandomNumber())>>4;
      ntrig = 0;
      rnd = 0;
      ptrig = 0;
      pval = 0;
]]></code.init>
         <code.krate><![CDATA[ if ((pval != inlet_i1)&(!ptrig)) { 
  pval = inlet_i1;
  ptrig = 1;  
} else {
  ptrig = 0;  
}

if ((ptrig>0) && !ntrig) { val = (int32_t)(GenerateRandomNumber())>>4; ntrig=1;}
      else if (!(ptrig>0)) ntrig=0;
      rnd=val;
      rnd = param_prob>val ;     
      outlet_o= rnd>0?vali:inlet_i1;
 
 if ((ptrig>0) && !itrig) {
      if (param_max) 
         vali = (int32_t)(GenerateRandomNumber()% (param_max));
      else vali = 0;
   
   }
   
   

 ]]></code.krate>
      </object>
   </patchobj>
   <obj type="sel/sel dial 4" uuid="2bf0aa0779d8476013c6151d55fa9452b204d852" name="decay" x="910" y="630">
      <params>
         <frac32.u.map name="v0" value="14.0"/>
         <frac32.u.map name="v1" value="49.0"/>
         <frac32.u.map name="v2" value="14.0"/>
         <frac32.u.map name="v3" value="41.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="sel/sel dial 4" uuid="2bf0aa0779d8476013c6151d55fa9452b204d852" name="sustain" x="994" y="630">
      <params>
         <frac32.u.map name="v0" value="17.5"/>
         <frac32.u.map name="v1" value="54.0"/>
         <frac32.u.map name="v2" value="7.0"/>
         <frac32.u.map name="v3" value="22.5"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="d9f44795bfd6115f91bc84d9b38087afd0709f6e" name="inv_5" x="1078" y="630">
      <params>
         <frac32.u.map name="inv" value="47.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="f536e36a05a0083eea7de9aeb7c3e944473b7c87">
         <sDescription>crossfade between inv/noniverted </sDescription>
         <author>Philoop</author>
         <license>BSD</license>
         <inlets>
            <frac32 name="i1" description="input"/>
         </inlets>
         <outlets>
            <frac32.bipolar name="o"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="inv" noLabel="false"/>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[   {
      int64_t a = (int64_t)inlet_i1 * param_inv;
      a -= (int64_t)inlet_i1 * ((128<<20)-param_inv);
      outlet_o= a>>27;
   }
]]></code.krate>
      </object>
   </patchobj>
   <obj type="env/adsr m" uuid="98bd39fb828c392b28126d259cb5175e6f6ea34b" name="adsr_1" x="1148" y="630">
      <params>
         <frac32.s.map name="a" value="-64.0"/>
         <frac32.s.map name="d" value="-29.0"/>
         <frac32.u.map name="s" value="30.0"/>
         <frac32.s.map name="r" value="-36.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="d9f44795bfd6115f91bc84d9b38087afd0709f6e" name="inv_8" x="1302" y="686">
      <params>
         <frac32.u.map name="inv" value="35.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="f536e36a05a0083eea7de9aeb7c3e944473b7c87">
         <sDescription>crossfade between inv/noniverted </sDescription>
         <author>Philoop</author>
         <license>BSD</license>
         <inlets>
            <frac32 name="i1" description="input"/>
         </inlets>
         <outlets>
            <frac32.bipolar name="o"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="inv" noLabel="false"/>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[   {
      int64_t a = (int64_t)inlet_i1 * param_inv;
      a -= (int64_t)inlet_i1 * ((128<<20)-param_inv);
      outlet_o= a>>27;
   }
]]></code.krate>
      </object>
   </patchobj>
   <obj type="lfo/sine" uuid="75f7330c26a13953215dccc3b7b9008545c9daa9" name="sine_2" x="1386" y="686">
      <params>
         <frac32.s.map name="pitch" value="-64.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="*c_6" x="1498" y="686">
      <params>
         <frac32.u.map name="amp" value="33.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="disp/chart b" uuid="d2bdf496f96ee521628490a038411210fbe29b15" name="chart_9" x="1610" y="686">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="*c_7" x="210" y="700">
      <params>
         <frac32.u.map name="amp" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/smooth" uuid="6c5d08c282bb08bff24af85b4891447f99bcbc97" name="smooth_2" x="308" y="700">
      <params>
         <frac32.u.map name="time" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="d9f44795bfd6115f91bc84d9b38087afd0709f6e" name="inv_6" x="1078" y="728">
      <params>
         <frac32.u.map name="inv" value="52.5"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="f536e36a05a0083eea7de9aeb7c3e944473b7c87">
         <sDescription>crossfade between inv/noniverted </sDescription>
         <author>Philoop</author>
         <license>BSD</license>
         <inlets>
            <frac32 name="i1" description="input"/>
         </inlets>
         <outlets>
            <frac32.bipolar name="o"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="inv" noLabel="false"/>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[   {
      int64_t a = (int64_t)inlet_i1 * param_inv;
      a -= (int64_t)inlet_i1 * ((128<<20)-param_inv);
      outlet_o= a>>27;
   }
]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="d9f44795bfd6115f91bc84d9b38087afd0709f6e" name="rndstep_3" x="826" y="742">
      <params>
         <frac32.s.map name="prob" value="0.0"/>
         <int32 name="max" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="4e2a1eb9aae14e9fa00cf31c3d0c6b1a0145b690">
         <sDescription>probabiltiy switch inlet i or rnd number i  </sDescription>
         <author>Philoop</author>
         <license>BSD</license>
         <inlets>
            <int32 name="i1"/>
         </inlets>
         <outlets>
            <int32 name="o"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map name="prob" noLabel="false"/>
            <int32 name="max" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="65536"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int ptrig;
int32_t pval;
int32_t val;
int ntrig;
int rnd;
int32_t vali;
int itrig;
]]></code.declaration>
         <code.init><![CDATA[val = (int32_t)(GenerateRandomNumber())>>4;
      ntrig = 0;
      rnd = 0;
      ptrig = 0;
      pval = 0;
]]></code.init>
         <code.krate><![CDATA[ if ((pval != inlet_i1)&(!ptrig)) { 
  pval = inlet_i1;
  ptrig = 1;  
} else {
  ptrig = 0;  
}

if ((ptrig>0) && !ntrig) { val = (int32_t)(GenerateRandomNumber())>>4; ntrig=1;}
      else if (!(ptrig>0)) ntrig=0;
      rnd=val;
      rnd = param_prob>val ;     
      outlet_o= rnd>0?vali:inlet_i1;
 
 if ((ptrig>0) && !itrig) {
      if (param_max) 
         vali = (int32_t)(GenerateRandomNumber()% (param_max));
      else vali = 0;
   
   }
   
   

 ]]></code.krate>
      </object>
   </patchobj>
   <nets>
      <net>
         <source obj="adsr_1" outlet="env"/>
         <dest obj="vca_1" inlet="v"/>
         <dest obj="vcf cv" inlet="i2"/>
         <dest obj="Reso cv" inlet="i2"/>
      </net>
      <net>
         <source obj="counter_2" outlet="c"/>
         <dest obj="counter_4" inlet="trig"/>
      </net>
      <net>
         <source obj="counter_7" outlet="o"/>
         <dest obj="rndstep_4" inlet="i1"/>
      </net>
      <net>
         <source obj="counter_5" outlet="o"/>
         <dest obj="sel_3" inlet="s"/>
      </net>
      <net>
         <source obj="counter_4" outlet="o"/>
         <dest obj="sel_2" inlet="s"/>
      </net>
      <net>
         <source obj="counter_4" outlet="c"/>
         <dest obj="counter_5" inlet="trig"/>
      </net>
      <net>
         <source obj="glide_1" outlet="out"/>
         <dest obj="patcher_4" inlet="in"/>
      </net>
      <net>
         <source obj="rndstep_2" outlet="o"/>
         <dest obj="patcher_7" inlet="countA"/>
         <dest obj="patcher_7" inlet="countA"/>
         <dest obj="patcher_7" inlet="countA"/>
         <dest obj="patcher_7" inlet="countA"/>
         <dest obj="patcher_7" inlet="countA"/>
         <dest obj="patcher_7" inlet="countA"/>
      </net>
      <net>
         <source obj="obj_1" outlet="Echoout"/>
         <dest obj="crossfader" inlet="in1"/>
         <dest obj="in_1" inlet="left"/>
      </net>
      <net>
         <source obj="counter_6" outlet="c"/>
         <dest obj="counter_2" inlet="trig"/>
      </net>
      <net>
         <source obj="vcf3_1" outlet="lp"/>
         <dest obj="vca_1" inlet="a"/>
      </net>
      <net>
         <source obj="sine_3" outlet="wave"/>
         <dest obj="vcf cv" inlet="i3"/>
      </net>
      <net>
         <source obj="obj_4" outlet="UniPolar+"/>
         <dest obj="latch" inlet="i"/>
      </net>
      <net>
         <source obj="obj_6" outlet="Echoout"/>
         <dest obj="crossfade" inlet="in1"/>
         <dest obj="in_1" inlet="right"/>
      </net>
      <net>
         <source obj="vca_1" outlet="o"/>
         <dest obj="volume" inlet="in"/>
      </net>
      <net>
         <source obj="square_1" outlet="wave"/>
         <dest obj="latch" inlet="trig"/>
         <dest obj="bool_3" inlet="in"/>
         <dest obj="counter_6" inlet="trig"/>
         <dest obj="counter_3" inlet="trig"/>
         <dest obj="obj_4" inlet="RndTrig"/>
         <dest obj="Density" inlet="g"/>
      </net>
      <net>
         <source obj="sine_4" outlet="wave"/>
         <dest obj="Reso cv" inlet="i3"/>
      </net>
      <net>
         <source obj="latch" outlet="o"/>
         <dest obj="chart_3" inlet="in"/>
         <dest obj="patcher_1" inlet="i2"/>
      </net>
      <net>
         <source obj="*c_2" outlet="out"/>
         <dest obj="vcf3_1" inlet="reso"/>
      </net>
      <net>
         <source obj="exp_1" outlet="result"/>
         <dest obj="*c_2" inlet="in"/>
      </net>
      <net>
         <source obj="patcher_1" outlet="outlet_1"/>
         <dest obj="chart_7" inlet="in"/>
         <dest obj="matrixscalerswitch_1" inlet="in"/>
      </net>
      <net>
         <source obj="vcf cv" outlet="outlet_1"/>
         <dest obj="chart_4" inlet="in"/>
         <dest obj="vcf3_1" inlet="pitch"/>
      </net>
      <net>
         <source obj="Reso cv" outlet="outlet_1"/>
         <dest obj="chart_6" inlet="in"/>
         <dest obj="exp_1" inlet="a"/>
      </net>
      <net>
         <source obj="patcher_4" outlet="outlet_1"/>
         <dest obj="vca_2" inlet="a"/>
      </net>
      <net>
         <source obj="patcher_7" outlet="Gate/Acca"/>
         <dest obj="to_1" inlet="i"/>
         <dest obj="i_1" inlet="in"/>
         <dest obj="counter_7" inlet="trig"/>
         <dest obj="adsr_1" inlet="gate"/>
         <dest obj="%slide" inlet="trig"/>
      </net>
      <net>
         <source obj="vca_2" outlet="o"/>
         <dest obj="vcf3_1" inlet="in"/>
      </net>
      <net>
         <source obj="exp_2" outlet="result"/>
         <dest obj="xfade_1" inlet="i2"/>
      </net>
      <net>
         <source obj="to_1" outlet="o"/>
         <dest obj="exp_2" inlet="a"/>
         <dest obj="xfade_1" inlet="i1"/>
      </net>
      <net>
         <source obj="expo" outlet="out"/>
         <dest obj="xfade_1" inlet="c"/>
      </net>
      <net>
         <source obj="xfade_1" outlet="o"/>
         <dest obj="chart_11" inlet="in"/>
         <dest obj="vca_2" inlet="v"/>
         <dest obj="vcf cv" inlet="i1"/>
         <dest obj="Reso cv" inlet="i1"/>
      </net>
      <net>
         <source obj="sine_2" outlet="wave"/>
         <dest obj="*c_6" inlet="in"/>
      </net>
      <net>
         <source obj="patcher_7" outlet="outlet_1"/>
         <dest obj="i_2" inlet="in"/>
      </net>
      <net>
         <source obj="mix_1____tmp" outlet="o"/>
         <dest obj="chart_5" inlet="in"/>
         <dest obj="patcher_1" inlet="i1"/>
      </net>
      <net>
         <source obj="*c_6" outlet="out"/>
         <dest obj="chart_9" inlet="in"/>
         <dest obj="patcher_4" inlet="pw"/>
      </net>
      <net>
         <source obj="Density" outlet="o"/>
         <dest obj="rndstep_1" inlet="i1"/>
         <dest obj="rndstep_2" inlet="i1"/>
      </net>
      <net>
         <source obj="note repeat" outlet="o"/>
         <dest obj="note_1" inlet="in"/>
         <dest obj="chart_1" inlet="in"/>
         <dest obj="glide_1" inlet="in"/>
         <dest obj="patcher_1" inlet="i3"/>
      </net>
      <net>
         <source obj="counter_3" outlet="o"/>
         <dest obj="Density" inlet="i"/>
      </net>
      <net>
         <source obj="counter_2" outlet="o"/>
         <dest obj="sel_1" inlet="s"/>
      </net>
      <net>
         <source obj="Density" outlet="g"/>
         <dest obj="patcher_7" inlet="gateinA"/>
      </net>
      <net>
         <source obj="sel_3" outlet="o"/>
         <dest obj="mix_1____tmp" inlet="i1"/>
      </net>
      <net>
         <source obj="sel_2" outlet="o"/>
         <dest obj="mix_1____tmp" inlet="i2"/>
      </net>
      <net>
         <source obj="sel_1" outlet="o"/>
         <dest obj="mix_1____tmp" inlet="i3"/>
      </net>
      <net>
         <source obj="counter_3" outlet="c"/>
         <dest obj="obj_3" inlet="inlet_1"/>
         <dest obj="obj_4" inlet="Reset"/>
      </net>
      <net>
         <source obj="obj_3" outlet="counto"/>
         <dest obj="-+i_2" inlet="in"/>
      </net>
      <net>
         <source obj="rndstep_1" outlet="o"/>
         <dest obj="sel_4" inlet="in"/>
      </net>
      <net>
         <source obj="sustain" outlet="o"/>
         <dest obj="inv_6" inlet="i1"/>
      </net>
      <net>
         <source obj="inv_6" outlet="o"/>
         <dest obj="adsr_1" inlet="s"/>
      </net>
      <net>
         <source obj="inv_5" outlet="o"/>
         <dest obj="adsr_1" inlet="d"/>
      </net>
      <net>
         <source obj="decay" outlet="o"/>
         <dest obj="inv_5" inlet="i1"/>
      </net>
      <net>
         <source obj="obj_4" outlet="Bipolar"/>
         <dest obj="inv_8" inlet="i1"/>
      </net>
      <net>
         <source obj="inv_8" outlet="o"/>
         <dest obj="sine_2" inlet="pitch"/>
      </net>
      <net>
         <source obj="patcher_7" outlet="slidea"/>
         <dest obj="glide_1" inlet="en"/>
      </net>
      <net>
         <source obj="%slide" outlet="o"/>
         <dest obj="patcher_7" inlet="slide"/>
      </net>
      <net>
         <source obj="dial_4" outlet="out"/>
         <dest obj="obj_4" inlet="UP/DOWN"/>
      </net>
      <net>
         <source obj="crossfade" outlet="out"/>
         <dest obj="obj_1" inlet="echo"/>
      </net>
      <net>
         <source obj="crossfader" outlet="out"/>
         <dest obj="obj_6" inlet="echo"/>
      </net>
      <net>
         <source obj="sel_4" outlet="chain"/>
         <dest obj="matrixscalerswitch_1" inlet="seq"/>
      </net>
      <net>
         <source obj="patcher_7" outlet="oct"/>
         <dest obj="matrixscalerswitch_1" inlet="octave"/>
      </net>
      <net>
         <source obj="matrixscalerswitch_1" outlet="o"/>
         <dest obj="note repeat" inlet="i"/>
      </net>
      <net>
         <source obj="obj_4" outlet="Up"/>
         <dest obj="*c_5" inlet="in"/>
      </net>
      <net>
         <source obj="obj_4" outlet="Down"/>
         <dest obj="*c_7" inlet="in"/>
      </net>
      <net>
         <source obj="*c_5" outlet="out"/>
         <dest obj="smooth_1" inlet="in"/>
      </net>
      <net>
         <source obj="*c_7" outlet="out"/>
         <dest obj="smooth_2" inlet="in"/>
      </net>
      <net>
         <source obj="smooth_1" outlet="out"/>
         <dest obj="obj_1" inlet="time"/>
      </net>
      <net>
         <source obj="smooth_2" outlet="out"/>
         <dest obj="obj_6" inlet="time"/>
      </net>
      <net>
         <source obj="Transpose after scaler" outlet="o"/>
         <dest obj="matrixscalerswitch_1" inlet="transafter"/>
      </net>
      <net>
         <source obj="-+i_2" outlet="out"/>
         <dest obj="Transpose after scaler" inlet="in"/>
      </net>
      <net>
         <source obj="rndstep_4" outlet="o"/>
         <dest obj="decay" inlet="s"/>
      </net>
      <net>
         <source obj="rndstep_3" outlet="o"/>
         <dest obj="sustain" inlet="s"/>
      </net>
      <net>
         <source obj="volume" outlet="out"/>
         <dest obj="crossfade" inlet="bus_in"/>
         <dest obj="crossfader" inlet="bus_in"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
      <MidiChannel>1</MidiChannel>
      <NPresets>0</NPresets>
      <NPresetEntries>0</NPresetEntries>
      <NModulationSources>0</NModulationSources>
      <NModulationTargetsPerSource>0</NModulationTargetsPerSource>
      <Author>Philoop</Author>
      <License>Secret</License>
      <Attributions>melodizer</Attributions>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>-8</x>
      <y>-8</y>
      <width>1936</width>
      <height>1066</height>
   </windowPos>
</patch-1.0>