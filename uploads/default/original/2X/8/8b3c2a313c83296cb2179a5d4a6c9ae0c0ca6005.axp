<patch-1.0 appVersion="1.0.12">
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="tempo" x="0" y="0">
      <params>
         <frac32.s.map name="value" value="11.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="lfo/square" uuid="de6909eb64db13af5b43f979a4c130024b3a4793" name="square_1" x="70" y="0">
      <params>
         <frac32.s.map name="pitch" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="5b8f4143-0cd6-4160-8b43-037752ab4167" name="counter_1" x="168" y="0">
      <params>
         <int32 name="maximum" value="16"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="5b8f4143-0cd6-4160-8b43-037752ab4167">
         <sDescription>cyclic up counter</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>counter.axh</helpPatch>
         <inlets>
            <bool32.rising name="trig" description="trigger"/>
            <bool32.rising name="r" description="reset"/>
         </inlets>
         <outlets>
            <int32 name="o" description="output"/>
            <bool32.pulse name="c" description="carry pulse"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="maximum" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="65536"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[   int ntrig;
   int rtrig;
   int count;
]]></code.declaration>
         <code.init><![CDATA[count=-1;
   ntrig = 0;
   rtrig = 0;]]></code.init>
         <code.krate><![CDATA[outlet_c=0;
if ((inlet_trig>0) && !ntrig) {
   count += 1; if (count>=param_maximum) {count = 0; outlet_c = 1;}
   ntrig=1;
}
else if (!(inlet_trig>0)) ntrig=0;
if ((inlet_r>0) && !rtrig) {count=0; rtrig = 1;}
else if (!(inlet_r>0)) rtrig=0;
outlet_o= count;
]]></code.krate>
      </object>
   </patchobj>
   <obj type="logic/counter" uuid="7a141ba82230e54e5f5cd12da5dbe5a74ba854a5" name="counter_5" x="252" y="0">
      <params>
         <int32 name="maximum" value="16"/>
      </params>
      <attribs/>
   </obj>
   <obj type="logic/counter" uuid="7a141ba82230e54e5f5cd12da5dbe5a74ba854a5" name="counter_2" x="336" y="0">
      <params>
         <int32 name="maximum" value="4"/>
      </params>
      <attribs/>
   </obj>
   <obj type="logic/counter" uuid="7a141ba82230e54e5f5cd12da5dbe5a74ba854a5" name="counter_3" x="420" y="0">
      <params>
         <int32 name="maximum" value="16"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="randomise all" x="490" y="28">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="auto random" x="112" y="112">
      <params>
         <bool32.tgl name="b" value="1"/>
      </params>
      <attribs/>
   </obj>
   <obj type="logic/counter" uuid="7a141ba82230e54e5f5cd12da5dbe5a74ba854a5" name="counter_4" x="210" y="112">
      <params>
         <int32 name="maximum" value="8"/>
      </params>
      <attribs/>
   </obj>
   <obj type="logic/and 2" uuid="c67031682f552aa0a80b23377495c51ea28a8c9c" name="and_1" x="308" y="112">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/or 2" uuid="3805d3c84d30032a44fbdbe42d9a2988a1790a3e" name="or_1" x="378" y="112">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="825eec33-9de3-4574-84c5-d253fc661938" name="rnd patt_1" x="490" y="112">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="825eec33-9de3-4574-84c5-d253fc661938">
         <sDescription>constant boolean, momentary control</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets>
            <bool32 name="i1"/>
         </inlets>
         <outlets>
            <bool32 name="o" description="output"/>
         </outlets>
         <displays/>
         <params>
            <bool32.mom name="b" noLabel="true"/>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_o=param_b||inlet_i1;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="825eec33-9de3-4574-84c5-d253fc661938" name="rnd patt_2" x="588" y="112">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="825eec33-9de3-4574-84c5-d253fc661938">
         <sDescription>constant boolean, momentary control</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets>
            <bool32 name="i1"/>
         </inlets>
         <outlets>
            <bool32 name="o" description="output"/>
         </outlets>
         <displays/>
         <params>
            <bool32.mom name="b" noLabel="true"/>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_o=param_b||inlet_i1;]]></code.krate>
      </object>
   </patchobj>
   <obj type="sss/patt/basePatt" uuid="ecfda10d-6ec1-4a2f-9df8-8ee81763ce5b" name="basePatt_3 fast_" x="392" y="196">
      <params>
         <frac32.u.map name="length" value="64.0"/>
         <frac32.u.map name="base" value="0.0"/>
         <frac32.u.map name="diffchance" value="35.5"/>
         <frac32.u.map name="differents" value="27.0"/>
         <frac32.u.map name="diffsize" value="64.0"/>
         <bool32.tgl name="nonseed" value="0"/>
      </params>
      <attribs>
         <spinner attributeName="max" value="14"/>
      </attribs>
   </obj>
   <obj type="sss/patt/basePatt" uuid="ecfda10d-6ec1-4a2f-9df8-8ee81763ce5b" name="basePatt_3 fast" x="490" y="196">
      <params>
         <frac32.u.map name="length" value="64.0"/>
         <frac32.u.map name="base" value="0.0"/>
         <frac32.u.map name="diffchance" value="23.5"/>
         <frac32.u.map name="differents" value="29.0"/>
         <frac32.u.map name="diffsize" value="64.0"/>
         <bool32.tgl name="nonseed" value="0"/>
      </params>
      <attribs>
         <spinner attributeName="max" value="7"/>
      </attribs>
   </obj>
   <obj type="sss/patt/basePatt" uuid="ecfda10d-6ec1-4a2f-9df8-8ee81763ce5b" name="basePatt_2 slow" x="588" y="196">
      <params>
         <frac32.u.map name="length" value="64.0"/>
         <frac32.u.map name="base" value="0.0"/>
         <frac32.u.map name="diffchance" value="64.0"/>
         <frac32.u.map name="differents" value="27.0"/>
         <frac32.u.map name="diffsize" value="64.0"/>
         <bool32.tgl name="nonseed" value="0"/>
      </params>
      <attribs>
         <spinner attributeName="max" value="7"/>
      </attribs>
   </obj>
   <obj type="ctrl/i" uuid="a3786816db6ea5bc6ac4193a5cccdb2c83b83496" name="i_1" x="686" y="196">
      <params>
         <int32 name="value" value="30"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="b94a9b8e9adcb7d18868c0ee808a9b211b65578d" name="+_1" x="742" y="196">
      <params/>
      <attribs/>
   </obj>
   <obj type="harmony/note scale" uuid="d5343a4fea87a3e4f4dae20287226084550ea8d3" name="note_1" x="812" y="196">
      <params>
         <bin12 name="b12" value="1459"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="168" y="238" text="some pattern generators to provide note info"/>
   <obj type="math/+" uuid="b94a9b8e9adcb7d18868c0ee808a9b211b65578d" name="+_3" x="742" y="322">
      <params/>
      <attribs/>
   </obj>
   <obj type="harmony/note scale" uuid="d5343a4fea87a3e4f4dae20287226084550ea8d3" name="note_2" x="812" y="322">
      <params>
         <bin12 name="b12" value="1459"/>
      </params>
      <attribs/>
   </obj>
   <obj type="sel/sel b 16 pulse" uuid="b52a026dd735305ac8ddf499e366883006aa2acf" name="sel_1" x="994" y="350">
      <params>
         <bin16 name="b16" value="61166"/>
      </params>
      <attribs/>
   </obj>
   <obj type="env/ad" uuid="255cb0cd67470c7498f9c33b820facd26aa629ce" name="ad_2" x="1232" y="392">
      <params>
         <frac32.s.map name="a" value="-64.0"/>
         <frac32.s.map name="d" value="-21.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="825eec33-9de3-4574-84c5-d253fc661938" name="rnd waveform" x="434" y="504">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="825eec33-9de3-4574-84c5-d253fc661938">
         <sDescription>constant boolean, momentary control</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets>
            <bool32 name="i1"/>
         </inlets>
         <outlets>
            <bool32 name="o" description="output"/>
         </outlets>
         <displays/>
         <params>
            <bool32.mom name="b" noLabel="true"/>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_o=param_b||inlet_i1;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="825eec33-9de3-4574-84c5-d253fc661938" name="rnd patt_3" x="770" y="504">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="825eec33-9de3-4574-84c5-d253fc661938">
         <sDescription>constant boolean, momentary control</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets>
            <bool32 name="i1"/>
         </inlets>
         <outlets>
            <bool32 name="o" description="output"/>
         </outlets>
         <displays/>
         <params>
            <bool32.mom name="b" noLabel="true"/>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_o=param_b||inlet_i1;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="825eec33-9de3-4574-84c5-d253fc661938" name="rnd patt_4" x="868" y="504">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="825eec33-9de3-4574-84c5-d253fc661938">
         <sDescription>constant boolean, momentary control</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets>
            <bool32 name="i1"/>
         </inlets>
         <outlets>
            <bool32 name="o" description="output"/>
         </outlets>
         <displays/>
         <params>
            <bool32.mom name="b" noLabel="true"/>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_o=param_b||inlet_i1;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="825eec33-9de3-4574-84c5-d253fc661938" name="rnd times" x="1092" y="504">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="825eec33-9de3-4574-84c5-d253fc661938">
         <sDescription>constant boolean, momentary control</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets>
            <bool32 name="i1"/>
         </inlets>
         <outlets>
            <bool32 name="o" description="output"/>
         </outlets>
         <displays/>
         <params>
            <bool32.mom name="b" noLabel="true"/>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_o=param_b||inlet_i1;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="825eec33-9de3-4574-84c5-d253fc661938" name="rnd settings" x="1442" y="504">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="825eec33-9de3-4574-84c5-d253fc661938">
         <sDescription>constant boolean, momentary control</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets>
            <bool32 name="i1"/>
         </inlets>
         <outlets>
            <bool32 name="o" description="output"/>
         </outlets>
         <displays/>
         <params>
            <bool32.mom name="b" noLabel="true"/>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_o=param_b||inlet_i1;]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="532" y="574" text="just 3 oscillatos in this patch"/>
   <comment type="patch/comment" x="938" y="574" text="sequencing band-envelopes"/>
   <comment type="patch/comment" x="1232" y="574" text="pre-filtering bass"/>
   <comment type="patch/comment" x="1526" y="574" text="bass band morph"/>
   <obj type="lfo/sine" uuid="75f7330c26a13953215dccc3b7b9008545c9daa9" name="sine_3" x="126" y="588">
      <params>
         <frac32.s.map name="pitch" value="-48.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="lfo/sine" uuid="75f7330c26a13953215dccc3b7b9008545c9daa9" name="sine_1" x="238" y="588">
      <params>
         <frac32.s.map name="pitch" value="4.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="mix/mix 2 sq" uuid="a4fab7491bfa49bda00b333e2d4a4b81f11e77b8" name="mix_1" x="336" y="588">
      <params>
         <frac32.u.map name="gain1" value="25.0"/>
         <frac32.u.map name="gain2" value="40.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_1" x="434" y="588">
      <params>
         <frac32.u.map name="value" value="23.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="osc/pwm" uuid="a6b40ff63f161d8bac8ea2eba5b0dbffcf49b472" name="pwm_1" x="504" y="588">
      <params>
         <frac32.s.map name="pitch" value="-31.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="f923e30b-65fe-457e-8a3a-bd75cf7b3b7d" name="sine_2" x="602" y="588">
      <params>
         <frac32.s.map name="pitch" value="-30.96999979019165"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="f923e30b-65fe-457e-8a3a-bd75cf7b3b7d">
         <sDescription>sine wave oscillator</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>osc.axh</helpPatch>
         <inlets>
            <frac32.bipolar name="pitch" description="pitch"/>
            <bool32 name="rnd"/>
         </inlets>
         <outlets>
            <frac32buffer.bipolar name="wave" description="sine wave"/>
            <frac32buffer name="o1"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.pitch name="pitch" noLabel="true"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t Phase;
int rnd;
int32_t wth[8],frm[8],phs[8],hrm[8];

int32_t FRM(int32_t p2,int32_t frm,int32_t wdt)
{
int32_t r1,r2;
SINE2TINTERP((___SMMUL(p2,frm)<<12),r1)
HANNING2TINTERP((1<<31)+(__SSAT(___SMMUL(p2,wdt)+(p2>>8),24)<<8),r2)
return r1= ___SMMUL(r1,r2)>>3;
}]]></code.declaration>
         <code.init><![CDATA[Phase = 0;

for(int i=0;i<8;i++)
{
	phs[i]=GenerateRandomNumber();
	int32_t tmp=GenerateRandomNumber();
	wth[i]=___SMMUL(tmp,tmp)>>4;
	frm[i]=(int32_t)(GenerateRandomNumber()>>5);
	hrm[i]=(GenerateRandomNumber()&3)+1;
}]]></code.init>
         <code.krate><![CDATA[int32_t freq;
   MTOFEXTENDED(param_pitch + inlet_pitch,freq);

   if(inlet_rnd&&!rnd)
   {
   	rnd=1;
   	for(int i=0;i<8;i++)
{
	phs[i]=GenerateRandomNumber();
	int32_t tmp=GenerateRandomNumber();
	wth[i]=___SMMUL(tmp,tmp)>>4;
	hrm[i]=(GenerateRandomNumber()&3)+1;
	frm[i]=(int32_t)(GenerateRandomNumber()>>5)/hrm[i];
	
}
   }
   else if(!inlet_rnd){rnd=0;}
   int32_t ifreq;
   MTOFEXTENDED(-param_pitch-inlet_pitch,ifreq)]]></code.krate>
         <code.srate><![CDATA[Phase += freq;
int32_t sum=0;
for(int i=0;i<4;i++)
{
	sum+=FRM(Phase*hrm[i]+phs[i],___SMMUL(ifreq,frm[i])<<1,wth[i])>>1;
}
outlet_wave=sum;
outlet_o1=Phase>>4;]]></code.srate>
      </object>
   </patchobj>
   <obj type="mix/xfade" uuid="375dc91d218e96cdc9cbc7e92adb48f705ef701a" name="xfade_1" x="700" y="588">
      <params/>
      <attribs/>
   </obj>
   <obj type="sss/patt/basePatt" uuid="ecfda10d-6ec1-4a2f-9df8-8ee81763ce5b" name="basePatt_1 glidetime" x="770" y="588">
      <params>
         <frac32.u.map name="length" value="64.0"/>
         <frac32.u.map name="base" value="22.5"/>
         <frac32.u.map name="diffchance" value="38.0"/>
         <frac32.u.map name="differents" value="64.0"/>
         <frac32.u.map name="diffsize" value="64.0"/>
         <bool32.tgl name="nonseed" value="1"/>
      </params>
      <attribs>
         <spinner attributeName="max" value="128"/>
      </attribs>
   </obj>
   <patchobj type="patch/object" uuid="b4422a2a-0489-46b7-8824-861864b26824" name="gate pattern" x="868" y="588">
      <params>
         <bin16 name="p1" value="59882"/>
         <bin16 name="p2" value="52710"/>
         <bin16 name="p3" value="41705"/>
         <bin16 name="p4" value="48733"/>
         <bin16 name="p5" value="45878"/>
         <bin16 name="p6" value="9579"/>
         <bin16 name="p7" value="64428"/>
         <bin16 name="p8" value="47209"/>
      </params>
      <attribs>
         <objref attributeName="seq" obj="ad_1"/>
      </attribs>
      <object id="patch/object" uuid="b4422a2a-0489-46b7-8824-861864b26824">
         <sDescription>constant from 16 flags</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets>
            <int32 name="count"/>
            <bool32 name="rnd"/>
         </inlets>
         <outlets>
            <frac32buffer name="gates"/>
         </outlets>
         <displays/>
         <params>
            <bin16 name="p1"/>
            <bin16 name="p2"/>
            <bin16 name="p3"/>
            <bin16 name="p4"/>
            <bin16 name="p5"/>
            <bin16 name="p6"/>
            <bin16 name="p7"/>
            <bin16 name="p8"/>
         </params>
         <attribs>
            <objref name="seq"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int rnd;]]></code.declaration>
         <code.krate><![CDATA[if(inlet_rnd&&!rnd)
{
	rnd=1;
	int32_t tmp=(GenerateRandomNumber()&((1<<16)-1));
	for(int i=0;i<8;i++)
	{
		tmp=(tmp+(GenerateRandomNumber()&((1<<16)-1))+487946947)&((1<<16)-1);
		PExParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_p1+i],tmp,0xFFFD);
	}
}
else if(!inlet_rnd){rnd=0;}
int cnt=inlet_count&15;
uint16_t S[8]={param_p1,param_p2,param_p3,param_p4,param_p5,param_p6,param_p7,param_p8};
for(int i=0;i<8;i++)
{
	outlet_gates[i]=(S[i]>>cnt)&1;
}]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="7c2ac2e9-acda-4c32-8d01-4c217232605e" name="ad_1" x="1078" y="588">
      <params>
         <frac32.s.map name="from_a" value="-64.0"/>
         <frac32.s.map name="to_a" value="24.0"/>
         <frac32.s.map name="from_d" value="-29.0"/>
         <frac32.s.map name="to_d" value="9.0"/>
         <bool32.tgl name="retrig" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="7c2ac2e9-acda-4c32-8d01-4c217232605e">
         <sDescription>Attack/decay envelope, linear attack, exponential decay</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>env.axh</helpPatch>
         <inlets>
            <frac32buffer name="gates"/>
            <bool32 name="rnd"/>
         </inlets>
         <outlets>
            <frac32buffer name="env"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.klineartime.exp name="from_a"/>
            <frac32.s.map.kdecaytime.exp name="to_a"/>
            <frac32.s.map.klineartime.exp name="from_d"/>
            <frac32.s.map.klineartime.exp name="to_d"/>
            <bool32.tgl name="retrig"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int8_t stage[8];
int ntrig[8],rnd;
int32_t val[8];
int32_t a[8],d[8];
uint8_t seq[16];]]></code.declaration>
         <code.init><![CDATA[for(int i=0;i<8;i++)
{
a[i]=(GenerateRandomNumber()>>1);
a[i]=___SMMUL(a[i],a[i])<<1;
d[i]=(GenerateRandomNumber()>>1);
d[i]=___SMMUL(d[i],d[i])<<1;
ntrig[i] = 0;
val[i] = 0;
}
for(int i=0;i<16;i++)
{
	seq[i]=GenerateRandomNumber();
}]]></code.init>
         <code.krate><![CDATA[if(inlet_rnd&&!rnd)
{
	rnd=1;
	for(int i=0;i<8;i++)
{

a[i]=(GenerateRandomNumber()>>1);
a[i]=___SMMUL(a[i],a[i])<<1;
d[i]=(GenerateRandomNumber()>>1);
d[i]=___SMMUL(d[i],d[i])<<1;
}
for(int i=0;i<16;i++)
{
	//seq[i]=GenerateRandomNumber();
}
}
else if(!inlet_rnd){rnd=0;}



for(int i=0;i<8;i++)
{
int gate=inlet_gates[i];
if (gate&&((val[i]==0)||param_retrig) && !ntrig[i]) {
   ntrig[i] = 1;
   stage[i] = 1;
} else if (!gate) {
   ntrig[i] = 0;
}
if (stage[i] == 0){
	int32_t t;
	MTOF(-(param_from__d+___SMMUL(d[i],param_to__d-param_from__d<<1)),t)
	//t=___SMMUL(t,t)<<1;
   val[i] = __USAT(val[i]-(t>>3),31);
} else {
int32_t t;
	MTOF(-(param_from__a+___SMMUL(a[i],param_to__a-param_from__a<<1)),t)
	//t=___SMMUL(t,t)<<1;
   val[i] = val[i] + (t>>4);
   if (val[i]<0) {
      val[i] =0x7FFFFFFF;
      stage[i] = 0;
   }
}
outlet_env[i] = val[i]>>4;
}]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="52a44fed-cfa6-40fd-82f3-5cb55ac44f70" name="bass strip" x="1176" y="588">
      <params>
         <frac32.s.map name="pitch" value="-22.0"/>
         <frac32.u.map name="reso" value="36.0"/>
         <frac32.s.map name="mode" value="-64.0"/>
         <frac32.u.map name="gain" value="17.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="52a44fed-cfa6-40fd-82f3-5cb55ac44f70">
         <sDescription>Low pass filter, state-variable type</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>filter.axh</helpPatch>
         <inlets>
            <frac32buffer name="in" description="filter input"/>
            <frac32buffer name="pass"/>
         </inlets>
         <outlets>
            <frac32buffer name="reject"/>
            <frac32buffer name="pass" description="filter output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.pitch name="pitch"/>
            <frac32.u.map.filterq name="reso"/>
            <frac32.s.map name="mode"/>
            <frac32.u.map.gain16 name="gain"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t low;
int32_t band;]]></code.declaration>
         <code.init><![CDATA[low = 0;
band = 0;]]></code.init>
         <code.krate><![CDATA[int32_t reso=param_reso-(param_reso>>5)+(1<<21);
int32_t damp = (0x80<<24) - (reso<<4);
int32_t amp=(1<<31)-1-(reso-(reso>>10)<<4);

int32_t alpha;
int32_t freq;
MTOFEXTENDED(param_pitch,alpha);
SINE2TINTERP(alpha,freq);]]></code.krate>
         <code.srate><![CDATA[int32_t in1 = inlet_in;
int32_t notch = in1 - (___SMMUL(damp,band)<<1);
low = low + (___SMMUL(freq,band)<<1);
int32_t high  = notch - low;
band += (___SMMUL(freq,high)<<1);

int32_t out1;
if(param_mode>=0)
{
	out1=band+(___SMMUL(high-band,param_mode)<<5);
}
else
{
	out1=band+(___SMMUL(low-band,-param_mode)<<5);
}

outlet_pass = ___SMMUL(amp,out1)<<1;
outlet_reject=inlet_in-outlet_pass;//out2;
outlet_pass=inlet_pass+(___SMMUL(outlet_pass<<2,param_gain)<<1);]]></code.srate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="52a44fed-cfa6-40fd-82f3-5cb55ac44f70" name="filter high bass" x="1274" y="588">
      <params>
         <frac32.s.map name="pitch" value="-21.0"/>
         <frac32.u.map name="reso" value="20.0"/>
         <frac32.s.map name="mode" value="64.0"/>
         <frac32.u.map name="gain" value="24.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="52a44fed-cfa6-40fd-82f3-5cb55ac44f70">
         <sDescription>Low pass filter, state-variable type</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>filter.axh</helpPatch>
         <inlets>
            <frac32buffer name="in" description="filter input"/>
            <frac32buffer name="pass"/>
         </inlets>
         <outlets>
            <frac32buffer name="reject"/>
            <frac32buffer name="pass" description="filter output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.pitch name="pitch"/>
            <frac32.u.map.filterq name="reso"/>
            <frac32.s.map name="mode"/>
            <frac32.u.map.gain16 name="gain"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t low;
int32_t band;]]></code.declaration>
         <code.init><![CDATA[low = 0;
band = 0;]]></code.init>
         <code.krate><![CDATA[int32_t reso=param_reso-(param_reso>>5)+(1<<21);
int32_t damp = (0x80<<24) - (reso<<4);
int32_t amp=(1<<31)-1-(reso-(reso>>10)<<4);

int32_t alpha;
int32_t freq;
MTOFEXTENDED(param_pitch,alpha);
SINE2TINTERP(alpha,freq);]]></code.krate>
         <code.srate><![CDATA[int32_t in1 = inlet_in;
int32_t notch = in1 - (___SMMUL(damp,band)<<1);
low = low + (___SMMUL(freq,band)<<1);
int32_t high  = notch - low;
band += (___SMMUL(freq,high)<<1);

int32_t out1;
if(param_mode>=0)
{
	out1=band+(___SMMUL(high-band,param_mode)<<5);
}
else
{
	out1=band+(___SMMUL(low-band,-param_mode)<<5);
}

outlet_pass = ___SMMUL(amp,out1)<<1;
outlet_reject=inlet_in-outlet_pass;//out2;
outlet_pass=inlet_pass+(___SMMUL(outlet_pass<<2,param_gain)<<1);]]></code.srate>
      </object>
   </patchobj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_1" x="1386" y="588">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="52a44fed-cfa6-40fd-82f3-5cb55ac44f70" name="lp_11" x="1442" y="588">
      <params>
         <frac32.s.map name="from_cut" value="-9.0"/>
         <frac32.s.map name="to_cut" value="64.0"/>
         <frac32.u.map name="from_res" value="59.5"/>
         <frac32.u.map name="to_res" value="61.0"/>
         <frac32.s.map name="from_mode" value="44.0"/>
         <frac32.s.map name="to_mode" value="-44.0"/>
         <frac32.u.map name="from_gain" value="47.5"/>
         <frac32.u.map name="to_gain" value="24.5"/>
         <frac32.s.map name="from_pan" value="-64.0"/>
         <frac32.s.map name="to_pan" value="64.0"/>
         <int32 name="bands" value="4"/>
         <frac32.u.map name="variation" value="32.5"/>
         <frac32.s.map name="glide" value="-64.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="52a44fed-cfa6-40fd-82f3-5cb55ac44f70">
         <sDescription>Low pass filter, state-variable type</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>filter.axh</helpPatch>
         <inlets>
            <frac32buffer name="in" description="filter input"/>
            <frac32buffer name="pass_l"/>
            <frac32buffer name="pass_r"/>
            <int32 name="pst"/>
            <bool32 name="rnd"/>
            <frac32 name="glide"/>
            <frac32buffer name="envelopes"/>
            <frac32 name="pan"/>
         </inlets>
         <outlets>
            <frac32buffer name="reject"/>
            <frac32buffer name="pass_l" description="filter output"/>
            <frac32buffer name="pass_r"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.pitch name="from_cut"/>
            <frac32.s.map.pitch name="to_cut"/>
            <frac32.u.map.filterq name="from_res"/>
            <frac32.u.map.filterq name="to_res"/>
            <frac32.s.map name="from_mode"/>
            <frac32.s.map name="to_mode"/>
            <frac32.u.map name="from_gain"/>
            <frac32.u.map name="to_gain"/>
            <frac32.s.map name="from_pan"/>
            <frac32.s.map name="to_pan"/>
            <int32 name="bands">
               <MinValue i="1"/>
               <MaxValue i="8"/>
            </int32>
            <frac32.u.map name="variation"/>
            <frac32.s.map name="glide"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int rnd;
int32_t low[16];
int32_t band[16];
int32_t passl,passr,reject;
int32_t P[16][8];
int32_t R[16][8];
int32_t M[16][8];
int32_t G[16][8];
int32_t S[16][8];
int32_t freq[8];
int32_t damp[8];
int32_t amp[8];
int32_t pan[8];
int32_t mode[8];
int32_t gain[8];
int32_t prv[8];
int32_t RS[8];
int ppst,cnt;
int32_t filter(int32_t in,int32_t f,int32_t r,int32_t a,int32_t pl,int32_t pr,int32_t g,int32_t m,int index)
{
int32_t notch = in - (___SMMUL(r,band[index])<<1);
low[index] = low[index] + (___SMMUL(f,band[index])<<1);
int32_t high  = notch - low[index];
band[index] += (___SMMUL(f,high)<<1);
int32_t bnd=band[index];
int32_t lw=low[index];
int32_t out1,out2;
if(m>=0)
{
	out1=bnd+(___SMMUL(high-bnd,m)<<5);
}
else
{
	out1=bnd+(___SMMUL(lw-bnd,-m)<<5);
}

out1 = ___SMMUL(a,out1)<<1;
reject=in-out1;
passl+=(___SMMUL(out1<<1,___SMMUL(pl,g)<<5)<<1);
passr+=(___SMMUL(out1<<1,___SMMUL(pr,g)<<5)<<1);
}

int32_t SQRT(int32_t in)
{
	int32_t ai = in>0?in:-in;
float aif = ai;
aif *= (1<<27);
aif = _VSQRTF(aif);
return in= (int)aif;

}]]></code.declaration>
         <code.init><![CDATA[for(int i=0;i<16;i++)
{
	for(int j=0;j<8;j++)
	{
		P[i][j]=(GenerateRandomNumber()>>1);
		R[i][j]=(GenerateRandomNumber()>>1);
		M[i][j]=(GenerateRandomNumber()>>1);
		G[i][j]=(GenerateRandomNumber()>>1);
		S[i][j]=(GenerateRandomNumber()>>1);
	}
}

for(int i=0;i<16;i++)
	{
		int32_t max=0;
		int32_t tres=(1<<31)-1;
		int32_t tP[8];
		int pos=0;
		for(int j=0;j<8;j++)
		{
			max=0;
			for(int k=0;k<8;k++)
			{
				if((P[i][k]<tres)&&(P[i][k]>max))
				{
					max=P[i][k];
				}
			}
			tP[j]=max;
			tres=max;
		}
		for(int j=0;j<8;j++)
		{
			P[i][j]=tP[j];
		}
	}

cnt=0;]]></code.init>
         <code.krate><![CDATA[if(inlet_rnd&&!rnd)
{
	rnd=1;
	for(int i=0;i<16;i++)
{
	if(i>0)
	{
		for(int j=0;j<param_bands;j++)
	{
		P[i][j]=(GenerateRandomNumber()>>5)<param_variation?(GenerateRandomNumber()>>1):P[i-1][j];
		R[i][j]=(GenerateRandomNumber()>>5)<param_variation?(GenerateRandomNumber()>>1):R[i-1][j];
		M[i][j]=(GenerateRandomNumber()>>5)<param_variation?(GenerateRandomNumber()>>1):M[i-1][j];
		G[i][j]=(GenerateRandomNumber()>>5)<param_variation?(GenerateRandomNumber()>>1):G[i-1][j];
		S[i][j]=(GenerateRandomNumber()>>5)<param_variation?(GenerateRandomNumber()>>1):G[i-1][j];
	}
	}
	else
	{
	for(int j=0;j<param_bands;j++)
	{
		P[i][j]=(GenerateRandomNumber()>>1);
		R[i][j]=(GenerateRandomNumber()>>1);
		M[i][j]=(GenerateRandomNumber()>>1);
		G[i][j]=(GenerateRandomNumber()>>1);
		S[i][j]=(GenerateRandomNumber()>>1);
	}
	}
	
	for(int i=0;i<16;i++)
	{
		int32_t max=0;
		int32_t tres=(1<<31)-1;
		int32_t tP[8];
		int pos=0;
		for(int j=0;j<param_bands;j++)
		{
			max=0;
			for(int k=0;k<param_bands;k++)
			{
				if((P[i][k]<tres)&&(P[i][k]>max))
				{
					max=P[i][k];
				}
			}
			tP[j]=max;
			tres=max;
		}
		for(int j=0;j<param_bands;j++)
		{
			P[i][j]=tP[j];
		}
	}
}
}
else if(!inlet_rnd){rnd=0;}
int pst=inlet_pst&15;
int32_t alpha;

int32_t glide;
MTOF(-param_glide-inlet_glide,glide)
//glide=glide;
//if(cnt==0)
//{
int32_t env[8],pal[8],par[8];
int32_t stp[8];
for(int i=0;i<param_bands;i++)
{
	int32_t ptch=param_from__cut+___SMMUL(param_to__cut-param_from__cut<<1,P[pst][i]);
	MTOFEXTENDED(ptch,alpha);
	SINE2TINTERP(alpha,alpha);
	freq[i]+=___SMMUL(alpha-freq[i],glide);
	int32_t rs=param_from__res+___SMMUL(param_to__res-param_from__res<<1,R[pst][i]);
	RS[i]+=___SMMUL(rs-(rs>>5)+(1<<21)-RS[i]<<1,glide);
	damp[i] = (0x80<<24) - (RS[i]<<4);
	amp[i]=(1<<31)-1-(RS[i]-(RS[i]>>10)<<4);
	mode[i]+=___SMMUL(param_from__mode+___SMMUL(param_to__mode-param_from__mode<<1,M[pst][i])-mode[i],glide);
	pan[i]+=___SMMUL(param_from__pan+___SMMUL(param_to__pan-param_from__pan<<1,S[pst][i])-pan[i],glide);
	int32_t sn;
	SINE2TINTERP((pan[i]+inlet_pan<<4),sn)
	sn=sn>>4;
	pal[i]=SQRT((1<<27)+sn>>1);
	par[i]=SQRT((1<<27)-sn>>1);
	gain[i]+=___SMMUL((param_from__gain+___SMMUL(param_to__gain-param_from__gain<<1,G[pst][i])<<4)-gain[i],glide);
	int32_t tmp=___SMMUL(gain[i],inlet_envelopes[i])<<5;
	stp[i]=tmp-prv[i]>>4;
	env[i]=prv[i];
	prv[i]=tmp;
}
//}
//cnt=(cnt+1)&3;
ppst=pst;]]></code.krate>
         <code.srate><![CDATA[passl=0;//inlet_pass;
passr=0;
reject=inlet_in;

for(int i=0;i<param_bands;i++)
{
	filter(reject,freq[i],damp[i],amp[i],pal[i],par[i],env[i],mode[i],i);
	env[i]+=stp[i];
}

outlet_reject=reject;
outlet_pass__l=passl+inlet_pass__l;
outlet_pass__r=passr+inlet_pass__r;]]></code.srate>
      </object>
   </patchobj>
   <obj type="osc/square" uuid="aa9592566d3673fe64dcaede132e9ebd45d2202f" name="square_2" x="602" y="700">
      <params>
         <frac32.s.map name="pitch" value="-7.0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1582" y="742" text="set random cutoff range"/>
   <comment type="patch/comment" x="1582" y="756" text="at randomisation, pitches will be ordered so that each band stays between the two conjoining bands when moving"/>
   <comment type="patch/comment" x="1582" y="826" text="set random resonance range"/>
   <patchobj type="patch/object" uuid="383bae43-4795-425b-aa52-d6231fa02ca6" name="saw_2" x="1274" y="840">
      <params>
         <frac32.s.map name="pitch" value="-6.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="383bae43-4795-425b-aa52-d6231fa02ca6">
         <sDescription>saw wave LFO, rising slope, pitch input</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>lfo.axh</helpPatch>
         <inlets>
            <frac32.bipolar name="pitch" description="pitch"/>
            <bool32.rising name="reset" description="reset phase"/>
         </inlets>
         <outlets>
            <frac32.positive name="wave" description="saw wave"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.lfopitch name="pitch" noLabel="true"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[uint32_t Phase;
uint32_t r;
]]></code.declaration>
         <code.init><![CDATA[Phase = 0;
   r = 1;
]]></code.init>
         <code.krate><![CDATA[{
      if (inlet_reset && r) {
         Phase = 0;
         r = 0;
      } else {
         if (!inlet_reset) r = 1;
         int32_t freq;
         MTOFEXTENDED(param_pitch + inlet_pitch,freq);
         Phase += freq>>2;
      }
      outlet_wave= (Phase>>4);
   }]]></code.krate>
      </object>
   </patchobj>
   <obj type="sel/sel b 16 pulse" uuid="b52a026dd735305ac8ddf499e366883006aa2acf" name="kick sequencer" x="238" y="882">
      <params>
         <bin16 name="b16" value="4369"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1582" y="896" text="set random mode range (lp&lt;-bp-&gt;hp)"/>
   <obj type="env/ad" uuid="255cb0cd67470c7498f9c33b820facd26aa629ce" name="ad_4" x="56" y="938">
      <params>
         <frac32.s.map name="a" value="-64.0"/>
         <frac32.s.map name="d" value="-3.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="ffeaef17-af56-4b74-b4bb-8baa1b781e46" name="sqrt_1" x="1176" y="966">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="ffeaef17-af56-4b74-b4bb-8baa1b781e46">
         <sDescription>square root (of absolute value), y = 8*sqrt(x)</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>sqrt.axh</helpPatch>
         <inlets>
            <frac32 name="in" description="in"/>
         </inlets>
         <outlets>
            <frac32 name="out" description="out"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[int32_t ai = inlet_in>0?inlet_in:-inlet_in;
float aif = ai;
aif *= (1<<27);
aif = _VSQRTF(aif);
outlet_out= (int)aif;
]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="1582" y="966" text="set random gain range (32=unison)"/>
   <comment type="patch/comment" x="154" y="980" text="pitch envelope"/>
   <comment type="patch/comment" x="210" y="1036" text="volume/resonance envelope"/>
   <patchobj type="patch/object" uuid="383bae43-4795-425b-aa52-d6231fa02ca6" name="saw_1" x="1176" y="1036">
      <params>
         <frac32.s.map name="pitch" value="-30.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="383bae43-4795-425b-aa52-d6231fa02ca6">
         <sDescription>saw wave LFO, rising slope, pitch input</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>lfo.axh</helpPatch>
         <inlets>
            <frac32.bipolar name="pitch" description="pitch"/>
            <bool32.rising name="reset" description="reset phase"/>
         </inlets>
         <outlets>
            <frac32.positive name="wave" description="saw wave"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.lfopitch name="pitch" noLabel="true"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[uint32_t Phase;
uint32_t r;
]]></code.declaration>
         <code.init><![CDATA[Phase = 0;
   r = 1;
]]></code.init>
         <code.krate><![CDATA[{
      if (inlet_reset && r) {
         Phase = 0;
         r = 0;
      } else {
         if (!inlet_reset) r = 1;
         int32_t freq;
         MTOFEXTENDED(param_pitch + inlet_pitch,freq);
         Phase += freq>>2;
      }
      outlet_wave= (Phase>>4);
   }]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="1582" y="1036" text="set random panning range 0=mid"/>
   <obj type="env/ad" uuid="255cb0cd67470c7498f9c33b820facd26aa629ce" name="ad_5" x="196" y="1050">
      <params>
         <frac32.s.map name="a" value="-64.0"/>
         <frac32.s.map name="d" value="-16.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="db5a3113-4d5f-4ce3-aaed-4ec62db75b21" name="*c_4" x="294" y="1050">
      <params>
         <frac32.s.map name="amp" value="41.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="db5a3113-4d5f-4ce3-aaed-4ec62db75b21">
         <sDescription>Multiply (attenuate) with a constant value</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>math.axh</helpPatch>
         <inlets>
            <frac32 name="in" description="input"/>
         </inlets>
         <outlets>
            <frac32 name="out" description="output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map name="amp"/>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out= ___SMMUL(param_amp<<4,inlet_in)<<1;]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="798" y="1064" text="sequencing band-envelopes"/>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="hit pitch" x="70" y="1078">
      <params>
         <frac32.s.map name="value" value="33.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/*c" uuid="7a66f52a9594e7e9eb31328ea725cb3641a80b55" name="*c_6" x="364" y="1078">
      <params>
         <frac32.u.map name="amp" value="15.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="825eec33-9de3-4574-84c5-d253fc661938" name="rnd patt_5" x="714" y="1078">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="825eec33-9de3-4574-84c5-d253fc661938">
         <sDescription>constant boolean, momentary control</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets>
            <bool32 name="i1"/>
         </inlets>
         <outlets>
            <bool32 name="o" description="output"/>
         </outlets>
         <displays/>
         <params>
            <bool32.mom name="b" noLabel="true"/>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_o=param_b||inlet_i1;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="825eec33-9de3-4574-84c5-d253fc661938" name="rnd patt_7" x="812" y="1078">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="825eec33-9de3-4574-84c5-d253fc661938">
         <sDescription>constant boolean, momentary control</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets>
            <bool32 name="i1"/>
         </inlets>
         <outlets>
            <bool32 name="o" description="output"/>
         </outlets>
         <displays/>
         <params>
            <bool32.mom name="b" noLabel="true"/>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_o=param_b||inlet_i1;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="825eec33-9de3-4574-84c5-d253fc661938" name="rnd patt_8" x="896" y="1078">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="825eec33-9de3-4574-84c5-d253fc661938">
         <sDescription>constant boolean, momentary control</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets>
            <bool32 name="i1"/>
         </inlets>
         <outlets>
            <bool32 name="o" description="output"/>
         </outlets>
         <displays/>
         <params>
            <bool32.mom name="b" noLabel="true"/>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_o=param_b||inlet_i1;]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="1582" y="1085" text="set amount of bands to be used (when changing, remember to hit rnd, to update the cutoffs to the right range when scaling)"/>
   <obj type="rand/uniform f trig" uuid="223873125a332e3b8a82795a3eef167993adb086" name="uniform_1" x="1274" y="1106">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1582" y="1106" text="change-chance upon each next step in the sequence, the lower, the less filters change their settings per step"/>
   <comment type="patch/comment" x="462" y="1148" text="using LP filter for kick generation"/>
   <patchobj type="patch/object" uuid="825eec33-9de3-4574-84c5-d253fc661938" name="rnd patt_9" x="1092" y="1148">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="825eec33-9de3-4574-84c5-d253fc661938">
         <sDescription>constant boolean, momentary control</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets>
            <bool32 name="i1"/>
         </inlets>
         <outlets>
            <bool32 name="o" description="output"/>
         </outlets>
         <displays/>
         <params>
            <bool32.mom name="b" noLabel="true"/>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_o=param_b||inlet_i1;]]></code.krate>
      </object>
   </patchobj>
   <obj type="rand/uniform f trig" uuid="223873125a332e3b8a82795a3eef167993adb086" name="uniform_2" x="1274" y="1148">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1582" y="1148" text="glide time, -64=instant, +64 takes forever.."/>
   <obj type="mix/xfade" uuid="bb87360199938d53d1183cdc80947ed0a39e3c9a" name="xfade_2" x="238" y="1162">
      <params/>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_2" x="308" y="1162">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="2b0224c3-0a81-4d1d-8c23-789e8891cbdb" name="lp1_2" x="364" y="1162">
      <params>
         <frac32.u.map name="IN_pre" value="54.0"/>
         <frac32.u.map name="IN_tres" value="37.0"/>
         <frac32.u.map name="IN_headroom" value="28.5"/>
         <frac32.s.map name="FILTER_cutoff" value="-27.0"/>
         <frac32.u.map name="FILTER_res" value="37.5"/>
         <frac32.u.map name="FILTER_tres" value="54.0"/>
         <frac32.u.map name="FILTER_headroom" value="4.0"/>
         <frac32.u.map name="FILTER_fuel" value="35.0"/>
         <int32.hradio name="mode" value="0"/>
         <bool32.tgl name="OS" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="2b0224c3-0a81-4d1d-8c23-789e8891cbdb">
         <sDescription>1st order lowpass filter</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>filter.axh</helpPatch>
         <inlets>
            <frac32buffer name="in" description="input"/>
            <frac32.bipolar name="cutoff"/>
            <frac32.positive name="res"/>
            <frac32buffer name="fm"/>
         </inlets>
         <outlets>
            <frac32buffer name="out" description="output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="IN_pre">
               <DefaultValue v="0.0"/>
            </frac32.u.map>
            <frac32.u.map name="IN_tres">
               <DefaultValue v="32.0"/>
            </frac32.u.map>
            <frac32.u.map name="IN_headroom">
               <DefaultValue v="32.0"/>
            </frac32.u.map>
            <frac32.s.map name="FILTER_cutoff"/>
            <frac32.u.map name="FILTER_res"/>
            <frac32.u.map name="FILTER_tres">
               <DefaultValue v="32.0"/>
            </frac32.u.map>
            <frac32.u.map name="FILTER_headroom">
               <DefaultValue v="32.0"/>
            </frac32.u.map>
            <frac32.u.map name="FILTER_fuel">
               <DefaultValue v="0.0"/>
            </frac32.u.map>
            <int32.hradio name="mode">
               <MaxValue i="3"/>
            </int32.hradio>
            <bool32.tgl name="OS"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t val[5];
int32_t dc;


int32_t SAT(int32_t in,int32_t trs,int32_t mx)
{
	int32_t norm=in;norm=norm>trs?trs:(norm<-trs?-trs:norm);
	int32_t left=in-norm;
	float32_t ratio=(float32_t)mx/(mx+(left>0?left:-left));
	return left=left*ratio+norm;
}]]></code.declaration>
         <code.init><![CDATA[val[1]=0;]]></code.init>
         <code.krate><![CDATA[int32_t F;
   MTOF(param_FILTER__cutoff+(1<<24)+inlet_cutoff,F);
   int32_t res=__USAT(param_FILTER__res+inlet_res,27)<<4;
   res=res-(___SMMUL(F,res));
   res=__USAT((uint32_t)(1<<31)-(1<<25)-res,31);
   res=___SMMUL(res,res)<<1;
   res=___SMMUL(res,res)<<1;
int32_t boost=(1<<30)+(F>>1);
int32_t max=___SMMUL(param_FILTER__headroom<<4,(1<<28)-param_FILTER__tres<<1)+1;
int32_t mIN=___SMMUL(param_IN__headroom<<4,(1<<28)-param_IN__tres<<1)+1;
int32_t pre=param_IN__pre<<4;
int OS=param_OS+1;]]></code.krate>
         <code.srate><![CDATA[//audio input pre-amplification for freq/res/pre-gain and limiting outcome

int64_t f=(int64_t)F+(___SMMUL(F,inlet_fm)<<7);
f=f>((1<<31)-1)?(1<<31)-1:(f<-((1<<31)-1)?-((1<<31)-1):f);

int32_t in=inlet_in+___SMMUL(inlet_in<<1,pre);
in=SAT(in,param_IN__tres,mIN);
int32_t lin=___SMMUL(in,f)<<1;
int32_t tin=___SMMUL(res,lin)<<1;
tin+=___SMMUL(lin-tin,boost)<<1;

for(int i=0;i<OS;i++)
{
//filter cosine (lp) calculation and limiting outcome
val[1]+=(___SMMUL(-val[0],f)<<1)-(___SMMUL(val[1],res)<<1);
val[1]+=___SMMUL(val[1],param_FILTER__fuel)>>2;
val[1]=SAT(val[1],param_FILTER__tres,max);

//filter sine (bp) calculation and limiting outcome
val[0]+=(___SMMUL(val[1],f)<<1)-(___SMMUL(val[0],res)<<1)+tin;
val[0]+=___SMMUL(val[0],param_FILTER__fuel)>>2;
val[0]=SAT(val[0],param_FILTER__tres,max);
}
int32_t filter[8];
filter[0]=-val[1];
filter[1]=val[0];
filter[2]=___SMMUL(in,f)+(in>>1)+val[1];
outlet_out=filter[param_mode];]]></code.srate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="eedfe6fa-0afa-492c-a133-e6fbbcccd9f5" name="soft booster_" x="504" y="1162">
      <params>
         <frac32.u.map name="amp" value="12.5"/>
         <frac32.u.map name="tres" value="17.0"/>
         <frac32.u.map name="max" value="41.5"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="eedfe6fa-0afa-492c-a133-e6fbbcccd9f5">
         <sDescription>Multiply (attenuate) with a constant value</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>math.axh</helpPatch>
         <inlets>
            <frac32buffer name="in" description="input"/>
         </inlets>
         <outlets>
            <frac32buffer name="out" description="output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map.gain name="amp" noLabel="true"/>
            <frac32.u.map name="tres"/>
            <frac32.u.map name="max"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t SAT(int32_t in,int32_t trs,int32_t mx)
{
	int32_t norm=in;
	norm=norm>trs?trs:(norm<-trs?-trs:norm);
	int32_t left=in-norm;
	float32_t ratio=(float32_t)mx/(mx+(left>0?left:-left));
	return left=left*ratio+norm;
}]]></code.declaration>
         <code.krate><![CDATA[int32_t max=___SMMUL(param_max<<4,(1<<27)-param_tres<<1)+1;]]></code.krate>
         <code.srate><![CDATA[int32_t in=inlet_in;
for(int i=0;i<2;i++)
{
	in+=(__SSAT(___SMMUL(in,param_amp),27)<<4);
	in=SAT(in,param_tres,max);
}
outlet_out=in;]]></code.srate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="b4422a2a-0489-46b7-8824-861864b26824" name="gate pattern_" x="714" y="1162">
      <params>
         <bin16 name="p1" value="33092"/>
         <bin16 name="p2" value="43138"/>
         <bin16 name="p3" value="11834"/>
         <bin16 name="p4" value="5464"/>
         <bin16 name="p5" value="48788"/>
         <bin16 name="p6" value="7485"/>
         <bin16 name="p7" value="16247"/>
         <bin16 name="p8" value="45587"/>
      </params>
      <attribs>
         <objref attributeName="seq" obj="ad_1"/>
      </attribs>
      <object id="patch/object" uuid="b4422a2a-0489-46b7-8824-861864b26824">
         <sDescription>constant from 16 flags</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets>
            <int32 name="count"/>
            <bool32 name="rnd"/>
         </inlets>
         <outlets>
            <frac32buffer name="gates"/>
         </outlets>
         <displays/>
         <params>
            <bin16 name="p1"/>
            <bin16 name="p2"/>
            <bin16 name="p3"/>
            <bin16 name="p4"/>
            <bin16 name="p5"/>
            <bin16 name="p6"/>
            <bin16 name="p7"/>
            <bin16 name="p8"/>
         </params>
         <attribs>
            <objref name="seq"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int rnd;]]></code.declaration>
         <code.krate><![CDATA[if(inlet_rnd&&!rnd)
{
	rnd=1;
	int32_t tmp=(GenerateRandomNumber()&((1<<16)-1));
	for(int i=0;i<8;i++)
	{
		tmp=(tmp+(GenerateRandomNumber()&((1<<16)-1))+487946947)&((1<<16)-1);
		PExParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_p1+i],tmp,0xFFFD);
	}
}
else if(!inlet_rnd){rnd=0;}
int cnt=inlet_count&15;
uint16_t S[8]={param_p1,param_p2,param_p3,param_p4,param_p5,param_p6,param_p7,param_p8};
for(int i=0;i<8;i++)
{
	outlet_gates[i]=(S[i]>>cnt)&1;
}]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="7c2ac2e9-acda-4c32-8d01-4c217232605e" name="ad_3" x="924" y="1162">
      <params>
         <frac32.s.map name="from_a" value="-64.0"/>
         <frac32.s.map name="to_a" value="41.0"/>
         <frac32.s.map name="from_d" value="-27.0"/>
         <frac32.s.map name="to_d" value="21.0"/>
         <bool32.tgl name="retrig" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="7c2ac2e9-acda-4c32-8d01-4c217232605e">
         <sDescription>Attack/decay envelope, linear attack, exponential decay</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>env.axh</helpPatch>
         <inlets>
            <frac32buffer name="gates"/>
            <bool32 name="rnd"/>
         </inlets>
         <outlets>
            <frac32buffer name="env"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.klineartime.exp name="from_a"/>
            <frac32.s.map.kdecaytime.exp name="to_a"/>
            <frac32.s.map.klineartime.exp name="from_d"/>
            <frac32.s.map.klineartime.exp name="to_d"/>
            <bool32.tgl name="retrig"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int8_t stage[8];
int ntrig[8],rnd;
int32_t val[8];
int32_t a[8],d[8];]]></code.declaration>
         <code.init><![CDATA[for(int i=0;i<8;i++)
{
a[i]=(GenerateRandomNumber()>>1);
a[i]=___SMMUL(a[i],a[i])<<1;
d[i]=(GenerateRandomNumber()>>1);
d[i]=___SMMUL(d[i],d[i])<<1;
ntrig[i] = 0;
val[i] = 0;
stage[i]=0;
}]]></code.init>
         <code.krate><![CDATA[if(inlet_rnd&&!rnd)
{
	rnd=1;
	for(int i=0;i<8;i++)
{

a[i]=(GenerateRandomNumber()>>1);
a[i]=___SMMUL(a[i],a[i])<<1;
d[i]=(GenerateRandomNumber()>>1);
d[i]=___SMMUL(d[i],d[i])<<1;
}

}
else if(!inlet_rnd){rnd=0;}



for(int i=0;i<8;i++)
{
int gate=inlet_gates[i];
if (gate&&((val[i]==0)||param_retrig) && !ntrig[i]) {
   ntrig[i] = 1;
   stage[i] = 1;
} else if (!gate) {
   ntrig[i] = 0;
}
if (stage[i] == 0){
	int32_t t;
	MTOF(-(param_from__d+___SMMUL(d[i],param_to__d-param_from__d<<1)),t)
	//t=___SMMUL(t,t)<<1;
   val[i] = __USAT(val[i]-(t>>3),31);
} else {
int32_t t;
	MTOF(-(param_from__a+___SMMUL(a[i],param_to__a-param_from__a<<1)),t)
	//t=___SMMUL(t,t)<<1;
   val[i] = val[i] + (t>>4);
   if (val[i]<0) {
      val[i] =0x7FFFFFFF;
      stage[i] = 0;
   }
}
outlet_env[i] = val[i]>>4;
}]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="1260" y="1218" text="melody filter"/>
   <comment type="patch/comment" x="1386" y="1218" text="melody delay"/>
   <obj type="sss/patt/basePatt" uuid="ecfda10d-6ec1-4a2f-9df8-8ee81763ce5b" name="basePatt_1 glidetime_" x="1092" y="1232">
      <params>
         <frac32.u.map name="length" value="64.0"/>
         <frac32.u.map name="base" value="33.0"/>
         <frac32.u.map name="diffchance" value="37.0"/>
         <frac32.u.map name="differents" value="64.0"/>
         <frac32.u.map name="diffsize" value="64.0"/>
         <bool32.tgl name="nonseed" value="1"/>
      </params>
      <attribs>
         <spinner attributeName="max" value="128"/>
      </attribs>
   </obj>
   <patchobj type="patch/object" uuid="52a44fed-cfa6-40fd-82f3-5cb55ac44f70" name="lp_10" x="1232" y="1232">
      <params>
         <frac32.s.map name="from_cut" value="16.0"/>
         <frac32.s.map name="to_cut" value="64.0"/>
         <frac32.u.map name="from_res" value="46.15499973297119"/>
         <frac32.u.map name="to_res" value="62.42999982833862"/>
         <frac32.s.map name="from_mode" value="27.0"/>
         <frac32.s.map name="to_mode" value="-26.0"/>
         <frac32.u.map name="from_gain" value="64.0"/>
         <frac32.u.map name="to_gain" value="30.5"/>
         <frac32.s.map name="from_pan" value="-64.0"/>
         <frac32.s.map name="to_pan" value="64.0"/>
         <int32 name="bands" value="3"/>
         <frac32.u.map name="variation" value="31.0"/>
         <frac32.s.map name="glide" value="-64.0"/>
         <int32 name="first" value="7"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="52a44fed-cfa6-40fd-82f3-5cb55ac44f70">
         <sDescription>Low pass filter, state-variable type</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>filter.axh</helpPatch>
         <inlets>
            <frac32buffer name="in" description="filter input"/>
            <frac32buffer name="pass_l"/>
            <frac32buffer name="pass_r"/>
            <int32 name="pst"/>
            <bool32 name="rnd"/>
            <frac32 name="glide"/>
            <frac32buffer name="envelopes"/>
            <frac32.bipolar name="pan"/>
         </inlets>
         <outlets>
            <frac32buffer name="reject"/>
            <frac32buffer name="pass_l" description="filter output"/>
            <frac32buffer name="pass_r"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.pitch name="from_cut"/>
            <frac32.s.map.pitch name="to_cut"/>
            <frac32.u.map.filterq name="from_res"/>
            <frac32.u.map.filterq name="to_res"/>
            <frac32.s.map name="from_mode"/>
            <frac32.s.map name="to_mode"/>
            <frac32.u.map name="from_gain"/>
            <frac32.u.map name="to_gain"/>
            <frac32.s.map name="from_pan"/>
            <frac32.s.map name="to_pan"/>
            <int32 name="bands">
               <MinValue i="1"/>
               <MaxValue i="8"/>
            </int32>
            <frac32.u.map name="variation"/>
            <frac32.s.map name="glide"/>
            <int32 name="first">
               <MinValue i="0"/>
               <MaxValue i="7"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int rnd;
int32_t low[16];
int32_t band[16];
int32_t passl,passr,reject;
int32_t P[16][8];
int32_t R[16][8];
int32_t M[16][8];
int32_t G[16][8];
int32_t S[16][8];
int32_t freq[8];
int32_t damp[8];
int32_t amp[8];
int32_t pan[8];
int32_t mode[8];
int32_t gain[8];
int32_t prv[8];
int32_t RS[8];
int ppst,cnt;
int32_t filter(int32_t in,int32_t f,int32_t r,int32_t a,int32_t pl,int32_t pr,int32_t g,int32_t m,int index)
{
int32_t notch = in - (___SMMUL(r,band[index])<<1);
low[index] = low[index] + (___SMMUL(f,band[index])<<1);
int32_t high  = notch - low[index];
band[index] += (___SMMUL(f,high)<<1);
int32_t bnd=band[index];
int32_t lw=low[index];
int32_t out1,out2;
if(m>=0)
{
	out1=bnd+(___SMMUL(high-bnd,m)<<5);
}
else
{
	out1=bnd+(___SMMUL(lw-bnd,-m)<<5);
}

out1 = ___SMMUL(a,out1)<<1;
reject=in-out1;
passl+=(___SMMUL(out1<<1,___SMMUL(pl,g)<<5)<<1);
passr+=(___SMMUL(out1<<1,___SMMUL(pr,g)<<5)<<1);
}

int32_t SQRT(int32_t in)
{
	int32_t ai = in>0?in:-in;
float aif = ai;
aif *= (1<<27);
aif = _VSQRTF(aif);
return in= (int)aif;

}]]></code.declaration>
         <code.init><![CDATA[for(int i=0;i<16;i++)
{
	for(int j=0;j<8;j++)
	{
		P[i][j]=(GenerateRandomNumber()>>1);
		R[i][j]=(GenerateRandomNumber()>>1);
		M[i][j]=(GenerateRandomNumber()>>1);
		G[i][j]=(GenerateRandomNumber()>>1);
		S[i][j]=(GenerateRandomNumber()>>1);
	}
}

for(int i=0;i<16;i++)
	{
		int32_t max=0;
		int32_t tres=(1<<31)-1;
		int32_t tP[8];
		int pos=0;
		for(int j=0;j<8;j++)
		{
			max=0;
			for(int k=0;k<8;k++)
			{
				if((P[i][k]<tres)&&(P[i][k]>max))
				{
					max=P[i][k];
				}
			}
			tP[j]=max;
			tres=max;
		}
		for(int j=0;j<8;j++)
		{
			P[i][j]=tP[j];
		}
	}

cnt=0;]]></code.init>
         <code.krate><![CDATA[if(inlet_rnd&&!rnd)
{
	rnd=1;
	for(int i=0;i<16;i++)
{
	if(i>0)
	{
		for(int j=0;j<param_bands;j++)
	{
		P[i][j]=(GenerateRandomNumber()>>5)<param_variation?(GenerateRandomNumber()>>1):P[i-1][j];
		R[i][j]=(GenerateRandomNumber()>>5)<param_variation?(GenerateRandomNumber()>>1):R[i-1][j];
		M[i][j]=(GenerateRandomNumber()>>5)<param_variation?(GenerateRandomNumber()>>1):M[i-1][j];
		G[i][j]=(GenerateRandomNumber()>>5)<param_variation?(GenerateRandomNumber()>>1):G[i-1][j];
		S[i][j]=(GenerateRandomNumber()>>5)<param_variation?(GenerateRandomNumber()>>1):G[i-1][j];
	}
	}
	else
	{
	for(int j=0;j<param_bands;j++)
	{
		P[i][j]=(GenerateRandomNumber()>>1);
		R[i][j]=(GenerateRandomNumber()>>1);
		M[i][j]=(GenerateRandomNumber()>>1);
		G[i][j]=(GenerateRandomNumber()>>1);
		S[i][j]=(GenerateRandomNumber()>>1);
	}
	}
	
	for(int i=0;i<16;i++)
	{
		int32_t max=0;
		int32_t tres=(1<<31)-1;
		int32_t tP[8];
		int pos=0;
		for(int j=0;j<param_bands;j++)
		{
			max=0;
			for(int k=0;k<param_bands;k++)
			{
				if((P[i][k]<tres)&&(P[i][k]>max))
				{
					max=P[i][k];
				}
			}
			tP[j]=max;
			tres=max;
		}
		for(int j=0;j<param_bands;j++)
		{
			P[i][j]=tP[j];
		}
	}
}
}
else if(!inlet_rnd){rnd=0;}
int pst=inlet_pst&15;
int32_t alpha;

int32_t glide;
MTOF(-param_glide-inlet_glide,glide)
//glide=glide;
//if(cnt==0)
//{
int32_t env[8],pal[8],par[8];
int32_t stp[8];
for(int i=0;i<param_bands;i++)
{
	int k=(i+param_first)%param_bands;
	int32_t ptch=param_from__cut+___SMMUL(param_to__cut-param_from__cut<<1,P[pst][k]);
	MTOFEXTENDED(ptch,alpha);
	SINE2TINTERP(alpha,alpha);
	freq[i]+=___SMMUL(alpha-freq[i],glide);
	int32_t rs=param_from__res+___SMMUL(param_to__res-param_from__res<<1,R[pst][k]);
	RS[i]+=___SMMUL(rs-(rs>>5)+(1<<21)-RS[i]<<1,glide);
	damp[i] = (0x80<<24) - (RS[i]<<4);
	amp[i]=(1<<31)-1-(RS[i]-(RS[i]>>10)<<4);
	mode[i]+=___SMMUL(param_from__mode+___SMMUL(param_to__mode-param_from__mode<<1,M[pst][k])-mode[i],glide);
	pan[i]+=___SMMUL(param_from__pan+___SMMUL(param_to__pan-param_from__pan<<1,S[pst][k])-pan[i],glide);
	int32_t sn;
	SINE2TINTERP((pan[i]+inlet_pan<<4),sn)
	sn=sn>>4;
	pal[i]=SQRT((1<<27)+sn>>1);
	par[i]=SQRT((1<<27)-sn>>1);
	gain[i]+=___SMMUL((param_from__gain+___SMMUL(param_to__gain-param_from__gain<<1,G[pst][k])<<4)-gain[i],glide);
	int32_t tmp=___SMMUL(gain[i],inlet_envelopes[k])<<5;
	stp[i]=tmp-prv[i]>>4;
	env[i]=prv[i];
	prv[i]=tmp;
}
//}
//cnt=(cnt+1)&3;
ppst=pst;]]></code.krate>
         <code.srate><![CDATA[passl=0;//inlet_pass;
passr=0;
reject=inlet_in;

for(int i=0;i<param_bands;i++)
{
	filter(reject,freq[i],damp[i],amp[i],pal[i],par[i],env[i],mode[i],i);
	env[i]+=stp[i];
}

outlet_reject=reject;
outlet_pass__l=passl+inlet_pass__l;
outlet_pass__r=passr+inlet_pass__r;]]></code.srate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="d8f5f7ad-b1e1-41bd-a61a-2db181c90577" name="delay" x="1372" y="1232">
      <params>
         <bool32.tgl name="mode" value="3"/>
         <frac32.u.map name="time" value="0.0"/>
         <frac32.s.map name="spread" value="0.0"/>
         <frac32.s.map name="ratio" value="0.0"/>
         <frac32.u.map name="feed" value="49.0"/>
         <frac32.s.map name="tilt" value="35.0"/>
         <frac32.s.map name="center" value="-7.0"/>
      </params>
      <attribs>
         <combo attributeName="size" selection="131072 (2.73s)"/>
      </attribs>
      <object id="patch/object" uuid="d8f5f7ad-b1e1-41bd-a61a-2db181c90577">
         <sDescription>delayline definition, read it with &quot;delay/read&quot; objects referencing the instance name of this object</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>delay.axh</helpPatch>
         <inlets>
            <frac32buffer name="l" description="wave input"/>
            <frac32buffer name="r"/>
            <frac32 name="time"/>
            <frac32 name="spread"/>
            <frac32 name="ratio"/>
         </inlets>
         <outlets>
            <frac32buffer name="l"/>
            <frac32buffer name="r"/>
         </outlets>
         <displays/>
         <params>
            <bool32.tgl name="mode" description="log time (higher=slower/longer),log pitch (higher=faster/shorter)"/>
            <frac32.u.map name="time"/>
            <frac32.s.map name="spread"/>
            <frac32.s.map name="ratio"/>
            <frac32.u.map name="feed"/>
            <frac32.s.map name="tilt"/>
            <frac32.s.map.pitch name="center"/>
         </params>
         <attribs>
            <combo name="size">
               <MenuEntries>
                  <string>256 (5.33ms)</string>
                  <string>512 (10.66ms)</string>
                  <string>1024 (21.33ms)</string>
                  <string>2048 (42.66ms)</string>
                  <string>4096 (85.33ms)</string>
                  <string>8192 (170ms)</string>
                  <string>16384 (341ms)</string>
                  <string>32768 (682ms)</string>
                  <string>65536 (1.36s)</string>
                  <string>131072 (2.73s)</string>
                  <string>262144 (5.46s)</string>
                  <string>524288 (10.9s)</string>
                  <string>1048576 (21.8s)</string>
                  <string>2097152 (43.7s)</string>
               </MenuEntries>
               <CEntries>
                  <string>8</string>
                  <string>9</string>
                  <string>10</string>
                  <string>11</string>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
                  <string>16</string>
                  <string>17</string>
                  <string>18</string>
                  <string>19</string>
                  <string>20</string>
                  <string>21</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
int16_t *array;
uint32_t writepos;
int32_t fl,fr;
int32_t ll,lr;]]></code.declaration>
         <code.init><![CDATA[static int16_t _array[attr_poly][2<<attr_size]  __attribute__ ((section (".sdram")));
array = &_array[parent->polyIndex][0];
   int i;
   writepos = 0;
   for(i=0;i<(LENGTH<<1);i++) array[i] = 0;]]></code.init>
         <code.krate><![CDATA[int32_t spread=__SSAT(param_spread+inlet_spread,28)<<4;
int32_t tml=param_time+inlet_time;
int32_t tmr;
int32_t mixl,mixr,Tmr,Tml;

int MUL[4]={1,4,3,5};
int DIV[4]={1,3,2,3};
int R=((param_ratio>0?param_ratio:-param_ratio)>>23)*(param_ratio>=0?1:-1);
int Mul=MUL[R&3];
int Div=DIV[R&3];
R=R>>2;

if(R>=0)
{
	Mul=Mul<<R;
}
else
{
	Div=Div<<-R;
}

if(!param_mode)
{
	MTOF(-tml,tml)
}
else
{
	MTOF(tml-(60<<21),tml)
}

tml=(uint64_t)((uint64_t)1<<46)/tml;
tml=(uint64_t)tml*Div/Mul;					
tmr=tml-___SMMUL(tml<<1,spread);
tml=tml+___SMMUL(tml<<1,spread);
Tmr=__USAT(tmr,27);
Tml=__USAT(tml,27);
tml=__USAT((tmr-Tmr)+tml,27);
tmr=__USAT((tml-Tml)+tmr,27);
mixl=((uint32_t)tml<<5+LENGTHPOW)>>1;
mixr=((uint32_t)tmr<<5+LENGTHPOW)>>1;
tml=tml>>27-LENGTHPOW;
tmr=tmr>>27-LENGTHPOW;
tml=__USAT(tml-BUFSIZE,27)+BUFSIZE;
tmr=__USAT(tmr-BUFSIZE,27)+BUFSIZE;

int32_t damp=-param_tilt<<4;
int32_t lf;
MTOF(param_center,lf)]]></code.krate>
         <code.srate><![CDATA[writepos = (writepos + 1)&LENGTHMASK;
array[writepos] = __SSAT(inlet_r+fr>>14,16);
array[writepos+LENGTH] = __SSAT(inlet_l+fl>>14,16);
fl=___SMMUL(array[(writepos-tml)&LENGTHMASK]<<14,param_feed)<<5;
fr=___SMMUL(array[((writepos-tmr)&LENGTHMASK)+LENGTH]<<14,param_feed)<<5;
ll+=___SMMUL(fl-ll<<1,lf);
lr+=___SMMUL(fr-lr<<1,lf);
if(damp>0)
{
fl+=___SMMUL(ll-fl,damp)<<1;
fr+=___SMMUL(lr-fr,damp)<<1;
}
else
{
fl+=___SMMUL(ll,damp)<<1;
fr+=___SMMUL(lr,damp)<<1;
}

outlet_l=fl;
outlet_r=fr;]]></code.srate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="eedfe6fa-0afa-492c-a133-e6fbbcccd9f5" name="soft booster bass l" x="1554" y="1232">
      <params>
         <frac32.u.map name="amp" value="22.0"/>
         <frac32.u.map name="tres" value="22.0"/>
         <frac32.u.map name="max" value="26.5"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="eedfe6fa-0afa-492c-a133-e6fbbcccd9f5">
         <sDescription>Multiply (attenuate) with a constant value</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>math.axh</helpPatch>
         <inlets>
            <frac32buffer name="in" description="input"/>
         </inlets>
         <outlets>
            <frac32buffer name="out" description="output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map.gain name="amp" noLabel="true"/>
            <frac32.u.map name="tres"/>
            <frac32.u.map name="max"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t SAT(int32_t in,int32_t trs,int32_t mx)
{
	int32_t norm=in;
	norm=norm>trs?trs:(norm<-trs?-trs:norm);
	int32_t left=in-norm;
	float32_t ratio=(float32_t)mx/(mx+(left>0?left:-left));
	return left=left*ratio+norm;
}]]></code.declaration>
         <code.krate><![CDATA[int32_t max=___SMMUL(param_max<<4,(1<<27)-param_tres<<1)+1;]]></code.krate>
         <code.srate><![CDATA[int32_t in=inlet_in;
for(int i=0;i<2;i++)
{
	in+=(__SSAT(___SMMUL(in,param_amp),27)<<4);
	in=SAT(in,param_tres,max);
}
outlet_out=in;]]></code.srate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="eedfe6fa-0afa-492c-a133-e6fbbcccd9f5" name="soft booster bass r" x="1652" y="1232">
      <params>
         <frac32.u.map name="amp" value="22.0"/>
         <frac32.u.map name="tres" value="22.0"/>
         <frac32.u.map name="max" value="26.5"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="eedfe6fa-0afa-492c-a133-e6fbbcccd9f5">
         <sDescription>Multiply (attenuate) with a constant value</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>math.axh</helpPatch>
         <inlets>
            <frac32buffer name="in" description="input"/>
         </inlets>
         <outlets>
            <frac32buffer name="out" description="output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map.gain name="amp" noLabel="true"/>
            <frac32.u.map name="tres"/>
            <frac32.u.map name="max"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t SAT(int32_t in,int32_t trs,int32_t mx)
{
	int32_t norm=in;
	norm=norm>trs?trs:(norm<-trs?-trs:norm);
	int32_t left=in-norm;
	float32_t ratio=(float32_t)mx/(mx+(left>0?left:-left));
	return left=left*ratio+norm;
}]]></code.declaration>
         <code.krate><![CDATA[int32_t max=___SMMUL(param_max<<4,(1<<27)-param_tres<<1)+1;]]></code.krate>
         <code.srate><![CDATA[int32_t in=inlet_in;
for(int i=0;i<2;i++)
{
	in+=(__SSAT(___SMMUL(in,param_amp),27)<<4);
	in=SAT(in,param_tres,max);
}
outlet_out=in;]]></code.srate>
      </object>
   </patchobj>
   <obj type="mix/mix 3 sq" uuid="d7b47d5c17ec70f49b38661d48ad251bad22aace" name="mix_2" x="1750" y="1232">
      <params>
         <frac32.u.map name="gain1" value="36.5"/>
         <frac32.u.map name="gain2" value="33.5"/>
         <frac32.u.map name="gain3" value="48.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="mix/mix 3 sq" uuid="d7b47d5c17ec70f49b38661d48ad251bad22aace" name="mix_3" x="1848" y="1232">
      <params>
         <frac32.u.map name="gain1" value="36.5"/>
         <frac32.u.map name="gain2" value="33.5"/>
         <frac32.u.map name="gain3" value="47.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="sss/audio/StOutVol" uuid="0ca9cf1e-1ce3-469c-80da-a4a885c21246" name="StOutVol_1" x="1946" y="1232">
      <params>
         <frac32.u.map name="volume" value="39.0"/>
      </params>
      <attribs/>
   </obj>
   <nets>
      <net>
         <source obj="counter_1" outlet="o"/>
         <dest obj="basePatt_1 glidetime" inlet="count"/>
         <dest obj="basePatt_3 fast" inlet="count"/>
         <dest obj="sel_1" inlet="in"/>
         <dest obj="kick sequencer" inlet="in"/>
         <dest obj="gate pattern_" inlet="count"/>
         <dest obj="basePatt_3 fast_" inlet="count"/>
         <dest obj="gate pattern" inlet="count"/>
         <dest obj="lp_11" inlet="pst"/>
      </net>
      <net>
         <source obj="square_1" outlet="wave"/>
         <dest obj="counter_1" inlet="trig"/>
      </net>
      <net>
         <source obj="or_1" outlet="o"/>
         <dest obj="rnd times" inlet="i1"/>
         <dest obj="rnd settings" inlet="i1"/>
         <dest obj="rnd waveform" inlet="i1"/>
         <dest obj="rnd patt_1" inlet="i1"/>
         <dest obj="rnd patt_2" inlet="i1"/>
         <dest obj="rnd patt_3" inlet="i1"/>
         <dest obj="rnd patt_5" inlet="i1"/>
         <dest obj="rnd patt_7" inlet="i1"/>
         <dest obj="rnd patt_8" inlet="i1"/>
         <dest obj="rnd patt_4" inlet="i1"/>
         <dest obj="rnd patt_9" inlet="i1"/>
         <dest obj="uniform_1" inlet="trig"/>
         <dest obj="uniform_2" inlet="trig"/>
      </net>
      <net>
         <source obj="mix_1" outlet="out"/>
         <dest obj="pwm_1" inlet="pw"/>
      </net>
      <net>
         <source obj="ad_1" outlet="env"/>
         <dest obj="lp_11" inlet="envelopes"/>
      </net>
      <net>
         <source obj="gate pattern" outlet="gates"/>
         <dest obj="ad_1" inlet="gates"/>
      </net>
      <net>
         <source obj="rnd patt_3" outlet="o"/>
         <dest obj="basePatt_1 glidetime" inlet="rnd"/>
      </net>
      <net>
         <source obj="rnd patt_4" outlet="o"/>
         <dest obj="gate pattern" inlet="rnd"/>
      </net>
      <net>
         <source obj="rnd times" outlet="o"/>
         <dest obj="ad_1" inlet="rnd"/>
      </net>
      <net>
         <source obj="rnd settings" outlet="o"/>
         <dest obj="lp_11" inlet="rnd"/>
      </net>
      <net>
         <source obj="sine_2" outlet="wave"/>
         <dest obj="xfade_1" inlet="i1"/>
         <dest obj="*c_6" inlet="in"/>
         <dest obj="vca_2" inlet="a"/>
      </net>
      <net>
         <source obj="rnd waveform" outlet="o"/>
         <dest obj="sine_2" inlet="rnd"/>
      </net>
      <net>
         <source obj="basePatt_1 glidetime" outlet="index"/>
         <dest obj="lp_11" inlet="glide"/>
      </net>
      <net>
         <source obj="pwm_1" outlet="wave"/>
         <dest obj="xfade_1" inlet="i2"/>
      </net>
      <net>
         <source obj="dial_1" outlet="out"/>
         <dest obj="xfade_1" inlet="c"/>
      </net>
      <net>
         <source obj="xfade_1" outlet="o"/>
         <dest obj="bass strip" inlet="in"/>
      </net>
      <net>
         <source obj="note_1" outlet="note"/>
         <dest obj="pwm_1" inlet="pitch"/>
         <dest obj="sine_2" inlet="pitch"/>
         <dest obj="xfade_2" inlet="i1"/>
      </net>
      <net>
         <source obj="counter_1" outlet="c"/>
         <dest obj="counter_2" inlet="trig"/>
         <dest obj="counter_4" inlet="trig"/>
         <dest obj="counter_5" inlet="trig"/>
      </net>
      <net>
         <source obj="counter_2" outlet="c"/>
         <dest obj="counter_3" inlet="trig"/>
      </net>
      <net>
         <source obj="counter_3" outlet="o"/>
         <dest obj="basePatt_2 slow" inlet="count"/>
         <dest obj="basePatt_1 glidetime_" inlet="count"/>
      </net>
      <net>
         <source obj="basePatt_2 slow" outlet="index"/>
         <dest obj="+_1" inlet="in1"/>
         <dest obj="+_3" inlet="in1"/>
      </net>
      <net>
         <source obj="i_1" outlet="out"/>
         <dest obj="note_1" inlet="offset"/>
         <dest obj="note_2" inlet="offset"/>
      </net>
      <net>
         <source obj="+_1" outlet="out"/>
         <dest obj="note_1" inlet="note"/>
      </net>
      <net>
         <source obj="basePatt_3 fast" outlet="index"/>
         <dest obj="+_1" inlet="in2"/>
      </net>
      <net>
         <source obj="rnd patt_1" outlet="o"/>
         <dest obj="basePatt_3 fast" inlet="rnd"/>
         <dest obj="basePatt_3 fast_" inlet="rnd"/>
      </net>
      <net>
         <source obj="rnd patt_2" outlet="o"/>
         <dest obj="basePatt_2 slow" inlet="rnd"/>
      </net>
      <net>
         <source obj="soft booster bass l" outlet="out"/>
         <dest obj="mix_2" inlet="in1"/>
      </net>
      <net>
         <source obj="sine_1" outlet="wave"/>
         <dest obj="mix_1" inlet="in1"/>
      </net>
      <net>
         <source obj="sine_3" outlet="wave"/>
         <dest obj="mix_1" inlet="in2"/>
      </net>
      <net>
         <source obj="bass strip" outlet="pass"/>
         <dest obj="vca_1" inlet="a"/>
      </net>
      <net>
         <source obj="vca_1" outlet="o"/>
         <dest obj="lp_11" inlet="pass_l"/>
         <dest obj="lp_11" inlet="pass_r"/>
      </net>
      <net>
         <source obj="ad_2" outlet="env"/>
         <dest obj="vca_1" inlet="v"/>
      </net>
      <net>
         <source obj="sel_1" outlet="o"/>
         <dest obj="ad_2" inlet="trig"/>
      </net>
      <net>
         <source obj="bass strip" outlet="reject"/>
         <dest obj="filter high bass" inlet="in"/>
      </net>
      <net>
         <source obj="filter high bass" outlet="pass"/>
         <dest obj="lp_11" inlet="in"/>
      </net>
      <net>
         <source obj="ad_4" outlet="env"/>
         <dest obj="vca_2" inlet="v"/>
         <dest obj="xfade_2" inlet="c"/>
      </net>
      <net>
         <source obj="kick sequencer" outlet="o"/>
         <dest obj="ad_4" inlet="trig"/>
         <dest obj="ad_5" inlet="trig"/>
      </net>
      <net>
         <source obj="*c_4" outlet="out"/>
         <dest obj="lp1_2" inlet="res"/>
      </net>
      <net>
         <source obj="ad_5" outlet="env"/>
         <dest obj="*c_4" inlet="in"/>
      </net>
      <net>
         <source obj="lp1_2" outlet="out"/>
         <dest obj="soft booster_" inlet="in"/>
      </net>
      <net>
         <source obj="vca_2" outlet="o"/>
         <dest obj="lp1_2" inlet="in"/>
      </net>
      <net>
         <source obj="soft booster_" outlet="out"/>
         <dest obj="mix_2" inlet="in2"/>
         <dest obj="mix_3" inlet="in2"/>
      </net>
      <net>
         <source obj="mix_2" outlet="out"/>
         <dest obj="StOutVol_1" inlet="left"/>
      </net>
      <net>
         <source obj="randomise all" outlet="o"/>
         <dest obj="or_1" inlet="i1"/>
      </net>
      <net>
         <source obj="and_1" outlet="o"/>
         <dest obj="or_1" inlet="i2"/>
      </net>
      <net>
         <source obj="auto random" outlet="o"/>
         <dest obj="and_1" inlet="i2"/>
      </net>
      <net>
         <source obj="counter_4" outlet="c"/>
         <dest obj="and_1" inlet="i1"/>
      </net>
      <net>
         <source obj="*c_6" outlet="out"/>
         <dest obj="lp1_2" inlet="fm"/>
      </net>
      <net>
         <source obj="+_3" outlet="out"/>
         <dest obj="note_2" inlet="note"/>
      </net>
      <net>
         <source obj="note_2" outlet="note"/>
         <dest obj="square_2" inlet="pitch"/>
      </net>
      <net>
         <source obj="lp_10" outlet="pass_l"/>
         <dest obj="delay" inlet="l"/>
      </net>
      <net>
         <source obj="gate pattern_" outlet="gates"/>
         <dest obj="ad_3" inlet="gates"/>
      </net>
      <net>
         <source obj="ad_3" outlet="env"/>
         <dest obj="lp_10" inlet="envelopes"/>
      </net>
      <net>
         <source obj="rnd patt_5" outlet="o"/>
         <dest obj="gate pattern_" inlet="rnd"/>
      </net>
      <net>
         <source obj="rnd patt_7" outlet="o"/>
         <dest obj="ad_3" inlet="rnd"/>
      </net>
      <net>
         <source obj="rnd patt_8" outlet="o"/>
         <dest obj="lp_10" inlet="rnd"/>
      </net>
      <net>
         <source obj="basePatt_3 fast_" outlet="index"/>
         <dest obj="+_3" inlet="in2"/>
      </net>
      <net>
         <source obj="square_2" outlet="wave"/>
         <dest obj="lp_10" inlet="in"/>
      </net>
      <net>
         <source obj="hit pitch" outlet="out"/>
         <dest obj="xfade_2" inlet="i2"/>
      </net>
      <net>
         <source obj="xfade_2" outlet="o"/>
         <dest obj="lp1_2" inlet="cutoff"/>
      </net>
      <net>
         <source obj="lp_10" outlet="pass_r"/>
         <dest obj="delay" inlet="r"/>
      </net>
      <net>
         <source obj="mix_3" outlet="out"/>
         <dest obj="StOutVol_1" inlet="right"/>
      </net>
      <net>
         <source obj="lp_11" outlet="pass_r"/>
         <dest obj="soft booster bass r" inlet="in"/>
      </net>
      <net>
         <source obj="lp_11" outlet="pass_l"/>
         <dest obj="soft booster bass l" inlet="in"/>
      </net>
      <net>
         <source obj="soft booster bass r" outlet="out"/>
         <dest obj="mix_3" inlet="in1"/>
      </net>
      <net>
         <source obj="saw_1" outlet="wave"/>
         <dest obj="lp_10" inlet="pan"/>
      </net>
      <net>
         <source obj="saw_2" outlet="wave"/>
         <dest obj="lp_11" inlet="pan"/>
      </net>
      <net>
         <source obj="delay" outlet="l"/>
         <dest obj="mix_2" inlet="in3"/>
      </net>
      <net>
         <source obj="delay" outlet="r"/>
         <dest obj="mix_3" inlet="in3"/>
      </net>
      <net>
         <source obj="tempo" outlet="out"/>
         <dest obj="square_1" inlet="pitch"/>
         <dest obj="sine_1" inlet="pitch"/>
         <dest obj="sine_3" inlet="pitch"/>
         <dest obj="delay" inlet="time"/>
      </net>
      <net>
         <source obj="basePatt_1 glidetime_" outlet="index"/>
         <dest obj="lp_10" inlet="glide"/>
      </net>
      <net>
         <source obj="rnd patt_9" outlet="o"/>
         <dest obj="basePatt_1 glidetime_" inlet="rnd"/>
      </net>
      <net>
         <source obj="counter_5" outlet="o"/>
         <dest obj="lp_10" inlet="pst"/>
      </net>
      <net>
         <source obj="uniform_1" outlet="rand"/>
         <dest obj="delay" inlet="ratio"/>
      </net>
      <net>
         <source obj="uniform_2" outlet="rand"/>
         <dest obj="delay" inlet="spread"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>-8</x>
      <y>-8</y>
      <width>1874</width>
      <height>1096</height>
   </windowPos>
</patch-1.0>