<patch appVersion="2.0.0">
   <comment type="patch/comment" name="384" x="168" y="56" text="table/tablecombo5"/>
   <comment type="patch/comment" name="385" x="350" y="56" text="table/read-int-win-X2"/>
   <patchobj type="table/tablecombo5" uuid="8b3a35f9-3ab1-4034-9aa0-3ef41a36a94e" name="Audio_1" x="168" y="70">
      <params/>
      <attribs>
         <combo attributeName="size" selection="2097152"/>
         <table attributeName="prefix" table=""/>
         <table attributeName="suffix" table=""/>
         <combo attributeName="volfade" selection="Immediate"/>
      </attribs>
      <object id="patch/object" uuid="8b3a35f9-3ab1-4034-9aa0-3ef41a36a94e">
         <sDescription>A combination of 3 objects:
table/alloc 16b sdram
table/load
string/indexed

This version has also got Dr. Justice deglitcher implemented, which mutes all sound from the patch = no BLIIIIP when changing table content.

29-12-2017: Added drj/file/file_size object from Dr.Justice.

6-4-2018 add pow out</sDescription>
         <author>Jaffasplaffa</author>
         <license>BSD</license>
         <helpPatch>tablehelp.axh</helpPatch>
         <inlets>
            <int32 name="w" description="Select wave file"/>
            <bool32 name="trig" description="Load selected wave file"/>
         </inlets>
         <outlets>
            <frac32.positive name="volume" description=""/>
            <int32 name="fsize" description="Filesize in samples"/>
            <int32 name="tsize" description="Tablesize in samples"/>
            <int32 name="tmask"/>
            <charptr32 name="fn" description="Filename for filesize object"/>
            <int32 name="pow"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <combo name="size">
               <MenuEntries>
                  <string>2</string>
                  <string>4</string>
                  <string>8</string>
                  <string>16</string>
                  <string>32</string>
                  <string>64</string>
                  <string>128</string>
                  <string>256</string>
                  <string>512</string>
                  <string>1024</string>
                  <string>2048</string>
                  <string>4096</string>
                  <string>8192</string>
                  <string>16384</string>
                  <string>32768</string>
                  <string>65536</string>
                  <string>131072</string>
                  <string>262144</string>
                  <string>524288</string>
                  <string>1048576</string>
                  <string>2097152</string>
                  <string>4194304</string>
               </MenuEntries>
               <CEntries>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>4</string>
                  <string>5</string>
                  <string>6</string>
                  <string>7</string>
                  <string>8</string>
                  <string>9</string>
                  <string>10</string>
                  <string>11</string>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
                  <string>16</string>
                  <string>17</string>
                  <string>18</string>
                  <string>19</string>
                  <string>20</string>
                  <string>21</string>
                  <string>22</string>
               </CEntries>
            </combo>
            <table name="prefix"/>
            <table name="suffix"/>
            <combo name="volfade">
               <MenuEntries>
                  <string>Immediate</string>
                  <string>Fade 0.02s</string>
                  <string>Fade 0.10s</string>
                  <string>Fade 0.50s</string>
               </MenuEntries>
               <CEntries>
                  <string>((0x08000000)/2)</string>
                  <string>((0x08000000)/60)</string>
                  <string>((0x08000000)/300)</string>
                  <string>((0x08000000)/1500)</string>
               </CEntries>
            </combo>
         </attribs>
         <file-depends/>
         <includes>
            <include>chibios/ext/fatfs/src/ff.h</include>
         </includes>
         <depends>
            <depend>fatfs</depend>
         </depends>
         <modules/>
         <code.declaration><![CDATA[//String/index

      int ntrig;
      char c[64];
      int offset;
      int pval;

      //Logic change //
      int ptrig2;
      int32_t pval2;

      // Connect inlet to string/index VIA logic  change //
      int32_t LcOut;

      // Block BLEEEP //

      //#define DEBUGF LogTextMessage
      #define DEBUGF(...) {}
      enum
      {
        TABLE_LOAD_STATE_idle = 0,
        TABLE_LOAD_STATE_load
      } TABLE_LOAD_STATE;

      int32_t     old_inlet_trig;
      int32_t     trig_pulse;
      int32_t     gain_coeff;
#if attr_volfade < (1<<27)
      int32_t     fade_rate;
      int32_t     table_load_state;
#endif

      // outlet trigger fra deglitch
      int32_t Deglitchout;

      //Table allocation
      static const uint32_t LENGTHPOW = (attr_size);
      static const uint32_t LENGTH = (1<<attr_size);
      static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
      static const uint32_t BITS = 16;
      static const uint32_t GAIN = 12;
      int16_t *array;

      /*
       *  Table load function
       */

      int table_load( void )
      {
        char* filename = &c[0]; // filename internally //
        FIL FileObject;
        FRESULT err;
        UINT bytes_read;
        DEBUGF("Filename %s\n", filename );
        err = f_open(&FileObject,filename, FA_READ | FA_OPEN_EXISTING);
        if( err != FR_OK )
          {
            report_fatfs_error(err,filename);
            return err;
          }
        int rem_sz = sizeof(*array)*LENGTH;
        int offset = 0;
        while( rem_sz > 0 )
          {
            if( rem_sz > sizeof(fbuff) )
              {
                err = f_read(&FileObject, fbuff, sizeof(fbuff),&bytes_read);
                if( bytes_read == 0 )
                  {
                    break;
                  }
                memcpy((char *)(&array[0]) + offset,(char *)fbuff,bytes_read);
                rem_sz -= bytes_read;
                offset += bytes_read;
              }
            else
              {
                err = f_read(&FileObject, fbuff, rem_sz,&bytes_read);
                memcpy((char *)(&array[0]) + offset,(char *)fbuff,bytes_read);
                rem_sz = 0;
              }
          }
        if( err != FR_OK )
          {
            report_fatfs_error(err,filename);
            return err;
          }
        err = f_close(&FileObject);
        if( err != FR_OK )
          {
            report_fatfs_error(err,filename);
          }
        return err;
      }





//Filesize //


      int32_t start_sequence;
      int32_t old_inlet_trigfilename;
      int32_t file_size;]]></code.declaration>
         <code.init><![CDATA[//Table allocation
      static int16_t _array[attr_poly][LENGTH] __attribute__ ((section (".sdram")));
      array = &_array[parent->polyIndex][0];
      for( int i=0;i<LENGTH;i++)
        {
          array[i]=0;
        }


      //String/index
      ntrig = 0;
      strcpy(&c[0],"attr_prefix000attr_suffix");
      offset = strlen("attr_prefix");
      pval = 0;

      // Logic change //
      ptrig2 = 0;
      pval2 = 0;

      // Block BLEEEP //

      old_inlet_trig  = 0;
      trig_pulse      = 0;
      gain_coeff      = (1<<27);
#if attr_volfade < (1<<27)
      fade_rate        = 0;
      table_load_state = TABLE_LOAD_STATE_idle;
#endif





//Filesize //


      start_sequence = 0;]]></code.init>
         <code.dispose><![CDATA[]]></code.dispose>
         <code.krate><![CDATA[outlet_tsize = LENGTH;
outlet_tmask = LENGTHMASK;

// String index

      if( inlet_w != pval )
        {
          pval = inlet_w;
          int i = inlet_w;
          int i0 = i/10;
          c[offset+2] = '0'+i-10*i0;
          i = i0;
          i0 = i/10;
          c[offset+1] = '0'+i-10*i0;
          i = i0;
          i0 = i/10;
          c[offset+0] = '0'+i-10*i0;
        }

// outlet_fn = &c[0]; // NAME TO FEED TO FILESIZE OBJECT //


      // logic change //
      if( (pval2 != inlet_w) & (!ptrig2) )
        {
          LcOut = 1;
          pval2 = inlet_w;
          ptrig2 = 1;
        }
      else
        {
          ptrig2 = 0;
          LcOut = 0;
        }

      // Block BLEEEP //

      if( LcOut && !old_inlet_trig )
        {
#if attr_volfade < (1<<27)
          // Start fade out
          fade_rate       = -attr_volfade;
          DEBUGF("deglitcher::krate(): initiate trigger");
#else
          // Use immediate trigger
          codec_clearbuffer();
          trig_pulse = 1;
          DEBUGF("deglitcher::krate(): immediate trigger");
#endif
        }

#if  attr_volfade < (1<<27)
      /*
       *  Waits for the volume to ramp down before performing deferred triggering
       *  then ramps the volume back up when the potentially blocking operation is done
       *  We save this codespace if immedate preset switching is used.
       */
      if( fade_rate < 0 )
        {
          // Fading out before load
          gain_coeff += fade_rate;
          if( gain_coeff <= 0 )
            {
              gain_coeff = 0;
              fade_rate  = 0;
              codec_clearbuffer();
              if( table_load_state == TABLE_LOAD_STATE_load )
                {
                  if( table_load() == FR_OK )
                    {
                      // Trig other potentially blocking operations
                      trig_pulse = 1;
                    }
                }
              // Start fade in after load
              fade_rate = attr_volfade;
              table_load_state = TABLE_LOAD_STATE_idle;
            }
        }
      else if( fade_rate > 0 )
        {
          // Fading in after trigger
          gain_coeff += fade_rate;
          if( gain_coeff >= 1<<27 )
            {
              gain_coeff = 1<<27;
              fade_rate  = 0;
            }
        }
#endif

      outlet_volume  = gain_coeff;
      Deglitchout    = trig_pulse; //outlet_trig
      old_inlet_trig = LcOut;
      trig_pulse     = 0;

      // Table/load
      if((LcOut>0) && !ntrig)
        {
          table_load_state = TABLE_LOAD_STATE_load;
          ntrig = 1;
        }
      else if( !(LcOut>0) )
        {
          ntrig = 0;
        }


//Filesize //
// Use filename internally &c[0] //
// outlet_fn = &c[0]; // NAME TO FEED TO FILESIZE OBJECT //

      if( start_sequence == 0 || inlet_trig != 0 && old_inlet_trigfilename == 0 )
        {
          FIL     FileObject;
          int32_t err;

          err = f_open( &FileObject, &c[0], FA_READ );
          if( err != FR_OK )
            {
              report_fatfs_error( err, &c[0] );
              file_size = 0;
            }
          else
            {
              file_size = f_size( &FileObject ) >> 1;
              f_close( &FileObject );
            }

          if( start_sequence == 0 )
            {
              start_sequence++;
            }
        }

        /*
         Original
         
      if( start_sequence == 0 || inlet_trig != 0 && old_inlet_trig == 0 )
        {
          FIL     FileObject;
          int32_t err;

          err = f_open( &FileObject, inlet_filename, FA_READ );
          if( err != FR_OK )
            {
              report_fatfs_error( err, inlet_filename );
              file_size = 0;
            }
          else
            {
              file_size = f_size( &FileObject ) >> 1;
              f_close( &FileObject );
            }

          if( start_sequence == 0 )
            {
              start_sequence++;
            }
        }
         */

      old_inlet_trig = inlet_trig;
      outlet_fsize = file_size;
      outlet_pow = LENGTHPOW;]]></code.krate>
         <code.srate><![CDATA[]]></code.srate>
         <code.midihandler><![CDATA[]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="table/read-int-win-X2" uuid="872b9d30-ed3b-42c8-a531-982da1c6774d" name="Table/Window X 2" x="350" y="70">
      <params/>
      <attribs>
         <objref attributeName="table" obj="Audio"/>
      </attribs>
      <object id="patch/object" uuid="872b9d30-ed3b-42c8-a531-982da1c6774d">
         <sDescription>read from table, linear interpolated. THis is 2 X table/read interp and 2 X window, with an on/off switch for the windo function.</sDescription>
         <author>Jaffasplaffa</author>
         <license>BSD</license>
         <helpPatch>table.axh</helpPatch>
         <inlets>
            <frac32buffer.positive name="a" description="index in fraction of table size"/>
            <frac32buffer.positive name="b"/>
            <frac32buffer name="wa"/>
            <frac32buffer name="wb"/>
            <bool32 name="on"/>
         </inlets>
         <outlets>
            <frac32buffer name="a" description="table[a]"/>
            <frac32buffer name="b"/>
            <frac32buffer name="o"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <objref name="table"/>
         </attribs>
         <file-depends/>
         <includes/>
         <depends/>
         <modules/>
         <code.declaration><![CDATA[int i ;

// Tables
uint32_t asat[2];
int index[2];

int32_t y1[2];
int32_t y2[2];

int frac[2];
int32_t rr[2];

int32_t INPUT[2];



// Windows
int32_t WindowIn[2];
int32_t WindowOut[2];
int32_t Windowr[2];]]></code.declaration>
         <code.init><![CDATA[]]></code.init>
         <code.dispose><![CDATA[]]></code.dispose>
         <code.krate><![CDATA[]]></code.krate>
         <code.srate><![CDATA[INPUT[0] = inlet_a ;
INPUT[1] = inlet_b ;

for(i=0;i<2;i++){
	
   asat[i] = __USAT(INPUT[i],27);
   index[i] = asat[i]>>(27-attr_table.LENGTHPOW);
   y1[i] = attr_table.array[index[i]]<<attr_table.GAIN;
   y2[i] = attr_table.array[(index[i]+1)&attr_table.LENGTHMASK]<<attr_table.GAIN;
   frac[i] = (asat[i] - (index[i]<<(27-attr_table.LENGTHPOW)))<<(attr_table.LENGTHPOW+3);
   rr[i];
   rr[i] = ___SMMUL(y1[i],(1<<30)-frac[i]);
   rr[i] = ___SMMLA(y2[i],frac[i],rr[i]);


/*
 * Window X 2 using for-loop
 */

// Assing inlets to window for-loop...
WindowIn[0] = inlet_wa;
WindowIn[1] = inlet_wb;
// Window
{Windowr[i]; HANNING2TINTERP(WindowIn[i]<<5,Windowr[i])   WindowOut[i]= (Windowr[i]>>4);}

}
// Output windowed table - Fixed it again it works now, the 13-10-18 23.21
if(inlet_on){
outlet_a = ___SMMUL(WindowOut[0]<<3,   rr[0]<<2    <<2); // Outputs must be in for-loop
outlet_b = ___SMMUL(WindowOut[1]<<3,   rr[1]<<2    <<2); // Outputs must be in for-loop
outlet_o = ___SMMUL(WindowOut[0]<<3,   rr[0]<<2    <<2) + ___SMMUL(WindowOut[1]<<3,   rr[1]<<2   <<2)  ; // Outputs must be in for-loop
}
else{
outlet_a = rr[0]<<2 ;
outlet_b = rr[1]<<2 ;	
outlet_o = rr[0]<<2;
}]]></code.srate>
         <code.midihandler><![CDATA[]]></code.midihandler>
      </object>
   </patchobj>
   <nets/>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>96</x>
      <y>98</y>
      <width>936</width>
      <height>673</height>
   </windowPos>
</patch>