<objdefs appVersion="1.0.12">
   <obj.normal id="8way_demux_w_string_outlet" uuid="af2891c4-31e0-4dea-9f78-a7ddf7b59b85">
      <sDescription>routes &quot;in&quot; to &quot;out n&quot;, with &quot;n&quot; the integer at &quot;page0-7&quot;; also outputs a_n at &quot;name&quot; and &quot;out n&quot; at &quot;current&quot;; values for &quot;out m&quot; with m=/=n remain at last input; changes to &quot;in&quot; only register on &quot;out n&quot; when &quot;in&quot; hits the previous value of &quot;out n&quot; (&apos;latching&apos;)</sDescription>
      <author>db</author>
      <license>GPL</license>
      <inlets>
         <int32 name="page0-7" description="page0-7"/>
         <frac32 name="in" description="in"/>
      </inlets>
      <outlets>
         <frac32 name="out 0" description="out 0"/>
         <frac32 name="out 1" description="out 1"/>
         <frac32 name="out 2" description="out 2"/>
         <frac32 name="out 3" description="out 3"/>
         <frac32 name="out 4" description="out 4"/>
         <frac32 name="out 5"/>
         <frac32 name="out 6" description="out 6"/>
         <frac32 name="out 7" description="out 7"/>
         <charptr32 name="name"/>
         <frac32 name="current"/>
         <bool32 name="pagechange"/>
      </outlets>
      <displays/>
      <params/>
      <attribs>
         <table name="a0"/>
         <table name="a1"/>
         <table name="a2"/>
         <table name="a3"/>
         <table name="a4"/>
         <table name="a5"/>
         <table name="a6"/>
         <table name="a7"/>
      </attribs>
      <code.declaration><![CDATA[static const uint32_t NPEXCH = 0;
    ParameterExchange_t PExch[NPEXCH];
    int32_t displayVector[3];
    static const uint32_t NPRESETS = 8;
    static const uint32_t NPRESET_ENTRIES = 32;
    static const uint32_t NMODULATIONSOURCES = 8;
    static const uint32_t NMODULATIONTARGETS = 8;
    int32_t PExModulationPrevVal[1][NMODULATIONSOURCES];
/* modsource defines */
/* parameter instance indices */
/* controller classes */
/* object classes */
class instancepage0_dash_7{
  public: // v1
  attr_parent *parent;
int32_t _inlet;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t & outlet_inlet  ){
  outlet_inlet = _inlet;

}
}
;class instancein{
  public: // v1
  attr_parent *parent;
int32_t _inlet;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & outlet_inlet  ){
  outlet_inlet = _inlet;

}
}
;class instancechange__1{
  public: // v1
  attr_parent *parent;
   int ptrig;
   int32_t pval;

  public: void Init(attr_parent * _parent) {
parent = _parent;
ptrig = 0;
pval = 0;

}
  public: void Dispose() {
}
  public: void dsp (const int32_t inlet_in,
bool  & outlet_trig  ){
if ((pval != inlet_in)&(!ptrig)) { 
  outlet_trig = 1;
  pval = inlet_in;
  ptrig = 1;
} else {
  ptrig = 0;
  outlet_trig = 0;
}

}
}
;class instanceinv__1{
  public: // v1
  attr_parent *parent;
  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const bool  inlet_i,
bool  & outlet_o  ){
outlet_o = (inlet_i>0)?0:1;

}
}
;class instanceand__1{
  public: // v1
  attr_parent *parent;
  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const bool  inlet_i1,
const bool  inlet_i2,
bool  & outlet_o  ){
outlet_o = (inlet_i1)&&(inlet_i2);

}
}
;class instancemux__1{
  public: // v1
  attr_parent *parent;
  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_i0,
const int32_t  inlet_i1,
const int32_t  inlet_i2,
const int32_t  inlet_i3,
const int32_t  inlet_i4,
const int32_t  inlet_i5,
const int32_t  inlet_i6,
const int32_t  inlet_i7,
const int32_t inlet_s,
int32_t  & outlet_o  ){
   switch(inlet_s>0?inlet_s:0){
      case 0: outlet_o= inlet_i0;break;
      case 1: outlet_o= inlet_i1;break;
      case 2: outlet_o= inlet_i2;break;
      case 3: outlet_o= inlet_i3;break;
      case 4: outlet_o= inlet_i4;break;
      case 5: outlet_o= inlet_i5;break;
      case 6: outlet_o= inlet_i6;break;
      case 7: outlet_o= inlet_i7;break;
      default: outlet_o= inlet_i7;break;
}

}
}
;class instancedemux__2{
  public: // v1
  attr_parent *parent;
  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_i,
const int32_t  inlet_d0,
const int32_t  inlet_d1,
const bool  inlet_s,
int32_t  & outlet_o0,
int32_t  & outlet_o1  ){
   outlet_o0= (inlet_s)?inlet_d0:inlet_i;
   outlet_o1= (inlet_s)?inlet_i:inlet_d1;

}
}
;class instancedemux__1{
  public: // v1
  attr_parent *parent;
  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_i,
const int32_t  inlet_d0,
const int32_t  inlet_d1,
const int32_t  inlet_d2,
const int32_t  inlet_d3,
const int32_t  inlet_d4,
const int32_t  inlet_d5,
const int32_t  inlet_d6,
const int32_t  inlet_d7,
const int32_t inlet_s,
int32_t  & outlet_o0,
int32_t  & outlet_o1,
int32_t  & outlet_o2,
int32_t  & outlet_o3,
int32_t  & outlet_o4,
int32_t  & outlet_o5,
int32_t  & outlet_o6,
int32_t  & outlet_o7  ){
   switch(inlet_s>0?inlet_s:0){
      case 0: 
         outlet_o0 = inlet_i;
         outlet_o1 = inlet_d1;
         outlet_o2 = inlet_d2;
         outlet_o3 = inlet_d3;
         outlet_o4 = inlet_d4;
         outlet_o5 = inlet_d5;
         outlet_o6 = inlet_d6;
         outlet_o7 = inlet_d7;
         break;
      case 1: 
         outlet_o0 = inlet_d0;
         outlet_o1 = inlet_i;
         outlet_o2 = inlet_d2;
         outlet_o3 = inlet_d3;
         outlet_o4 = inlet_d4;
         outlet_o5 = inlet_d5;
         outlet_o6 = inlet_d6;
         outlet_o7 = inlet_d7;
         break;
      case 2: 
         outlet_o0 = inlet_d0;
         outlet_o1 = inlet_d1;
         outlet_o2 = inlet_i;
         outlet_o3 = inlet_d3;
         outlet_o4 = inlet_d4;
         outlet_o5 = inlet_d5;
         outlet_o6 = inlet_d6;
         outlet_o7 = inlet_d7;
         break;
      case 3: 
         outlet_o0 = inlet_d0;
         outlet_o1 = inlet_d1;
         outlet_o2 = inlet_d2;
         outlet_o3 = inlet_i;
         outlet_o4 = inlet_d4;
         outlet_o5 = inlet_d5;
         outlet_o6 = inlet_d6;
         outlet_o7 = inlet_d7;
         break;
      case 4: 
         outlet_o0 = inlet_d0;
         outlet_o1 = inlet_d1;
         outlet_o2 = inlet_d2;
         outlet_o3 = inlet_d3;
         outlet_o4 = inlet_i;
         outlet_o5 = inlet_d5;
         outlet_o6 = inlet_d6;
         outlet_o7 = inlet_d7;
         break;
      case 5: 
         outlet_o0 = inlet_d0;
         outlet_o1 = inlet_d1;
         outlet_o2 = inlet_d2;
         outlet_o3 = inlet_d3;
         outlet_o4 = inlet_d4;
         outlet_o5 = inlet_i;
         outlet_o6 = inlet_d6;
         outlet_o7 = inlet_d7;
         break;
      case 6: 
         outlet_o0 = inlet_d0;
         outlet_o1 = inlet_d1;
         outlet_o2 = inlet_d2;
         outlet_o3 = inlet_d3;
         outlet_o4 = inlet_d4;
         outlet_o5 = inlet_d5;
         outlet_o6 = inlet_i;
         outlet_o7 = inlet_d7;
         break;
      case 7: 
         outlet_o0 = inlet_d0;
         outlet_o1 = inlet_d1;
         outlet_o2 = inlet_d2;
         outlet_o3 = inlet_d3;
         outlet_o4 = inlet_d4;
         outlet_o5 = inlet_d5;
         outlet_o6 = inlet_d6;
         outlet_o7 = inlet_i;
         break;
      default:
         outlet_o0 = inlet_d0;
         outlet_o1 = inlet_d1;
         outlet_o2 = inlet_d2;
         outlet_o3 = inlet_d3;
         outlet_o4 = inlet_d4;
         outlet_o5 = inlet_d5;
         outlet_o6 = inlet_d6;
         outlet_o7 = inlet_d7;
}

}
}
;class instance_eq__eq___1{
  public: // v1
  attr_parent *parent;
  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_in1,
const int32_t  inlet_in2,
bool  & outlet_out  ){
outlet_out= inlet_in1==inlet_in2 ;
}
}
;class instanceout_space_0{
  public: // v1
  attr_parent *parent;
int32_t _outlet;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_outlet  ){
  _outlet = inlet_outlet;

}
}
;class instanceout_space_1{
  public: // v1
  attr_parent *parent;
int32_t _outlet;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_outlet  ){
  _outlet = inlet_outlet;

}
}
;class instanceout_space_2{
  public: // v1
  attr_parent *parent;
int32_t _outlet;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_outlet  ){
  _outlet = inlet_outlet;

}
}
;class instanceout_space_3{
  public: // v1
  attr_parent *parent;
int32_t _outlet;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_outlet  ){
  _outlet = inlet_outlet;

}
}
;class instanceout_space_4{
  public: // v1
  attr_parent *parent;
int32_t _outlet;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_outlet  ){
  _outlet = inlet_outlet;

}
}
;class instanceout_space_5{
  public: // v1
  attr_parent *parent;
int32_t _outlet;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_outlet  ){
  _outlet = inlet_outlet;

}
}
;class instanceout_space_6{
  public: // v1
  attr_parent *parent;
int32_t _outlet;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_outlet  ){
  _outlet = inlet_outlet;

}
}
;class instanceout_space_7{
  public: // v1
  attr_parent *parent;
int32_t _outlet;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_outlet  ){
  _outlet = inlet_outlet;

}
}
;class instancecurrent{
  public: // v1
  attr_parent *parent;
int32_t _outlet;

  public: void Init(attr_parent * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_outlet  ){
  _outlet = inlet_outlet;

}
}
;/* controller instances */
/* object instances */
     instancepage0_dash_7 instancepage0_dash_7_i;
     instancein instancein_i;
     instancechange__1 instancechange__1_i;
     instanceinv__1 instanceinv__1_i;
     instanceand__1 instanceand__1_i;
     instancemux__1 instancemux__1_i;
     instancedemux__2 instancedemux__2_i;
     instancedemux__1 instancedemux__1_i;
     instance_eq__eq___1 instance_eq__eq___1_i;
     instanceout_space_0 instanceout_space_0_i;
     instanceout_space_1 instanceout_space_1_i;
     instanceout_space_2 instanceout_space_2_i;
     instanceout_space_3 instanceout_space_3_i;
     instanceout_space_4 instanceout_space_4_i;
     instanceout_space_5 instanceout_space_5_i;
     instanceout_space_6 instanceout_space_6_i;
     instanceout_space_7 instanceout_space_7_i;
     instancecurrent instancecurrent_i;
/* net latches */
    bool  net1Latch;
    int32_t  net3Latch;
    int32_t  net4Latch;
    int32_t  net5Latch;
    int32_t  net8Latch;
    int32_t  net9Latch;
    int32_t  net10Latch;
    int32_t  net11Latch;
    int32_t  net13Latch;
    int32_t  net16Latch;
static const int polyIndex = 0;
   static int32_t * GetInitParams(void){
      static const int32_t p[0]= {
      };
      return (int32_t *)&p[0];
   }   static const int32_t * GetPresets(void){
      static const int32_t p[NPRESETS][NPRESET_ENTRIES][2] = {
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         }
      };
   return &p[0][0][0];
   };
void ApplyPreset(int index){
   if (!index) {
     int i;
     int32_t *p = GetInitParams();
     for(i=0;i<NPEXCH;i++){
        PExParameterChange(&PExch[i],p[i],0xFFEF);
     }
   }
   index--;
   if (index < NPRESETS) {
     PresetParamChange_t *pa = (PresetParamChange_t *)(GetPresets());
     PresetParamChange_t *p = &pa[index*NPRESET_ENTRIES];
       int i;
       for(i=0;i<NPRESET_ENTRIES;i++){
         PresetParamChange_t *pp = &p[i];
         if ((pp->pexIndex>=0)&&(pp->pexIndex<NPEXCH)) {
           PExParameterChange(&PExch[pp->pexIndex],pp->value,0xFFEF);         }
         else break;
       }
   }
}
   static PExModulationTarget_t * GetModulationTable(void){
    static const PExModulationTarget_t PExModulationSources[NMODULATIONSOURCES][NMODULATIONTARGETS] = 
{{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}}};
   return (PExModulationTarget_t *)&PExModulationSources[0][0];
   };
   char name[8][8];]]></code.declaration>
      <code.init><![CDATA[int i;
   int j;
   const int32_t *p;
   p = GetInitParams();
   for(j=0;j<0;j++){
      PExch[j].value = p[j];
      PExch[j].modvalue = p[j];
      PExch[j].signals = 0;
      PExch[j].pfunction = 0;
   }
   int32_t *pp = &PExModulationPrevVal[0][0];
   for(j=0;j<attr_poly*NMODULATIONSOURCES;j++){
      *pp = 0; pp++;
   }
     displayVector[0] = 0x446F7841;
     displayVector[1] = 0;
     displayVector[2] = 0;
   instancepage0_dash_7_i.Init(this );
   instancein_i.Init(this );
   instancechange__1_i.Init(this );
   instanceinv__1_i.Init(this );
   instanceand__1_i.Init(this );
   instancemux__1_i.Init(this );
   instancedemux__2_i.Init(this );
   instancedemux__1_i.Init(this );
   instance_eq__eq___1_i.Init(this );
   instanceout_space_0_i.Init(this );
   instanceout_space_1_i.Init(this );
   instanceout_space_2_i.Init(this );
   instanceout_space_3_i.Init(this );
   instanceout_space_4_i.Init(this );
   instanceout_space_5_i.Init(this );
   instanceout_space_6_i.Init(this );
   instanceout_space_7_i.Init(this );
   instancecurrent_i.Init(this );
      int k;
      for (k = 0; k < NPEXCH; k++) {
        if (PExch[k].pfunction){
          (PExch[k].pfunction)(&PExch[k]);
        } else {
          PExch[k].finalvalue = PExch[k].value;
        }
      }
strcpy(name[0],"attr_a0");
strcpy(name[1],"attr_a1");
strcpy(name[2],"attr_a2");
strcpy(name[3],"attr_a3");
strcpy(name[4],"attr_a4");
strcpy(name[5],"attr_a5");
strcpy(name[6],"attr_a6");
strcpy(name[7],"attr_a7");]]></code.init>
      <code.dispose><![CDATA[instancecurrent_i.Dispose();
   instanceout_space_7_i.Dispose();
   instanceout_space_6_i.Dispose();
   instanceout_space_5_i.Dispose();
   instanceout_space_4_i.Dispose();
   instanceout_space_3_i.Dispose();
   instanceout_space_2_i.Dispose();
   instanceout_space_1_i.Dispose();
   instanceout_space_0_i.Dispose();
   instance_eq__eq___1_i.Dispose();
   instancedemux__1_i.Dispose();
   instancedemux__2_i.Dispose();
   instancemux__1_i.Dispose();
   instanceand__1_i.Dispose();
   instanceinv__1_i.Dispose();
   instancechange__1_i.Dispose();
   instancein_i.Dispose();
   instancepage0_dash_7_i.Dispose();]]></code.dispose>
      <code.krate><![CDATA[int i; /*...*/
   instancepage0_dash_7_i._inlet = inlet_page0_dash_7;
   instancein_i._inlet = inlet_in;
//--------- <nets> -----------//
    int32_t  net0;
    bool  net1;
    bool  net2;
    int32_t  net3;
    int32_t  net4;
    int32_t  net5;
    int32_t  net6;
    int32_t net7;
    int32_t  net8;
    int32_t  net9;
    int32_t  net10;
    int32_t  net11;
    int32_t  net12;
    int32_t  net13;
    bool  net14;
    bool  net15;
    int32_t  net16;
//--------- </nets> ----------//
//--------- <zero> ----------//
  int32_t UNCONNECTED_OUTPUT;
  static const int32_t UNCONNECTED_INPUT=0;
  static const int32buffer zerobuffer = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  int32buffer UNCONNECTED_OUTPUT_BUFFER;
//--------- </zero> ----------//
//--------- <controller calls> ----------//
//--------- <object calls> ----------//
  instancepage0_dash_7_i.dsp(net7);
  instancein_i.dsp(net6);
  instancechange__1_i.dsp(net7, net2);
  instanceinv__1_i.dsp(net2, net14);
  instanceand__1_i.dsp(net14, net1Latch, net15);
  instancemux__1_i.dsp(net16Latch, net3Latch, net4Latch, net5Latch, net8Latch, net9Latch, net10Latch, net11Latch, net7, net0);
  instancedemux__2_i.dsp(net6, net13Latch, net0, net15, net13, net12);
  instancedemux__1_i.dsp(net12, net16Latch, net3Latch, net4Latch, net5Latch, net8Latch, net9Latch, net10Latch, net11Latch, net7, net16, net3, net4, net5, net8, net9, net10, net11);
  instance_eq__eq___1_i.dsp(net6, net0, net1);
  instanceout_space_0_i.dsp(net16);
  instanceout_space_1_i.dsp(net3);
  instanceout_space_2_i.dsp(net4);
  instanceout_space_3_i.dsp(net5);
  instanceout_space_4_i.dsp(net8);
  instanceout_space_5_i.dsp(net9);
  instanceout_space_6_i.dsp(net10);
  instanceout_space_7_i.dsp(net11);
  instancecurrent_i.dsp(net0);
//--------- </object calls> ----------//
//--------- <net latch copy> ----------//
net1Latch = net1;
net3Latch = net3;
net4Latch = net4;
net5Latch = net5;
net8Latch = net8;
net9Latch = net9;
net10Latch = net10;
net11Latch = net11;
net13Latch = net13;
net16Latch = net16;
//--------- </net latch copy> ----------//
   outlet_out_space_0 = instanceout_space_0_i._outlet;
   outlet_out_space_1 = instanceout_space_1_i._outlet;
   outlet_out_space_2 = instanceout_space_2_i._outlet;
   outlet_out_space_3 = instanceout_space_3_i._outlet;
   outlet_out_space_4 = instanceout_space_4_i._outlet;
   outlet_out_space_5 = instanceout_space_5_i._outlet;
   outlet_out_space_6 = instanceout_space_6_i._outlet;
   outlet_out_space_7 = instanceout_space_7_i._outlet;
   outlet_current = instancecurrent_i._outlet;
   //
   outlet_name = name[instancepage0_dash_7_i._inlet];
   outlet_pagechange = net2;]]></code.krate>
      <code.midihandler><![CDATA[if ( attr_mididevice > 0 && dev > 0 && attr_mididevice != dev) return;
if ( attr_midiport > 0 && port > 0 && attr_midiport != port) return;]]></code.midihandler>
   </obj.normal>
</objdefs>