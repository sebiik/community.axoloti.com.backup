<objdefs appVersion="1.0.12">
   <obj.normal id="divide" uuid="2bfc8492-70d3-4b02-ab3c-37814ffc3143">
      <sDescription></sDescription>
      <license>GPL</license>
      <inlets>
         <frac32buffer name="C" description="C"/>
         <frac32buffer name="Cs" description="Cs"/>
         <frac32buffer name="D" description="D"/>
         <frac32buffer name="Ds" description="Ds"/>
         <frac32buffer name="E" description="E"/>
         <frac32buffer name="F" description="F"/>
         <frac32 name="Z_FreqHP1" description="Z_FreqHP1"/>
         <frac32buffer name="Fs" description="Fs"/>
         <frac32buffer name="G" description="G"/>
         <frac32 name="Z_FreqHP2" description="Z_FreqHP2"/>
         <frac32buffer name="Gs" description="Gs"/>
         <frac32 name="Z_FreqLP" description="Z_FreqLP"/>
         <frac32buffer name="A" description="A"/>
         <frac32buffer name="As" description="As"/>
         <frac32buffer name="B" description="B"/>
      </inlets>
      <outlets>
         <frac32buffer name="8_ 4 OUT" description="8_ 4 OUT"/>
         <frac32buffer name="SUST OUT" description="SUST OUT"/>
      </outlets>
      <displays/>
      <params>
         <bool32.tgl name="8" description="on"/>
         <frac32.s.map.klineartime.exp2 name="registre 8:a">
            <DefaultValue v="-64.0"/>
         </frac32.s.map.klineartime.exp2>
         <frac32.s.map.kdecaytime.exp name="registre 8:r">
            <DefaultValue v="-64.0"/>
         </frac32.s.map.kdecaytime.exp>
         <bool32.tgl name="4" description="on"/>
         <frac32.s.map.klineartime.exp2 name="registre SUST:a">
            <DefaultValue v="-64.0"/>
         </frac32.s.map.klineartime.exp2>
         <frac32.s.map.kdecaytime.exp name="registre SUST:r">
            <DefaultValue v="40.0"/>
         </frac32.s.map.kdecaytime.exp>
         <bool32.tgl name="SUST" description="on"/>
      </params>
      <attribs>
         <combo name="poly">
            <MenuEntries>
               <string>1</string>
               <string>2</string>
               <string>3</string>
               <string>4</string>
               <string>5</string>
               <string>6</string>
               <string>7</string>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
            </MenuEntries>
            <CEntries>
               <string>1</string>
               <string>2</string>
               <string>3</string>
               <string>4</string>
               <string>5</string>
               <string>6</string>
               <string>7</string>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[   static int32_t * GetInitParams(void){
      static const int32_t p[14]= {
      0,
      134217728,
      134217728,
      134217728,
      -134217728,
      -134217728,
      134217728,
      -134217728,
      0,
      -134217728,
      -134217728,
      134217728,
      83886080,
      0
      };
      return (int32_t *)&p[0];
   }    static const uint32_t NPEXCH = 14;
    ParameterExchange_t PExch[NPEXCH];
    int32_t displayVector[3];
    static const uint32_t NPRESETS = 8;
    static const uint32_t NPRESET_ENTRIES = 32;
    static const uint32_t NMODULATIONSOURCES = 8;
    static const uint32_t NMODULATIONTARGETS = 8;
    int32_t PExModulationPrevVal[attr_poly][NMODULATIONSOURCES];
/* parameter instance indices */
static const int PARAM_INDEX_8_b = 0;
static const int PARAM_INDEX_MIX_gain1 = 1;
static const int PARAM_INDEX_MIX_gain2 = 2;
static const int PARAM_INDEX_MIX_gain3 = 3;
static const int PARAM_INDEX_registre_space_8_a = 4;
static const int PARAM_INDEX_registre_space_8_d = 5;
static const int PARAM_INDEX_registre_space_8_s = 6;
static const int PARAM_INDEX_registre_space_8_r = 7;
static const int PARAM_INDEX_4_b = 8;
static const int PARAM_INDEX_registre_space_SUST_a = 9;
static const int PARAM_INDEX_registre_space_SUST_d = 10;
static const int PARAM_INDEX_registre_space_SUST_s = 11;
static const int PARAM_INDEX_registre_space_SUST_r = 12;
static const int PARAM_INDEX_SUST_b = 13;
   static const int32_t * GetPresets(void){
      static const int32_t p[NPRESETS][NPRESET_ENTRIES][2] = {
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         }
      };
   return &p[0][0][0];
   };
void ApplyPreset(int index){
   if (!index) {
     int i;
     int32_t *p = GetInitParams();
     for(i=0;i<NPEXCH;i++){
        PExParameterChange(&PExch[i],p[i],0xFFEF);
     }
   }
   index--;
   if (index < NPRESETS) {
     PresetParamChange_t *pa = (PresetParamChange_t *)(GetPresets());
     PresetParamChange_t *p = &pa[index*NPRESET_ENTRIES];
       int i;
       for(i=0;i<NPRESET_ENTRIES;i++){
         PresetParamChange_t *pp = &p[i];
         if ((pp->pexIndex>=0)&&(pp->pexIndex<NPEXCH)) {
           PExParameterChange(&PExch[pp->pexIndex],pp->value,0xFFEF);         }
         else break;
       }
   }
}
   static PExModulationTarget_t * GetModulationTable(void){
    static const PExModulationTarget_t PExModulationSources[NMODULATIONSOURCES][NMODULATIONTARGETS] = 
{{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}}};
   return (PExModulationTarget_t *)&PExModulationSources[0][0];
   };
class voice {
   public:
   int polyIndex;
    static const uint32_t NPEXCH = 14;
    ParameterExchange_t PExch[NPEXCH];
    int32_t displayVector[3];
    static const uint32_t NPRESETS = 8;
    static const uint32_t NPRESET_ENTRIES = 32;
    static const uint32_t NMODULATIONSOURCES = 8;
    static const uint32_t NMODULATIONTARGETS = 8;
/* modsource defines */
/* parameter instance indices */
static const int PARAM_INDEX_8_b = 0;
static const int PARAM_INDEX_MIX_gain1 = 1;
static const int PARAM_INDEX_MIX_gain2 = 2;
static const int PARAM_INDEX_MIX_gain3 = 3;
static const int PARAM_INDEX_registre_space_8_a = 4;
static const int PARAM_INDEX_registre_space_8_d = 5;
static const int PARAM_INDEX_registre_space_8_s = 6;
static const int PARAM_INDEX_registre_space_8_r = 7;
static const int PARAM_INDEX_4_b = 8;
static const int PARAM_INDEX_registre_space_SUST_a = 9;
static const int PARAM_INDEX_registre_space_SUST_d = 10;
static const int PARAM_INDEX_registre_space_SUST_s = 11;
static const int PARAM_INDEX_registre_space_SUST_r = 12;
static const int PARAM_INDEX_SUST_b = 13;
/* controller classes */
/* object classes */
class instanceC{
  public: // v1
  voice *parent;
int32buffer _inlet;

  public: void Init(voice * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32buffer  & outlet_inlet  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   outlet_inlet[buffer_index] = _inlet[buffer_index];
}
}
}
;class instancekeyb__1{
  public: // v1
  voice *parent;
int8_t _note;
int32_t _gate;
int32_t _gate2;
uint8_t _velo;
uint8_t _rvelo;

  public: void Init(voice * _parent) {
parent = _parent;
_gate = 0;
_note = 0;

}
  public: void Dispose() {
}
  public: void dsp (int32_t  & outlet_note,
bool  & outlet_gate,
bool  & outlet_gate2,
int32_t  & outlet_velocity,
int32_t  & outlet_releaseVelocity  ){
outlet_note= _note<<21;
outlet_gate= _gate;
outlet_gate2= _gate2;
_gate2 = _gate;
outlet_velocity= _velo<<20;
outlet_releaseVelocity= _rvelo<<20;

}
void MidiInHandler(midi_device_t dev, uint8_t port, uint8_t status, uint8_t data1, uint8_t data2) {
{
if ((status == MIDI_NOTE_ON + attr_midichannel) && (data2)) {
  _velo = data2;
  _note = data1-64;
  _gate = 1<<27;
  _gate2 = 0;
} else if (((status == MIDI_NOTE_ON + attr_midichannel) && (!data2))||
          (status == MIDI_NOTE_OFF + attr_midichannel)) {
  if (_note == data1-64) {
    _rvelo = data2;
    _gate = 0;
  }
} else if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == MIDI_C_ALL_NOTES_OFF)) {
  _gate = 0;
}
}
}
}
;class instancephasorSelect4__1{
  public: // v1
  voice *parent;
  public: void Init(voice * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_note,
const int32buffer  inlet_C,
const int32buffer  inlet_Cs,
const int32buffer  inlet_D,
const int32buffer  inlet_Ds,
const int32buffer  inlet_E,
const int32buffer  inlet_F,
const int32buffer  inlet_Fs,
const int32buffer  inlet_G,
const int32buffer  inlet_Gs,
const int32buffer  inlet_A,
const int32buffer  inlet_As,
const int32buffer  inlet_B,
int32buffer  & outlet_out8,
int32buffer  & outlet_out4,
int32buffer  & outlet_out16  ){
// _____________________________________________________________________
//Krate
int note = (inlet_note >> 21) + 64;
int oct = note / 12;


int n12 = note - 12 * oct;
int offset = oct - 1;
if(offset < 0) offset = 0;
const int32_t* in = inlet_C;
     if(n12 ==  1) in = inlet_Cs;
else if(n12 ==  2) in = inlet_D;
else if(n12 ==  3) in = inlet_Ds;
else if(n12 ==  4) in = inlet_E;
else if(n12 ==  5) in = inlet_F;
else if(n12 ==  6) in = inlet_Fs;
else if(n12 ==  7) in = inlet_G;
else if(n12 ==  8) in = inlet_Gs;
else if(n12 ==  9) in = inlet_A;
else if(n12 == 10) in = inlet_As;
else if(n12 == 11) in = inlet_B;

for(int k = 0; k < BUFSIZE; k++){
  outlet_out8[k] = (in[k] << offset) & 0x07FFFFFF;
  outlet_out4[k] = (in[k] << offset+1) & 0x07FFFFFF;
  outlet_out16[k] = (in[k] << offset-1) & 0x07FFFFFF;
}
}
}
;class instancePhase_space_to_space_Square{
  public: // v1
  voice *parent;
    static const uint32_t NPEXCH = 1;
    ParameterExchange_t PExch[NPEXCH];
    int32_t displayVector[3];
    static const uint32_t NPRESETS = 8;
    static const uint32_t NPRESET_ENTRIES = 32;
    static const uint32_t NMODULATIONSOURCES = 8;
    static const uint32_t NMODULATIONTARGETS = 8;
    int32_t PExModulationPrevVal[1][NMODULATIONSOURCES];
/* modsource defines */
/* parameter instance indices */
static const int PARAM_INDEX_schmitttrigger__1_hysteresis = 0;
/* controller classes */
/* object classes */
class instancephase{
  public: // v1
  instancePhase_space_to_space_Square *parent;
int32buffer _inlet;

  public: void Init(instancePhase_space_to_space_Square * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32buffer  & outlet_inlet  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   outlet_inlet[buffer_index] = _inlet[buffer_index];
}
}
}
;class instancesin__1{
  public: // v1
  instancePhase_space_to_space_Square *parent;
  public: void Init(instancePhase_space_to_space_Square * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_phase,
int32buffer  & outlet_out  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
       int32_t r;
       SINE2TINTERP(inlet_phase[buffer_index]<<5,r)
       outlet_out[buffer_index]= (r>>4);

}
}
}
;class instanceschmitttrigger__1{
  public: // v1
  instancePhase_space_to_space_Square *parent;
KeyValuePair KVP_instanceschmitttrigger__1_hysteresis;
  static const int blepvoices = 8;
  int16_t *oscp[blepvoices];
  uint32_t nextvoice;
  int32_t i0;

  public: void Init(instancePhase_space_to_space_Square * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX_schmitttrigger__1_hysteresis].pfunction = pfun_unsigned_clamp;
  SetKVP_IPVP(&KVP_instanceschmitttrigger__1_hysteresis,ObjectKvpRoot, "schmitttrigger_1" ,&parent->PExch[PARAM_INDEX_schmitttrigger__1_hysteresis], 0, 1<<27);
  KVP_RegisterObject(&KVP_instanceschmitttrigger__1_hysteresis);
    int j;
    for(j=0;j<blepvoices;j++)
      oscp[j] = &blept[BLEPSIZE-1];
   nextvoice = 0;
   i0 = 0;

}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_in,
int32buffer  & outlet_out,
int param_hysteresis  ){
  int j;
  int16_t *lastblep = &blept[BLEPSIZE-1];
  for(j=0;j<BUFSIZE;j++){
    int i;
    int i1 = inlet_in[j]>>2;
    i1 += (nextvoice&1)?param_hysteresis:-param_hysteresis;
    int32_t sum=0;
    if ((i1>0)&&!(i0>0)){   // dispatch
      nextvoice = (nextvoice+1)&(blepvoices-1);
      int32_t x = 64-((-i0<<6)/(i1-i0));
      oscp[nextvoice] = &blept[x];
    } else if ((i1<0)&&!(i0<0)){   // dispatch
      nextvoice = (nextvoice+1)&(blepvoices-1);
      int32_t x = 64-((i0<<6)/(i0-i1));
      oscp[nextvoice] = &blept[x];
    }
    i0 = i1;
    for(i=0;i<blepvoices;i++){ // sample
      int16_t *t = oscp[i];
      if (i&1) sum+=*t; else sum-=*t; 
      t+=64;
      if (t>=lastblep) t=lastblep;
      oscp[i]=t;
    }
    sum -= ((((nextvoice+1)&1)<<1)-1)<<13;
    outlet_out[j]=sum<<13;
  }
}
}
;class instancesquare{
  public: // v1
  instancePhase_space_to_space_Square *parent;
int32buffer _outlet;

  public: void Init(instancePhase_space_to_space_Square * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_outlet  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   _outlet[buffer_index] = inlet_outlet[buffer_index];

}
}
}
;/* controller instances */
/* object instances */
     instancephase instancephase_i;
     instancesin__1 instancesin__1_i;
     instanceschmitttrigger__1 instanceschmitttrigger__1_i;
     instancesquare instancesquare_i;
/* net latches */
static const int polyIndex = 0;
   static int32_t * GetInitParams(void){
      static const int32_t p[1]= {
      0
      };
      return (int32_t *)&p[0];
   }   static const int32_t * GetPresets(void){
      static const int32_t p[NPRESETS][NPRESET_ENTRIES][2] = {
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         }
      };
   return &p[0][0][0];
   };
void ApplyPreset(int index){
   if (!index) {
     int i;
     int32_t *p = GetInitParams();
     for(i=0;i<NPEXCH;i++){
        PExParameterChange(&PExch[i],p[i],0xFFEF);
     }
   }
   index--;
   if (index < NPRESETS) {
     PresetParamChange_t *pa = (PresetParamChange_t *)(GetPresets());
     PresetParamChange_t *p = &pa[index*NPRESET_ENTRIES];
       int i;
       for(i=0;i<NPRESET_ENTRIES;i++){
         PresetParamChange_t *pp = &p[i];
         if ((pp->pexIndex>=0)&&(pp->pexIndex<NPEXCH)) {
           PExParameterChange(&PExch[pp->pexIndex],pp->value,0xFFEF);         }
         else break;
       }
   }
}
   static PExModulationTarget_t * GetModulationTable(void){
    static const PExModulationTarget_t PExModulationSources[NMODULATIONSOURCES][NMODULATIONTARGETS] = 
{{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}}};
   return (PExModulationTarget_t *)&PExModulationSources[0][0];
   };

  public: void Init(voice * _parent) {
parent = _parent;
   int i;
   int j;
   const int32_t *p;
   p = GetInitParams();
   for(j=0;j<1;j++){
      PExch[j].value = p[j];
      PExch[j].modvalue = p[j];
      PExch[j].signals = 0;
      PExch[j].pfunction = 0;
   }
   int32_t *pp = &PExModulationPrevVal[0][0];
   for(j=0;j<attr_poly*NMODULATIONSOURCES;j++){
      *pp = 0; pp++;
   }
     displayVector[0] = 0x446F7841;
     displayVector[1] = 0;
     displayVector[2] = 0;
   instancephase_i.Init(this );
   instancesin__1_i.Init(this );
   instanceschmitttrigger__1_i.Init(this );
   instancesquare_i.Init(this );
      int k;
      for (k = 0; k < NPEXCH; k++) {
        if (PExch[k].pfunction){
          (PExch[k].pfunction)(&PExch[k]);
        } else {
          PExch[k].finalvalue = PExch[k].value;
        }
      }

}
  public: void Dispose() {
   instancesquare_i.Dispose();
   instanceschmitttrigger__1_i.Dispose();
   instancesin__1_i.Dispose();
   instancephase_i.Dispose();

}
  public: void dsp (const int32buffer  inlet_phase,
int32buffer  & outlet_square  ){
int i; /*...*/
   for(i=0;i<BUFSIZE;i++) instancephase_i._inlet[i] = inlet_phase[i];
//--------- <nets> -----------//
    int32buffer  net0;
    int32buffer  net1;
    int32buffer  net2;
//--------- </nets> ----------//
//--------- <zero> ----------//
  int32_t UNCONNECTED_OUTPUT;
  static const int32_t UNCONNECTED_INPUT=0;
  static const int32buffer zerobuffer = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  int32buffer UNCONNECTED_OUTPUT_BUFFER;
//--------- </zero> ----------//
//--------- <controller calls> ----------//
//--------- <object calls> ----------//
  instancephase_i.dsp(net1);
  instancesin__1_i.dsp(net1, net0);
  instanceschmitttrigger__1_i.dsp(net0, net2, PExch[PARAM_INDEX_schmitttrigger__1_hysteresis].finalvalue);
  instancesquare_i.dsp(net2);
//--------- </object calls> ----------//
//--------- <net latch copy> ----------//
//--------- </net latch copy> ----------//
      for(i=0;i<BUFSIZE;i++) outlet_square[i] = instancesquare_i._outlet[i];

}
void MidiInHandler(midi_device_t dev, uint8_t port, uint8_t status, uint8_t data1, uint8_t data2) {
{
if ( attr_mididevice > 0 && dev > 0 && attr_mididevice != dev) return;
if ( attr_midiport > 0 && port > 0 && attr_midiport != port) return;
}
}
}
;class instanceFilter8{
  public: // v1
  voice *parent;
    static const uint32_t NPEXCH = 4;
    ParameterExchange_t PExch[NPEXCH];
    int32_t displayVector[3];
    static const uint32_t NPRESETS = 8;
    static const uint32_t NPRESET_ENTRIES = 32;
    static const uint32_t NMODULATIONSOURCES = 8;
    static const uint32_t NMODULATIONTARGETS = 8;
    int32_t PExModulationPrevVal[1][NMODULATIONSOURCES];
/* modsource defines */
/* parameter instance indices */
static const int PARAM_INDEX_hp__1_pitch = 0;
static const int PARAM_INDEX_hp__1_reso = 1;
static const int PARAM_INDEX_hp1__1_freq = 2;
static const int PARAM_INDEX_LOW_space_PASS_freq = 3;
/* controller classes */
/* object classes */
class instanceSquare{
  public: // v1
  instanceFilter8 *parent;
int32buffer _inlet;

  public: void Init(instanceFilter8 * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32buffer  & outlet_inlet  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   outlet_inlet[buffer_index] = _inlet[buffer_index];
}
}
}
;class instancehp__1{
  public: // v1
  instanceFilter8 *parent;
KeyValuePair KVP_instancehp__1_pitch;
KeyValuePair KVP_instancehp__1_reso;
biquad_state bs;biquad_coefficients bc;

  public: void Init(instanceFilter8 * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX_hp__1_pitch].pfunction = pfun_signed_clamp;
  SetKVP_IPVP(&KVP_instancehp__1_pitch,ObjectKvpRoot, "hp_1:pitch" ,&parent->PExch[PARAM_INDEX_hp__1_pitch], -1<<27, 1<<27);
  KVP_RegisterObject(&KVP_instancehp__1_pitch);
parent->PExch[PARAM_INDEX_hp__1_reso].pfunction = pfun_unsigned_clamp;
  SetKVP_IPVP(&KVP_instancehp__1_reso,ObjectKvpRoot, "hp_1:reso" ,&parent->PExch[PARAM_INDEX_hp__1_reso], 0, 1<<27);
  KVP_RegisterObject(&KVP_instancehp__1_reso);
biquad_clearstate(&bs);

}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_in,
const int32_t  inlet_pitch,
const int32_t  inlet_reso,
int32buffer  & outlet_out,
int param_pitch,
int param_reso  ){
      int32_t freq;
      MTOF(param_pitch + inlet_pitch,freq);
      biquad_hp_coefs(&bc,freq,INT_MAX - (__USAT(inlet_reso + param_reso,27)<<4));
      biquad_dsp(&bs,&bc,inlet_in,outlet_out);

}
}
;class instancesatp__1{
  public: // v1
  instanceFilter8 *parent;
  public: void Init(instanceFilter8 * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_in,
int32buffer  & outlet_out  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
outlet_out[buffer_index]= __USAT(inlet_in[buffer_index],27);
}
}
}
;class instancehp1__1{
  public: // v1
  instanceFilter8 *parent;
KeyValuePair KVP_instancehp1__1_freq;
int32_t val;

  public: void Init(instanceFilter8 * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX_hp1__1_freq].pfunction = pfun_unsigned_clamp;
  SetKVP_IPVP(&KVP_instancehp1__1_freq,ObjectKvpRoot, "hp1_1" ,&parent->PExch[PARAM_INDEX_hp1__1_freq], 0, 1<<27);
  KVP_RegisterObject(&KVP_instancehp1__1_freq);
val = 0;

}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_in,
const int32_t  inlet_freq,
int32buffer  & outlet_out,
int param_freq  ){
int32_t f;
   MTOF(param_freq+inlet_freq,f);

int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   val = ___SMMLA((inlet_in[buffer_index]-val)<<1,f,val);
   outlet_out[buffer_index]= inlet_in[buffer_index]-val;

}
}
}
;class instanceLOW_space_PASS{
  public: // v1
  instanceFilter8 *parent;
KeyValuePair KVP_instanceLOW_space_PASS_freq;
int32_t val;

  public: void Init(instanceFilter8 * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX_LOW_space_PASS_freq].pfunction = pfun_unsigned_clamp;
  SetKVP_IPVP(&KVP_instanceLOW_space_PASS_freq,ObjectKvpRoot, "LOW PASS" ,&parent->PExch[PARAM_INDEX_LOW_space_PASS_freq], 0, 1<<27);
  KVP_RegisterObject(&KVP_instanceLOW_space_PASS_freq);
val = 0;

}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_in,
const int32_t  inlet_freq,
int32buffer  & outlet_out,
int param_freq  ){
int32_t f;
   MTOF(param_freq+inlet_freq,f);

int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   val = ___SMMLA((inlet_in[buffer_index]-val)<<1,f,val);
   outlet_out[buffer_index]= val;

}
}
}
;class instanceString{
  public: // v1
  instanceFilter8 *parent;
int32buffer _outlet;

  public: void Init(instanceFilter8 * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_outlet  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   _outlet[buffer_index] = inlet_outlet[buffer_index];

}
}
}
;class instanceFreqHP1{
  public: // v1
  instanceFilter8 *parent;
int32_t _inlet;

  public: void Init(instanceFilter8 * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & outlet_inlet  ){
  outlet_inlet = _inlet;

}
}
;class instanceFreqHP2{
  public: // v1
  instanceFilter8 *parent;
int32_t _inlet;

  public: void Init(instanceFilter8 * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & outlet_inlet  ){
  outlet_inlet = _inlet;

}
}
;class instanceFreqLP{
  public: // v1
  instanceFilter8 *parent;
int32_t _inlet;

  public: void Init(instanceFilter8 * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & outlet_inlet  ){
  outlet_inlet = _inlet;

}
}
;/* controller instances */
/* object instances */
     instanceSquare instanceSquare_i;
     instancehp__1 instancehp__1_i;
     instancesatp__1 instancesatp__1_i;
     instancehp1__1 instancehp1__1_i;
     instanceLOW_space_PASS instanceLOW_space_PASS_i;
     instanceString instanceString_i;
     instanceFreqHP1 instanceFreqHP1_i;
     instanceFreqHP2 instanceFreqHP2_i;
     instanceFreqLP instanceFreqLP_i;
/* net latches */
    int32_t  net5Latch;
    int32_t  net6Latch;
    int32_t  net7Latch;
static const int polyIndex = 0;
   static int32_t * GetInitParams(void){
      static const int32_t p[4]= {
      0,
      0,
      0,
      0
      };
      return (int32_t *)&p[0];
   }   static const int32_t * GetPresets(void){
      static const int32_t p[NPRESETS][NPRESET_ENTRIES][2] = {
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         }
      };
   return &p[0][0][0];
   };
void ApplyPreset(int index){
   if (!index) {
     int i;
     int32_t *p = GetInitParams();
     for(i=0;i<NPEXCH;i++){
        PExParameterChange(&PExch[i],p[i],0xFFEF);
     }
   }
   index--;
   if (index < NPRESETS) {
     PresetParamChange_t *pa = (PresetParamChange_t *)(GetPresets());
     PresetParamChange_t *p = &pa[index*NPRESET_ENTRIES];
       int i;
       for(i=0;i<NPRESET_ENTRIES;i++){
         PresetParamChange_t *pp = &p[i];
         if ((pp->pexIndex>=0)&&(pp->pexIndex<NPEXCH)) {
           PExParameterChange(&PExch[pp->pexIndex],pp->value,0xFFEF);         }
         else break;
       }
   }
}
   static PExModulationTarget_t * GetModulationTable(void){
    static const PExModulationTarget_t PExModulationSources[NMODULATIONSOURCES][NMODULATIONTARGETS] = 
{{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}}};
   return (PExModulationTarget_t *)&PExModulationSources[0][0];
   };

  public: void Init(voice * _parent) {
parent = _parent;
   int i;
   int j;
   const int32_t *p;
   p = GetInitParams();
   for(j=0;j<4;j++){
      PExch[j].value = p[j];
      PExch[j].modvalue = p[j];
      PExch[j].signals = 0;
      PExch[j].pfunction = 0;
   }
   int32_t *pp = &PExModulationPrevVal[0][0];
   for(j=0;j<attr_poly*NMODULATIONSOURCES;j++){
      *pp = 0; pp++;
   }
     displayVector[0] = 0x446F7841;
     displayVector[1] = 0;
     displayVector[2] = 0;
   instanceSquare_i.Init(this );
   instancehp__1_i.Init(this );
   instancesatp__1_i.Init(this );
   instancehp1__1_i.Init(this );
   instanceLOW_space_PASS_i.Init(this );
   instanceString_i.Init(this );
   instanceFreqHP1_i.Init(this );
   instanceFreqHP2_i.Init(this );
   instanceFreqLP_i.Init(this );
      int k;
      for (k = 0; k < NPEXCH; k++) {
        if (PExch[k].pfunction){
          (PExch[k].pfunction)(&PExch[k]);
        } else {
          PExch[k].finalvalue = PExch[k].value;
        }
      }

}
  public: void Dispose() {
   instanceFreqLP_i.Dispose();
   instanceFreqHP2_i.Dispose();
   instanceFreqHP1_i.Dispose();
   instanceString_i.Dispose();
   instanceLOW_space_PASS_i.Dispose();
   instancehp1__1_i.Dispose();
   instancesatp__1_i.Dispose();
   instancehp__1_i.Dispose();
   instanceSquare_i.Dispose();

}
  public: void dsp (const int32buffer  inlet_Square,
const int32_t  inlet_FreqHP1,
const int32_t  inlet_FreqHP2,
const int32_t  inlet_FreqLP,
int32buffer  & outlet_String  ){
int i; /*...*/
   for(i=0;i<BUFSIZE;i++) instanceSquare_i._inlet[i] = inlet_Square[i];
   instanceFreqHP1_i._inlet = inlet_FreqHP1;
   instanceFreqHP2_i._inlet = inlet_FreqHP2;
   instanceFreqLP_i._inlet = inlet_FreqLP;
//--------- <nets> -----------//
    int32buffer  net0;
    int32buffer  net1;
    int32buffer  net2;
    int32buffer  net3;
    int32buffer  net4;
    int32_t  net5;
    int32_t  net6;
    int32_t  net7;
//--------- </nets> ----------//
//--------- <zero> ----------//
  int32_t UNCONNECTED_OUTPUT;
  static const int32_t UNCONNECTED_INPUT=0;
  static const int32buffer zerobuffer = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  int32buffer UNCONNECTED_OUTPUT_BUFFER;
//--------- </zero> ----------//
//--------- <controller calls> ----------//
//--------- <object calls> ----------//
  instanceSquare_i.dsp(net3);
  instancehp__1_i.dsp(net3, net5Latch, 0 , net0, PExch[PARAM_INDEX_hp__1_pitch].finalvalue, PExch[PARAM_INDEX_hp__1_reso].finalvalue);
  instancesatp__1_i.dsp(net0, net1);
  instancehp1__1_i.dsp(net1, net6Latch, net2, PExch[PARAM_INDEX_hp1__1_freq].finalvalue);
  instanceLOW_space_PASS_i.dsp(net2, net7Latch, net4, PExch[PARAM_INDEX_LOW_space_PASS_freq].finalvalue);
  instanceString_i.dsp(net4);
  instanceFreqHP1_i.dsp(net5);
  instanceFreqHP2_i.dsp(net6);
  instanceFreqLP_i.dsp(net7);
//--------- </object calls> ----------//
//--------- <net latch copy> ----------//
net5Latch = net5;
net6Latch = net6;
net7Latch = net7;
//--------- </net latch copy> ----------//
      for(i=0;i<BUFSIZE;i++) outlet_String[i] = instanceString_i._outlet[i];

}
void MidiInHandler(midi_device_t dev, uint8_t port, uint8_t status, uint8_t data1, uint8_t data2) {
{
if ( attr_mididevice > 0 && dev > 0 && attr_mididevice != dev) return;
if ( attr_midiport > 0 && port > 0 && attr_midiport != port) return;
}
}
}
;class instance8{
  public: // v1
  voice *parent;
KeyValuePair KVP_instance8_b;
  public: void Init(voice * _parent) {
parent = _parent;
    parent->PExch[PARAM_INDEX_8_b].signals = 0;
    SetKVP_IPVP(&KVP_instance8_b,ObjectKvpRoot, "KVP_instance8_b" ,&parent->PExch[PARAM_INDEX_8_b],0,65535);
  KVP_RegisterObject(&KVP_instance8_b);
}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_i1,
int32buffer  & outlet_o,
int param_b  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   outlet_o[buffer_index]= (param_b)?inlet_i1[buffer_index]:0;

}
}
}
;class instanceMIX{
  public: // v1
  voice *parent;
KeyValuePair KVP_instanceMIX_gain1;
KeyValuePair KVP_instanceMIX_gain2;
KeyValuePair KVP_instanceMIX_gain3;
  public: void Init(voice * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX_MIX_gain1].pfunction = pfun_unsigned_clamp_fullrange;
  SetKVP_IPVP(&KVP_instanceMIX_gain1,ObjectKvpRoot, "MIX:gain1" ,&parent->PExch[PARAM_INDEX_MIX_gain1], 0, 1<<27);
  KVP_RegisterObject(&KVP_instanceMIX_gain1);
parent->PExch[PARAM_INDEX_MIX_gain2].pfunction = pfun_unsigned_clamp_fullrange;
  SetKVP_IPVP(&KVP_instanceMIX_gain2,ObjectKvpRoot, "MIX:gain2" ,&parent->PExch[PARAM_INDEX_MIX_gain2], 0, 1<<27);
  KVP_RegisterObject(&KVP_instanceMIX_gain2);
parent->PExch[PARAM_INDEX_MIX_gain3].pfunction = pfun_unsigned_clamp_fullrange;
  SetKVP_IPVP(&KVP_instanceMIX_gain3,ObjectKvpRoot, "MIX:gain3" ,&parent->PExch[PARAM_INDEX_MIX_gain3], 0, 1<<27);
  KVP_RegisterObject(&KVP_instanceMIX_gain3);
}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_bus__in,
const int32buffer  inlet_in1,
const int32buffer  inlet_in2,
const int32buffer  inlet_in3,
int32buffer  & outlet_out,
int param_gain1,
int param_gain2,
int param_gain3  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   int32_t accum = ___SMMUL(inlet_in1[buffer_index],param_gain1);
   accum = ___SMMLA(inlet_in2[buffer_index],param_gain2,accum);
;   accum = ___SMMLA(inlet_in3[buffer_index],param_gain3,accum);
;   outlet_out[buffer_index]=  __SSAT(inlet_bus__in[buffer_index] + (accum<<1),28);

}
}
}
;class instanceregistre_space_8{
  public: // v1
  voice *parent;
KeyValuePair KVP_instanceregistre_space_8_a;
KeyValuePair KVP_instanceregistre_space_8_d;
KeyValuePair KVP_instanceregistre_space_8_s;
KeyValuePair KVP_instanceregistre_space_8_r;
int8_t stage;
int ntrig;
int32_t val;

  public: void Init(voice * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX_registre_space_8_a].pfunction = pfun_kexpltime;
  SetKVP_IPVP(&KVP_instanceregistre_space_8_a,ObjectKvpRoot, "registre 8:a" ,&parent->PExch[PARAM_INDEX_registre_space_8_a], -1<<27, 1<<27);
  KVP_RegisterObject(&KVP_instanceregistre_space_8_a);
parent->PExch[PARAM_INDEX_registre_space_8_d].pfunction = pfun_kexpdtime;
  SetKVP_IPVP(&KVP_instanceregistre_space_8_d,ObjectKvpRoot, "registre 8:d" ,&parent->PExch[PARAM_INDEX_registre_space_8_d], -1<<27, 1<<27);
  KVP_RegisterObject(&KVP_instanceregistre_space_8_d);
parent->PExch[PARAM_INDEX_registre_space_8_s].pfunction = pfun_unsigned_clamp;
  SetKVP_IPVP(&KVP_instanceregistre_space_8_s,ObjectKvpRoot, "registre 8:s" ,&parent->PExch[PARAM_INDEX_registre_space_8_s], 0, 1<<27);
  KVP_RegisterObject(&KVP_instanceregistre_space_8_s);
parent->PExch[PARAM_INDEX_registre_space_8_r].pfunction = pfun_kexpdtime;
  SetKVP_IPVP(&KVP_instanceregistre_space_8_r,ObjectKvpRoot, "registre 8:r" ,&parent->PExch[PARAM_INDEX_registre_space_8_r], -1<<27, 1<<27);
  KVP_RegisterObject(&KVP_instanceregistre_space_8_r);
stage = 0;
ntrig = 0;
val = 0;

}
  public: void Dispose() {
}
  public: void dsp (const bool  inlet_gate,
int32_t  & outlet_env,
int param_a,
int param_d,
int param_s,
int param_r  ){
if ((inlet_gate>0) && !ntrig) {
   stage = 1;
   ntrig = 1;
}
if (!(inlet_gate>0) && ntrig) {
   stage = 0;
   ntrig=0;
}
if (stage == 0){
   val = ___SMMUL(val,param_r)<<1;
} else if (stage == 1){
   val = val + param_a;
   if (val<0) {
      val =0x7FFFFFFF;
      stage = 2;
   }
} else if (stage == 2) {
   val = (param_s<<4) + (___SMMUL(val - (param_s<<4),param_d)<<1);
}

outlet_env = val>>4;
}
}
;class instancevca__8{
  public: // v1
  voice *parent;
   int32_t prev;
    int32_t step;

  public: void Init(voice * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_v,
const int32buffer  inlet_a,
int32buffer  & outlet_o  ){
   step = (inlet_v - prev)>>4;
   int32_t i = prev;
   prev = inlet_v;

int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   outlet_o[buffer_index] =  ___SMMUL(inlet_a[buffer_index],i)<<5;
   i += step;

}
}
}
;class instance8___space_4_space_OUT{
  public: // v1
  voice *parent;
int32buffer _outlet;

  public: void Init(voice * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_outlet  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   _outlet[buffer_index] = inlet_outlet[buffer_index];

}
}
}
;class instanceCs{
  public: // v1
  voice *parent;
int32buffer _inlet;

  public: void Init(voice * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32buffer  & outlet_inlet  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   outlet_inlet[buffer_index] = _inlet[buffer_index];
}
}
}
;class instanceD{
  public: // v1
  voice *parent;
int32buffer _inlet;

  public: void Init(voice * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32buffer  & outlet_inlet  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   outlet_inlet[buffer_index] = _inlet[buffer_index];
}
}
}
;class instancePhase_space_to_space_Square__{
  public: // v1
  voice *parent;
    static const uint32_t NPEXCH = 1;
    ParameterExchange_t PExch[NPEXCH];
    int32_t displayVector[3];
    static const uint32_t NPRESETS = 8;
    static const uint32_t NPRESET_ENTRIES = 32;
    static const uint32_t NMODULATIONSOURCES = 8;
    static const uint32_t NMODULATIONTARGETS = 8;
    int32_t PExModulationPrevVal[1][NMODULATIONSOURCES];
/* modsource defines */
/* parameter instance indices */
static const int PARAM_INDEX_schmitttrigger__1_hysteresis = 0;
/* controller classes */
/* object classes */
class instancephase{
  public: // v1
  instancePhase_space_to_space_Square__ *parent;
int32buffer _inlet;

  public: void Init(instancePhase_space_to_space_Square__ * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32buffer  & outlet_inlet  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   outlet_inlet[buffer_index] = _inlet[buffer_index];
}
}
}
;class instancesin__1{
  public: // v1
  instancePhase_space_to_space_Square__ *parent;
  public: void Init(instancePhase_space_to_space_Square__ * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_phase,
int32buffer  & outlet_out  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
       int32_t r;
       SINE2TINTERP(inlet_phase[buffer_index]<<5,r)
       outlet_out[buffer_index]= (r>>4);

}
}
}
;class instanceschmitttrigger__1{
  public: // v1
  instancePhase_space_to_space_Square__ *parent;
KeyValuePair KVP_instanceschmitttrigger__1_hysteresis;
  static const int blepvoices = 8;
  int16_t *oscp[blepvoices];
  uint32_t nextvoice;
  int32_t i0;

  public: void Init(instancePhase_space_to_space_Square__ * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX_schmitttrigger__1_hysteresis].pfunction = pfun_unsigned_clamp;
  SetKVP_IPVP(&KVP_instanceschmitttrigger__1_hysteresis,ObjectKvpRoot, "schmitttrigger_1" ,&parent->PExch[PARAM_INDEX_schmitttrigger__1_hysteresis], 0, 1<<27);
  KVP_RegisterObject(&KVP_instanceschmitttrigger__1_hysteresis);
    int j;
    for(j=0;j<blepvoices;j++)
      oscp[j] = &blept[BLEPSIZE-1];
   nextvoice = 0;
   i0 = 0;

}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_in,
int32buffer  & outlet_out,
int param_hysteresis  ){
  int j;
  int16_t *lastblep = &blept[BLEPSIZE-1];
  for(j=0;j<BUFSIZE;j++){
    int i;
    int i1 = inlet_in[j]>>2;
    i1 += (nextvoice&1)?param_hysteresis:-param_hysteresis;
    int32_t sum=0;
    if ((i1>0)&&!(i0>0)){   // dispatch
      nextvoice = (nextvoice+1)&(blepvoices-1);
      int32_t x = 64-((-i0<<6)/(i1-i0));
      oscp[nextvoice] = &blept[x];
    } else if ((i1<0)&&!(i0<0)){   // dispatch
      nextvoice = (nextvoice+1)&(blepvoices-1);
      int32_t x = 64-((i0<<6)/(i0-i1));
      oscp[nextvoice] = &blept[x];
    }
    i0 = i1;
    for(i=0;i<blepvoices;i++){ // sample
      int16_t *t = oscp[i];
      if (i&1) sum+=*t; else sum-=*t; 
      t+=64;
      if (t>=lastblep) t=lastblep;
      oscp[i]=t;
    }
    sum -= ((((nextvoice+1)&1)<<1)-1)<<13;
    outlet_out[j]=sum<<13;
  }
}
}
;class instancesquare{
  public: // v1
  instancePhase_space_to_space_Square__ *parent;
int32buffer _outlet;

  public: void Init(instancePhase_space_to_space_Square__ * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_outlet  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   _outlet[buffer_index] = inlet_outlet[buffer_index];

}
}
}
;/* controller instances */
/* object instances */
     instancephase instancephase_i;
     instancesin__1 instancesin__1_i;
     instanceschmitttrigger__1 instanceschmitttrigger__1_i;
     instancesquare instancesquare_i;
/* net latches */
static const int polyIndex = 0;
   static int32_t * GetInitParams(void){
      static const int32_t p[1]= {
      0
      };
      return (int32_t *)&p[0];
   }   static const int32_t * GetPresets(void){
      static const int32_t p[NPRESETS][NPRESET_ENTRIES][2] = {
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         }
      };
   return &p[0][0][0];
   };
void ApplyPreset(int index){
   if (!index) {
     int i;
     int32_t *p = GetInitParams();
     for(i=0;i<NPEXCH;i++){
        PExParameterChange(&PExch[i],p[i],0xFFEF);
     }
   }
   index--;
   if (index < NPRESETS) {
     PresetParamChange_t *pa = (PresetParamChange_t *)(GetPresets());
     PresetParamChange_t *p = &pa[index*NPRESET_ENTRIES];
       int i;
       for(i=0;i<NPRESET_ENTRIES;i++){
         PresetParamChange_t *pp = &p[i];
         if ((pp->pexIndex>=0)&&(pp->pexIndex<NPEXCH)) {
           PExParameterChange(&PExch[pp->pexIndex],pp->value,0xFFEF);         }
         else break;
       }
   }
}
   static PExModulationTarget_t * GetModulationTable(void){
    static const PExModulationTarget_t PExModulationSources[NMODULATIONSOURCES][NMODULATIONTARGETS] = 
{{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}}};
   return (PExModulationTarget_t *)&PExModulationSources[0][0];
   };

  public: void Init(voice * _parent) {
parent = _parent;
   int i;
   int j;
   const int32_t *p;
   p = GetInitParams();
   for(j=0;j<1;j++){
      PExch[j].value = p[j];
      PExch[j].modvalue = p[j];
      PExch[j].signals = 0;
      PExch[j].pfunction = 0;
   }
   int32_t *pp = &PExModulationPrevVal[0][0];
   for(j=0;j<attr_poly*NMODULATIONSOURCES;j++){
      *pp = 0; pp++;
   }
     displayVector[0] = 0x446F7841;
     displayVector[1] = 0;
     displayVector[2] = 0;
   instancephase_i.Init(this );
   instancesin__1_i.Init(this );
   instanceschmitttrigger__1_i.Init(this );
   instancesquare_i.Init(this );
      int k;
      for (k = 0; k < NPEXCH; k++) {
        if (PExch[k].pfunction){
          (PExch[k].pfunction)(&PExch[k]);
        } else {
          PExch[k].finalvalue = PExch[k].value;
        }
      }

}
  public: void Dispose() {
   instancesquare_i.Dispose();
   instanceschmitttrigger__1_i.Dispose();
   instancesin__1_i.Dispose();
   instancephase_i.Dispose();

}
  public: void dsp (const int32buffer  inlet_phase,
int32buffer  & outlet_square  ){
int i; /*...*/
   for(i=0;i<BUFSIZE;i++) instancephase_i._inlet[i] = inlet_phase[i];
//--------- <nets> -----------//
    int32buffer  net0;
    int32buffer  net1;
    int32buffer  net2;
//--------- </nets> ----------//
//--------- <zero> ----------//
  int32_t UNCONNECTED_OUTPUT;
  static const int32_t UNCONNECTED_INPUT=0;
  static const int32buffer zerobuffer = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  int32buffer UNCONNECTED_OUTPUT_BUFFER;
//--------- </zero> ----------//
//--------- <controller calls> ----------//
//--------- <object calls> ----------//
  instancephase_i.dsp(net1);
  instancesin__1_i.dsp(net1, net0);
  instanceschmitttrigger__1_i.dsp(net0, net2, PExch[PARAM_INDEX_schmitttrigger__1_hysteresis].finalvalue);
  instancesquare_i.dsp(net2);
//--------- </object calls> ----------//
//--------- <net latch copy> ----------//
//--------- </net latch copy> ----------//
      for(i=0;i<BUFSIZE;i++) outlet_square[i] = instancesquare_i._outlet[i];

}
void MidiInHandler(midi_device_t dev, uint8_t port, uint8_t status, uint8_t data1, uint8_t data2) {
{
if ( attr_mididevice > 0 && dev > 0 && attr_mididevice != dev) return;
if ( attr_midiport > 0 && port > 0 && attr_midiport != port) return;
}
}
}
;class instanceDs{
  public: // v1
  voice *parent;
int32buffer _inlet;

  public: void Init(voice * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32buffer  & outlet_inlet  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   outlet_inlet[buffer_index] = _inlet[buffer_index];
}
}
}
;class instanceE{
  public: // v1
  voice *parent;
int32buffer _inlet;

  public: void Init(voice * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32buffer  & outlet_inlet  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   outlet_inlet[buffer_index] = _inlet[buffer_index];
}
}
}
;class instanceFilter4{
  public: // v1
  voice *parent;
    static const uint32_t NPEXCH = 4;
    ParameterExchange_t PExch[NPEXCH];
    int32_t displayVector[3];
    static const uint32_t NPRESETS = 8;
    static const uint32_t NPRESET_ENTRIES = 32;
    static const uint32_t NMODULATIONSOURCES = 8;
    static const uint32_t NMODULATIONTARGETS = 8;
    int32_t PExModulationPrevVal[1][NMODULATIONSOURCES];
/* modsource defines */
/* parameter instance indices */
static const int PARAM_INDEX_hp__1_pitch = 0;
static const int PARAM_INDEX_hp__1_reso = 1;
static const int PARAM_INDEX_hp1__1_freq = 2;
static const int PARAM_INDEX_LOW_space_PASS_freq = 3;
/* controller classes */
/* object classes */
class instanceSquare{
  public: // v1
  instanceFilter4 *parent;
int32buffer _inlet;

  public: void Init(instanceFilter4 * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32buffer  & outlet_inlet  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   outlet_inlet[buffer_index] = _inlet[buffer_index];
}
}
}
;class instancehp__1{
  public: // v1
  instanceFilter4 *parent;
KeyValuePair KVP_instancehp__1_pitch;
KeyValuePair KVP_instancehp__1_reso;
biquad_state bs;biquad_coefficients bc;

  public: void Init(instanceFilter4 * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX_hp__1_pitch].pfunction = pfun_signed_clamp;
  SetKVP_IPVP(&KVP_instancehp__1_pitch,ObjectKvpRoot, "hp_1:pitch" ,&parent->PExch[PARAM_INDEX_hp__1_pitch], -1<<27, 1<<27);
  KVP_RegisterObject(&KVP_instancehp__1_pitch);
parent->PExch[PARAM_INDEX_hp__1_reso].pfunction = pfun_unsigned_clamp;
  SetKVP_IPVP(&KVP_instancehp__1_reso,ObjectKvpRoot, "hp_1:reso" ,&parent->PExch[PARAM_INDEX_hp__1_reso], 0, 1<<27);
  KVP_RegisterObject(&KVP_instancehp__1_reso);
biquad_clearstate(&bs);

}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_in,
const int32_t  inlet_pitch,
const int32_t  inlet_reso,
int32buffer  & outlet_out,
int param_pitch,
int param_reso  ){
      int32_t freq;
      MTOF(param_pitch + inlet_pitch,freq);
      biquad_hp_coefs(&bc,freq,INT_MAX - (__USAT(inlet_reso + param_reso,27)<<4));
      biquad_dsp(&bs,&bc,inlet_in,outlet_out);

}
}
;class instancesatp__1{
  public: // v1
  instanceFilter4 *parent;
  public: void Init(instanceFilter4 * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_in,
int32buffer  & outlet_out  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
outlet_out[buffer_index]= __USAT(inlet_in[buffer_index],27);
}
}
}
;class instancehp1__1{
  public: // v1
  instanceFilter4 *parent;
KeyValuePair KVP_instancehp1__1_freq;
int32_t val;

  public: void Init(instanceFilter4 * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX_hp1__1_freq].pfunction = pfun_unsigned_clamp;
  SetKVP_IPVP(&KVP_instancehp1__1_freq,ObjectKvpRoot, "hp1_1" ,&parent->PExch[PARAM_INDEX_hp1__1_freq], 0, 1<<27);
  KVP_RegisterObject(&KVP_instancehp1__1_freq);
val = 0;

}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_in,
const int32_t  inlet_freq,
int32buffer  & outlet_out,
int param_freq  ){
int32_t f;
   MTOF(param_freq+inlet_freq,f);

int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   val = ___SMMLA((inlet_in[buffer_index]-val)<<1,f,val);
   outlet_out[buffer_index]= inlet_in[buffer_index]-val;

}
}
}
;class instanceLOW_space_PASS{
  public: // v1
  instanceFilter4 *parent;
KeyValuePair KVP_instanceLOW_space_PASS_freq;
int32_t val;

  public: void Init(instanceFilter4 * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX_LOW_space_PASS_freq].pfunction = pfun_unsigned_clamp;
  SetKVP_IPVP(&KVP_instanceLOW_space_PASS_freq,ObjectKvpRoot, "LOW PASS" ,&parent->PExch[PARAM_INDEX_LOW_space_PASS_freq], 0, 1<<27);
  KVP_RegisterObject(&KVP_instanceLOW_space_PASS_freq);
val = 0;

}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_in,
const int32_t  inlet_freq,
int32buffer  & outlet_out,
int param_freq  ){
int32_t f;
   MTOF(param_freq+inlet_freq,f);

int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   val = ___SMMLA((inlet_in[buffer_index]-val)<<1,f,val);
   outlet_out[buffer_index]= val;

}
}
}
;class instanceString{
  public: // v1
  instanceFilter4 *parent;
int32buffer _outlet;

  public: void Init(instanceFilter4 * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_outlet  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   _outlet[buffer_index] = inlet_outlet[buffer_index];

}
}
}
;class instanceFreqHP1{
  public: // v1
  instanceFilter4 *parent;
int32_t _inlet;

  public: void Init(instanceFilter4 * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & outlet_inlet  ){
  outlet_inlet = _inlet;

}
}
;class instanceFreqHP2{
  public: // v1
  instanceFilter4 *parent;
int32_t _inlet;

  public: void Init(instanceFilter4 * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & outlet_inlet  ){
  outlet_inlet = _inlet;

}
}
;class instanceFreqLP{
  public: // v1
  instanceFilter4 *parent;
int32_t _inlet;

  public: void Init(instanceFilter4 * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & outlet_inlet  ){
  outlet_inlet = _inlet;

}
}
;/* controller instances */
/* object instances */
     instanceSquare instanceSquare_i;
     instancehp__1 instancehp__1_i;
     instancesatp__1 instancesatp__1_i;
     instancehp1__1 instancehp1__1_i;
     instanceLOW_space_PASS instanceLOW_space_PASS_i;
     instanceString instanceString_i;
     instanceFreqHP1 instanceFreqHP1_i;
     instanceFreqHP2 instanceFreqHP2_i;
     instanceFreqLP instanceFreqLP_i;
/* net latches */
    int32_t  net5Latch;
    int32_t  net6Latch;
    int32_t  net7Latch;
static const int polyIndex = 0;
   static int32_t * GetInitParams(void){
      static const int32_t p[4]= {
      0,
      0,
      0,
      0
      };
      return (int32_t *)&p[0];
   }   static const int32_t * GetPresets(void){
      static const int32_t p[NPRESETS][NPRESET_ENTRIES][2] = {
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         },
         {
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0},
           {-1,0}
         }
      };
   return &p[0][0][0];
   };
void ApplyPreset(int index){
   if (!index) {
     int i;
     int32_t *p = GetInitParams();
     for(i=0;i<NPEXCH;i++){
        PExParameterChange(&PExch[i],p[i],0xFFEF);
     }
   }
   index--;
   if (index < NPRESETS) {
     PresetParamChange_t *pa = (PresetParamChange_t *)(GetPresets());
     PresetParamChange_t *p = &pa[index*NPRESET_ENTRIES];
       int i;
       for(i=0;i<NPRESET_ENTRIES;i++){
         PresetParamChange_t *pp = &p[i];
         if ((pp->pexIndex>=0)&&(pp->pexIndex<NPEXCH)) {
           PExParameterChange(&PExch[pp->pexIndex],pp->value,0xFFEF);         }
         else break;
       }
   }
}
   static PExModulationTarget_t * GetModulationTable(void){
    static const PExModulationTarget_t PExModulationSources[NMODULATIONSOURCES][NMODULATIONTARGETS] = 
{{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}},
{{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}}};
   return (PExModulationTarget_t *)&PExModulationSources[0][0];
   };

  public: void Init(voice * _parent) {
parent = _parent;
   int i;
   int j;
   const int32_t *p;
   p = GetInitParams();
   for(j=0;j<4;j++){
      PExch[j].value = p[j];
      PExch[j].modvalue = p[j];
      PExch[j].signals = 0;
      PExch[j].pfunction = 0;
   }
   int32_t *pp = &PExModulationPrevVal[0][0];
   for(j=0;j<attr_poly*NMODULATIONSOURCES;j++){
      *pp = 0; pp++;
   }
     displayVector[0] = 0x446F7841;
     displayVector[1] = 0;
     displayVector[2] = 0;
   instanceSquare_i.Init(this );
   instancehp__1_i.Init(this );
   instancesatp__1_i.Init(this );
   instancehp1__1_i.Init(this );
   instanceLOW_space_PASS_i.Init(this );
   instanceString_i.Init(this );
   instanceFreqHP1_i.Init(this );
   instanceFreqHP2_i.Init(this );
   instanceFreqLP_i.Init(this );
      int k;
      for (k = 0; k < NPEXCH; k++) {
        if (PExch[k].pfunction){
          (PExch[k].pfunction)(&PExch[k]);
        } else {
          PExch[k].finalvalue = PExch[k].value;
        }
      }

}
  public: void Dispose() {
   instanceFreqLP_i.Dispose();
   instanceFreqHP2_i.Dispose();
   instanceFreqHP1_i.Dispose();
   instanceString_i.Dispose();
   instanceLOW_space_PASS_i.Dispose();
   instancehp1__1_i.Dispose();
   instancesatp__1_i.Dispose();
   instancehp__1_i.Dispose();
   instanceSquare_i.Dispose();

}
  public: void dsp (const int32buffer  inlet_Square,
const int32_t  inlet_FreqHP1,
const int32_t  inlet_FreqHP2,
const int32_t  inlet_FreqLP,
int32buffer  & outlet_String  ){
int i; /*...*/
   for(i=0;i<BUFSIZE;i++) instanceSquare_i._inlet[i] = inlet_Square[i];
   instanceFreqHP1_i._inlet = inlet_FreqHP1;
   instanceFreqHP2_i._inlet = inlet_FreqHP2;
   instanceFreqLP_i._inlet = inlet_FreqLP;
//--------- <nets> -----------//
    int32buffer  net0;
    int32buffer  net1;
    int32buffer  net2;
    int32buffer  net3;
    int32buffer  net4;
    int32_t  net5;
    int32_t  net6;
    int32_t  net7;
//--------- </nets> ----------//
//--------- <zero> ----------//
  int32_t UNCONNECTED_OUTPUT;
  static const int32_t UNCONNECTED_INPUT=0;
  static const int32buffer zerobuffer = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  int32buffer UNCONNECTED_OUTPUT_BUFFER;
//--------- </zero> ----------//
//--------- <controller calls> ----------//
//--------- <object calls> ----------//
  instanceSquare_i.dsp(net3);
  instancehp__1_i.dsp(net3, net5Latch, 0 , net0, PExch[PARAM_INDEX_hp__1_pitch].finalvalue, PExch[PARAM_INDEX_hp__1_reso].finalvalue);
  instancesatp__1_i.dsp(net0, net1);
  instancehp1__1_i.dsp(net1, net6Latch, net2, PExch[PARAM_INDEX_hp1__1_freq].finalvalue);
  instanceLOW_space_PASS_i.dsp(net2, net7Latch, net4, PExch[PARAM_INDEX_LOW_space_PASS_freq].finalvalue);
  instanceString_i.dsp(net4);
  instanceFreqHP1_i.dsp(net5);
  instanceFreqHP2_i.dsp(net6);
  instanceFreqLP_i.dsp(net7);
//--------- </object calls> ----------//
//--------- <net latch copy> ----------//
net5Latch = net5;
net6Latch = net6;
net7Latch = net7;
//--------- </net latch copy> ----------//
      for(i=0;i<BUFSIZE;i++) outlet_String[i] = instanceString_i._outlet[i];

}
void MidiInHandler(midi_device_t dev, uint8_t port, uint8_t status, uint8_t data1, uint8_t data2) {
{
if ( attr_mididevice > 0 && dev > 0 && attr_mididevice != dev) return;
if ( attr_midiport > 0 && port > 0 && attr_midiport != port) return;
}
}
}
;class instance4{
  public: // v1
  voice *parent;
KeyValuePair KVP_instance4_b;
  public: void Init(voice * _parent) {
parent = _parent;
    parent->PExch[PARAM_INDEX_4_b].signals = 0;
    SetKVP_IPVP(&KVP_instance4_b,ObjectKvpRoot, "KVP_instance4_b" ,&parent->PExch[PARAM_INDEX_4_b],0,65535);
  KVP_RegisterObject(&KVP_instance4_b);
}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_i1,
int32buffer  & outlet_o,
int param_b  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   outlet_o[buffer_index]= (param_b)?inlet_i1[buffer_index]:0;

}
}
}
;class instanceF{
  public: // v1
  voice *parent;
int32buffer _inlet;

  public: void Init(voice * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32buffer  & outlet_inlet  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   outlet_inlet[buffer_index] = _inlet[buffer_index];
}
}
}
;class instance_plus___1{
  public: // v1
  voice *parent;
  public: void Init(voice * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_in1,
const int32_t  inlet_in2,
int32_t  & outlet_out  ){
outlet_out= inlet_in1+inlet_in2 ;
}
}
;class instanceZ__FreqHP1{
  public: // v1
  voice *parent;
int32_t _inlet;

  public: void Init(voice * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & outlet_inlet  ){
  outlet_inlet = _inlet;

}
}
;class instanceregistre_space_SUST{
  public: // v1
  voice *parent;
KeyValuePair KVP_instanceregistre_space_SUST_a;
KeyValuePair KVP_instanceregistre_space_SUST_d;
KeyValuePair KVP_instanceregistre_space_SUST_s;
KeyValuePair KVP_instanceregistre_space_SUST_r;
int8_t stage;
int ntrig;
int32_t val;

  public: void Init(voice * _parent) {
parent = _parent;
parent->PExch[PARAM_INDEX_registre_space_SUST_a].pfunction = pfun_kexpltime;
  SetKVP_IPVP(&KVP_instanceregistre_space_SUST_a,ObjectKvpRoot, "registre SUST:a" ,&parent->PExch[PARAM_INDEX_registre_space_SUST_a], -1<<27, 1<<27);
  KVP_RegisterObject(&KVP_instanceregistre_space_SUST_a);
parent->PExch[PARAM_INDEX_registre_space_SUST_d].pfunction = pfun_kexpdtime;
  SetKVP_IPVP(&KVP_instanceregistre_space_SUST_d,ObjectKvpRoot, "registre SUST:d" ,&parent->PExch[PARAM_INDEX_registre_space_SUST_d], -1<<27, 1<<27);
  KVP_RegisterObject(&KVP_instanceregistre_space_SUST_d);
parent->PExch[PARAM_INDEX_registre_space_SUST_s].pfunction = pfun_unsigned_clamp;
  SetKVP_IPVP(&KVP_instanceregistre_space_SUST_s,ObjectKvpRoot, "registre SUST:s" ,&parent->PExch[PARAM_INDEX_registre_space_SUST_s], 0, 1<<27);
  KVP_RegisterObject(&KVP_instanceregistre_space_SUST_s);
parent->PExch[PARAM_INDEX_registre_space_SUST_r].pfunction = pfun_kexpdtime;
  SetKVP_IPVP(&KVP_instanceregistre_space_SUST_r,ObjectKvpRoot, "registre SUST:r" ,&parent->PExch[PARAM_INDEX_registre_space_SUST_r], -1<<27, 1<<27);
  KVP_RegisterObject(&KVP_instanceregistre_space_SUST_r);
stage = 0;
ntrig = 0;
val = 0;

}
  public: void Dispose() {
}
  public: void dsp (const bool  inlet_gate,
int32_t  & outlet_env,
int param_a,
int param_d,
int param_s,
int param_r  ){
if ((inlet_gate>0) && !ntrig) {
   stage = 1;
   ntrig = 1;
}
if (!(inlet_gate>0) && ntrig) {
   stage = 0;
   ntrig=0;
}
if (stage == 0){
   val = ___SMMUL(val,param_r)<<1;
} else if (stage == 1){
   val = val + param_a;
   if (val<0) {
      val =0x7FFFFFFF;
      stage = 2;
   }
} else if (stage == 2) {
   val = (param_s<<4) + (___SMMUL(val - (param_s<<4),param_d)<<1);
}

outlet_env = val>>4;
}
}
;class instancevca__SUST{
  public: // v1
  voice *parent;
   int32_t prev;
    int32_t step;

  public: void Init(voice * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_v,
const int32buffer  inlet_a,
int32buffer  & outlet_o  ){
   step = (inlet_v - prev)>>4;
   int32_t i = prev;
   prev = inlet_v;

int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   outlet_o[buffer_index] =  ___SMMUL(inlet_a[buffer_index],i)<<5;
   i += step;

}
}
}
;class instanceSUST_space_OUT{
  public: // v1
  voice *parent;
int32buffer _outlet;

  public: void Init(voice * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_outlet  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   _outlet[buffer_index] = inlet_outlet[buffer_index];

}
}
}
;class instanceFs{
  public: // v1
  voice *parent;
int32buffer _inlet;

  public: void Init(voice * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32buffer  & outlet_inlet  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   outlet_inlet[buffer_index] = _inlet[buffer_index];
}
}
}
;class instance_star___1{
  public: // v1
  voice *parent;
  public: void Init(voice * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (const int32_t  inlet_a,
const int32_t  inlet_b,
int32_t  & outlet_result  ){
outlet_result= ___SMMUL(inlet_a<<3,inlet_b<<2);

}
}
;class instanceG{
  public: // v1
  voice *parent;
int32buffer _inlet;

  public: void Init(voice * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32buffer  & outlet_inlet  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   outlet_inlet[buffer_index] = _inlet[buffer_index];
}
}
}
;class instanceZ__FreqHP2{
  public: // v1
  voice *parent;
int32_t _inlet;

  public: void Init(voice * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & outlet_inlet  ){
  outlet_inlet = _inlet;

}
}
;class instanceSUST{
  public: // v1
  voice *parent;
KeyValuePair KVP_instanceSUST_b;
  public: void Init(voice * _parent) {
parent = _parent;
    parent->PExch[PARAM_INDEX_SUST_b].signals = 0;
    SetKVP_IPVP(&KVP_instanceSUST_b,ObjectKvpRoot, "KVP_instanceSUST_b" ,&parent->PExch[PARAM_INDEX_SUST_b],0,65535);
  KVP_RegisterObject(&KVP_instanceSUST_b);
}
  public: void Dispose() {
}
  public: void dsp (const int32buffer  inlet_i1,
int32buffer  & outlet_o,
int param_b  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   outlet_o[buffer_index]= (param_b)?inlet_i1[buffer_index]:0;

}
}
}
;class instanceGs{
  public: // v1
  voice *parent;
int32buffer _inlet;

  public: void Init(voice * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32buffer  & outlet_inlet  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   outlet_inlet[buffer_index] = _inlet[buffer_index];
}
}
}
;class instanceZ__FreqLP{
  public: // v1
  voice *parent;
int32_t _inlet;

  public: void Init(voice * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32_t  & outlet_inlet  ){
  outlet_inlet = _inlet;

}
}
;class instanceA{
  public: // v1
  voice *parent;
int32buffer _inlet;

  public: void Init(voice * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32buffer  & outlet_inlet  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   outlet_inlet[buffer_index] = _inlet[buffer_index];
}
}
}
;class instanceAs{
  public: // v1
  voice *parent;
int32buffer _inlet;

  public: void Init(voice * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32buffer  & outlet_inlet  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   outlet_inlet[buffer_index] = _inlet[buffer_index];
}
}
}
;class instanceB{
  public: // v1
  voice *parent;
int32buffer _inlet;

  public: void Init(voice * _parent) {
parent = _parent;
}
  public: void Dispose() {
}
  public: void dsp (int32buffer  & outlet_inlet  ){
int buffer_index;
for(buffer_index=0;buffer_index<BUFSIZE;buffer_index++) {
   outlet_inlet[buffer_index] = _inlet[buffer_index];
}
}
}
;/* controller instances */
/* object instances */
     instanceC instanceC_i;
     instancekeyb__1 instancekeyb__1_i;
     instancephasorSelect4__1 instancephasorSelect4__1_i;
     instancePhase_space_to_space_Square instancePhase_space_to_space_Square_i;
     instanceFilter8 instanceFilter8_i;
     instance8 instance8_i;
     instanceMIX instanceMIX_i;
     instanceregistre_space_8 instanceregistre_space_8_i;
     instancevca__8 instancevca__8_i;
     instance8___space_4_space_OUT instance8___space_4_space_OUT_i;
     instanceCs instanceCs_i;
     instanceD instanceD_i;
     instancePhase_space_to_space_Square__ instancePhase_space_to_space_Square___i;
     instanceDs instanceDs_i;
     instanceE instanceE_i;
     instanceFilter4 instanceFilter4_i;
     instance4 instance4_i;
     instanceF instanceF_i;
     instance_plus___1 instance_plus___1_i;
     instanceZ__FreqHP1 instanceZ__FreqHP1_i;
     instanceregistre_space_SUST instanceregistre_space_SUST_i;
     instancevca__SUST instancevca__SUST_i;
     instanceSUST_space_OUT instanceSUST_space_OUT_i;
     instanceFs instanceFs_i;
     instance_star___1 instance_star___1_i;
     instanceG instanceG_i;
     instanceZ__FreqHP2 instanceZ__FreqHP2_i;
     instanceSUST instanceSUST_i;
     instanceGs instanceGs_i;
     instanceZ__FreqLP instanceZ__FreqLP_i;
     instanceA instanceA_i;
     instanceAs instanceAs_i;
     instanceB instanceB_i;
/* net latches */
    int32buffer  net1Latch;
    int32buffer  net2Latch;
    int32buffer  net3Latch;
    int32buffer  net4Latch;
    int32buffer  net5Latch;
    int32buffer  net6Latch;
    int32buffer  net7Latch;
    int32buffer  net8Latch;
    int32buffer  net9Latch;
    int32buffer  net10Latch;
    int32buffer  net11Latch;
    int32_t  net22Latch;
    int32_t  net23Latch;
    int32_t  net25Latch;
    int32_t  net26Latch;
    int32buffer  net30Latch;
    int32buffer  net31Latch;
    int32_t  net32Latch;
attr_parent *common;
void Init(voice *parent) {
        int i;
        for(i=0;i<NPEXCH;i++){
          PExch[i].pfunction = 0;
        }
   instanceC_i.Init(parent );
   instancekeyb__1_i.Init(parent );
   instancephasorSelect4__1_i.Init(parent );
   instancePhase_space_to_space_Square_i.Init(parent );
   instanceFilter8_i.Init(parent );
   instance8_i.Init(parent );
   instanceMIX_i.Init(parent );
   instanceregistre_space_8_i.Init(parent );
   instancevca__8_i.Init(parent );
   instance8___space_4_space_OUT_i.Init(parent );
   instanceCs_i.Init(parent );
   instanceD_i.Init(parent );
   instancePhase_space_to_space_Square___i.Init(parent );
   instanceDs_i.Init(parent );
   instanceE_i.Init(parent );
   instanceFilter4_i.Init(parent );
   instance4_i.Init(parent );
   instanceF_i.Init(parent );
   instance_plus___1_i.Init(parent );
   instanceZ__FreqHP1_i.Init(parent );
   instanceregistre_space_SUST_i.Init(parent );
   instancevca__SUST_i.Init(parent );
   instanceSUST_space_OUT_i.Init(parent );
   instanceFs_i.Init(parent );
   instance_star___1_i.Init(parent );
   instanceG_i.Init(parent );
   instanceZ__FreqHP2_i.Init(parent );
   instanceSUST_i.Init(parent );
   instanceGs_i.Init(parent );
   instanceZ__FreqLP_i.Init(parent );
   instanceA_i.Init(parent );
   instanceAs_i.Init(parent );
   instanceB_i.Init(parent );
      int k;
      for (k = 0; k < NPEXCH; k++) {
        if (PExch[k].pfunction){
          (PExch[k].pfunction)(&PExch[k]);
        } else {
          PExch[k].finalvalue = PExch[k].value;
        }
      }
}

void dsp(void) {
 int i;
//--------- <nets> -----------//
    int32buffer  net0;
    int32buffer  net1;
    int32buffer  net2;
    int32buffer  net3;
    int32buffer  net4;
    int32buffer  net5;
    int32buffer  net6;
    int32buffer  net7;
    int32buffer  net8;
    int32buffer  net9;
    int32buffer  net10;
    int32buffer  net11;
    int32_t  net12;
    bool  net13;
    int32_t  net14;
    int32buffer  net15;
    int32buffer  net16;
    int32buffer  net17;
    int32buffer  net18;
    int32buffer  net19;
    int32buffer  net20;
    int32_t  net21;
    int32_t  net22;
    int32_t  net23;
    int32buffer  net24;
    int32_t  net25;
    int32_t  net26;
    int32buffer  net27;
    int32buffer  net28;
    int32buffer  net29;
    int32buffer  net30;
    int32buffer  net31;
    int32_t  net32;
//--------- </nets> ----------//
//--------- <zero> ----------//
  int32_t UNCONNECTED_OUTPUT;
  static const int32_t UNCONNECTED_INPUT=0;
  static const int32buffer zerobuffer = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  int32buffer UNCONNECTED_OUTPUT_BUFFER;
//--------- </zero> ----------//
//--------- <controller calls> ----------//
//--------- <object calls> ----------//
  instanceC_i.dsp(net0);
  instancekeyb__1_i.dsp(net21, net13, (bool &)UNCONNECTED_OUTPUT, UNCONNECTED_OUTPUT, UNCONNECTED_OUTPUT);
  instancephasorSelect4__1_i.dsp(net21, net0, net1Latch, net2Latch, net3Latch, net4Latch, net5Latch, net6Latch, net7Latch, net8Latch, net9Latch, net10Latch, net11Latch, net16, net18, UNCONNECTED_OUTPUT_BUFFER);
  instancePhase_space_to_space_Square_i.dsp(net16, net24);
  instanceFilter8_i.dsp(net24, net22Latch, net23Latch, net32Latch, net27);
  instance8_i.dsp(net27, net28, PExch[PARAM_INDEX_8_b].finalvalue);
  instanceMIX_i.dsp(zerobuffer, net28, net30Latch, zerobuffer, net20, PExch[PARAM_INDEX_MIX_gain1].finalvalue, PExch[PARAM_INDEX_MIX_gain2].finalvalue, PExch[PARAM_INDEX_MIX_gain3].finalvalue);
  instanceregistre_space_8_i.dsp(net13, net12, PExch[PARAM_INDEX_registre_space_8_a].finalvalue, PExch[PARAM_INDEX_registre_space_8_d].finalvalue, PExch[PARAM_INDEX_registre_space_8_s].finalvalue, PExch[PARAM_INDEX_registre_space_8_r].finalvalue);
  instancevca__8_i.dsp(net12, net20, net15);
  instance8___space_4_space_OUT_i.dsp(net15);
  instanceCs_i.dsp(net1);
  instanceD_i.dsp(net2);
  instancePhase_space_to_space_Square___i.dsp(net18, net17);
  instanceDs_i.dsp(net3);
  instanceE_i.dsp(net4);
  instanceFilter4_i.dsp(net17, net22Latch, net23Latch, net32Latch, net29);
  instance4_i.dsp(net29, net30, PExch[PARAM_INDEX_4_b].finalvalue);
  instanceF_i.dsp(net5);
  instance_plus___1_i.dsp(net21, net26Latch, net22);
  instanceZ__FreqHP1_i.dsp(net26);
  instanceregistre_space_SUST_i.dsp(net13, net14, PExch[PARAM_INDEX_registre_space_SUST_a].finalvalue, PExch[PARAM_INDEX_registre_space_SUST_d].finalvalue, PExch[PARAM_INDEX_registre_space_SUST_s].finalvalue, PExch[PARAM_INDEX_registre_space_SUST_r].finalvalue);
  instancevca__SUST_i.dsp(net14, net31Latch, net19);
  instanceSUST_space_OUT_i.dsp(net19);
  instanceFs_i.dsp(net6);
  instance_star___1_i.dsp(net21, net25Latch, net23);
  instanceG_i.dsp(net7);
  instanceZ__FreqHP2_i.dsp(net25);
  instanceSUST_i.dsp(net27, net31, PExch[PARAM_INDEX_SUST_b].finalvalue);
  instanceGs_i.dsp(net8);
  instanceZ__FreqLP_i.dsp(net32);
  instanceA_i.dsp(net9);
  instanceAs_i.dsp(net10);
  instanceB_i.dsp(net11);
//--------- </object calls> ----------//
//--------- <net latch copy> ----------//
   for(i=0;i<BUFSIZE;i++)
      net1Latch[i]=net1[i];
   for(i=0;i<BUFSIZE;i++)
      net2Latch[i]=net2[i];
   for(i=0;i<BUFSIZE;i++)
      net3Latch[i]=net3[i];
   for(i=0;i<BUFSIZE;i++)
      net4Latch[i]=net4[i];
   for(i=0;i<BUFSIZE;i++)
      net5Latch[i]=net5[i];
   for(i=0;i<BUFSIZE;i++)
      net6Latch[i]=net6[i];
   for(i=0;i<BUFSIZE;i++)
      net7Latch[i]=net7[i];
   for(i=0;i<BUFSIZE;i++)
      net8Latch[i]=net8[i];
   for(i=0;i<BUFSIZE;i++)
      net9Latch[i]=net9[i];
   for(i=0;i<BUFSIZE;i++)
      net10Latch[i]=net10[i];
   for(i=0;i<BUFSIZE;i++)
      net11Latch[i]=net11[i];
net22Latch = net22;
net23Latch = net23;
net25Latch = net25;
net26Latch = net26;
   for(i=0;i<BUFSIZE;i++)
      net30Latch[i]=net30[i];
   for(i=0;i<BUFSIZE;i++)
      net31Latch[i]=net31[i];
net32Latch = net32;
//--------- </net latch copy> ----------//
}
void dispose(void) {
 int i;
   instanceB_i.Dispose();
   instanceAs_i.Dispose();
   instanceA_i.Dispose();
   instanceZ__FreqLP_i.Dispose();
   instanceGs_i.Dispose();
   instanceSUST_i.Dispose();
   instanceZ__FreqHP2_i.Dispose();
   instanceG_i.Dispose();
   instance_star___1_i.Dispose();
   instanceFs_i.Dispose();
   instanceSUST_space_OUT_i.Dispose();
   instancevca__SUST_i.Dispose();
   instanceregistre_space_SUST_i.Dispose();
   instanceZ__FreqHP1_i.Dispose();
   instance_plus___1_i.Dispose();
   instanceF_i.Dispose();
   instance4_i.Dispose();
   instanceFilter4_i.Dispose();
   instanceE_i.Dispose();
   instanceDs_i.Dispose();
   instancePhase_space_to_space_Square___i.Dispose();
   instanceD_i.Dispose();
   instanceCs_i.Dispose();
   instance8___space_4_space_OUT_i.Dispose();
   instancevca__8_i.Dispose();
   instanceregistre_space_8_i.Dispose();
   instanceMIX_i.Dispose();
   instance8_i.Dispose();
   instanceFilter8_i.Dispose();
   instancePhase_space_to_space_Square_i.Dispose();
   instancephasorSelect4__1_i.Dispose();
   instancekeyb__1_i.Dispose();
   instanceC_i.Dispose();
}
void MidiInHandler(midi_device_t dev, uint8_t port,uint8_t status, uint8_t data1, uint8_t data2){
instancekeyb__1_i.MidiInHandler(dev, port, status, data1, data2);
instancePhase_space_to_space_Square_i.MidiInHandler(dev, port, status, data1, data2);
instanceFilter8_i.MidiInHandler(dev, port, status, data1, data2);
instancePhase_space_to_space_Square___i.MidiInHandler(dev, port, status, data1, data2);
instanceFilter4_i.MidiInHandler(dev, port, status, data1, data2);
}

};
static voice * getVoices(void){
     static voice v[attr_poly];
    return v;
}
static void PropagateToVoices(ParameterExchange_t *origin) {
      ParameterExchange_t *pex = (ParameterExchange_t *)origin->finalvalue;
      int vi;
      for (vi = 0; vi < attr_poly; vi++) {
        PExParameterChange(pex,origin->modvalue,0xFFFFFFEE);
          pex = (ParameterExchange_t *)((int)pex + sizeof(voice)); // dirty trick...
      }}
int8_t notePlaying[attr_poly];
int32_t voicePriority[attr_poly];
int32_t priority;
int32_t sustain;
int8_t pressed[attr_poly];
]]></code.declaration>
      <code.init><![CDATA[   int i;
   int j;
   const int32_t *p;
   p = GetInitParams();
   for(j=0;j<14;j++){
      PExch[j].value = p[j];
      PExch[j].modvalue = p[j];
      PExch[j].signals = 0;
      PExch[j].pfunction = 0;
   }
   int32_t *pp = &PExModulationPrevVal[0][0];
   for(j=0;j<attr_poly*NMODULATIONSOURCES;j++){
      *pp = 0; pp++;
   }
     displayVector[0] = 0x446F7841;
     displayVector[1] = 0;
     displayVector[2] = 0;
int k;
   for(k=0;k<NPEXCH;k++){
      PExch[k].pfunction = PropagateToVoices;
      PExch[k].finalvalue = (int32_t) (&(getVoices()[0].PExch[k]));
   }
int vi; for(vi=0;vi<attr_poly;vi++) {
   voice *v = &getVoices()[vi];
   v->polyIndex = vi;
   v->common = this;
   v->Init(&getVoices()[vi]);
   notePlaying[vi]=0;
   voicePriority[vi]=0;
   for (j = 0; j < v->NPEXCH; j++) {
      v->PExch[j].value = 0;
      v->PExch[j].modvalue = 0;
   }
}
      for (k = 0; k < NPEXCH; k++) {
        if (PExch[k].pfunction){
          (PExch[k].pfunction)(&PExch[k]);
        } else {
          PExch[k].finalvalue = PExch[k].value;
        }
      }
priority=0;
sustain=0;
]]></code.init>
      <code.dispose><![CDATA[int vi; for(vi=0;vi<attr_poly;vi++) {
  voice *v = &getVoices()[vi];
  v->dispose();
}
]]></code.dispose>
      <code.krate><![CDATA[{
      int j;
      for(j=0;j<BUFSIZE;j++) outlet_8___space_4_space_OUT[j] = 0;
}
{
      int j;
      for(j=0;j<BUFSIZE;j++) outlet_SUST_space_OUT[j] = 0;
}
int vi; for(vi=0;vi<attr_poly;vi++) {{int j; for(j=0;j<BUFSIZE;j++) getVoices()[vi].instanceC_i._inlet[j] = inlet_C[j];}
{int j; for(j=0;j<BUFSIZE;j++) getVoices()[vi].instanceCs_i._inlet[j] = inlet_Cs[j];}
{int j; for(j=0;j<BUFSIZE;j++) getVoices()[vi].instanceD_i._inlet[j] = inlet_D[j];}
{int j; for(j=0;j<BUFSIZE;j++) getVoices()[vi].instanceDs_i._inlet[j] = inlet_Ds[j];}
{int j; for(j=0;j<BUFSIZE;j++) getVoices()[vi].instanceE_i._inlet[j] = inlet_E[j];}
{int j; for(j=0;j<BUFSIZE;j++) getVoices()[vi].instanceF_i._inlet[j] = inlet_F[j];}
   getVoices()[vi].instanceZ__FreqHP1_i._inlet = inlet_Z__FreqHP1;
{int j; for(j=0;j<BUFSIZE;j++) getVoices()[vi].instanceFs_i._inlet[j] = inlet_Fs[j];}
{int j; for(j=0;j<BUFSIZE;j++) getVoices()[vi].instanceG_i._inlet[j] = inlet_G[j];}
   getVoices()[vi].instanceZ__FreqHP2_i._inlet = inlet_Z__FreqHP2;
{int j; for(j=0;j<BUFSIZE;j++) getVoices()[vi].instanceGs_i._inlet[j] = inlet_Gs[j];}
   getVoices()[vi].instanceZ__FreqLP_i._inlet = inlet_Z__FreqLP;
{int j; for(j=0;j<BUFSIZE;j++) getVoices()[vi].instanceA_i._inlet[j] = inlet_A[j];}
{int j; for(j=0;j<BUFSIZE;j++) getVoices()[vi].instanceAs_i._inlet[j] = inlet_As[j];}
{int j; for(j=0;j<BUFSIZE;j++) getVoices()[vi].instanceB_i._inlet[j] = inlet_B[j];}
getVoices()[vi].dsp();
{
      int j;
      for(j=0;j<BUFSIZE;j++) outlet_8___space_4_space_OUT[j] += getVoices()[vi].instance8___space_4_space_OUT_i._outlet[j];
}
{
      int j;
      for(j=0;j<BUFSIZE;j++) outlet_SUST_space_OUT[j] += getVoices()[vi].instanceSUST_space_OUT_i._outlet[j];
}
}
]]></code.krate>
      <code.midihandler><![CDATA[if ( attr_mididevice > 0 && dev > 0 && attr_mididevice != dev) return;
if ( attr_midiport > 0 && port > 0 && attr_midiport != port) return;
if ((status == MIDI_NOTE_ON + attr_midichannel) && (data2)) {
  int min = 1<<30;
  int mini = 0;
  int i;
  for(i=0;i<attr_poly;i++){
    if (voicePriority[i] < min){
      min = voicePriority[i];
      mini = i;
    }
  }
  voicePriority[mini] = 100000+priority++;
  notePlaying[mini] = data1;
  pressed[mini] = 1;
  getVoices()[mini].MidiInHandler(dev, port, status, data1, data2);
} else if (((status == MIDI_NOTE_ON + attr_midichannel) && (!data2))||
          (status == MIDI_NOTE_OFF + attr_midichannel)) {
  int i;
  for(i=0;i<attr_poly;i++){
    if ((notePlaying[i] == data1) && pressed[i]){
      voicePriority[i] = priority++;
      pressed[i] = 0;
      if (!sustain)
        getVoices()[i].MidiInHandler(dev, port, status, data1, data2);
      }
  }
} else if (status == attr_midichannel + MIDI_CONTROL_CHANGE) {
  int i;
  for(i=0;i<attr_poly;i++) getVoices()[i].MidiInHandler(dev, port, status, data1, data2);
  if (data1 == 64) {
    if (data2>0) {
      sustain = 1;
    } else if (sustain == 1) {
      sustain = 0;
      for(i=0;i<attr_poly;i++){
        if (pressed[i] == 0) {
          getVoices()[i].MidiInHandler(dev, port, MIDI_NOTE_ON + attr_midichannel, notePlaying[i], 0);
        }
      }
    }
  }
} else {  int i;   for(i=0;i<attr_poly;i++) getVoices()[i].MidiInHandler(dev, port, status, data1, data2);
}
]]></code.midihandler>
   </obj.normal>
</objdefs>