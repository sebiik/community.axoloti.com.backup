<patch-1.0 appVersion="1.0.12">
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_1" x="168" y="28">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="osc/tri" uuid="905879afa8256b0ca207557d656949e476ca6f16" name="tri_1" x="0" y="56">
      <params>
         <frac32.s.map name="pitch" value="10.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="env/adsr m" uuid="98bd39fb828c392b28126d259cb5175e6f6ea34b" name="adsr_1" x="294" y="70">
      <params>
         <frac32.s.map name="a" value="-64.0"/>
         <frac32.s.map name="d" value="-63.0"/>
         <frac32.u.map name="s" value="0.0"/>
         <frac32.s.map name="r" value="-64.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_1" x="392" y="70">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/scope 128 b trig" uuid="11747dcd1dc9afe4919f537c861fb18b80b4e4e" name="scope_1" x="560" y="98">
      <params/>
      <attribs/>
   </obj>
   <obj type="sss/table/primeCreate" uuid="efa85d38-48d9-4a88-a7ac-6d5442517487" name="primeCreate_1" x="112" y="154">
      <params/>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_2" x="798" y="168">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="lfo/sine" uuid="75f7330c26a13953215dccc3b7b9008545c9daa9" name="sine_2" x="434" y="308">
      <params>
         <frac32.s.map name="pitch" value="-56.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="*c_5" x="532" y="308">
      <params>
         <frac32.u.map name="amp" value="19.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="lfo/sine" uuid="75f7330c26a13953215dccc3b7b9008545c9daa9" name="sine_3" x="714" y="308">
      <params>
         <frac32.s.map name="pitch" value="-16.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="*c_6" x="840" y="308">
      <params>
         <frac32.u.map name="amp" value="12.5"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="a4ec3b47-fa60-4a29-9a04-87ba2fd499c1" name="uniform_4" x="980" y="308">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="a4ec3b47-fa60-4a29-9a04-87ba2fd499c1">
         <sDescription>uniform distributed (white) noise, triggered generation. Range -64..64</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <inlets>
            <bool32.rising name="trig" description="trigger"/>
         </inlets>
         <outlets>
            <frac32.positive name="rand1"/>
            <frac32.positive name="rand2"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t val1,val2;
int ntrig;]]></code.declaration>
         <code.init><![CDATA[val1 = (int32_t)(GenerateRandomNumber()>>5);
val2 = (int32_t)(GenerateRandomNumber()>>5);
ntrig = 0;]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig>0) && !ntrig) {
   	val1 = (int32_t)(GenerateRandomNumber()>>5);
   	val2 = (int32_t)(GenerateRandomNumber()>>5);
   	ntrig=1;}
   else if (!(inlet_trig>0)) ntrig=0;
   outlet_rand1= val2;
	outlet_rand2= val2;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="581dc07e-15ee-4efa-8f70-f23c08527630" name="fdn4_1" x="154" y="392">
      <params>
         <frac32.u.map name="g" value="48.5"/>
         <frac32.u.map name="scatter" value="42.5"/>
         <frac32.u.map name="damp" value="26.5"/>
         <frac32.u.map name="size" value="55.889999866485596"/>
         <bool32.tgl name="mode" value="0"/>
         <bool32.tgl name="allpass" value="1"/>
         <bool32.mom name="rnd" value="0"/>
         <frac32.u.map name="room" value="1.6949996948242188"/>
         <frac32.s.map name="centerL" value="28.0"/>
         <frac32.s.map name="colorL" value="-21.0"/>
         <frac32.s.map name="centerR" value="29.0"/>
         <frac32.s.map name="colorR" value="-22.0"/>
      </params>
      <attribs>
         <objref attributeName="primes" obj="primeCreate_1"/>
         <combo attributeName="roomsize" selection="32768 (682ms)"/>
         <combo attributeName="earlysize" selection="32768 (682ms)"/>
      </attribs>
      <object id="patch/object" uuid="581dc07e-15ee-4efa-8f70-f23c08527630">
         <sDescription>Feedback delay network with 4 delay lines. High quality 32bit.</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>fdn4.axh</helpPatch>
         <inlets>
            <frac32buffer name="in1" description="in1"/>
            <frac32buffer name="in2" description="in2"/>
            <frac32buffer name="in3"/>
            <frac32buffer name="in4"/>
         </inlets>
         <outlets>
            <frac32buffer name="out1" description="out1"/>
            <frac32buffer name="out2" description="out2"/>
            <frac32buffer name="out3" description="out3"/>
            <frac32buffer name="out4" description="out4"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="g" noLabel="true"/>
            <frac32.u.map name="scatter"/>
            <frac32.u.map.gain name="damp"/>
            <frac32.u.map name="size"/>
            <bool32.tgl name="mode"/>
            <bool32.tgl name="allpass"/>
            <bool32.mom name="rnd"/>
            <frac32.u.map name="room"/>
            <frac32.s.map name="centerL"/>
            <frac32.s.map name="colorL"/>
            <frac32.s.map name="centerR"/>
            <frac32.s.map name="colorR"/>
         </params>
         <attribs>
            <objref name="primes"/>
            <combo name="roomsize">
               <MenuEntries>
                  <string>256 (5.33ms)</string>
                  <string>512 (10.66ms)</string>
                  <string>1024 (21.33ms)</string>
                  <string>2048 (42.66ms)</string>
                  <string>4096 (85.33ms)</string>
                  <string>8192 (170ms)</string>
                  <string>16384 (341ms)</string>
                  <string>32768 (682ms)</string>
                  <string>65536 (1.36s)</string>
                  <string>131072 (2.73s)</string>
                  <string>262144 (5.46s)</string>
                  <string>524288 (10.9s)</string>
                  <string>1048576 (21.8s)</string>
                  <string>2097152 (43.7s)</string>
               </MenuEntries>
               <CEntries>
                  <string>8</string>
                  <string>9</string>
                  <string>10</string>
                  <string>11</string>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
                  <string>16</string>
                  <string>17</string>
                  <string>18</string>
                  <string>19</string>
                  <string>20</string>
                  <string>21</string>
               </CEntries>
            </combo>
            <combo name="earlysize">
               <MenuEntries>
                  <string>128 (2.66ms)</string>
                  <string>256 (5.33ms)</string>
                  <string>512 (10.66ms)</string>
                  <string>1024 (21.33ms)</string>
                  <string>2048 (42.66ms)</string>
                  <string>4096 (85.33ms)</string>
                  <string>8192 (170ms)</string>
                  <string>16384 (341ms)</string>
                  <string>32768 (682ms)</string>
                  <string>65536 (1.36s)</string>
                  <string>131072 (2.73s)</string>
                  <string>262144 (5.46s)</string>
                  <string>524288 (10.9s)</string>
                  <string>1048576 (21.8s)</string>
                  <string>2097152 (43.7s)</string>
               </MenuEntries>
               <CEntries>
                  <string>7</string>
                  <string>8</string>
                  <string>9</string>
                  <string>10</string>
                  <string>11</string>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
                  <string>16</string>
                  <string>17</string>
                  <string>18</string>
                  <string>19</string>
                  <string>20</string>
                  <string>21</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[static const uint32_t RLENGTH=1<<attr_roomsize;
static const uint32_t RLENGTHPOW=attr_roomsize;
static const uint32_t RLENGTHMASK=(1<<attr_roomsize)-1;
int32_t *d1d;
int32_t *d2d;
int32_t *d3d;
int32_t *d4d;
uint32_t d1p;
uint32_t d2p;
uint32_t d3p;
uint32_t d4p;
int pos[12],rnd;
int32_t mod[4];
uint32_t writepos;
uint32_t Writepos;
static const uint32_t LENGTH=1<<attr_earlysize;
static const uint32_t LENGTHPOW=attr_earlysize;
static const uint32_t LENGTHMASK=(1<<attr_earlysize)-1;
int32_t *array,lp[4],LP[4];
void SCATTER(int32_t *IN,uint32_t wp,int32_t scatter,int32_t damp,int32_t size,int mode,int index)
{
int number=index<<LENGTHPOW;

int32_t in=IN[wp];
LP[index]+=in-LP[index]>>4;
int32_t tlp=___SMMUL(in-LP[index],damp)<<1;
in-=tlp;
int32_t t1,t2,t3;
t2=___SMMUL(in,scatter)<<1;
int32_t smx;
smx=((uint32_t)size<<5+LENGTHPOW)>>1;
size=size>>27-LENGTHPOW;
t3=array[((writepos-size)&LENGTHMASK)+number]<<14;
t3+=___SMMUL((array[((writepos-size-1)&LENGTHMASK)+number]<<14)-t3<<1,smx);
t1=___SMMUL(t3,scatter)<<1;

array[writepos+number] = __SSAT(in+(mode>0?0:t2)-t1>>14,16);
if(!mode){
IN[wp] = __SSAT(t2+t3-t1+(___SMMUL(tlp,scatter)<<1),28);
}
else{
IN[wp]=__SSAT(___SMMUL(in+tlp-t1<<1,scatter)+t3,28);
}
}]]></code.declaration>
         <code.init><![CDATA[static int32_t _array[(1<<attr_earlysize)*4]  __attribute__ ((section (".sdram")));array = &_array[0];
static int32_t _d1d[(1<<attr_roomsize)]  __attribute__ ((section (".sdram")));d1d = &_d1d[0];
static int32_t _d2d[(1<<attr_roomsize)]  __attribute__ ((section (".sdram")));d2d = &_d2d[0];
static int32_t _d3d[(1<<attr_roomsize)]  __attribute__ ((section (".sdram")));d3d = &_d3d[0];
static int32_t _d4d[(1<<attr_roomsize)]  __attribute__ ((section (".sdram")));d4d = &_d4d[0];

int i;
for(i=0;i<RLENGTH;i++)
{
d1d[i]=0;
d2d[i]=0;
d3d[i]=0;
d4d[i]=0;
}
d1p = 0;
d2p = 0;
d3p = 0;
d4p = 0;

for(i=0;i<LENGTH<<2;i++)
{
	array[i]=0;
}
for(int i=0;i<12;i++)
{
	pos[i]=(int32_t)(GenerateRandomNumber()%800)+223;
}]]></code.init>
         <code.krate><![CDATA[int32_t g2 = 755299123+param_g+(param_g>>3);

if(param_rnd&&!rnd)
{
	rnd=1;
	for(int i=0;i<12;i++)
{
	pos[i]=(int32_t)(GenerateRandomNumber()%800)+223;
}
}
else if(!param_rnd){rnd=0;}
int32_t size[4],length[4];
int32_t mx=0;
for(int i=0;i<4;i++)
{
	size[i]=attr_primes.array[(pos[i])];
	mx=size[i]>mx?size[i]:mx;
}
for(int i=0;i<4;i++)
{
	size[i]*=param_size/mx;
}

mx=0;
for(int i=0;i<4;i++)
{
	length[i]=attr_primes.array[(pos[i+4])];
	mx=length[i]>mx?length[i]:mx;
}

for(int i=0;i<4;i++)
{
	length[i]*=param_room/mx;
	length[i]=length[i]>>27-RLENGTHPOW;
}

int32_t ofs[4];
mx=0;
for(int i=0;i<4;i++)
{
	ofs[i]=attr_primes.array[(pos[i+8])];
	mx=ofs[i]>mx?ofs[i]:mx;
}

for(int i=0;i<4;i++)
{
	ofs[i]*=param_room/mx;
	ofs[i]=ofs[i]>>27-RLENGTHPOW;
}


int32_t frq1,frq2;
MTOF(param_centerL,frq1)
MTOF(param_centerR,frq1)
int32_t color1=param_colorL<<4;
int32_t color2=param_colorR<<4;
int32_t damp;
damp=param_damp>>1;]]></code.krate>
         <code.srate><![CDATA[int32_t i1 = (inlet_in1>>1) + d1d[(Writepos-length[0])&RLENGTHMASK];
int32_t i2 = inlet_in2 + d2d[(Writepos-length[1])&RLENGTHMASK];
int32_t i3 = inlet_in3 + d3d[(Writepos-length[2])&RLENGTHMASK];
int32_t i4 = inlet_in4 + d4d[(Writepos-length[3])&RLENGTHMASK];


int32_t t1 = i2 + i3;
int32_t t2 = -i1 - i4;
int32_t t3 = i1 - i4;
int32_t t4 = i2 - i3;
int32_t o1 = ___SMMLA(t1,g2,t1>>1);
int32_t o2 = ___SMMLA(t2,g2,t2>>1);
int32_t o3 = ___SMMLA(t3,g2,t3>>1);
int32_t o4 = ___SMMLA(t4,g2,t4>>1);
o1=__SSAT(o1,28);
o2=__SSAT(o2,28);
o3=__SSAT(o3,28);
o4=__SSAT(o4,28);
lp[0]+=___SMMUL(o1-lp[0],frq1)<<1;
lp[1]+=___SMMUL(o2-lp[1],frq2)<<1;

if(color1<0)
{
	o1+=___SMMUL(-lp[0]+o1,color1);
}
else
{
	o1+=___SMMUL(-lp[0],color1);

}
if(color2<0)
{

	o2+=___SMMUL(-lp[1]+o2,color2);

}
else
{
	o2+=___SMMUL(-lp[1],color2);

}

d1d[Writepos] = o1;
d2d[Writepos] = o2;
d3d[Writepos] = o3;
d4d[Writepos] = o4;
if(param_allpass>0)
{
SCATTER(d1d,Writepos,param_scatter<<4,damp,size[0],param_mode,0);
SCATTER(d2d,Writepos,param_scatter<<4,damp,size[1],param_mode,1);
SCATTER(d3d,Writepos,param_scatter<<4,damp,size[2],param_mode,2);
SCATTER(d4d,Writepos,param_scatter<<4,damp,size[3],param_mode,3);
}

int32_t out[4];
out[0]=o1+d1d[(writepos-ofs[0])&RLENGTHMASK]>>1;
out[1]=o2+d2d[(writepos-ofs[1])&RLENGTHMASK]>>1;
out[2]=d3d[(writepos-ofs[2])&RLENGTHMASK]>>1;
out[3]=d4d[(writepos-ofs[3])&RLENGTHMASK]>>1;
outlet_out1 = out[0]+out[3];
outlet_out2 = out[1]+out[2];

writepos+=1;
if(writepos>=LENGTH)
{
	writepos=0;
}
Writepos+=1;
if(Writepos>=RLENGTH)
{
	Writepos=0;
}]]></code.srate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="581dc07e-15ee-4efa-8f70-f23c08527630" name="fdn1_2" x="588" y="406">
      <params>
         <frac32.s.map name="decay" value="56.0"/>
         <frac32.u.map name="scatter" value="41.0"/>
         <frac32.u.map name="damp" value="0.0"/>
         <frac32.u.map name="size" value="0.0"/>
         <bool32.tgl name="mode" value="1"/>
         <bool32.tgl name="allpass" value="1"/>
         <frac32.u.map name="room" value="0.0"/>
         <frac32.s.map name="center" value="0.0"/>
         <frac32.s.map name="color" value="0.0"/>
      </params>
      <attribs>
         <objref attributeName="primes" obj="primeCreate_1"/>
         <combo attributeName="roomsize" selection="16384 (341ms)"/>
         <combo attributeName="earlysize" selection="4096 (85.33ms)"/>
      </attribs>
      <object id="patch/object" uuid="581dc07e-15ee-4efa-8f70-f23c08527630">
         <sDescription>Feedback delay network with 4 delay lines. High quality 32bit.</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>fdn4.axh</helpPatch>
         <inlets>
            <frac32buffer name="in1" description="in1"/>
            <bool32 name="rnd"/>
            <frac32 name="mod1"/>
            <frac32 name="mod2"/>
            <frac32 name="size"/>
            <frac32 name="room"/>
         </inlets>
         <outlets>
            <frac32buffer name="out1" description="out1"/>
            <frac32buffer name="out2" description="out2"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map name="decay"/>
            <frac32.u.map name="scatter"/>
            <frac32.u.map.gain name="damp"/>
            <frac32.u.map name="size"/>
            <bool32.tgl name="mode"/>
            <bool32.tgl name="allpass"/>
            <frac32.u.map name="room"/>
            <frac32.s.map name="center"/>
            <frac32.s.map name="color"/>
         </params>
         <attribs>
            <objref name="primes"/>
            <combo name="roomsize">
               <MenuEntries>
                  <string>256 (5.33ms)</string>
                  <string>512 (10.66ms)</string>
                  <string>1024 (21.33ms)</string>
                  <string>2048 (42.66ms)</string>
                  <string>4096 (85.33ms)</string>
                  <string>8192 (170ms)</string>
                  <string>16384 (341ms)</string>
                  <string>32768 (682ms)</string>
                  <string>65536 (1.36s)</string>
                  <string>131072 (2.73s)</string>
                  <string>262144 (5.46s)</string>
                  <string>524288 (10.9s)</string>
                  <string>1048576 (21.8s)</string>
                  <string>2097152 (43.7s)</string>
               </MenuEntries>
               <CEntries>
                  <string>8</string>
                  <string>9</string>
                  <string>10</string>
                  <string>11</string>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
                  <string>16</string>
                  <string>17</string>
                  <string>18</string>
                  <string>19</string>
                  <string>20</string>
                  <string>21</string>
               </CEntries>
            </combo>
            <combo name="earlysize">
               <MenuEntries>
                  <string>128 (2.66ms)</string>
                  <string>256 (5.33ms)</string>
                  <string>512 (10.66ms)</string>
                  <string>1024 (21.33ms)</string>
                  <string>2048 (42.66ms)</string>
                  <string>4096 (85.33ms)</string>
                  <string>8192 (170ms)</string>
                  <string>16384 (341ms)</string>
                  <string>32768 (682ms)</string>
                  <string>65536 (1.36s)</string>
                  <string>131072 (2.73s)</string>
                  <string>262144 (5.46s)</string>
                  <string>524288 (10.9s)</string>
                  <string>1048576 (21.8s)</string>
                  <string>2097152 (43.7s)</string>
               </MenuEntries>
               <CEntries>
                  <string>7</string>
                  <string>8</string>
                  <string>9</string>
                  <string>10</string>
                  <string>11</string>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
                  <string>16</string>
                  <string>17</string>
                  <string>18</string>
                  <string>19</string>
                  <string>20</string>
                  <string>21</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[static const uint32_t RLENGTH=1<<attr_roomsize;
static const uint32_t RLENGTHPOW=attr_roomsize;
static const uint32_t RLENGTHMASK=(1<<attr_roomsize)-1;
int32_t *d1d;
int32_t *d2d;
int32_t *d3d;
int32_t *d4d;
uint32_t d1p;
uint32_t d2p;
uint32_t d3p;
uint32_t d4p;
int pos[16],rnd;
int32_t mod[4];
uint32_t writepos;
uint32_t Writepos;
static const uint32_t LENGTH=1<<attr_earlysize;
static const uint32_t LENGTHPOW=attr_earlysize;
static const uint32_t LENGTHMASK=(1<<attr_earlysize)-1;
int32_t *array,lp[4],LP[4];

/*	this is the scatter function
 * 	it needs:
 * 	uint32_t writepos; (also see s-rate code)
 *   int32_t *array (also init-code for _array)
 *   int32_t LP[4];->this dampens the high frequencies in the scatter,
 *   could be changed to dampen low frequencies by inversely mixing "tlp" to "in":
 *   in-=___SMMUL(LP[index],damp)<<1;
 *   
 *   IN=>		audio input (use output of function to overwrite the value you put in
 *   scatter=>	scatter amount (+-40 works best, be careful not to put this control to 64, as this will just loop everything inside the scatter function)
 *   damp=>	dampens the audio inside the scatter function for a bit more natural decay
 *   size=>	size of scatter function-> "normally" around 40ms, but of course, nobody stops you from setting it into seconds..
 *   mode=>	0=scatter mode, 1=allpass mode
 *   index=>	index numbers of the scatters as each needs to use it's own delayline. This module uses 4 scatter functions, so this you'll find back in the "LP[4]", the multiplication of the array-size (init code) and several other parts in the code.
 */	
int32_t SCATTER(int32_t IN,int32_t scatter,int32_t damp,int32_t size,int mode,int index)
{
int number=index<<LENGTHPOW;
int32_t in=IN;
LP[index]+=in-LP[index]>>4;
int32_t tlp=___SMMUL(in-LP[index],damp)<<1;
in-=tlp;
int32_t t1,t2,t3;
t2=___SMMUL(in,scatter)<<1;
int32_t smx;
smx=((uint32_t)size<<5+LENGTHPOW)>>1;
size=size>>27-LENGTHPOW;
t3=array[((writepos-size)&LENGTHMASK)+number]<<14;
t3+=___SMMUL((array[((writepos-size-1)&LENGTHMASK)+number]<<14)-t3<<1,smx);
t1=___SMMUL(t3,scatter)<<1;

array[writepos+number] = __SSAT(in+(mode>0?0:t2)-t1>>14,16);
if(!mode){
return IN = __SSAT(t2+t3-t1+(___SMMUL(tlp,scatter)<<1),28);
}
else{
return IN=__SSAT(___SMMUL(in+tlp-t1<<1,scatter)+t3,28);
}
}]]></code.declaration>
         <code.init><![CDATA[static int32_t _array[(1<<attr_earlysize)*4]  __attribute__ ((section (".sdram")));array = &_array[0];
static int32_t _d1d[(1<<attr_roomsize)]  __attribute__ ((section (".sdram")));d1d = &_d1d[0];
static int32_t _d2d[(1<<attr_roomsize)]  __attribute__ ((section (".sdram")));d2d = &_d2d[0];
static int32_t _d3d[(1<<attr_roomsize)]  __attribute__ ((section (".sdram")));d3d = &_d3d[0];
static int32_t _d4d[(1<<attr_roomsize)]  __attribute__ ((section (".sdram")));d4d = &_d4d[0];

int i;
for(i=0;i<RLENGTH;i++)
{
d1d[i]=0;
d2d[i]=0;
d3d[i]=0;
d4d[i]=0;
}
d1p = 0;
d2p = 0;
d3p = 0;
d4p = 0;

for(i=0;i<LENGTH<<2;i++)
{
	array[i]=0;
}
for(int i=0;i<16;i++)
{
	pos[i]=(int32_t)(GenerateRandomNumber()%800)+223;
}]]></code.init>
         <code.krate><![CDATA[int32_t g2 = 755299123+param_decay+(param_decay>>9);

if(inlet_rnd&&!rnd)
{
	rnd=1;
	for(int i=0;i<12;i++)
{
	pos[i]=(int32_t)(GenerateRandomNumber()%800)+223;
}
}
else if(!inlet_rnd){rnd=0;}
int32_t size[4],length[4];

int32_t Room=__USAT(param_room+inlet_room,28);
Room=(__USAT(Room,27)<<1)-Room;
int32_t Size=__USAT(param_size+inlet_size,28);
Size=(__USAT(Size,27)<<1)-Size;
int32_t mx=0;
for(int i=0;i<4;i++)
{
	size[i]=attr_primes.array[(pos[i])];
	mx=size[i]>mx?size[i]:mx;
}
for(int i=0;i<4;i++)
{
	size[i]*=Size/mx;
}

mx=0;
for(int i=0;i<4;i++)
{
	length[i]=attr_primes.array[(pos[i+4])];
	mx=length[i]>mx?length[i]:mx;
}

for(int i=0;i<4;i++)
{
	length[i]*=Room/mx;
	length[i]=length[i]>>27-RLENGTHPOW;
}

int32_t ofs[4];
mx=0;
for(int i=0;i<4;i++)
{
	ofs[i]=attr_primes.array[(pos[i+8])];
	mx=ofs[i]>mx?ofs[i]:mx;
}

for(int i=0;i<4;i++)
{
	ofs[i]*=Room/mx;
	ofs[i]=ofs[i]>>27-RLENGTHPOW;
}
int32_t Ofs[4];
mx=0;
for(int i=0;i<4;i++)
{
	Ofs[i]=attr_primes.array[(pos[i+12])];
	mx=ofs[i]>mx?Ofs[i]:mx;
}

for(int i=0;i<4;i++)
{
	Ofs[i]*=Room/mx;
	Ofs[i]=Ofs[i]>>27-RLENGTHPOW>>3;
}

int32_t frq1;
MTOF(param_center,frq1)

int32_t color1=param_color<<4;

int32_t damp;
damp=param_damp>>1;
size[0]=__USAT(size[0]+(___SMMUL(size[0],__SSAT(inlet_mod1,28))<<5),27);
size[1]=__USAT(size[1]-(___SMMUL(size[1],__SSAT(inlet_mod1,28))<<5),27);
size[2]=__USAT(size[2]-(___SMMUL(size[2],__SSAT(inlet_mod2,28))<<5),27);
size[3]=__USAT(size[3]-(___SMMUL(size[3],__SSAT(inlet_mod2,28))<<5),27);]]></code.krate>
         <code.srate><![CDATA[int32_t i1 = (inlet_in1) + d1d[(Writepos-length[0])&RLENGTHMASK];

int32_t t1 = -i1;
int32_t o1 = ___SMMLA(t1,g2,t1>>1);

o1=__SSAT(o1,28);//limiting audio loop (just to be sure.. but shouldn't be needed..)

lp[0]+=___SMMUL(o1-lp[0],frq1)<<1;//6dB lowpass filter for room coloration


if(color1<0)
{
	o1+=___SMMUL(lp[0]-o1,-color1);//crossfading to lowpass if color is <0
}
else
{
	o1+=___SMMUL(-lp[0],color1);//crossfading to highpass if color is >0

}


d1d[Writepos] = o1;//audio record/feedback into delayline

if(param_allpass>0)
{
int32_t wp=(Writepos-(Ofs[0]>>1)*0)&RLENGTHMASK;//Writepos is the write position of the delayline
d1d[wp]=SCATTER(d1d[wp],param_scatter<<4,damp,size[0],param_mode,0);//as you can see, I take audio from d1d[wp] and put the output back into the same d1d[wp]
d1d[wp]=SCATTER(d1d[wp],param_scatter<<4,damp,size[1],param_mode,1);//so you could do this with any audio stream anywhere: reverbs, oscillators,filters, etc!
wp=((writepos)&LENGTHMASK)+RLENGTH;//writepos is the write position of the scatter functions, thus the following two are "nested allpasses", internally scattering the former two allpasses
array[wp]=SCATTER(array[wp]<<14,param_scatter<<4,damp,size[2],param_mode,2)>>14;
wp=(writepos)&LENGTHMASK;
array[wp]=SCATTER(array[wp]<<14,param_scatter<<4,damp,size[3],param_mode,3)>>14;

}

int32_t out[4];
out[0]=o1+d1d[(Writepos-ofs[0]-(ofs[1]>>3)-1)&RLENGTHMASK]>>1;//reading out 4 seperate taps in the delayline
out[1]=o1+d1d[(Writepos-ofs[0]+(ofs[1]>>3)+1)&RLENGTHMASK]>>1;
out[2]=d1d[(Writepos-ofs[2])&RLENGTHMASK]>>1;
out[3]=d1d[(Writepos-ofs[3])&RLENGTHMASK]>>1;
outlet_out1 = out[0]-out[3];
outlet_out2 = out[1]-out[2];

writepos+=1;//this is the write position of the scatter function
if(writepos>=LENGTH)
{
	writepos=0;
}
Writepos+=1;//this is the write position of the delayline
if(Writepos>=RLENGTH)
{
	Writepos=0;
}]]></code.srate>
      </object>
   </patchobj>
   <obj type="sss/audio/StOutVol" uuid="0ca9cf1e-1ce3-469c-80da-a4a885c21246" name="StOutVol_1" x="784" y="406">
      <params>
         <frac32.u.map name="volume" value="64.0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="364" y="446" text="randomises the prime selection (room shape)"/>
   <comment type="patch/comment" x="714" y="644" text="this module has some explanations in the code"/>
   <comment type="patch/comment" x="518" y="868" text="just uses a single delay and 4 allpass/scatter functions"/>
   <comment type="patch/comment" x="112" y="910" text="uses a quad FDN delay and 4 allpass/scatter functions"/>
   <nets>
      <net>
         <source obj="tri_1" outlet="wave"/>
         <dest obj="vca_1" inlet="a"/>
      </net>
      <net>
         <source obj="vca_1" outlet="o"/>
         <dest obj="fdn4_1" inlet="in1"/>
         <dest obj="fdn4_1" inlet="in2"/>
         <dest obj="fdn1_2" inlet="in1"/>
      </net>
      <net>
         <source obj="fdn4_1" outlet="out1"/>
         <dest obj="scope_1" inlet="in"/>
      </net>
      <net>
         <source obj="adsr_1" outlet="env"/>
         <dest obj="vca_1" inlet="v"/>
      </net>
      <net>
         <source obj="button_1" outlet="o"/>
         <dest obj="adsr_1" inlet="gate"/>
      </net>
      <net>
         <source obj="sine_2" outlet="wave"/>
         <dest obj="*c_5" inlet="in"/>
      </net>
      <net>
         <source obj="sine_3" outlet="wave"/>
         <dest obj="*c_6" inlet="in"/>
      </net>
      <net>
         <source obj="*c_5" outlet="out"/>
         <dest obj="fdn1_2" inlet="mod1"/>
      </net>
      <net>
         <source obj="*c_6" outlet="out"/>
         <dest obj="fdn1_2" inlet="mod2"/>
      </net>
      <net>
         <source obj="uniform_4" outlet="rand1"/>
         <dest obj="fdn1_2" inlet="size"/>
      </net>
      <net>
         <source obj="uniform_4" outlet="rand2"/>
         <dest obj="fdn1_2" inlet="room"/>
      </net>
      <net>
         <source obj="fdn1_2" outlet="out1"/>
         <dest obj="StOutVol_1" inlet="left"/>
      </net>
      <net>
         <source obj="fdn1_2" outlet="out2"/>
         <dest obj="StOutVol_1" inlet="right"/>
      </net>
      <net>
         <source obj="button_2" outlet="o"/>
         <dest obj="uniform_4" inlet="trig"/>
         <dest obj="fdn1_2" inlet="rnd"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>493</x>
      <y>0</y>
      <width>1211</width>
      <height>1080</height>
   </windowPos>
</patch-1.0>