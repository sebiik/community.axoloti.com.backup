<patch-1.0 appVersion="1.0.12">
   <comment type="patch/comment" x="294" y="28" text="else select &quot;pickup OFF&quot;"/>
   <comment type="patch/comment" x="84" y="42" text="in order to read the previous value"/>
   <patchobj type="patch/object" uuid="ff42c6dc-6d76-4b69-bae7-601493719dcc" name="reader_1" x="280" y="42">
      <params/>
      <attribs>
         <spinner attributeName="NoOfParms" value="15"/>
         <table attributeName="map" table="6,10,7,8,9,11,13,12,14,15,1,2,3,4,5"/>
         <combo attributeName="pickup" selection="on (connect inlet pval!)"/>
      </attribs>
      <object id="patch/object" uuid="ff42c6dc-6d76-4b69-bae7-601493719dcc">
         <sDescription>Reads all 15 analog inputs and drops them as midi cc messages (mapped).
Inputs have a threshold, to avoid noise.</sDescription>
         <author>burek</author>
         <license>GPL</license>
         <inlets>
            <int32 name="offset"/>
            <frac32.positive name="pval"/>
         </inlets>
         <outlets>
            <frac32.positive name="value"/>
            <int32.positive name="ccNo"/>
            <int32.positive name="ccsoon"/>
         </outlets>
         <displays>
            <bool32 name="active" description="writing" noLabel="true"/>
            <int32.label name="on"/>
         </displays>
         <params/>
         <attribs>
            <spinner name="NoOfParms" MinValue="1" MaxValue="128" DefaultValue="15"/>
            <table name="map"/>
            <combo name="pickup">
               <MenuEntries>
                  <string>on (connect inlet pval!)</string>
                  <string>off (jump)</string>
               </MenuEntries>
               <CEntries>
                  <string>1</string>
                  <string>0</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int i,active,lastact,timer,offset,pactive;
int32_t currval;
int32_t val[attr_NoOfParms];
int waitforpickup;

int map[attr_NoOfParms] = {0};//{36,40,37,38,39,41,43,42,44,45,31,32,33,34,35};

bool ignore;]]></code.declaration>
         <code.init><![CDATA[i=0;
active = -2;
lastact = -2;
offset = -1;
int imap[128] = {attr_map};
for (i=0;i<=attr_NoOfParms;i++){
	if (imap[i]>0){
		map[i] = imap[i];
	}
	else map[i] = i+1;
}
waitforpickup=0;


/* Good Initial Map:
 *  6,10,7,8,9,11,13,12,14,15,1,2,3,4,5, 21,25,22,23,24,26,28,27,29,20,16,17,18,19,20,
 */]]></code.init>
         <code.krate><![CDATA[if (offset!=inlet_offset){ // we're newly switched on or offset
	outlet_ccsoon = 0;
	if ((inlet_offset+15)<=((attr_NoOfParms<15)?(15):(attr_NoOfParms))){

	ignore = 0;
	offset = inlet_offset;
	for(i=0;i<=14;i++){
		val[i+offset] = adcvalues[i]<<15;
		//LogTextMessage("Setting %1D to %3D",map[i+offset],val[i+offset]);
	}
	active = -1; // no activity yet
	i = 0;
	}
	else if (!ignore){ // offset too high
		LogTextMessage("WARNING: offset %1D too high, only %1D parameters; I will ignore this change!",inlet_offset,((attr_NoOfParms<15)?(15):(attr_NoOfParms)));
		ignore = 1;
	}
}

if (i==15) i=0;
currval = adcvalues[i]<<15; // read one analog input per circ


int8_t ioff=i+offset;




if (ioff==active){
	//LogTextMessage("%d is active",map[active]);
	timer -= 1<<16;
	if (waitforpickup<=1){ // either we're in JUMP mode, or the value has been picked up (0), or we're ready to output inlet_pval
	//	LogTextMessage("ready to write to %d",map[active]);
		if (abs(currval-val[ioff])>(1<<17)){ // ignore mini-changes
			if (timer<(1<<23)) timer += 1<<17;//abs(currval-val[ioff]); // small change give you active time
			
			if (lastact!=active){
					lastact = active;
				//	outlet_ccchg = 1;
			}
			if (waitforpickup==1){
				waitforpickup=11; // will stay 11 until we have pick-up
				currval = inlet_pval;
			}
			//LogTextMessage("write to %d",map[active]);
			
			 PatchMidiInHandler(MIDI_DEVICE_INTERNAL,0,MIDI_CONTROL_CHANGE,map[ioff],__USAT(currval>>20,7));// write to midi cc
			//outlet_valchg = 1;
		}
	}
	else{ // waitforpickup = 2 and <11
		if (waitforpickup<=10) { // waitforpickup>=2 : wait for cc/valchg until inlet_pval is ready
			waitforpickup--;
		}
		else if (abs(currval-inlet_pval)<(1<<19)){ // we got pickup
				//LogTextMessage("Gleich!!!");
				waitforpickup = 0;
		}
	}
	val[ioff] = currval;
}
else{
	if (abs(currval-val[ioff])>(1<<22)){ // to become active, larger chg required
		//LogTextMessage("Major Change: %1D is active now",map[ioff]);
		active = ioff;
		// LogTextMessage("%d is (p)active",ioff);
		if (attr_pickup&&(active!=lastact)) waitforpickup = 2;
		else waitforpickup = 0;
		disp_on = map[ioff];
		timer = 1<<23; // for a little while, this is active
	}
}


if (timer < 0&&active>=0){//...but as time passes, it become inactive again
	//LogTextMessage("Left %1D at %3D",map[ioff],currval>>21);
	active=-1;
}



disp_active = (active >= 0);
outlet_ccsoon = map[active];
outlet_value = val[lastact];	
outlet_ccNo = map[lastact];


i++;]]></code.krate>
      </object>
   </patchobj>
   <obj type="table/alloc 8b sdram" uuid="7af0c2671e20d9c493553cf8b038ebbec89efb7" name="paramtable" x="0" y="56">
      <params/>
      <attribs>
         <combo attributeName="size" selection="32"/>
         <text attributeName="init">
            <sText><![CDATA[]]></sText>
         </text>
      </attribs>
   </obj>
   <obj type="table/read" uuid="65eb8d0f6a3344638de94c9882999b9af15510d0" name="read_1" x="140" y="56">
      <params/>
      <attribs>
         <objref attributeName="table" obj="paramtable"/>
      </attribs>
   </obj>
   <obj type="disp/dial b" uuid="9ffed04e6a3052d9001eda83bae7024cb6d17037" name="dial_1" x="546" y="56">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/i" uuid="5e35fd0c62d81e70017289250cf28edd26e19e4a" name="i_1" x="574" y="140">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="850f8d1e-261c-497c-98fb-2145e111330e" name="table_1" x="70" y="210">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="850f8d1e-261c-497c-98fb-2145e111330e">
         <sDescription>if there is any midi cc activity,  &quot;write&quot; triggers after that activity is over for a
 little while, or whenever the cc number changes; when triggered by cc change, 

&quot;val&quot; and &quot;cc&quot; still deliver the value and cc number from *before* the change.

This is meant to be used for writing midi cc data to a table without writing 
every minute change.</sDescription>
         <author>burek</author>
         <license>GPL</license>
         <inlets/>
         <outlets>
            <int32.positive name="cc"/>
            <frac32.bipolar name="value"/>
            <bool32 name="write"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t active,_value,val;
int8_t _cc,cc;
bool trig=0,pending=0;]]></code.declaration>
         <code.init><![CDATA[_cc=cc=0;
active = _value = val = 0;]]></code.init>
         <code.krate><![CDATA[outlet_write = 0;
if (trig){ // midi activity
	if ((_cc!=cc)&&pending){
			outlet_write = 1;
			pending = 0;		
	}
	else {
		cc = _cc;
		val = _value;
		trig = 0;
		pending = 1;
	}
	active = 1<<30;		
}
else if (active>0) active -= 1<<20;


if ((active<=0)&&pending){
	outlet_write = 1;
	pending = 0;
}	

if (outlet_write)	{
	//LogTextMessage("Writing to table: cc %d: %d",cc,val);
	}

outlet_value = val;
outlet_cc = cc;]]></code.krate>
         <code.midihandler><![CDATA[if (((status&0xF0) == MIDI_CONTROL_CHANGE)&&(data1<107)) {
  trig = 1;
  //LogTextMessage("TableWriteTrigger: Midi Activity");
  _cc = data1;
  _value = data2<<20;
}]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="4302087a-5815-4302-8b28-9b1bfbd9e0c2" name="write_1" x="252" y="210">
      <params/>
      <attribs>
         <objref attributeName="table" obj="paramtable"/>
      </attribs>
      <object id="patch/object" uuid="4302087a-5815-4302-8b28-9b1bfbd9e0c2">
         <sDescription>write to table</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>table.axh</helpPatch>
         <inlets>
            <int32.positive name="a" description="index (integer, not fraction)"/>
            <frac32 name="v" description="value"/>
            <bool32.rising name="trig" description="trigger"/>
         </inlets>
         <outlets/>
         <displays/>
         <params/>
         <attribs>
            <objref name="table"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[   int ntrig;
]]></code.declaration>
         <code.init><![CDATA[   int ntrig = 0;
]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig>0) && !ntrig) {
   	//LogTextMessage("Writing to table");
      ntrig=1;
      if (inlet_a<attr_table.LENGTH)
         attr_table.array[inlet_a]=__SSAT(inlet_v,28)>>attr_table.GAIN;
   }
   if (!(inlet_trig>0)) ntrig=0;]]></code.krate>
      </object>
   </patchobj>
   <obj type="midi/in/cc any" uuid="eca13eae3f7625f3ca80cadd19a90de033698aa" name="cc_1" x="532" y="280">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial b" uuid="9ffed04e6a3052d9001eda83bae7024cb6d17037" name="dial_2" x="728" y="294">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/i" uuid="5e35fd0c62d81e70017289250cf28edd26e19e4a" name="i_2" x="756" y="378">
      <params/>
      <attribs/>
   </obj>
   <nets>
      <net>
         <source obj="read_1" outlet="o"/>
         <dest obj="reader_1" inlet="pval"/>
      </net>
      <net>
         <source obj="reader_1" outlet="ccsoon"/>
         <dest obj="read_1" inlet="a"/>
      </net>
      <net>
         <source obj="table_1" outlet="write"/>
         <dest obj="write_1" inlet="trig"/>
      </net>
      <net>
         <source obj="table_1" outlet="value"/>
         <dest obj="write_1" inlet="v"/>
      </net>
      <net>
         <source obj="table_1" outlet="cc"/>
         <dest obj="write_1" inlet="a"/>
      </net>
      <net>
         <source obj="reader_1" outlet="value"/>
         <dest obj="dial_1" inlet="in"/>
      </net>
      <net>
         <source obj="reader_1" outlet="ccNo"/>
         <dest obj="i_1" inlet="in"/>
      </net>
      <net>
         <source obj="cc_1" outlet="value"/>
         <dest obj="dial_2" inlet="in"/>
      </net>
      <net>
         <source obj="cc_1" outlet="cc"/>
         <dest obj="i_2" inlet="in"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>338</x>
      <y>34</y>
      <width>936</width>
      <height>548</height>
   </windowPos>
</patch-1.0>