<patch-1.0 appVersion="1.0.12">
   <comment type="patch/comment" x="70" y="0" text="needs no explanation ***********************"/>
   <comment type="patch/comment" x="70" y="28" text="bypass"/>
   <comment type="patch/comment" x="168" y="28" text="wet/dry"/>
   <comment type="patch/comment" x="490" y="28" text="delay time type stuff ****************************"/>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_4" x="70" y="42">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_2" x="168" y="42">
      <params>
         <frac32.u.map name="value" value="26.0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="490" y="42" text="(base speed is set by midi clock - there&apos;s an internal one on the left, turn it off if using an external one)"/>
   <comment type="patch/comment" x="490" y="56" text="(clock will reset when midi/internal clock started or the button below, it&apos;s worth resetting after changing division settings sometimes if doing more rythmic synced type stuff)"/>
   <comment type="patch/comment" x="490" y="84" text="0 reset - restarts everything"/>
   <comment type="patch/comment" x="490" y="98" text="1 division - sets the division that the facts sample at, i.e. the  delay speed"/>
   <comment type="patch/comment" x="490" y="112" text="2 multiply division - does what it says. you can use the division dial to set a division (say, 16ths) and then use the multiply to lengthen it (slower!) so, division at 16ths, multiply at 5 = 5x 16ths delay time"/>
   <comment type="patch/comment" x="490" y="126" text="3 recording length - how long the facts record for per division. set to max for more delay-ish sounds, less for, well, fun and junk."/>
   <comment type="patch/comment" x="490" y="140" text="4 attack - sets the attack time for the play back vca. haven&apos;t used it much, usually just leave it at min . "/>
   <comment type="patch/comment" x="56" y="154" text="turn off internal clock when using midi clock"/>
   <comment type="patch/comment" x="644" y="168" text="2 multiply"/>
   <comment type="patch/comment" x="56" y="182" text="internal clock on"/>
   <comment type="patch/comment" x="168" y="182" text="internal clock speed"/>
   <comment type="patch/comment" x="308" y="182" text="rough bpm"/>
   <comment type="patch/comment" x="406" y="182" text="0 reset"/>
   <comment type="patch/comment" x="490" y="182" text="1 division"/>
   <comment type="patch/comment" x="644" y="182" text="division"/>
   <comment type="patch/comment" x="728" y="182" text="3 recording length"/>
   <comment type="patch/comment" x="854" y="182" text="4 attack"/>
   <comment type="patch/comment" x="980" y="182" text="feed stuff to other stuff ***********************************"/>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_9" x="84" y="196">
      <params>
         <bool32.tgl name="b" value="1"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_1" x="168" y="196">
      <params>
         <frac32.u.map name="value" value="14.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="disp/i" uuid="5e35fd0c62d81e70017289250cf28edd26e19e4a" name="i_4" x="322" y="196">
      <params/>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_1" x="406" y="196">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_11" x="490" y="196">
      <params>
         <frac32.u.map name="value" value="22.5"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="566e6ca2-5f0d-4bd6-b2f3-92376e3e09d8" name="ibar_2" x="560" y="196">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="566e6ca2-5f0d-4bd6-b2f3-92376e3e09d8">
         <sDescription>display integer bar</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>disp.axh</helpPatch>
         <inlets>
            <int32.positive name="in" description="input"/>
         </inlets>
         <outlets/>
         <displays>
            <bool32 name="32nd"/>
            <bool32 name="dotted_32nd"/>
            <bool32 name="16th"/>
            <bool32 name="dotted_16th"/>
            <bool32 name="8th"/>
            <bool32 name="dotted_8th"/>
            <bool32 name="quarter"/>
            <bool32 name="dotted_quarter"/>
            <bool32 name="half"/>
            <bool32 name="dotted_half"/>
            <bool32 name="bar"/>
         </displays>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int in;]]></code.declaration>
         <code.krate><![CDATA[in=inlet_in-10;
if (in==0){
	disp_bar=1;
}
else {disp_bar=0;}

if (in==1){
	disp_dotted_half=1;
}
else {disp_dotted_half=0;}

if (in==2){
	disp_half=1;
}
else {disp_half=0;}


if (in==3){
	disp_dotted_quarter=1;
}
else {disp_dotted_quarter=0;}


if (in==4){
	disp_quarter=1;
}
else {disp_quarter=0;}


if (in==5){
	disp_dotted_8th=1;
}
else {disp_dotted_8th=0;}


if (in==6){
	disp_8th=1;
}
else {disp_8th=0;}

if (in==7){
	disp_dotted_16th=1;
}
else {disp_dotted_16th=0;}

if (in==8){
	disp_16th=1;
}
else {disp_16th=0;}

if (in==9){
	disp_dotted_32nd=1;
}
else {disp_dotted_32nd=0;}

if (in==10){
	disp_32nd=1;
}
else {disp_32nd=0;}]]></code.krate>
      </object>
   </patchobj>
   <obj type="ctrl/i" uuid="a3786816db6ea5bc6ac4193a5cccdb2c83b83496" name="i_3" x="644" y="196">
      <params>
         <int32 name="value" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_10" x="728" y="196">
      <params>
         <frac32.u.map name="value" value="64.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_4" x="854" y="196">
      <params>
         <frac32.s.map name="value" value="-64.0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="980" y="196" text="5 feed along - like feedback but it doesn&apos;t get reprocessed - so if you are pitch shifting it doesn&apos;t keep stepping up. it&apos;s actually the release on the playback vca of the facts."/>
   <comment type="patch/comment" x="980" y="210" text="6 feedback - normal feedback, end of chain to beginning"/>
   <comment type="patch/comment" x="980" y="224" text="7 feedforward - feeds one sampler into the next. I&apos;ve not quite figured it out, kinda like normal feedback but things get weird when you reorder the slices... i might improve this"/>
   <comment type="patch/comment" x="980" y="238" text="8. kill all - silence is golden, sometimes"/>
   <comment type="patch/comment" x="980" y="252" text="9 freeze  - stops recording and holds whatever is in the buffers"/>
   <comment type="patch/comment" x="966" y="294" text="5. feed along"/>
   <comment type="patch/comment" x="1050" y="294" text="6. feedback"/>
   <comment type="patch/comment" x="1134" y="294" text="7. feedforward"/>
   <comment type="patch/comment" x="1246" y="294" text="8 kill all"/>
   <comment type="patch/comment" x="1344" y="294" text="9  freeze"/>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_5" x="966" y="308">
      <params>
         <frac32.s.map name="value" value="-17.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_9" x="1050" y="308">
      <params>
         <frac32.u.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_3" x="1134" y="308">
      <params>
         <frac32.u.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_2" x="1246" y="308">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_8" x="1344" y="308">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="70" y="434" text="pitch and stretch ******************************"/>
   <comment type="patch/comment" x="70" y="448" text="10 pitch - this is stepped between fifths and octaves ( check pitch display below, it will show you the current actual pitch shfting)"/>
   <comment type="patch/comment" x="70" y="462" text="11 stretch - stretches stuff - positive = faster, negative = slower. it&apos;s stepped in multiples of 3 (check display) because that makes more rythmic pleasure when i&apos;m playing mad solos into long reversed pitched stuff. shrug. HAS NO EFFECT WHEN LOCK STRETCH TO PITCH IS ON (see next)"/>
   <comment type="patch/comment" x="70" y="476" text="12 lock stretch to pitch - when turned on this overtakes the dial and locks the stretch setting to the pitch. it&apos;s slightly different (the octaves match but the fifths are a step below. again, rythmic pleasure, mad solos, etc)"/>
   <comment type="patch/comment" x="70" y="490" text="13 rate - directlly controls the speed of the fact&apos;s playback - slows down to 0, negative numbers are reverse. I tend to have the dial at min or max"/>
   <comment type="patch/comment" x="70" y="518" text="10 pitch"/>
   <comment type="patch/comment" x="168" y="518" text="11 stretch"/>
   <comment type="patch/comment" x="252" y="518" text="12 lock stretch to pitch"/>
   <comment type="patch/comment" x="392" y="518" text="13 rate"/>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_6" x="70" y="532">
      <params>
         <frac32.s.map name="value" value="12.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_7" x="168" y="532">
      <params>
         <frac32.s.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_3" x="252" y="532">
      <params>
         <bool32.tgl name="b" value="1"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_8" x="392" y="532">
      <params>
         <frac32.s.map name="value" value="-64.0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="518" y="532" text="ARP ***********************"/>
   <comment type="patch/comment" x="518" y="546" text="14 arp on.if you turn it on it turns the arp on"/>
   <comment type="patch/comment" x="518" y="560" text="15 arp direction - 0-3 = forwards, backwards, forwardsbackwards, matt special"/>
   <comment type="patch/comment" x="518" y="574" text="16 arp speed- 0= smae as division, + doubeles speed, - halves it"/>
   <comment type="patch/comment" x="518" y="588" text="17 how many steps - it steps up/down how many octaves, or octaves + fifths"/>
   <comment type="patch/comment" x="1036" y="588" text="HOLD LOOP &amp; SLICE ORDER************************************"/>
   <comment type="patch/comment" x="518" y="602" text="18 include 5ths. if on the arp steps through octaves and fiths. if off it steps through octaves "/>
   <comment type="patch/comment" x="1036" y="602" text="19. hold loop on - if on it will hold a fact playing for so many divisions every so many divsions"/>
   <comment type="patch/comment" x="1036" y="616" text="20 hold frequency - how often it holds"/>
   <comment type="patch/comment" x="518" y="630" text="14 arp on"/>
   <comment type="patch/comment" x="616" y="630" text="15 arp direction"/>
   <comment type="patch/comment" x="728" y="630" text="16 arp speed +/-"/>
   <comment type="patch/comment" x="840" y="630" text="17 arp steps"/>
   <comment type="patch/comment" x="924" y="630" text="18 include 5th"/>
   <comment type="patch/comment" x="1036" y="630" text="21 hold length - how many divisions it holds for"/>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_6" x="518" y="644">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/i radio 4 h" uuid="f87ae81e3162014f3bdca0f56dbbdf9322e69dfd" name="i_7" x="616" y="644">
      <params>
         <int32.hradio name="value" value="2"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="981cca83-682d-4fe9-8f9c-facf5b679556" name="i_6" x="728" y="644">
      <params>
         <int32 name="value" value="2"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="981cca83-682d-4fe9-8f9c-facf5b679556">
         <sDescription>positive integer control</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets/>
         <outlets>
            <int32.bipolar name="out"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="value" noLabel="true">
               <MinValue i="-100"/>
               <MaxValue i="100"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out= param_value;]]></code.krate>
      </object>
   </patchobj>
   <obj type="ctrl/i" uuid="a3786816db6ea5bc6ac4193a5cccdb2c83b83496" name="i_2" x="840" y="644">
      <params>
         <int32 name="value" value="3"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_5" x="924" y="644">
      <params>
         <bool32.tgl name="b" value="1"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1036" y="644" text="22 reorder slices - play the slices in different orders (watch current player display),  0 = most delay like"/>
   <comment type="patch/comment" x="238" y="658" text="PITCH DISPLAY"/>
   <comment type="patch/comment" x="336" y="658" text="STRETCH DISPLAY"/>
   <obj type="disp/dial b" uuid="9ffed04e6a3052d9001eda83bae7024cb6d17037" name="dial_13" x="238" y="672">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial b" uuid="9ffed04e6a3052d9001eda83bae7024cb6d17037" name="dial_14" x="336" y="672">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1036" y="672" text="19 hold loop on"/>
   <comment type="patch/comment" x="1148" y="672" text="20 hold frequency "/>
   <comment type="patch/comment" x="1274" y="672" text="21 hold length"/>
   <comment type="patch/comment" x="1372" y="672" text="22 reorder slices"/>
   <comment type="patch/comment" x="1484" y="672" text="CURRENT PLAYER"/>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_7" x="1036" y="686">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/i" uuid="a3786816db6ea5bc6ac4193a5cccdb2c83b83496" name="i_9" x="1148" y="686">
      <params>
         <int32 name="value" value="6"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/i" uuid="a3786816db6ea5bc6ac4193a5cccdb2c83b83496" name="i_10" x="1274" y="686">
      <params>
         <int32 name="value" value="3"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/i radio 4 h" uuid="f87ae81e3162014f3bdca0f56dbbdf9322e69dfd" name="i_8" x="1372" y="686">
      <params>
         <int32.hradio name="value" value="0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="566e6ca2-5f0d-4bd6-b2f3-92376e3e09d8" name="ibar_1" x="1484" y="686">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="566e6ca2-5f0d-4bd6-b2f3-92376e3e09d8">
         <sDescription>display integer bar</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>disp.axh</helpPatch>
         <inlets>
            <int32.positive name="in" description="input"/>
         </inlets>
         <outlets/>
         <displays>
            <bool32 name="off"/>
            <bool32 name="1"/>
            <bool32 name="2"/>
            <bool32 name="3"/>
            <bool32 name="4"/>
            <bool32 name="5"/>
            <bool32 name="6"/>
            <bool32 name="7"/>
         </displays>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[if (inlet_in==(-1)){
	disp_off=1;
}
else {disp_off=0;}

if (inlet_in==0){
	disp_1=1;
}
else {disp_1=0;}

if (inlet_in==1){
	disp_2=1;
}
else {disp_2=0;}

if (inlet_in==2){
	disp_3=1;
}
else {disp_3=0;}


if (inlet_in==3){
	disp_4=1;
}
else {disp_4=0;}


if (inlet_in==4){
	disp_5=1;
}
else {disp_5=0;}


if (inlet_in==5){
	disp_6=1;
}
else {disp_6=0;}


if (inlet_in==6){
	disp_7=1;
}
else {disp_7=0;}]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="42" y="728" text="internal clock"/>
   <patchobj type="patch/object" uuid="695c1308-48a9-4c90-9d5c-d9c33477e272" name="clock_2" x="28" y="742">
      <params>
         <frac32.u.map name="bpm" value="0.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="695c1308-48a9-4c90-9d5c-d9c33477e272">
         <sDescription>Midi clock master, als outputs Midi clock, start, stop, and continue messages. Sends to midi/in/* objects only.</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <inlets>
            <bool32 name="run" description="Run"/>
            <bool32.rising name="rst" description="Reset"/>
            <frac32.positive name="bpm"/>
         </inlets>
         <outlets>
            <bool32 name="active" description="Song is playing"/>
            <int32 name="pos4ppq" description="Position in 4 counts per quarter"/>
            <int32 name="pos24ppq" description="Position in 24 counts per quarter"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="bpm" noLabel="true"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[bool _active;
int32_t _posfrac;
int32_t _pos24ppq;
bool rstp;]]></code.declaration>
         <code.init><![CDATA[_active = 0;
_posfrac = 0;
_pos24ppq = 0;
rstp = 0;]]></code.init>
         <code.krate><![CDATA[if (inlet_rst & !rstp){
   rstp = 1;
   _posfrac = 0;
   _pos24ppq = 0;
} else if (!inlet_rst){
   rstp = 0;
}
if (inlet_run && !_active) {
  _active = 1;
  if (_pos24ppq) {
    PatchMidiInHandler(MIDI_DEVICE_INTERNAL, 0,MIDI_CONTINUE,0,0);
  } else {
    PatchMidiInHandler(MIDI_DEVICE_INTERNAL, 0,MIDI_START,0,0);
    PatchMidiInHandler(MIDI_DEVICE_INTERNAL, 0,MIDI_TIMING_CLOCK,0,0);
  }
} else if (!inlet_run && _active){
  _active = 0;
  PatchMidiInHandler(MIDI_DEVICE_INTERNAL, 0,MIDI_STOP,0,0);
}if (_active) {
  _posfrac += (param_bpm+inlet_bpm);
  if (_posfrac & 1<<31) {
    _posfrac &= (1<<31)-1;
    _pos24ppq++;
    PatchMidiInHandler(MIDI_DEVICE_INTERNAL, 0,MIDI_TIMING_CLOCK,0,0);
  }
}
outlet_pos4ppq = _pos24ppq/6;
outlet_pos24ppq = _pos24ppq;]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="294" y="756" text="(final values)"/>
   <comment type="patch/comment" x="28" y="882" text="clock reciever"/>
   <patchobj type="patch/object" uuid="5e8aa3d7-999e-42f7-b0f6-abf29cd51e76" name="clock_1" x="28" y="896">
      <params>
         <int32 name="clockdiv" value="16"/>
         <int32 name="clocklength" value="16"/>
      </params>
      <attribs>
         <combo attributeName="clockin" selection="omni"/>
      </attribs>
      <object id="patch/object" uuid="5e8aa3d7-999e-42f7-b0f6-abf29cd51e76">
         <sDescription>Midi clock slave</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>midi_in.axh</helpPatch>
         <inlets/>
         <outlets>
            <bool32 name="active"/>
            <int32 name="kbeat"/>
            <bool32.pulse name="start"/>
            <bool32.pulse name="stop"/>
            <int32 name="192ppq"/>
            <int32 name="bar192ppq"/>
            <int32 name="clock"/>
            <bool32.pulse name="trig"/>
            <int32 name="count" description="rough bpm"/>
            <bool32 name="pulse"/>
            <bool32.pulse name="bartrig"/>
            <int32 name="bpm"/>
         </outlets>
         <displays>
            <int32.label name="d1"/>
         </displays>
         <params>
            <int32 name="clockdiv">
               <MinValue i="0"/>
               <MaxValue i="300"/>
            </int32>
            <int32 name="clocklength">
               <MinValue i="0"/>
               <MaxValue i="3000000"/>
            </int32>
         </params>
         <attribs>
            <combo name="clockin">
               <MenuEntries>
                  <string>omni</string>
                  <string>din</string>
                  <string>usb host port 1</string>
                  <string>usb host port 2</string>
                  <string>usb host port 3</string>
                  <string>usb host port 4</string>
                  <string>internal port 1</string>
                  <string>internal port 2</string>
                  <string>usb device port 1</string>
               </MenuEntries>
               <CEntries>
                  <string>true</string>
                  <string>dev == MIDI_DEVICE_DIN &amp;&amp; port == 1</string>
                  <string>dev == MIDI_DEVICE_USB_HOST &amp;&amp; port == 1</string>
                  <string>dev == MIDI_DEVICE_USB_HOST &amp;&amp; port == 2</string>
                  <string>dev == MIDI_DEVICE_USB_HOST &amp;&amp; port == 3</string>
                  <string>dev == MIDI_DEVICE_USB_HOST &amp;&amp; port == 4</string>
                  <string>dev == MIDI_DEVICE_INTERNAL &amp;&amp; port == 1</string>
                  <string>dev == MIDI_DEVICE_INTERNAL &amp;&amp; port == 2</string>
                  <string>dev == MIDI_DEVICE_USB_DEVICE &amp;&amp; port == 1</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int32_t _active;
int32_t _pos;
int active;
int init;
int drift;
int driftV;
int unsynced;
int otrig;
int start;
int stop;
int newpos;
int tap;
int ppq192;
int ktick;
int newtick;
int stepos;
int prevpos;
int dialclock;
int clock192;
int x;
int xtick;
int syncV;
int bar192;
int count;
int bartrig;
int prevcount;
int resync;
int kbeat;
int k;
int prevc;
int incount;
int divclock;
int Otrig;
int prevdiv;
int Oclock;
int length;
int pulse;]]></code.declaration>
         <code.init><![CDATA[_active = 0;
_pos = -1;



stepos=-1;
init=1;

resync=45;]]></code.init>
         <code.krate><![CDATA[//create extra ticks sync
dialclock+=(1<<27)/ktick;
if (dialclock>=((1<<27)-1)){
	dialclock=(1<<27)-1;
}


//new 24ppq clock so matches ktick
newtick+=1;
if ((newtick>=ktick)&&(ktick>0) && (stepos>=0)){
	newtick=0;
	if (!unsynced){
	newpos+=1;
	}
	dialclock=0;
}

//create extra ticks
ppq192=dialclock/ ((1<<27)/8);
//stop too many extra ticks
if (ppq192>=7){
	ppq192=7;
}


///measure 24ppq pulse
x+=1;
if ((stepos!=prevpos) && (stepos>=0)){
	if (stepos==0){
		newtick=0;
		newpos=0;
		}
	
	prevpos=stepos;
	if (stepos>0){
		ktick=x;
		}
	if (unsynced){
		newpos=stepos;
		driftV=0;
		drift=0;
		newtick=0;
		dialclock=0;
		unsynced=0;
		ppq192=0;
	}
	x=0;
}

if (stepos>=0){
clock192=(newpos<<3)+ppq192;
bar192=clock192-((clock192/768)*768);
count=bar192/192;
divclock=clock192/(768/param_clockdiv);
}

else {
	clock192=-1;
	newpos=-1;
	bar192=-1;
	count=-1;
	divclock=-1;
}
incount=(stepos/24);
k+=1;
if ((incount!=prevc)&&(stepos>=0)){
	
	if (stepos>0){
		kbeat=k;
	}
	prevc=incount;
	k=0;
}


//clock difference
syncV=newpos-stepos;

//if clock is different, time it
if (syncV!=0){
	drift+=1;
	driftV=drift;
	if (!otrig){
		otrig=1;
		drift=0;
	}
}
if (syncV==0){
	driftV=drift;
	otrig=0;
}
//if clocks are different for long enough, unsync is on, resync is triggered
if ((driftV>resync) && (stepos>0)){
	unsynced=1;
}


if (count!=prevcount){
	if (count==0){
		bartrig=1;
	}
	if (stepos>=0){
	pulse=1;
	}
	prevcount=count;
}
if (start){
	active=1;
}
if (stop){
	active=0;
}
length=param_clocklength;
if (divclock!=prevdiv){
	if (divclock>=0){
		Oclock+=1;
		Otrig=1;
	}
	if ((Oclock>=length)|| (start)){
		Oclock=0;
	}
	prevdiv=divclock;
}
if (stepos<0){
	Oclock=-1;
}
outlet_active=active;
outlet_kbeat=kbeat;
outlet_bar192ppq=bar192;
outlet_192ppq=clock192;
outlet_count=count;
outlet_pulse=pulse;
outlet_clock=Oclock;
outlet_trig=Otrig;

outlet_start=start;
outlet_stop=stop;
outlet_bpm=180000/kbeat;
// bpm back to kbeat
// kbeat=180000/bpm;
outlet_bartrig=bartrig;
if (stepos>=0){
disp_d1=stepos;
}
pulse=0;
Otrig=0;
bartrig=0;
start=0;
stop=0;]]></code.krate>
         <code.midihandler><![CDATA[if (attr_clockin){
	if ((status == MIDI_TIMING_CLOCK) &&_active) {
		if ((_pos==0)&&_active){
	  	start=1;
	  	
	  }
	  _pos++;
	  stepos++;
	  
	  
	} else if (status == MIDI_START) {
	  _active = 1;
	  _pos = 0;
	  stepos=-1;
	  
	} else if (status == MIDI_STOP) {
	  _active = 0;
	  stop=1;
	  _pos = -1;
	  stepos=-1;
	
	  
	}
}]]></code.midihandler>
      </object>
   </patchobj>
   <obj type="logic/or 2" uuid="3805d3c84d30032a44fbdbe42d9a2988a1790a3e" name="or_3" x="182" y="910">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="728" y="924" text="kill triggers"/>
   <obj type="tiar/logic/rising" uuid="1d591a21-ac71-4b69-96f2-5c17b11ec2cd" name="rising_1" x="700" y="938">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="336" y="966" text="factotumclock"/>
   <comment type="patch/comment" x="490" y="966" text="hold mechanism"/>
   <comment type="patch/comment" x="616" y="966" text="reorder arp"/>
   <patchobj type="patch/object" uuid="fa16e24e-7190-4865-b49f-32ebf0e00d01" name="1_9" x="182" y="980">
      <params>
         <int32 name="length" value="11"/>
         <int32 name="offdiv" value="30"/>
         <int32 name="start" value="10"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="fa16e24e-7190-4865-b49f-32ebf0e00d01">
         <sDescription>multiply</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>math.axh</helpPatch>
         <inlets>
            <frac32 name="division" description="input"/>
            <int32 name="start"/>
            <int32 name="divadjust"/>
         </inlets>
         <outlets>
            <int32 name="division"/>
            <bool32 name="off"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="length">
               <MinValue i="0"/>
               <MaxValue i="64"/>
            </int32>
            <int32 name="offdiv">
               <MinValue i="0"/>
               <MaxValue i="64"/>
            </int32>
            <int32 name="start">
               <MinValue i="0"/>
               <MaxValue i="30"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int division;]]></code.declaration>
         <code.krate><![CDATA[division=(inlet_division/(0x07FFFFFF/(param_length-1)))+(inlet_start+param_start)+(inlet_divadjust<<1);
if (division>=param_offdiv){
	outlet_off=1;
	outlet_division=29;
}
else {outlet_off=0; outlet_division=division;}]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="26b8fad0-f713-4015-a5f8-106646228299" name="1_10" x="336" y="980">
      <params>
         <int32 name="stepmax" value="0"/>
         <int32 name="divmul" value="1"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="26b8fad0-f713-4015-a5f8-106646228299">
         <license>GPL</license>
         <inlets>
            <int32 name="kbeat"/>
            <int32 name="1ppq"/>
            <bool32 name="start"/>
            <bool32 name="stop"/>
            <int32 name="division"/>
            <frac32.positive name="gatelength"/>
            <int32 name="divmul"/>
         </inlets>
         <outlets>
            <int32 name="step"/>
            <bool32 name="trig"/>
            <bool32 name="start"/>
            <bool32 name="gate"/>
            <bool32 name="tied"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="stepmax" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="300000000"/>
            </int32>
            <int32 name="divmul">
               <MinValue i="1"/>
               <MaxValue i="300"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int dialclock;
int kbeat;
int ppq1;
int ppq384;
int prev384;
int synclock;
int step;
int pclock;
int g;
int gate;
int glength;
int shadow;
int prevstep;
int outstep;
int stepmax;
int active;
int count;
int bar;
int quarter;
int division[30];
int p;
int start;
int laststep;
int divmul;
bool trig;
bool strig;
bool rtrig;
bool atrig;]]></code.declaration>
         <code.init><![CDATA[shadow=-1;
prevstep=-1;
step=-1;
active=0;
p=384;
g=0x07FFFFFF;
//16bar 12bar  8bar  7bar  6bar  5bar  4bar  3bar  2bar .1bar  1bar .1/2   1/2  .1/4   1/4  .1/8   1/8  .1/16  1/16 .1/32  1/32 .1/64  1/64.1/128 1/128.1/256 1/256.1/512 1/512   off
division[0]=p<<5;//16
division[1]=(p<<4)+(p<<3);//12
division[2]=p<<4;//8
division[3]=(p<<4)+(p<<3)+(p<<2);//7
division[4]=(p<<4)+(p<<3);//6
division[5]=(p<<4)+(p<<2);//5
division[6]=p<<4; //4bar
division[7]=(p<<3)+(p<<2); //3bar
division[8]=p<<3; //2bar
division[9]=(p<<2)+(p<<3);
division[10]=p<<2; //1bar
division[11]=(p<<1)+p;
division[12]=p<<1; // 1/2
division[13]=p+(p>>1);
division[14]=p; // 1/4
division[15]=(p>>1)+(p>>2);
division[16]=p>>1; // 1/8
division[17]=(p>>2)+(p>>3);
division[18]=p>>2; // 1/16
division[19]=(p>>3)+(p>>4);
division[20]=p>>3; // 1/32
division[21]=(p>>4)+(p>>5);
division[22]=p>>4; // 1/64
division[23]=(p>>5)+(p>>6);
division[24]=p>>5; // 1/28
division[25]=(p>>6)+(p>>7);
division[26]=p>>6; // 1/256
division[27]=(p>>7)+(p>>8);
division[28]=p>>7; //1/512]]></code.init>
         <code.krate><![CDATA[kbeat=inlet_kbeat;
if (inlet_start&&!rtrig){
	
	active=1;
	ppq1=-1;
	shadow=-1;
	rtrig=1;
}
else if (!inlet_start){
	rtrig=0;
}

if (inlet_stop&&!strig){
	active=0;
	strig=1;
	
}
else if (!inlet_stop){
	strig=0;
}

// clock for sync - goes from 0 to 0x07FFFFFF every beat, 1ppq
if (dialclock<(1<<27)){
dialclock+=((1<<27)/(kbeat));
}
if (dialclock>=(1<<27)){
	dialclock=(1<<27);
}

if ((inlet_1ppq!=ppq1) && active){
	ppq1=inlet_1ppq;
	if (ppq1==0){
		shadow+=1;
		}
	quarter=ppq1*p;
	bar=shadow*(p<<2);
	dialclock=0;

}
ppq384=dialclock/((1<<27)/p);

if (ppq384>=((p)-1)){
	ppq384=(p)-1;
}


synclock=bar+quarter+ppq384;
if (synclock!=pclock){
	pclock=synclock;
	g+=(1<<27)/(division[inlet_division]*divmul);
	if (g>=(1<<27)){
		g=1<<27;
	}
	
}
stepmax=param_stepmax;
if (inlet_divmul>0){
	divmul=inlet_divmul;
	}
else {
	divmul=param_divmul;
}

if (active){
	step=synclock/(division[inlet_division]*divmul);
}
else if (!active){
	step=-1;
}
if (step!=prevstep){
	g=0;
	prevstep=step;
	outstep+=1;
	if (step==0){
		start=1;
		outstep=0;
	}
	if (step>=0){
		trig=1;
	}

	if (outstep>=stepmax){
		outstep=0;
	}
}
if (active){
	if (param_stepmax){
		
		laststep=outstep;
	}
	else {
		laststep=step;
	}
}
else {
	laststep=-1;
}

if (inlet_gatelength>=(0x07F00000)){
	outlet_tied=1;
	gate=1-trig;
	
}
else if (inlet_gatelength<=(0x07F00000)/(division[inlet_division]*divmul)){
	gate=trig;
	outlet_tied=0;
}
else {
	outlet_tied=0;
	if (trig){
	gate=1;
	
	}
	if (g>=inlet_gatelength){
			gate=0;
		}

	}


	

if (active){
	if (param_stepmax){
		
		laststep=outstep;
	}
	else {
		laststep=step;
	}
}
else {
	g=0x07FFFFFF;
	laststep=-1;
}
outlet_step=laststep;
outlet_start=start;
outlet_gate=gate;


outlet_trig=trig;
trig=0;
start=0;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="8b91ff59-4f10-43a8-b709-451492a45913" name="latch_1" x="490" y="980">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="8b91ff59-4f10-43a8-b709-451492a45913">
         <sDescription>Copies the input to the output at the rising edge of the trigger input. Keeps the output otherwise.</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>logic.axh</helpPatch>
         <inlets>
            <int32 name="in" description="input"/>
            <int32 name="holdfreq"/>
            <int32 name="holdduration"/>
            <bool32.risingfalling name="hold"/>
         </inlets>
         <outlets>
            <int32 name="out" description="output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int out;
int prev;
int adjust;
int count;
int prevc;
int hold;
int hcount;
int duration;
int Hfreq;]]></code.declaration>
         <code.krate><![CDATA[Hfreq=inlet_holdfreq;
duration=inlet_holdduration;

	if ((inlet_in!=prev) && (inlet_in>=0)){
		if (Hfreq>0){
			count=out/Hfreq;
		}
		if (count!=prevc){
			prevc=count;
			if (inlet_hold){
			hold=1;
			hcount=-1;
			}
		}
		if (hcount>=(duration-1)){
			hold=0;
		}
		
		prev=inlet_in;
		if (!inlet_hold){

			hold=0;
		}
		
		if (!hold){
			out=inlet_in-adjust;
		}
		if (hold){
			hcount+=1;
			adjust+=1;
			
		}
		
		
		
	}
	else if (inlet_in<0){
		out=-1;
		adjust=0;
		hold=0;
		hcount=0;
	}






outlet_out=out;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="e0129700-be66-417a-a413-93d179502d46" name="object_3" x="616" y="980">
      <params>
         <int32 name="length" value="7"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="e0129700-be66-417a-a413-93d179502d46">
         <inlets>
            <int32 name="i1"/>
            <int32 name="length"/>
            <int32 name="mode"/>
            <bool32 name="reset"/>
         </inlets>
         <outlets>
            <int32 name="out"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="length">
               <MinValue i="0"/>
               <MaxValue i="30000"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int count;
int c;
int out;
int prevout;
int bounce;
int rtrig;
int btrig;
int length;
int pc;
int b2;
int Bcount;
bool reverse;
bool rev;]]></code.declaration>
         <code.krate><![CDATA[length=param_length+inlet_length;
count=inlet_i1-((inlet_i1/(length))*(length));
if (inlet_mode==0){
	reverse=0;
	bounce=0;
}
if (inlet_mode==1){
	reverse=1;
	bounce=0;
}
if (inlet_mode==2){
	bounce=1;
}
if (inlet_mode==3){
	bounce=2;
}
if (count!=prevout){
	if (bounce==1){
		if (!rev){
			Bcount+=1;
			if (Bcount==6){
				rev=1;
			}
		}
		else if (rev){
			Bcount-=1;
			if (Bcount==0){
				rev=0;
			}
		}
		c=Bcount;
	}

	else if (bounce==2){
		reverse=0;
		
		b2=count-((count>>1)<<1);
		if (!b2){
			if (count==0){	
				c=0;
			}
			
			else {	
				c=count-1;
				}	
		}
		else {
			c=count+1;
		}
	}
	else {
		if (!reverse){
			c=count;
			}
		else if (reverse){
			c=(length)-count-1;
			}
	}
	prevout=count;
}


if (inlet_i1>=0){
	out=c;
}
else if (inlet_i1<0){
	out=-1;
}
	


if (inlet_reset&&!rtrig){
	//reverse=0;
	Bcount=0;
	rtrig=1;
}
if (!inlet_reset){
	rtrig=0;
}




outlet_out=out;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="68cef256-ad9e-48a5-9e9d-fdf515393183" name="or_1" x="714" y="980">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="68cef256-ad9e-48a5-9e9d-fdf515393183">
         <sDescription>logic OR with 4 inputs</sDescription>
         <author>Alex</author>
         <license>BSD</license>
         <helpPatch>logic.axh</helpPatch>
         <inlets>
            <bool32 name="i1" description="input 1"/>
            <bool32 name="i2" description="input 2"/>
            <bool32 name="i3" description="input 1"/>
         </inlets>
         <outlets>
            <bool32 name="o" description="output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_o = (inlet_i1)||(inlet_i2)||(inlet_i3);]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="854" y="1106" text="arp clock"/>
   <comment type="patch/comment" x="1022" y="1106" text="pitch/stretch arp"/>
   <comment type="patch/comment" x="1176" y="1106" text="quantize pitch"/>
   <comment type="patch/comment" x="1260" y="1106" text="quantize stretch"/>
   <comment type="patch/comment" x="1372" y="1106" text="fact controller"/>
   <comment type="patch/comment" x="1554" y="1106" text="custom mux that handles turning on/off recording and playback"/>
   <obj type="rbrt/math/&lt;&lt; i c" uuid="984d06ee-2b58-4536-822a-bb4d9e119250" name="&lt;&lt;_1" x="686" y="1120">
      <params>
         <int32 name="shift" value="1"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="b94a9b8e9adcb7d18868c0ee808a9b211b65578d" name="+_11" x="784" y="1120">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="b93ac47e-8e25-4bd6-a396-3d43c3080cf0" name="1_12" x="854" y="1120">
      <params>
         <int32 name="stepmax" value="0"/>
         <int32 name="divmul" value="1"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="b93ac47e-8e25-4bd6-a396-3d43c3080cf0">
         <license>GPL</license>
         <inlets>
            <int32 name="kbeat"/>
            <int32 name="1ppq"/>
            <bool32 name="start"/>
            <bool32 name="stop"/>
            <int32 name="division"/>
            <frac32.positive name="gatelength"/>
            <int32 name="divmul"/>
         </inlets>
         <outlets>
            <int32 name="step"/>
            <bool32 name="trig"/>
            <bool32 name="start"/>
            <bool32 name="gate"/>
            <bool32 name="tied"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="stepmax" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="300000000"/>
            </int32>
            <int32 name="divmul">
               <MinValue i="1"/>
               <MaxValue i="300"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int dialclock;
int kbeat;
int ppq1;
int ppq384;
int prev384;
int synclock;
int step;
int pclock;
int g;
int gate;
int glength;
int shadow;
int prevstep;
int outstep;
int stepmax;
int active;
int count;
int bar;
int quarter;
int division[30];
int p;
int start;
int laststep;
int divmul;
bool trig;
bool strig;
bool rtrig;
bool atrig;]]></code.declaration>
         <code.init><![CDATA[shadow=-1;
prevstep=-1;
step=-1;
active=0;
p=384;
g=0x07FFFFFF;
//16bar 12bar  8bar  7bar  6bar  5bar  4bar  3bar  2bar .1bar  1bar .1/2   1/2  .1/4   1/4  .1/8   1/8  .1/16  1/16 .1/32  1/32 .1/64  1/64.1/128 1/128.1/256 1/256.1/512 1/512   off
division[0]=p<<5;//16
division[1]=(p<<4)+(p<<3);//12
division[2]=p<<4;//8
division[3]=(p<<4)+(p<<3)+(p<<2);//7
division[4]=(p<<4)+(p<<3);//6
division[5]=(p<<4)+(p<<2);//5
division[6]=p<<4; //4bar
division[7]=(p<<3)+(p<<2); //3bar
division[8]=p<<3; //2bar
division[9]=(p<<2)+(p<<3);
division[10]=p<<2; //1bar
division[11]=(p<<1)+p;
division[12]=p<<1; // 1/2
division[13]=p+(p>>1);
division[14]=p; // 1/4
division[15]=(p>>1)+(p>>2);
division[16]=p>>1; // 1/8
division[17]=(p>>2)+(p>>3);
division[18]=p>>2; // 1/16
division[19]=(p>>3)+(p>>4);
division[20]=p>>3; // 1/32
division[21]=(p>>4)+(p>>5);
division[22]=p>>4; // 1/64
division[23]=(p>>5)+(p>>6);
division[24]=p>>5; // 1/28
division[25]=(p>>6)+(p>>7);
division[26]=p>>6; // 1/256
division[27]=(p>>7)+(p>>8);
division[28]=p>>7; //1/512]]></code.init>
         <code.krate><![CDATA[kbeat=inlet_kbeat;
if (inlet_start&&!rtrig){
	
	active=1;
	ppq1=-1;
	shadow=-1;
	rtrig=1;
}
else if (!inlet_start){
	rtrig=0;
}

if (inlet_stop&&!strig){
	active=0;
	strig=1;
	
}
else if (!inlet_stop){
	strig=0;
}

// clock for sync - goes from 0 to 0x07FFFFFF every beat, 1ppq
if (dialclock<(1<<27)){
dialclock+=((1<<27)/(kbeat));
}
if (dialclock>=(1<<27)){
	dialclock=(1<<27);
}

if ((inlet_1ppq!=ppq1) && active){
	ppq1=inlet_1ppq;
	if (ppq1==0){
		shadow+=1;
		}
	quarter=ppq1*p;
	bar=shadow*(p<<2);
	dialclock=0;

}
ppq384=dialclock/((1<<27)/p);

if (ppq384>=((p)-1)){
	ppq384=(p)-1;
}


synclock=bar+quarter+ppq384;
if (synclock!=pclock){
	pclock=synclock;
	g+=(1<<27)/(division[inlet_division]*divmul);
	if (g>=(1<<27)){
		g=1<<27;
	}
	
}
stepmax=param_stepmax;
if (inlet_divmul>0){
	divmul=inlet_divmul;
	}
else {
	divmul=param_divmul;
}

if (active){
	step=synclock/(division[inlet_division]*divmul);
}
else if (!active){
	step=-1;
}
if (step!=prevstep){
	g=0;
	prevstep=step;
	outstep+=1;
	if (step==0){
		start=1;
		outstep=0;
	}
	if (step>=0){
		trig=1;
	}

	if (outstep>=stepmax){
		outstep=0;
	}
}
if (active){
	if (param_stepmax){
		
		laststep=outstep;
	}
	else {
		laststep=step;
	}
}
else {
	laststep=-1;
}

if (inlet_gatelength>=(0x07F00000)){
	outlet_tied=1;
	gate=1-trig;
	
}
else if (inlet_gatelength<=(0x07F00000)/(division[inlet_division]*divmul)){
	gate=trig;
	outlet_tied=0;
}
else {
	outlet_tied=0;
	if (trig){
	gate=1;
	
	}
	if (g>=inlet_gatelength){
			gate=0;
		}

	}


	

if (active){
	if (param_stepmax){
		
		laststep=outstep;
	}
	else {
		laststep=step;
	}
}
else {
	g=0x07FFFFFF;
	laststep=-1;
}
outlet_step=laststep;
outlet_start=start;
outlet_gate=gate;


outlet_trig=trig;
trig=0;
start=0;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="e0129700-be66-417a-a413-93d179502d46" name="object_2" x="1022" y="1120">
      <params>
         <int32 name="length" value="1"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="e0129700-be66-417a-a413-93d179502d46">
         <inlets>
            <int32 name="i1"/>
            <int32 name="length"/>
            <bool32 name="fifths"/>
            <int32 name="mode"/>
            <bool32 name="reset"/>
         </inlets>
         <outlets>
            <int32 name="out"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="length">
               <MinValue i="0"/>
               <MaxValue i="30000"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int count;
int c;
int out;
int prevout;
int bounce;
int rtrig;
int btrig;
int length;
int pc;
int b2;
bool reverse;]]></code.declaration>
         <code.krate><![CDATA[length=param_length+inlet_length;
count=inlet_i1-((inlet_i1/(length))*(length));
if (inlet_mode==0){
	reverse=0;
	bounce=0;
}
if (inlet_mode==1){
	reverse=1;
	bounce=0;
}
if (inlet_mode==2){
	bounce=1;
}
if (inlet_mode==3){
	bounce=2;
}
if (count!=prevout){
	if (bounce==1){
		if (count!=0){
			btrig=1;
		}
		if ((count==0)&&btrig){
			btrig=0;
			reverse=!reverse;
		}
	}

	if (bounce==2){
		reverse=0;
		
		b2=count-((count>>1)<<1);
		if (!b2){
			if (count==0){	
				c=0;
			}
			
			else {	
				c=count-1;
				}	
		}
		else {
			c=count+1;
		}
	}
	else {
		if (!reverse){
			c=count;
			}
		else if (reverse){
			c=(length)-count-1;
			}
	}
	prevout=count;
}


if (inlet_fifths){
	out=c;
	}
else{
	out=c<<1;
	}

if (inlet_reset&&!rtrig){
	//reverse=0;
	rtrig=1;
}
if (!inlet_reset){
	rtrig=0;
}



outlet_out=out;]]></code.krate>
      </object>
   </patchobj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_1" x="1176" y="1120">
      <params>
         <bool32.tgl name="b" value="1"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_2" x="1260" y="1120">
      <params>
         <bool32.tgl name="b" value="1"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="deaf7203-7977-4b97-adec-121c1c88c277" name="+_10" x="1372" y="1120">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="deaf7203-7977-4b97-adec-121c1c88c277">
         <sDescription>add</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>math.axh</helpPatch>
         <inlets>
            <frac32 name="pitch" description="in1"/>
            <frac32 name="stretch" description="in2"/>
            <bool32.risingfalling name="syncpitch"/>
            <bool32.risingfalling name="syncstretch"/>
            <bool32.risingfalling name="lock"/>
            <int32 name="arpindex"/>
            <bool32.risingfalling name="arp2pitch"/>
            <bool32.risingfalling name="arp2stretch"/>
         </inlets>
         <outlets>
            <frac32 name="pitch"/>
            <frac32 name="stretch" description="out"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int pitch;
int pindex;
int stretch;
int pmap[10]= {0,7,12,19,24,31,36,43,48,64};
int p5map[10]= {0,5,12,17,24,29,36,41,48,64};
int smap[10]= {0,6,12,18,24,30,36,42,48,64};]]></code.declaration>
         <code.krate><![CDATA[if (inlet_syncpitch){

	int i;
	for (i = 0;i<9;i++){
		if (inlet_pitch>=0){
			//pindex=(inlet_pitch/((1<<27)/6));
			//pitch=pmap[pindex]<<21;
			if ( ((inlet_pitch>>21)>=(pmap[i])) && ((inlet_pitch>>21)<pmap[i+1]) ){
				
				pindex=i-((i>>1)<<1);
				pitch=pmap[i]<<21;
				if (inlet_lock){
				stretch=smap[i]<<21;
				}
				}
			}
		else if (inlet_pitch<0){
			if ( ((-inlet_pitch>>21)>=(pmap[i])) && ((-inlet_pitch>>21)<pmap[i+1]) ){
				pindex=i-((i>>1)<<1);
				pitch=-pmap[i]<<21;
				if (inlet_lock){
				stretch=-smap[i]<<21;
				}
				}
			}
	}
	
	
	
}
else {
	pitch=inlet_pitch;
	if (inlet_lock){
		stretch=inlet_pitch;
		}
}

if (!inlet_lock){
	if (inlet_syncstretch){
	
		stretch=(((inlet_stretch>>21)/3)*3)<<21;
		
		
		
	}
	else {
		stretch=inlet_stretch;
	}
}
if (inlet_arp2pitch){
	if (!pindex){
		outlet_pitch=pitch+(pmap[inlet_arpindex]<<21);
	}
	else if (pindex){
		outlet_pitch=pitch+(p5map[inlet_arpindex]<<21);
	}
		
	}
else {
		outlet_pitch=pitch;
		
	}
if (inlet_arp2stretch){
	//if (!pindex){
		outlet_stretch=stretch+(smap[inlet_arpindex]<<21);
	//}
	

	
	}
else {
		
		outlet_stretch=stretch;
	}]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="a47b6b18-73a8-4dc0-8a6f-8ad7ffa5628d" name="1_16" x="1554" y="1120">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="a47b6b18-73a8-4dc0-8a6f-8ad7ffa5628d">
         <sDescription>Demultiplexer. Connects inlet i to outlet number s. Other outlets copy their corresponding default inlets.</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>demux 3.axh</helpPatch>
         <inlets>
            <int32.positive name="s" description="select"/>
            <bool32 name="tied"/>
            <bool32 name="gate"/>
            <bool32.rising name="kill"/>
            <frac32.positive name="feedforward"/>
            <frac32.bipolar name="decay"/>
            <bool32 name="freeze"/>
         </inlets>
         <outlets>
            <bool32 name="o0"/>
            <bool32 name="o1"/>
            <bool32 name="o2"/>
            <bool32 name="o3"/>
            <bool32 name="o4"/>
            <bool32 name="o5"/>
            <bool32 name="o6"/>
            <bool32 name="o7"/>
            <bool32 name="i0"/>
            <bool32 name="i1"/>
            <bool32 name="i2"/>
            <bool32 name="i3"/>
            <bool32 name="i4"/>
            <bool32 name="i5"/>
            <bool32 name="i6"/>
            <bool32 name="i7"/>
            <bool32 name="kill"/>
            <frac32.positive name="feedforward"/>
            <frac32.bipolar name="decay"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[bool in;
int kill;
int killtime;
int ktrig;
int khold;
int prevs;
int outputO[8];
int outputI[8];]]></code.declaration>
         <code.init><![CDATA[kill=-1;]]></code.init>
         <code.krate><![CDATA[killtime=3000;
if (inlet_tied){
	in=1;
}
else {
	in=inlet_gate;
}

if (inlet_kill&&!ktrig){
	kill=0;
	ktrig=1;
}
else if (!inlet_kill){
	ktrig=0;
}
if ((kill<killtime)&&(kill>=0)){
	kill+=1;
	if (kill==killtime){
		//kill=-1;
		khold=1;
	}
}


if (kill<0){
	if (inlet_s>=0){
		int i;
		for (i = 0;i<8;i++){
			if (i==inlet_s){
				if (!inlet_freeze){
				outputO[i]=in;
				}
				else {outputO[i]=0;}
				outputI[i]=1;
			}
			else if (i!=inlet_s){
				outputO[i]=0;
				outputI[i]=0;
			}
		}
	}
	else {
		int i;
		for (i = 0;i<8;i++){
			outputO[i]=0;
			outputI[i]=0;
		}
	}
}
else if (kill>0){
	if (kill<10){
		 int i;
		 for (i = 0;i<8;i++){
			outputO[i]=0;
		}
	}
	else if (kill>=10){
		 int i;
		 for (i = 0;i<8;i++){
			outputO[i]=1;
		}
	}
	
	int i;
	for (i = 0;i<8;i++){
		outputI[i]=0;
		}
}

if ((inlet_s!=prevs)&&khold){
	prevs=inlet_s;
	
	if (khold==2){
		khold=0;
		kill=-1;
	}
	if (khold==1){
		khold=2;
	}
	
}

if (inlet_s<0){
		if (khold){
			khold=0;
			kill=-1;
		}
	}

if ((kill>=0)&&(khold<2)){
outlet_kill=1;	
outlet_feedforward=0;
outlet_decay=0;
}
else {
	outlet_kill=0;
	outlet_decay=inlet_decay;
	outlet_feedforward=inlet_feedforward;
	}
outlet_o0=outputO[0];
outlet_o1=outputO[1];
outlet_o2=outputO[2];
outlet_o3=outputO[3];
outlet_o4=outputO[4];
outlet_o5=outputO[5];
outlet_o6=outputO[6];
outlet_o7=outputO[7];

outlet_i0=outputI[0];
outlet_i1=outputI[1];
outlet_i2=outputI[2];
outlet_i3=outputI[3];
outlet_i4=outputI[4];
outlet_i5=outputI[5];
outlet_i6=outputI[6];
outlet_i7=outputI[7];]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="1190" y="1190" text="if you turn these off the"/>
   <comment type="patch/comment" x="1162" y="1204" text=" pitch/dial settings are unquantized"/>
   <comment type="patch/comment" x="406" y="1540" text="feed forawrd envelopes - for de-clicking"/>
   <comment type="patch/comment" x="406" y="1554" text="playback envelopes - attack and &quot;feedalong&quot;"/>
   <comment type="patch/comment" x="406" y="1582" text="feedforward"/>
   <comment type="patch/comment" x="574" y="1582" text="playback env"/>
   <comment type="patch/comment" x="784" y="1582" text="feedforward"/>
   <comment type="patch/comment" x="938" y="1582" text="playback env"/>
   <comment type="patch/comment" x="1106" y="1582" text="feedforward"/>
   <comment type="patch/comment" x="1288" y="1582" text="playback env"/>
   <comment type="patch/comment" x="1484" y="1582" text="feedforward"/>
   <comment type="patch/comment" x="1680" y="1582" text="playback env"/>
   <comment type="patch/comment" x="1862" y="1582" text="feedforward"/>
   <comment type="patch/comment" x="2030" y="1582" text="playback env"/>
   <comment type="patch/comment" x="2212" y="1582" text="feedforward"/>
   <comment type="patch/comment" x="2394" y="1582" text="playback env"/>
   <comment type="patch/comment" x="2562" y="1582" text="feedforward"/>
   <comment type="patch/comment" x="2758" y="1582" text="playback env"/>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_12" x="224" y="1596">
      <params>
         <frac32.s.map name="value" value="-64.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_15" x="322" y="1596">
      <params>
         <frac32.s.map name="value" value="-64.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="e59aa1d6-f0ea-4dd5-82f5-288d8c9290eb" name="1_14" x="406" y="1596">
      <params>
         <frac32.s.map name="a" value="0.0"/>
         <frac32.s.map name="r" value="0.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="e59aa1d6-f0ea-4dd5-82f5-288d8c9290eb">
         <sDescription>Attack/decay/sustain/release envelope with modulation inputs</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>env.axh</helpPatch>
         <inlets>
            <bool32.risingfalling name="gate" description="gate"/>
            <frac32.bipolar name="a" description="attack time modulation"/>
            <frac32.bipolar name="r" description="release time modulation"/>
         </inlets>
         <outlets>
            <frac32.positive name="env" description="envelope output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map name="a"/>
            <frac32.s.map name="r"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int8_t stage;
int ntrig;
int32_t val;
]]></code.declaration>
         <code.init><![CDATA[stage = 0;
ntrig = 0;
val = 0;
]]></code.init>
         <code.krate><![CDATA[if ((inlet_gate>0) && !ntrig) {
   stage = 1;
   ntrig = 1;
}
if (!(inlet_gate>0) && ntrig) {
   stage = 0;
   ntrig = 0;
}
if (stage == 0){
   int32_t r1;
   int32_t r2;
   MTOF(- param_r - inlet_r, r1);
   r1 = 0x7FFFFFFF - (r1 >> 2);
   val = ___SMMUL(val,r1)<<1;
} else if (stage == 1){
   int32_t a;
   MTOF(- param_a - inlet_a,a);
   a = a >> 2;
   val = val + a;
   if (val<0) {
      val =0x7FFFFFFF;
      
   }
} 
outlet_env = val>>4;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="199869e4-18bf-4e35-baf5-75b1afbf3026" name="adsr_1" x="574" y="1596">
      <params>
         <frac32.s.map name="a" value="0.0"/>
         <frac32.s.map name="r" value="0.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="199869e4-18bf-4e35-baf5-75b1afbf3026">
         <sDescription>Attack/decay/sustain/release envelope with modulation inputs</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>env.axh</helpPatch>
         <inlets>
            <bool32.risingfalling name="gate" description="gate"/>
            <frac32.bipolar name="a" description="attack time modulation"/>
            <frac32.bipolar name="r" description="release time modulation"/>
         </inlets>
         <outlets>
            <frac32.positive name="env" description="envelope output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map name="a"/>
            <frac32.s.map name="r"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int8_t stage;
int ntrig;
int32_t val;
]]></code.declaration>
         <code.init><![CDATA[stage = 0;
ntrig = 0;
val = 0;
]]></code.init>
         <code.krate><![CDATA[if ((inlet_gate>0) && !ntrig) {
   stage = 1;
   ntrig = 1;
}
if (!(inlet_gate>0) && ntrig) {
   stage = 0;
   ntrig = 0;
}
if (stage == 0){
   int32_t r1;
   int32_t r2;
   MTOF(- param_r - inlet_r, r1);
   r1 = 0x7FFFFFFF - (r1 >> 2);
   val = ___SMMUL(val,r1)<<1;
} else if (stage == 1){
   int32_t a;
   MTOF(- param_a - inlet_a,a);
   a = a >> 2;
   val = val + a;
   if (val<0) {
      val =0x7FFFFFFF;
      
   }
} 
outlet_env = val>>4;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="e59aa1d6-f0ea-4dd5-82f5-288d8c9290eb" name="1_15" x="784" y="1596">
      <params>
         <frac32.s.map name="a" value="0.0"/>
         <frac32.s.map name="r" value="0.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="e59aa1d6-f0ea-4dd5-82f5-288d8c9290eb">
         <sDescription>Attack/decay/sustain/release envelope with modulation inputs</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>env.axh</helpPatch>
         <inlets>
            <bool32.risingfalling name="gate" description="gate"/>
            <frac32.bipolar name="a" description="attack time modulation"/>
            <frac32.bipolar name="r" description="release time modulation"/>
         </inlets>
         <outlets>
            <frac32.positive name="env" description="envelope output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map name="a"/>
            <frac32.s.map name="r"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int8_t stage;
int ntrig;
int32_t val;
]]></code.declaration>
         <code.init><![CDATA[stage = 0;
ntrig = 0;
val = 0;
]]></code.init>
         <code.krate><![CDATA[if ((inlet_gate>0) && !ntrig) {
   stage = 1;
   ntrig = 1;
}
if (!(inlet_gate>0) && ntrig) {
   stage = 0;
   ntrig = 0;
}
if (stage == 0){
   int32_t r1;
   int32_t r2;
   MTOF(- param_r - inlet_r, r1);
   r1 = 0x7FFFFFFF - (r1 >> 2);
   val = ___SMMUL(val,r1)<<1;
} else if (stage == 1){
   int32_t a;
   MTOF(- param_a - inlet_a,a);
   a = a >> 2;
   val = val + a;
   if (val<0) {
      val =0x7FFFFFFF;
      
   }
} 
outlet_env = val>>4;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="e59aa1d6-f0ea-4dd5-82f5-288d8c9290eb" name="1_1" x="938" y="1596">
      <params>
         <frac32.s.map name="a" value="0.0"/>
         <frac32.s.map name="r" value="0.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="e59aa1d6-f0ea-4dd5-82f5-288d8c9290eb">
         <sDescription>Attack/decay/sustain/release envelope with modulation inputs</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>env.axh</helpPatch>
         <inlets>
            <bool32.risingfalling name="gate" description="gate"/>
            <frac32.bipolar name="a" description="attack time modulation"/>
            <frac32.bipolar name="r" description="release time modulation"/>
         </inlets>
         <outlets>
            <frac32.positive name="env" description="envelope output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map name="a"/>
            <frac32.s.map name="r"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int8_t stage;
int ntrig;
int32_t val;
]]></code.declaration>
         <code.init><![CDATA[stage = 0;
ntrig = 0;
val = 0;
]]></code.init>
         <code.krate><![CDATA[if ((inlet_gate>0) && !ntrig) {
   stage = 1;
   ntrig = 1;
}
if (!(inlet_gate>0) && ntrig) {
   stage = 0;
   ntrig = 0;
}
if (stage == 0){
   int32_t r1;
   int32_t r2;
   MTOF(- param_r - inlet_r, r1);
   r1 = 0x7FFFFFFF - (r1 >> 2);
   val = ___SMMUL(val,r1)<<1;
} else if (stage == 1){
   int32_t a;
   MTOF(- param_a - inlet_a,a);
   a = a >> 2;
   val = val + a;
   if (val<0) {
      val =0x7FFFFFFF;
      
   }
} 
outlet_env = val>>4;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="e59aa1d6-f0ea-4dd5-82f5-288d8c9290eb" name="1_6" x="1106" y="1596">
      <params>
         <frac32.s.map name="a" value="0.0"/>
         <frac32.s.map name="r" value="0.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="e59aa1d6-f0ea-4dd5-82f5-288d8c9290eb">
         <sDescription>Attack/decay/sustain/release envelope with modulation inputs</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>env.axh</helpPatch>
         <inlets>
            <bool32.risingfalling name="gate" description="gate"/>
            <frac32.bipolar name="a" description="attack time modulation"/>
            <frac32.bipolar name="r" description="release time modulation"/>
         </inlets>
         <outlets>
            <frac32.positive name="env" description="envelope output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map name="a"/>
            <frac32.s.map name="r"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int8_t stage;
int ntrig;
int32_t val;
]]></code.declaration>
         <code.init><![CDATA[stage = 0;
ntrig = 0;
val = 0;
]]></code.init>
         <code.krate><![CDATA[if ((inlet_gate>0) && !ntrig) {
   stage = 1;
   ntrig = 1;
}
if (!(inlet_gate>0) && ntrig) {
   stage = 0;
   ntrig = 0;
}
if (stage == 0){
   int32_t r1;
   int32_t r2;
   MTOF(- param_r - inlet_r, r1);
   r1 = 0x7FFFFFFF - (r1 >> 2);
   val = ___SMMUL(val,r1)<<1;
} else if (stage == 1){
   int32_t a;
   MTOF(- param_a - inlet_a,a);
   a = a >> 2;
   val = val + a;
   if (val<0) {
      val =0x7FFFFFFF;
      
   }
} 
outlet_env = val>>4;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="9cc659cf-6691-4b0b-b5b0-c66edd99b0aa" name="1_2" x="1288" y="1596">
      <params>
         <frac32.s.map name="a" value="0.0"/>
         <frac32.s.map name="r" value="0.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="9cc659cf-6691-4b0b-b5b0-c66edd99b0aa">
         <sDescription>Attack/decay/sustain/release envelope with modulation inputs</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>env.axh</helpPatch>
         <inlets>
            <bool32.risingfalling name="gate" description="gate"/>
            <frac32.bipolar name="a" description="attack time modulation"/>
            <frac32.bipolar name="r" description="release time modulation"/>
         </inlets>
         <outlets>
            <frac32.positive name="env" description="envelope output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map name="a"/>
            <frac32.s.map name="r"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int8_t stage;
int ntrig;
int32_t val;
]]></code.declaration>
         <code.init><![CDATA[stage = 0;
ntrig = 0;
val = 0;
]]></code.init>
         <code.krate><![CDATA[if ((inlet_gate>0) && !ntrig) {
   stage = 1;
   ntrig = 1;
}
if (!(inlet_gate>0) && ntrig) {
   stage = 0;
   ntrig = 0;
}
if (stage == 0){
   int32_t r1;
   int32_t r2;
   MTOF(- param_r - inlet_r, r1);
   r1 = 0x7FFFFFFF - (r1 >> 2);
   val = ___SMMUL(val,r1)<<1;
} else if (stage == 1){
   int32_t a;
   MTOF(- param_a - inlet_a,a);
   a = a >> 2;
   val = val + a;
   if (val<0) {
      val =0x7FFFFFFF;
      
   }
} 
outlet_env = val>>4;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="e59aa1d6-f0ea-4dd5-82f5-288d8c9290eb" name="1_7" x="1484" y="1596">
      <params>
         <frac32.s.map name="a" value="0.0"/>
         <frac32.s.map name="r" value="0.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="e59aa1d6-f0ea-4dd5-82f5-288d8c9290eb">
         <sDescription>Attack/decay/sustain/release envelope with modulation inputs</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>env.axh</helpPatch>
         <inlets>
            <bool32.risingfalling name="gate" description="gate"/>
            <frac32.bipolar name="a" description="attack time modulation"/>
            <frac32.bipolar name="r" description="release time modulation"/>
         </inlets>
         <outlets>
            <frac32.positive name="env" description="envelope output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map name="a"/>
            <frac32.s.map name="r"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int8_t stage;
int ntrig;
int32_t val;
]]></code.declaration>
         <code.init><![CDATA[stage = 0;
ntrig = 0;
val = 0;
]]></code.init>
         <code.krate><![CDATA[if ((inlet_gate>0) && !ntrig) {
   stage = 1;
   ntrig = 1;
}
if (!(inlet_gate>0) && ntrig) {
   stage = 0;
   ntrig = 0;
}
if (stage == 0){
   int32_t r1;
   int32_t r2;
   MTOF(- param_r - inlet_r, r1);
   r1 = 0x7FFFFFFF - (r1 >> 2);
   val = ___SMMUL(val,r1)<<1;
} else if (stage == 1){
   int32_t a;
   MTOF(- param_a - inlet_a,a);
   a = a >> 2;
   val = val + a;
   if (val<0) {
      val =0x7FFFFFFF;
      
   }
} 
outlet_env = val>>4;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="c5d4cdf3-8c32-4b51-bbae-793bda2c2861" name="1_3" x="1680" y="1596">
      <params>
         <frac32.s.map name="a" value="0.0"/>
         <frac32.s.map name="r" value="0.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="c5d4cdf3-8c32-4b51-bbae-793bda2c2861">
         <sDescription>Attack/decay/sustain/release envelope with modulation inputs</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>env.axh</helpPatch>
         <inlets>
            <bool32.risingfalling name="gate" description="gate"/>
            <frac32.bipolar name="a" description="attack time modulation"/>
            <frac32.bipolar name="r" description="release time modulation"/>
         </inlets>
         <outlets>
            <frac32.positive name="env" description="envelope output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map name="a"/>
            <frac32.s.map name="r"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int8_t stage;
int ntrig;
int32_t val;
]]></code.declaration>
         <code.init><![CDATA[stage = 0;
ntrig = 0;
val = 0;
]]></code.init>
         <code.krate><![CDATA[if ((inlet_gate>0) && !ntrig) {
   stage = 1;
   ntrig = 1;
}
if (!(inlet_gate>0) && ntrig) {
   stage = 0;
   ntrig = 0;
}
if (stage == 0){
   int32_t r1;
   int32_t r2;
   MTOF(- param_r - inlet_r, r1);
   r1 = 0x7FFFFFFF - (r1 >> 2);
   val = ___SMMUL(val,r1)<<1;
} else if (stage == 1){
   int32_t a;
   MTOF(- param_a - inlet_a,a);
   a = a >> 2;
   val = val + a;
   if (val<0) {
      val =0x7FFFFFFF;
      
   }
} 
outlet_env = val>>4;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="e59aa1d6-f0ea-4dd5-82f5-288d8c9290eb" name="1_8" x="1862" y="1596">
      <params>
         <frac32.s.map name="a" value="0.0"/>
         <frac32.s.map name="r" value="0.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="e59aa1d6-f0ea-4dd5-82f5-288d8c9290eb">
         <sDescription>Attack/decay/sustain/release envelope with modulation inputs</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>env.axh</helpPatch>
         <inlets>
            <bool32.risingfalling name="gate" description="gate"/>
            <frac32.bipolar name="a" description="attack time modulation"/>
            <frac32.bipolar name="r" description="release time modulation"/>
         </inlets>
         <outlets>
            <frac32.positive name="env" description="envelope output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map name="a"/>
            <frac32.s.map name="r"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int8_t stage;
int ntrig;
int32_t val;
]]></code.declaration>
         <code.init><![CDATA[stage = 0;
ntrig = 0;
val = 0;
]]></code.init>
         <code.krate><![CDATA[if ((inlet_gate>0) && !ntrig) {
   stage = 1;
   ntrig = 1;
}
if (!(inlet_gate>0) && ntrig) {
   stage = 0;
   ntrig = 0;
}
if (stage == 0){
   int32_t r1;
   int32_t r2;
   MTOF(- param_r - inlet_r, r1);
   r1 = 0x7FFFFFFF - (r1 >> 2);
   val = ___SMMUL(val,r1)<<1;
} else if (stage == 1){
   int32_t a;
   MTOF(- param_a - inlet_a,a);
   a = a >> 2;
   val = val + a;
   if (val<0) {
      val =0x7FFFFFFF;
      
   }
} 
outlet_env = val>>4;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="199869e4-18bf-4e35-baf5-75b1afbf3026" name="adsr_2" x="2030" y="1596">
      <params>
         <frac32.s.map name="a" value="0.0"/>
         <frac32.s.map name="r" value="0.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="199869e4-18bf-4e35-baf5-75b1afbf3026">
         <sDescription>Attack/decay/sustain/release envelope with modulation inputs</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>env.axh</helpPatch>
         <inlets>
            <bool32.risingfalling name="gate" description="gate"/>
            <frac32.bipolar name="a" description="attack time modulation"/>
            <frac32.bipolar name="r" description="release time modulation"/>
         </inlets>
         <outlets>
            <frac32.positive name="env" description="envelope output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map name="a"/>
            <frac32.s.map name="r"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int8_t stage;
int ntrig;
int32_t val;
]]></code.declaration>
         <code.init><![CDATA[stage = 0;
ntrig = 0;
val = 0;
]]></code.init>
         <code.krate><![CDATA[if ((inlet_gate>0) && !ntrig) {
   stage = 1;
   ntrig = 1;
}
if (!(inlet_gate>0) && ntrig) {
   stage = 0;
   ntrig = 0;
}
if (stage == 0){
   int32_t r1;
   int32_t r2;
   MTOF(- param_r - inlet_r, r1);
   r1 = 0x7FFFFFFF - (r1 >> 2);
   val = ___SMMUL(val,r1)<<1;
} else if (stage == 1){
   int32_t a;
   MTOF(- param_a - inlet_a,a);
   a = a >> 2;
   val = val + a;
   if (val<0) {
      val =0x7FFFFFFF;
      
   }
} 
outlet_env = val>>4;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="e59aa1d6-f0ea-4dd5-82f5-288d8c9290eb" name="1_11" x="2212" y="1596">
      <params>
         <frac32.s.map name="a" value="0.0"/>
         <frac32.s.map name="r" value="0.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="e59aa1d6-f0ea-4dd5-82f5-288d8c9290eb">
         <sDescription>Attack/decay/sustain/release envelope with modulation inputs</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>env.axh</helpPatch>
         <inlets>
            <bool32.risingfalling name="gate" description="gate"/>
            <frac32.bipolar name="a" description="attack time modulation"/>
            <frac32.bipolar name="r" description="release time modulation"/>
         </inlets>
         <outlets>
            <frac32.positive name="env" description="envelope output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map name="a"/>
            <frac32.s.map name="r"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int8_t stage;
int ntrig;
int32_t val;
]]></code.declaration>
         <code.init><![CDATA[stage = 0;
ntrig = 0;
val = 0;
]]></code.init>
         <code.krate><![CDATA[if ((inlet_gate>0) && !ntrig) {
   stage = 1;
   ntrig = 1;
}
if (!(inlet_gate>0) && ntrig) {
   stage = 0;
   ntrig = 0;
}
if (stage == 0){
   int32_t r1;
   int32_t r2;
   MTOF(- param_r - inlet_r, r1);
   r1 = 0x7FFFFFFF - (r1 >> 2);
   val = ___SMMUL(val,r1)<<1;
} else if (stage == 1){
   int32_t a;
   MTOF(- param_a - inlet_a,a);
   a = a >> 2;
   val = val + a;
   if (val<0) {
      val =0x7FFFFFFF;
      
   }
} 
outlet_env = val>>4;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="e59aa1d6-f0ea-4dd5-82f5-288d8c9290eb" name="1_4" x="2394" y="1596">
      <params>
         <frac32.s.map name="a" value="0.0"/>
         <frac32.s.map name="r" value="0.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="e59aa1d6-f0ea-4dd5-82f5-288d8c9290eb">
         <sDescription>Attack/decay/sustain/release envelope with modulation inputs</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>env.axh</helpPatch>
         <inlets>
            <bool32.risingfalling name="gate" description="gate"/>
            <frac32.bipolar name="a" description="attack time modulation"/>
            <frac32.bipolar name="r" description="release time modulation"/>
         </inlets>
         <outlets>
            <frac32.positive name="env" description="envelope output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map name="a"/>
            <frac32.s.map name="r"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int8_t stage;
int ntrig;
int32_t val;
]]></code.declaration>
         <code.init><![CDATA[stage = 0;
ntrig = 0;
val = 0;
]]></code.init>
         <code.krate><![CDATA[if ((inlet_gate>0) && !ntrig) {
   stage = 1;
   ntrig = 1;
}
if (!(inlet_gate>0) && ntrig) {
   stage = 0;
   ntrig = 0;
}
if (stage == 0){
   int32_t r1;
   int32_t r2;
   MTOF(- param_r - inlet_r, r1);
   r1 = 0x7FFFFFFF - (r1 >> 2);
   val = ___SMMUL(val,r1)<<1;
} else if (stage == 1){
   int32_t a;
   MTOF(- param_a - inlet_a,a);
   a = a >> 2;
   val = val + a;
   if (val<0) {
      val =0x7FFFFFFF;
      
   }
} 
outlet_env = val>>4;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="e59aa1d6-f0ea-4dd5-82f5-288d8c9290eb" name="1_13" x="2562" y="1596">
      <params>
         <frac32.s.map name="a" value="0.0"/>
         <frac32.s.map name="r" value="0.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="e59aa1d6-f0ea-4dd5-82f5-288d8c9290eb">
         <sDescription>Attack/decay/sustain/release envelope with modulation inputs</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>env.axh</helpPatch>
         <inlets>
            <bool32.risingfalling name="gate" description="gate"/>
            <frac32.bipolar name="a" description="attack time modulation"/>
            <frac32.bipolar name="r" description="release time modulation"/>
         </inlets>
         <outlets>
            <frac32.positive name="env" description="envelope output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map name="a"/>
            <frac32.s.map name="r"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int8_t stage;
int ntrig;
int32_t val;
]]></code.declaration>
         <code.init><![CDATA[stage = 0;
ntrig = 0;
val = 0;
]]></code.init>
         <code.krate><![CDATA[if ((inlet_gate>0) && !ntrig) {
   stage = 1;
   ntrig = 1;
}
if (!(inlet_gate>0) && ntrig) {
   stage = 0;
   ntrig = 0;
}
if (stage == 0){
   int32_t r1;
   int32_t r2;
   MTOF(- param_r - inlet_r, r1);
   r1 = 0x7FFFFFFF - (r1 >> 2);
   val = ___SMMUL(val,r1)<<1;
} else if (stage == 1){
   int32_t a;
   MTOF(- param_a - inlet_a,a);
   a = a >> 2;
   val = val + a;
   if (val<0) {
      val =0x7FFFFFFF;
      
   }
} 
outlet_env = val>>4;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="9cc659cf-6691-4b0b-b5b0-c66edd99b0aa" name="1_5" x="2758" y="1596">
      <params>
         <frac32.s.map name="a" value="0.0"/>
         <frac32.s.map name="r" value="0.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="9cc659cf-6691-4b0b-b5b0-c66edd99b0aa">
         <sDescription>Attack/decay/sustain/release envelope with modulation inputs</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>env.axh</helpPatch>
         <inlets>
            <bool32.risingfalling name="gate" description="gate"/>
            <frac32.bipolar name="a" description="attack time modulation"/>
            <frac32.bipolar name="r" description="release time modulation"/>
         </inlets>
         <outlets>
            <frac32.positive name="env" description="envelope output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map name="a"/>
            <frac32.s.map name="r"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int8_t stage;
int ntrig;
int32_t val;
]]></code.declaration>
         <code.init><![CDATA[stage = 0;
ntrig = 0;
val = 0;
]]></code.init>
         <code.krate><![CDATA[if ((inlet_gate>0) && !ntrig) {
   stage = 1;
   ntrig = 1;
}
if (!(inlet_gate>0) && ntrig) {
   stage = 0;
   ntrig = 0;
}
if (stage == 0){
   int32_t r1;
   int32_t r2;
   MTOF(- param_r - inlet_r, r1);
   r1 = 0x7FFFFFFF - (r1 >> 2);
   val = ___SMMUL(val,r1)<<1;
} else if (stage == 1){
   int32_t a;
   MTOF(- param_a - inlet_a,a);
   a = a >> 2;
   val = val + a;
   if (val<0) {
      val =0x7FFFFFFF;
      
   }
} 
outlet_env = val>>4;]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="2954" y="1610" text="controls wet/dry levels"/>
   <patchobj type="patch/object" uuid="e53dbbfd-3790-48dd-bbef-2b6ef7179b63" name="wetdry_1" x="2954" y="1624">
      <params>
         <frac32.u.map name="centregain" value="64.0"/>
         <frac32.s.map name="centrepos" value="0.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="e53dbbfd-3790-48dd-bbef-2b6ef7179b63">
         <sDescription>(inverse) exponential curving module
exp parameter above zero is exponential curve
exp parameter below zero is inverse exponential curve</sDescription>
         <author>Remco van der Most</author>
         <license>BSD</license>
         <inlets>
            <frac32.positive name="wetdry"/>
            <bool32 name="bypass"/>
         </inlets>
         <outlets>
            <frac32.positive name="dry"/>
            <frac32.positive name="wet"/>
            <frac32.positive name="pos"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="centregain"/>
            <frac32.s.map name="centrepos"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t wet;
int32_t wetB;
int32_t dry;
int32_t dryB;
int32_t xfade;
int32_t expo;
int32_t expoB;
int32_t dir;]]></code.declaration>
         <code.krate><![CDATA[int32_t inexpoWD=__SSAT(-param_centrepos,28);
dir=inexpoWD>0?1:-1;
inexpoWD=inexpoWD>0?inexpoWD:-inexpoWD;
int32_t invWD=(1<<27)-inexpoWD;
int dar;
dar=inlet_wetdry>0?1:-1;
int32_t posWD=inlet_wetdry>0?inlet_wetdry:-inlet_wetdry;
if(dir>0)
{expo=___SMMUL(posWD<<3,(invWD+___SMMUL(inexpoWD<<3,posWD<<2))<<2);}
if(dir<0)
{expo=___SMMUL(((1<<27)-posWD)<<3,(invWD+___SMMUL(inexpoWD<<3,((1<<27)-posWD)<<2))<<2);}
expoB=___SMMUL(expo<<3,(invWD+___SMMUL(inexpoWD<<3,expo<<2))<<2);
if(dir>0)
{xfade=expoB*dar;}
if(dir<0)
{xfade=((1<<27)-expoB)*dar;}




int32_t inexpo=__SSAT(-param_centregain,28);
inexpo=inexpo>0?inexpo:-inexpo;
int32_t inv=(1<<27)-inexpo;

// wet

int32_t pos=xfade>0?xfade:-xfade;


wet=___SMMUL(((1<<27)-pos)<<3,(inv+___SMMUL(inexpo<<3,((1<<27)-pos)<<2))<<2);
wetB= ___SMMUL(wet<<3,(inv+___SMMUL(inexpo<<3,wet<<2))<<2);

//dry
int32_t invertX = (1<<27) - xfade-1;


int32_t posD=invertX>0?invertX:-invertX;
dry=___SMMUL(((1<<27)-posD)<<3,(inv+___SMMUL(inexpo<<3,((1<<27)-posD)<<2))<<2);
dryB= ___SMMUL(dry<<3,(inv+___SMMUL(inexpo<<3,dry<<2))<<2);

if (!inlet_bypass){
	outlet_wet=((1<<27)-wetB);
	
	outlet_dry=((1<<27)-dryB);
	
	outlet_pos=xfade;
	}
else if (inlet_bypass){
	outlet_wet=0x00000000;
	
	outlet_dry=0x07FFFFFF;
	
	outlet_pos=0x00000000;
	}]]></code.krate>
      </object>
   </patchobj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_12" x="2772" y="1666">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="518" y="1764" text="mute when record"/>
   <comment type="patch/comment" x="1974" y="1764" text="mute when record"/>
   <obj type="logic/or 2" uuid="3805d3c84d30032a44fbdbe42d9a2988a1790a3e" name="or_2" x="308" y="1778">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_22" x="406" y="1778">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/inv" uuid="2bd44b865d3b63ff9b80862242bf5be779e3ad5" name="inv_1" x="546" y="1778">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_5" x="602" y="1778">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_13" x="770" y="1778">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/inv" uuid="2bd44b865d3b63ff9b80862242bf5be779e3ad5" name="inv_2" x="910" y="1778">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_7" x="966" y="1778">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_17" x="1120" y="1778">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/inv" uuid="2bd44b865d3b63ff9b80862242bf5be779e3ad5" name="inv_3" x="1274" y="1778">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_8" x="1330" y="1778">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_18" x="1498" y="1778">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/inv" uuid="2bd44b865d3b63ff9b80862242bf5be779e3ad5" name="inv_4" x="1666" y="1778">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_9" x="1722" y="1778">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_19" x="1862" y="1778">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/inv" uuid="2bd44b865d3b63ff9b80862242bf5be779e3ad5" name="inv_5" x="2002" y="1778">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_10" x="2058" y="1778">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_20" x="2226" y="1778">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/inv" uuid="2bd44b865d3b63ff9b80862242bf5be779e3ad5" name="inv_6" x="2366" y="1778">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_11" x="2422" y="1778">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_21" x="2576" y="1778">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/inv" uuid="2bd44b865d3b63ff9b80862242bf5be779e3ad5" name="inv_7" x="2730" y="1778">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="126" y="1820" text="feedback"/>
   <comment type="patch/comment" x="196" y="1820" text="input +feedback"/>
   <comment type="patch/comment" x="672" y="1820" text="playbackvca"/>
   <comment type="patch/comment" x="3066" y="1820" text="wet"/>
   <comment type="patch/comment" x="3150" y="1820" text="dry"/>
   <obj type="audio/in left" uuid="d40e60b7641fe75af4d7c91b45bb038aacafc52e" name="in_1" x="56" y="1834">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="c16a625a661f40e4b359db604dcd00b3befcdbe3" name="*_6" x="126" y="1834">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_5" x="196" y="1834">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="6f2f579d-6d77-4142-b153-c36b31af5849" name="mute_1" x="308" y="1834">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="6f2f579d-6d77-4142-b153-c36b31af5849">
         <sDescription>&quot;voltage controlled amplifier&quot;, multiplies v and a inputs, with linear interpolation from k- to s-rate</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <inlets>
            <frac32buffer name="a" description="audio input"/>
            <bool32.risingfalling name="kill"/>
         </inlets>
         <outlets>
            <frac32buffer name="o" description="output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t prev;
    int32_t step;
    int32_t value;]]></code.declaration>
         <code.krate><![CDATA[if (inlet_kill){
	value=0;
	
}
else {value=0x07FFFFFF;}
step = (value - prev)>>4;
   int32_t i = prev;
   prev = value;]]></code.krate>
         <code.srate><![CDATA[outlet_o =  ___SMMUL(inlet_a,i)<<5;
   i += step;]]></code.srate>
      </object>
   </patchobj>
   <obj type="math/*" uuid="c16a625a661f40e4b359db604dcd00b3befcdbe3" name="*_4" x="406" y="1834">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_4" x="476" y="1834">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="fcac4eb8-80f6-44e9-9b72-b3b03b7f10b2" name="Fact_1" x="546" y="1834">
      <params/>
      <attribs>
         <combo attributeName="size" selection="262144 (5.46s)"/>
      </attribs>
      <object id="patch/object" uuid="fcac4eb8-80f6-44e9-9b72-b3b03b7f10b2">
         <sDescription>Difficult to name. Pitchshifter, time-stretcher, play-rate adjuster (stretch+pitchshift), sampler, delay, granulizer...

See inputs/controls for their functions (hoover above them)</sDescription>
         <author>Remco van der most</author>
         <license>BSD</license>
         <helpPatch>delay.axh</helpPatch>
         <inlets>
            <frac32buffer name="in" description="audio input"/>
            <bool32 name="rec" description="when high, records to buffer"/>
            <bool32 name="sync" description="when high, restarts at &quot;phase-position&quot;  of phase input+parameter"/>
            <frac32.bipolar name="pitchshift" description="ONLY pitchshifts the signal without stretching it. normal semitone response."/>
            <frac32.bipolar name="stretch" description="ONLY stretches the signal without pitchshifting it. normal semitone response."/>
            <frac32.bipolar name="rate"/>
         </inlets>
         <outlets>
            <frac32buffer name="out"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <combo name="size">
               <MenuEntries>
                  <string>256 (5.33ms)</string>
                  <string>512 (10.66ms)</string>
                  <string>1024 (21.33ms)</string>
                  <string>2048 (42.66ms)</string>
                  <string>4096 (85.33ms)</string>
                  <string>8192 (170ms)</string>
                  <string>16384 (341ms)</string>
                  <string>32768 (682ms)</string>
                  <string>65536 (1.36s)</string>
                  <string>131072 (2.73s)</string>
                  <string>262144 (5.46s)</string>
                  <string>524288 (10.9s)</string>
                  <string>1048576 (21.8s)</string>
                  <string>2097152 (43.7s)</string>
               </MenuEntries>
               <CEntries>
                  <string>8</string>
                  <string>9</string>
                  <string>10</string>
                  <string>11</string>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
                  <string>16</string>
                  <string>17</string>
                  <string>18</string>
                  <string>19</string>
                  <string>20</string>
                  <string>21</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
int16_t *array;
uint32_t writepos;
int32_t out;
uint32_t phase;
uint32_t phs;
bool rec;
int32_t rate;
uint32_t length;
int32_t cnt;
int32_t fade;
int32_t fd;
float32_t ratio;
int32_t fBase;
int32_t fRate;
int32_t LNG;
int dir;
int32_t READ(int T,uint32_t R,uint32_t L){
      int32_t tmp_a2;
      uint32_t tmp_di = T/R;
      uint32_t tmp_w1 = (T-tmp_di*R)*R>>2;
      int32_t tmp_a1 = array[tmp_di];
      tmp_a1 = (tmp_a1<<14)+___SMMUL(array[(tmp_di+1)]-tmp_a1<<16,tmp_w1);
      if(tmp_di<fade){
      tmp_a2 = array[tmp_di+L];
      tmp_a2 = (tmp_a2<<14)+___SMMUL(array[(tmp_di+1)+L]-tmp_a2<<16,tmp_w1);
      tmp_a1+=___SMMUL(tmp_a2-tmp_a1,__USAT(fade-tmp_di,30)<<(30-fd))<<2;
      }
     
      
      return out= tmp_a1;
}
uint32_t prv;
bool Dr;


bool snc;]]></code.declaration>
         <code.init><![CDATA[static int16_t _array[attr_poly][1<<attr_size]  __attribute__ ((section (".sdram")));
array = &_array[parent->polyIndex][0];
   int i;
   writepos = 0;
   for(i=0;i<LENGTH;i++) array[i] = 0;
   dir=1;]]></code.init>
         <code.krate><![CDATA[fade=1<<10;
fd=10;






if((inlet_sync>0)&&!snc){
phase=0;
phs=0;
snc=1;
}
else if(inlet_sync==0){snc=0;}

MTOFEXTENDED(0,fBase);
MTOFEXTENDED(inlet_stretch,fRate)
ratio=(float32_t)fRate/fBase;

if((inlet_rec>0)&&!rec){
	rec=1;
	
	writepos=0;
	cnt=0;
}
else if((inlet_rec==0)&&rec){rec=0;length=writepos;cnt=fade;}

LNG=___SMMUL(length,0x7FFFFFF0)<<1;

rate=((uint64_t)1<<32)/LNG;
int32_t RATE=rate*ratio;



int32_t prate;
MTOFEXTENDED(inlet_pitchshift-inlet_stretch,prate)
float32_t pratio=(float32_t)prate/fBase;
int32_t window=((uint64_t)0x7FFFFFF0<<12)/length;


float32_t wratio=(float32_t)(1<<30)/(window>>1);
prate=(int64_t)((int64_t)RATE*pratio-RATE)*wratio;]]></code.krate>
         <code.srate><![CDATA[int32_t FRQ=___SMMUL(prate<<2,inlet_rate<<3);
phase+=___SMMUL(RATE<<2,inlet_rate<<3);
phs+=FRQ;
uint32_t P3=phs;

if(rec>0){
array[writepos] = __SSAT(inlet_in>>14,16);
}
if(cnt>0){
array[writepos]=__SSAT(inlet_in>>14,16);
cnt-=1;
}
writepos = (writepos + 1)&LENGTHMASK;

uint32_t P1=((uint32_t)phs)>>1;
uint32_t P2=((uint32_t)phs+(1<<31))>>1;
int32_t tmp1=READ(phase+(___SMMUL(P1,window)<<2),rate,LNG);
int32_t tmp2=READ(phase+(___SMMUL(P2,window)<<2),rate,LNG);
int32_t mp;
SINE2TINTERP(phs-(1<<30),mp)
mp=(mp>>2)+(1<<29);
int32_t out=tmp2+(___SMMUL(tmp1-tmp2,mp)<<2);

outlet_out=out;

prv=phs;]]></code.srate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="a3573f58-7752-4820-b96a-ea1d8203fa22" name="vca_1" x="672" y="1834">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="a3573f58-7752-4820-b96a-ea1d8203fa22">
         <sDescription>&quot;voltage controlled amplifier&quot;, multiplies v and a inputs, with linear interpolation from k- to s-rate</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <inlets>
            <frac32 name="v" description="gain input"/>
            <frac32buffer name="a" description="audio input"/>
         </inlets>
         <outlets>
            <frac32buffer name="o" description="output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[   int32_t prev;
    int32_t step;
]]></code.declaration>
         <code.krate><![CDATA[   step = (inlet_v - prev)>>4;
   int32_t i = prev;
   prev = inlet_v;
]]></code.krate>
         <code.srate><![CDATA[   outlet_o =  ___SMMUL(inlet_a,i)<<5;
   i += step;
]]></code.srate>
      </object>
   </patchobj>
   <obj type="math/*" uuid="c16a625a661f40e4b359db604dcd00b3befcdbe3" name="*_3" x="770" y="1834">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_1" x="840" y="1834">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="4d86e1a2-7cd5-407f-b76b-38a0bb28e78a" name="Fact_2" x="910" y="1834">
      <params/>
      <attribs>
         <combo attributeName="size" selection="262144 (5.46s)"/>
      </attribs>
      <object id="patch/object" uuid="4d86e1a2-7cd5-407f-b76b-38a0bb28e78a">
         <sDescription>Difficult to name. Pitchshifter, time-stretcher, play-rate adjuster (stretch+pitchshift), sampler, delay, granulizer...

See inputs/controls for their functions (hoover above them)</sDescription>
         <author>Remco van der most</author>
         <license>BSD</license>
         <helpPatch>delay.axh</helpPatch>
         <inlets>
            <frac32buffer name="in" description="audio input"/>
            <bool32 name="rec" description="when high, records to buffer"/>
            <bool32 name="sync" description="when high, restarts at &quot;phase-position&quot;  of phase input+parameter"/>
            <frac32.bipolar name="pitchshift" description="ONLY pitchshifts the signal without stretching it. normal semitone response."/>
            <frac32.bipolar name="stretch" description="ONLY stretches the signal without pitchshifting it. normal semitone response."/>
            <frac32.bipolar name="rate"/>
         </inlets>
         <outlets>
            <frac32buffer name="out"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <combo name="size">
               <MenuEntries>
                  <string>256 (5.33ms)</string>
                  <string>512 (10.66ms)</string>
                  <string>1024 (21.33ms)</string>
                  <string>2048 (42.66ms)</string>
                  <string>4096 (85.33ms)</string>
                  <string>8192 (170ms)</string>
                  <string>16384 (341ms)</string>
                  <string>32768 (682ms)</string>
                  <string>65536 (1.36s)</string>
                  <string>131072 (2.73s)</string>
                  <string>262144 (5.46s)</string>
                  <string>524288 (10.9s)</string>
                  <string>1048576 (21.8s)</string>
                  <string>2097152 (43.7s)</string>
               </MenuEntries>
               <CEntries>
                  <string>8</string>
                  <string>9</string>
                  <string>10</string>
                  <string>11</string>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
                  <string>16</string>
                  <string>17</string>
                  <string>18</string>
                  <string>19</string>
                  <string>20</string>
                  <string>21</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
int16_t *array;
uint32_t writepos;
int32_t out;
uint32_t phase;
uint32_t phs;
bool rec;
int32_t rate;
uint32_t length;
int32_t cnt;
int32_t fade;
int32_t fd;
float32_t ratio;
int32_t fBase;
int32_t fRate;
int32_t LNG;
int dir;
int32_t READ(int T,uint32_t R,uint32_t L){
      int32_t tmp_a2;
      uint32_t tmp_di = T/R;
      uint32_t tmp_w1 = (T-tmp_di*R)*R>>2;
      int32_t tmp_a1 = array[tmp_di];
      tmp_a1 = (tmp_a1<<14)+___SMMUL(array[(tmp_di+1)]-tmp_a1<<16,tmp_w1);
      if(tmp_di<fade){
      tmp_a2 = array[tmp_di+L];
      tmp_a2 = (tmp_a2<<14)+___SMMUL(array[(tmp_di+1)+L]-tmp_a2<<16,tmp_w1);
      tmp_a1+=___SMMUL(tmp_a2-tmp_a1,__USAT(fade-tmp_di,30)<<(30-fd))<<2;
      }
     
      
      return out= tmp_a1;
}
uint32_t prv;
bool Dr;


bool snc;]]></code.declaration>
         <code.init><![CDATA[static int16_t _array[attr_poly][1<<attr_size]  __attribute__ ((section (".sdram")));
array = &_array[parent->polyIndex][0];
   int i;
   writepos = 0;
   for(i=0;i<LENGTH;i++) array[i] = 0;
   dir=1;]]></code.init>
         <code.krate><![CDATA[fade=1<<10;
fd=10;






if((inlet_sync>0)&&!snc){
phase=0;
phs=0;
snc=1;
}
else if(inlet_sync==0){snc=0;}

MTOFEXTENDED(0,fBase);
MTOFEXTENDED(inlet_stretch,fRate)
ratio=(float32_t)fRate/fBase;

if((inlet_rec>0)&&!rec){
	rec=1;
	
	writepos=0;
	cnt=0;
}
else if((inlet_rec==0)&&rec){rec=0;length=writepos;cnt=fade;}
LNG=___SMMUL(length,0x7FFFFFF0)<<1;

rate=((uint64_t)1<<32)/LNG;
int32_t RATE=rate*ratio;



int32_t prate;
MTOFEXTENDED(inlet_pitchshift-inlet_stretch,prate)
float32_t pratio=(float32_t)prate/fBase;
int32_t window=((uint64_t)0x7FFFFFF0<<12)/length;


float32_t wratio=(float32_t)(1<<30)/(window>>1);
prate=(int64_t)((int64_t)RATE*pratio-RATE)*wratio;]]></code.krate>
         <code.srate><![CDATA[int32_t FRQ=___SMMUL(prate<<2,inlet_rate<<3);
phase+=___SMMUL(RATE<<2,inlet_rate<<3);
phs+=FRQ;
uint32_t P3=phs;

if(rec>0){
array[writepos] = __SSAT(inlet_in>>14,16);
}
if(cnt>0){
array[writepos]=__SSAT(inlet_in>>14,16);
cnt-=1;
}
writepos = (writepos + 1)&LENGTHMASK;

uint32_t P1=((uint32_t)phs)>>1;
uint32_t P2=((uint32_t)phs+(1<<31))>>1;
int32_t tmp1=READ(phase+(___SMMUL(P1,window)<<2),rate,LNG);
int32_t tmp2=READ(phase+(___SMMUL(P2,window)<<2),rate,LNG);
int32_t mp;
SINE2TINTERP(phs-(1<<30),mp)
mp=(mp>>2)+(1<<29);
int32_t out=tmp2+(___SMMUL(tmp1-tmp2,mp)<<2);

outlet_out=out;

prv=phs;]]></code.srate>
      </object>
   </patchobj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_2" x="1036" y="1834">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="c16a625a661f40e4b359db604dcd00b3befcdbe3" name="*_2" x="1120" y="1834">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_2" x="1204" y="1834">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="744a532a-7bb8-4c3b-8980-0770f37fc156" name="Fact_3" x="1274" y="1834">
      <params/>
      <attribs>
         <combo attributeName="size" selection="262144 (5.46s)"/>
      </attribs>
      <object id="patch/object" uuid="744a532a-7bb8-4c3b-8980-0770f37fc156">
         <sDescription>Difficult to name. Pitchshifter, time-stretcher, play-rate adjuster (stretch+pitchshift), sampler, delay, granulizer...

See inputs/controls for their functions (hoover above them)</sDescription>
         <author>Remco van der most</author>
         <license>BSD</license>
         <helpPatch>delay.axh</helpPatch>
         <inlets>
            <frac32buffer name="in" description="audio input"/>
            <bool32 name="rec" description="when high, records to buffer"/>
            <bool32 name="sync" description="when high, restarts at &quot;phase-position&quot;  of phase input+parameter"/>
            <frac32.bipolar name="pitchshift" description="ONLY pitchshifts the signal without stretching it. normal semitone response."/>
            <frac32.bipolar name="stretch" description="ONLY stretches the signal without pitchshifting it. normal semitone response."/>
            <frac32.bipolar name="rate"/>
         </inlets>
         <outlets>
            <frac32buffer name="out"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <combo name="size">
               <MenuEntries>
                  <string>256 (5.33ms)</string>
                  <string>512 (10.66ms)</string>
                  <string>1024 (21.33ms)</string>
                  <string>2048 (42.66ms)</string>
                  <string>4096 (85.33ms)</string>
                  <string>8192 (170ms)</string>
                  <string>16384 (341ms)</string>
                  <string>32768 (682ms)</string>
                  <string>65536 (1.36s)</string>
                  <string>131072 (2.73s)</string>
                  <string>262144 (5.46s)</string>
                  <string>524288 (10.9s)</string>
                  <string>1048576 (21.8s)</string>
                  <string>2097152 (43.7s)</string>
               </MenuEntries>
               <CEntries>
                  <string>8</string>
                  <string>9</string>
                  <string>10</string>
                  <string>11</string>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
                  <string>16</string>
                  <string>17</string>
                  <string>18</string>
                  <string>19</string>
                  <string>20</string>
                  <string>21</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
int16_t *array;
uint32_t writepos;
int32_t out;
uint32_t phase;
uint32_t phs;
bool rec;
int32_t rate;
uint32_t length;
int32_t cnt;
int32_t fade;
int32_t fd;
float32_t ratio;
int32_t fBase;
int32_t fRate;
int32_t LNG;
int dir;
int32_t READ(int T,uint32_t R,uint32_t L){
      int32_t tmp_a2;
      uint32_t tmp_di = T/R;
      uint32_t tmp_w1 = (T-tmp_di*R)*R>>2;
      int32_t tmp_a1 = array[tmp_di];
      tmp_a1 = (tmp_a1<<14)+___SMMUL(array[(tmp_di+1)]-tmp_a1<<16,tmp_w1);
      if(tmp_di<fade){
      tmp_a2 = array[tmp_di+L];
      tmp_a2 = (tmp_a2<<14)+___SMMUL(array[(tmp_di+1)+L]-tmp_a2<<16,tmp_w1);
      tmp_a1+=___SMMUL(tmp_a2-tmp_a1,__USAT(fade-tmp_di,30)<<(30-fd))<<2;
      }
     
      
      return out= tmp_a1;
}
uint32_t prv;
bool Dr;


bool snc;]]></code.declaration>
         <code.init><![CDATA[static int16_t _array[attr_poly][1<<attr_size]  __attribute__ ((section (".sdram")));
array = &_array[parent->polyIndex][0];
   int i;
   writepos = 0;
   for(i=0;i<LENGTH;i++) array[i] = 0;
   dir=1;]]></code.init>
         <code.krate><![CDATA[fade=1<<10;
fd=10;






if((inlet_sync>0)&&!snc){
phase=0;
phs=0;
snc=1;
}
else if(inlet_sync==0){snc=0;}

MTOFEXTENDED(0,fBase);
MTOFEXTENDED(inlet_stretch,fRate)
ratio=(float32_t)fRate/fBase;

if((inlet_rec>0)&&!rec){
	rec=1;
	
	writepos=0;
	cnt=0;
}
else if((inlet_rec==0)&&rec){rec=0;length=writepos;cnt=fade;}
LNG=___SMMUL(length,0x7FFFFFF0)<<1;

rate=((uint64_t)1<<32)/LNG;
int32_t RATE=rate*ratio;



int32_t prate;
MTOFEXTENDED(inlet_pitchshift-inlet_stretch,prate)
float32_t pratio=(float32_t)prate/fBase;
int32_t window=((uint64_t)0x7FFFFFF0<<12)/length;


float32_t wratio=(float32_t)(1<<30)/(window>>1);
prate=(int64_t)((int64_t)RATE*pratio-RATE)*wratio;]]></code.krate>
         <code.srate><![CDATA[int32_t FRQ=___SMMUL(prate<<2,inlet_rate<<3);
phase+=___SMMUL(RATE<<2,inlet_rate<<3);
phs+=FRQ;
uint32_t P3=phs;

if(rec>0){
array[writepos] = __SSAT(inlet_in>>14,16);
}
if(cnt>0){
array[writepos]=__SSAT(inlet_in>>14,16);
cnt-=1;
}
writepos = (writepos + 1)&LENGTHMASK;

uint32_t P1=((uint32_t)phs)>>1;
uint32_t P2=((uint32_t)phs+(1<<31))>>1;
int32_t tmp1=READ(phase+(___SMMUL(P1,window)<<2),rate,LNG);
int32_t tmp2=READ(phase+(___SMMUL(P2,window)<<2),rate,LNG);
int32_t mp;
SINE2TINTERP(phs-(1<<30),mp)
mp=(mp>>2)+(1<<29);
int32_t out=tmp2+(___SMMUL(tmp1-tmp2,mp)<<2);

outlet_out=out;

prv=phs;]]></code.srate>
      </object>
   </patchobj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_3" x="1400" y="1834">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="c16a625a661f40e4b359db604dcd00b3befcdbe3" name="*_1" x="1498" y="1834">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_3" x="1596" y="1834">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="61338746-7e87-4dc2-be29-7afddb03bfce" name="Fact_4" x="1666" y="1834">
      <params/>
      <attribs>
         <combo attributeName="size" selection="262144 (5.46s)"/>
      </attribs>
      <object id="patch/object" uuid="61338746-7e87-4dc2-be29-7afddb03bfce">
         <sDescription>Difficult to name. Pitchshifter, time-stretcher, play-rate adjuster (stretch+pitchshift), sampler, delay, granulizer...

See inputs/controls for their functions (hoover above them)</sDescription>
         <author>Remco van der most</author>
         <license>BSD</license>
         <helpPatch>delay.axh</helpPatch>
         <inlets>
            <frac32buffer name="in" description="audio input"/>
            <bool32 name="rec" description="when high, records to buffer"/>
            <bool32 name="sync" description="when high, restarts at &quot;phase-position&quot;  of phase input+parameter"/>
            <frac32.bipolar name="pitchshift" description="ONLY pitchshifts the signal without stretching it. normal semitone response."/>
            <frac32.bipolar name="stretch" description="ONLY stretches the signal without pitchshifting it. normal semitone response."/>
            <frac32.bipolar name="rate"/>
         </inlets>
         <outlets>
            <frac32buffer name="out"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <combo name="size">
               <MenuEntries>
                  <string>256 (5.33ms)</string>
                  <string>512 (10.66ms)</string>
                  <string>1024 (21.33ms)</string>
                  <string>2048 (42.66ms)</string>
                  <string>4096 (85.33ms)</string>
                  <string>8192 (170ms)</string>
                  <string>16384 (341ms)</string>
                  <string>32768 (682ms)</string>
                  <string>65536 (1.36s)</string>
                  <string>131072 (2.73s)</string>
                  <string>262144 (5.46s)</string>
                  <string>524288 (10.9s)</string>
                  <string>1048576 (21.8s)</string>
                  <string>2097152 (43.7s)</string>
               </MenuEntries>
               <CEntries>
                  <string>8</string>
                  <string>9</string>
                  <string>10</string>
                  <string>11</string>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
                  <string>16</string>
                  <string>17</string>
                  <string>18</string>
                  <string>19</string>
                  <string>20</string>
                  <string>21</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
int16_t *array;
uint32_t writepos;
int32_t out;
uint32_t phase;
uint32_t phs;
bool rec;
int32_t rate;
uint32_t length;
int32_t cnt;
int32_t fade;
int32_t fd;
float32_t ratio;
int32_t fBase;
int32_t fRate;
int32_t LNG;
int dir;
int32_t READ(int T,uint32_t R,uint32_t L){
      int32_t tmp_a2;
      uint32_t tmp_di = T/R;
      uint32_t tmp_w1 = (T-tmp_di*R)*R>>2;
      int32_t tmp_a1 = array[tmp_di];
      tmp_a1 = (tmp_a1<<14)+___SMMUL(array[(tmp_di+1)]-tmp_a1<<16,tmp_w1);
      if(tmp_di<fade){
      tmp_a2 = array[tmp_di+L];
      tmp_a2 = (tmp_a2<<14)+___SMMUL(array[(tmp_di+1)+L]-tmp_a2<<16,tmp_w1);
      tmp_a1+=___SMMUL(tmp_a2-tmp_a1,__USAT(fade-tmp_di,30)<<(30-fd))<<2;
      }
     
      
      return out= tmp_a1;
}
uint32_t prv;
bool Dr;


bool snc;]]></code.declaration>
         <code.init><![CDATA[static int16_t _array[attr_poly][1<<attr_size]  __attribute__ ((section (".sdram")));
array = &_array[parent->polyIndex][0];
   int i;
   writepos = 0;
   for(i=0;i<LENGTH;i++) array[i] = 0;
   dir=1;]]></code.init>
         <code.krate><![CDATA[fade=1<<10;
fd=10;






if((inlet_sync>0)&&!snc){
phase=0;
phs=0;
snc=1;
}
else if(inlet_sync==0){snc=0;}

MTOFEXTENDED(0,fBase);
MTOFEXTENDED(inlet_stretch,fRate)
ratio=(float32_t)fRate/fBase;

if((inlet_rec>0)&&!rec){
	rec=1;
	
	writepos=0;
	cnt=0;
}
else if((inlet_rec==0)&&rec){rec=0;length=writepos;cnt=fade;}
LNG=___SMMUL(length,0x7FFFFFF0)<<1;

rate=((uint64_t)1<<32)/LNG;
int32_t RATE=rate*ratio;



int32_t prate;
MTOFEXTENDED(inlet_pitchshift-inlet_stretch,prate)
float32_t pratio=(float32_t)prate/fBase;
int32_t window=((uint64_t)0x7FFFFFF0<<12)/length;


float32_t wratio=(float32_t)(1<<30)/(window>>1);
prate=(int64_t)((int64_t)RATE*pratio-RATE)*wratio;]]></code.krate>
         <code.srate><![CDATA[int32_t FRQ=___SMMUL(prate<<2,inlet_rate<<3);
phase+=___SMMUL(RATE<<2,inlet_rate<<3);
phs+=FRQ;
uint32_t P3=phs;

if(rec>0){
array[writepos] = __SSAT(inlet_in>>14,16);
}
if(cnt>0){
array[writepos]=__SSAT(inlet_in>>14,16);
cnt-=1;
}
writepos = (writepos + 1)&LENGTHMASK;

uint32_t P1=((uint32_t)phs)>>1;
uint32_t P2=((uint32_t)phs+(1<<31))>>1;
int32_t tmp1=READ(phase+(___SMMUL(P1,window)<<2),rate,LNG);
int32_t tmp2=READ(phase+(___SMMUL(P2,window)<<2),rate,LNG);
int32_t mp;
SINE2TINTERP(phs-(1<<30),mp)
mp=(mp>>2)+(1<<29);
int32_t out=tmp2+(___SMMUL(tmp1-tmp2,mp)<<2);

outlet_out=out;

prv=phs;]]></code.srate>
      </object>
   </patchobj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_4" x="1792" y="1834">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="c16a625a661f40e4b359db604dcd00b3befcdbe3" name="*_14" x="1862" y="1834">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_6" x="1932" y="1834">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="ef2b018a-143e-407a-80fb-d0bd9225ca85" name="Fact_5" x="2002" y="1834">
      <params/>
      <attribs>
         <combo attributeName="size" selection="262144 (5.46s)"/>
      </attribs>
      <object id="patch/object" uuid="ef2b018a-143e-407a-80fb-d0bd9225ca85">
         <sDescription>Difficult to name. Pitchshifter, time-stretcher, play-rate adjuster (stretch+pitchshift), sampler, delay, granulizer...

See inputs/controls for their functions (hoover above them)</sDescription>
         <author>Remco van der most</author>
         <license>BSD</license>
         <helpPatch>delay.axh</helpPatch>
         <inlets>
            <frac32buffer name="in" description="audio input"/>
            <bool32 name="rec" description="when high, records to buffer"/>
            <bool32 name="sync" description="when high, restarts at &quot;phase-position&quot;  of phase input+parameter"/>
            <frac32.bipolar name="pitchshift" description="ONLY pitchshifts the signal without stretching it. normal semitone response."/>
            <frac32.bipolar name="stretch" description="ONLY stretches the signal without pitchshifting it. normal semitone response."/>
            <frac32.bipolar name="rate"/>
         </inlets>
         <outlets>
            <frac32buffer name="out"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <combo name="size">
               <MenuEntries>
                  <string>256 (5.33ms)</string>
                  <string>512 (10.66ms)</string>
                  <string>1024 (21.33ms)</string>
                  <string>2048 (42.66ms)</string>
                  <string>4096 (85.33ms)</string>
                  <string>8192 (170ms)</string>
                  <string>16384 (341ms)</string>
                  <string>32768 (682ms)</string>
                  <string>65536 (1.36s)</string>
                  <string>131072 (2.73s)</string>
                  <string>262144 (5.46s)</string>
                  <string>524288 (10.9s)</string>
                  <string>1048576 (21.8s)</string>
                  <string>2097152 (43.7s)</string>
               </MenuEntries>
               <CEntries>
                  <string>8</string>
                  <string>9</string>
                  <string>10</string>
                  <string>11</string>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
                  <string>16</string>
                  <string>17</string>
                  <string>18</string>
                  <string>19</string>
                  <string>20</string>
                  <string>21</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
int16_t *array;
uint32_t writepos;
int32_t out;
uint32_t phase;
uint32_t phs;
bool rec;
int32_t rate;
uint32_t length;
int32_t cnt;
int32_t fade;
int32_t fd;
float32_t ratio;
int32_t fBase;
int32_t fRate;
int32_t LNG;
int dir;
int32_t READ(int T,uint32_t R,uint32_t L){
      int32_t tmp_a2;
      uint32_t tmp_di = T/R;
      uint32_t tmp_w1 = (T-tmp_di*R)*R>>2;
      int32_t tmp_a1 = array[tmp_di];
      tmp_a1 = (tmp_a1<<14)+___SMMUL(array[(tmp_di+1)]-tmp_a1<<16,tmp_w1);
      if(tmp_di<fade){
      tmp_a2 = array[tmp_di+L];
      tmp_a2 = (tmp_a2<<14)+___SMMUL(array[(tmp_di+1)+L]-tmp_a2<<16,tmp_w1);
      tmp_a1+=___SMMUL(tmp_a2-tmp_a1,__USAT(fade-tmp_di,30)<<(30-fd))<<2;
      }
     
      
      return out= tmp_a1;
}
uint32_t prv;
bool Dr;


bool snc;]]></code.declaration>
         <code.init><![CDATA[static int16_t _array[attr_poly][1<<attr_size]  __attribute__ ((section (".sdram")));
array = &_array[parent->polyIndex][0];
   int i;
   writepos = 0;
   for(i=0;i<LENGTH;i++) array[i] = 0;
   dir=1;]]></code.init>
         <code.krate><![CDATA[fade=1<<10;
fd=10;






if((inlet_sync>0)&&!snc){
phase=0;
phs=0;
snc=1;
}
else if(inlet_sync==0){snc=0;}

MTOFEXTENDED(0,fBase);
MTOFEXTENDED(inlet_stretch,fRate)
ratio=(float32_t)fRate/fBase;

if((inlet_rec>0)&&!rec){
	rec=1;
	
	writepos=0;
	cnt=0;
}
else if((inlet_rec==0)&&rec){rec=0;length=writepos;cnt=fade;}
LNG=___SMMUL(length,0x7FFFFFF0)<<1;

rate=((uint64_t)1<<32)/LNG;
int32_t RATE=rate*ratio;



int32_t prate;
MTOFEXTENDED(inlet_pitchshift-inlet_stretch,prate)
float32_t pratio=(float32_t)prate/fBase;
int32_t window=((uint64_t)0x7FFFFFF0<<12)/length;


float32_t wratio=(float32_t)(1<<30)/(window>>1);
prate=(int64_t)((int64_t)RATE*pratio-RATE)*wratio;]]></code.krate>
         <code.srate><![CDATA[int32_t FRQ=___SMMUL(prate<<2,inlet_rate<<3);
phase+=___SMMUL(RATE<<2,inlet_rate<<3);
phs+=FRQ;
uint32_t P3=phs;

if(rec>0){
array[writepos] = __SSAT(inlet_in>>14,16);
}
if(cnt>0){
array[writepos]=__SSAT(inlet_in>>14,16);
cnt-=1;
}
writepos = (writepos + 1)&LENGTHMASK;

uint32_t P1=((uint32_t)phs)>>1;
uint32_t P2=((uint32_t)phs+(1<<31))>>1;
int32_t tmp1=READ(phase+(___SMMUL(P1,window)<<2),rate,LNG);
int32_t tmp2=READ(phase+(___SMMUL(P2,window)<<2),rate,LNG);
int32_t mp;
SINE2TINTERP(phs-(1<<30),mp)
mp=(mp>>2)+(1<<29);
int32_t out=tmp2+(___SMMUL(tmp1-tmp2,mp)<<2);

outlet_out=out;

prv=phs;]]></code.srate>
      </object>
   </patchobj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_7" x="2128" y="1834">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="c16a625a661f40e4b359db604dcd00b3befcdbe3" name="*_15" x="2226" y="1834">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_7" x="2296" y="1834">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="4a9453db-e885-4e8b-9e56-381f479248eb" name="Fact_6" x="2366" y="1834">
      <params/>
      <attribs>
         <combo attributeName="size" selection="262144 (5.46s)"/>
      </attribs>
      <object id="patch/object" uuid="4a9453db-e885-4e8b-9e56-381f479248eb">
         <sDescription>Difficult to name. Pitchshifter, time-stretcher, play-rate adjuster (stretch+pitchshift), sampler, delay, granulizer...

See inputs/controls for their functions (hoover above them)</sDescription>
         <author>Remco van der most</author>
         <license>BSD</license>
         <helpPatch>delay.axh</helpPatch>
         <inlets>
            <frac32buffer name="in" description="audio input"/>
            <bool32 name="rec" description="when high, records to buffer"/>
            <bool32 name="sync" description="when high, restarts at &quot;phase-position&quot;  of phase input+parameter"/>
            <frac32.bipolar name="pitchshift" description="ONLY pitchshifts the signal without stretching it. normal semitone response."/>
            <frac32.bipolar name="stretch" description="ONLY stretches the signal without pitchshifting it. normal semitone response."/>
            <frac32.bipolar name="rate"/>
         </inlets>
         <outlets>
            <frac32buffer name="out"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <combo name="size">
               <MenuEntries>
                  <string>256 (5.33ms)</string>
                  <string>512 (10.66ms)</string>
                  <string>1024 (21.33ms)</string>
                  <string>2048 (42.66ms)</string>
                  <string>4096 (85.33ms)</string>
                  <string>8192 (170ms)</string>
                  <string>16384 (341ms)</string>
                  <string>32768 (682ms)</string>
                  <string>65536 (1.36s)</string>
                  <string>131072 (2.73s)</string>
                  <string>262144 (5.46s)</string>
                  <string>524288 (10.9s)</string>
                  <string>1048576 (21.8s)</string>
                  <string>2097152 (43.7s)</string>
               </MenuEntries>
               <CEntries>
                  <string>8</string>
                  <string>9</string>
                  <string>10</string>
                  <string>11</string>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
                  <string>16</string>
                  <string>17</string>
                  <string>18</string>
                  <string>19</string>
                  <string>20</string>
                  <string>21</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
int16_t *array;
uint32_t writepos;
int32_t out;
uint32_t phase;
uint32_t phs;
bool rec;
int32_t rate;
uint32_t length;
int32_t cnt;
int32_t fade;
int32_t fd;
float32_t ratio;
int32_t fBase;
int32_t fRate;
int32_t LNG;
int dir;
int32_t READ(int T,uint32_t R,uint32_t L){
      int32_t tmp_a2;
      uint32_t tmp_di = T/R;
      uint32_t tmp_w1 = (T-tmp_di*R)*R>>2;
      int32_t tmp_a1 = array[tmp_di];
      tmp_a1 = (tmp_a1<<14)+___SMMUL(array[(tmp_di+1)]-tmp_a1<<16,tmp_w1);
      if(tmp_di<fade){
      tmp_a2 = array[tmp_di+L];
      tmp_a2 = (tmp_a2<<14)+___SMMUL(array[(tmp_di+1)+L]-tmp_a2<<16,tmp_w1);
      tmp_a1+=___SMMUL(tmp_a2-tmp_a1,__USAT(fade-tmp_di,30)<<(30-fd))<<2;
      }
     
      
      return out= tmp_a1;
}
uint32_t prv;
bool Dr;


bool snc;]]></code.declaration>
         <code.init><![CDATA[static int16_t _array[attr_poly][1<<attr_size]  __attribute__ ((section (".sdram")));
array = &_array[parent->polyIndex][0];
   int i;
   writepos = 0;
   for(i=0;i<LENGTH;i++) array[i] = 0;
   dir=1;]]></code.init>
         <code.krate><![CDATA[fade=1<<10;
fd=10;






if((inlet_sync>0)&&!snc){
phase=0;
phs=0;
snc=1;
}
else if(inlet_sync==0){snc=0;}

MTOFEXTENDED(0,fBase);
MTOFEXTENDED(inlet_stretch,fRate)
ratio=(float32_t)fRate/fBase;

if((inlet_rec>0)&&!rec){
	rec=1;
	
	writepos=0;
	cnt=0;
}
else if((inlet_rec==0)&&rec){rec=0;length=writepos;cnt=fade;}
LNG=___SMMUL(length,0x7FFFFFF0)<<1;

rate=((uint64_t)1<<32)/LNG;
int32_t RATE=rate*ratio;



int32_t prate;
MTOFEXTENDED(inlet_pitchshift-inlet_stretch,prate)
float32_t pratio=(float32_t)prate/fBase;
int32_t window=((uint64_t)0x7FFFFFF0<<12)/length;


float32_t wratio=(float32_t)(1<<30)/(window>>1);
prate=(int64_t)((int64_t)RATE*pratio-RATE)*wratio;]]></code.krate>
         <code.srate><![CDATA[int32_t FRQ=___SMMUL(prate<<2,inlet_rate<<3);
phase+=___SMMUL(RATE<<2,inlet_rate<<3);
phs+=FRQ;
uint32_t P3=phs;

if(rec>0){
array[writepos] = __SSAT(inlet_in>>14,16);
}
if(cnt>0){
array[writepos]=__SSAT(inlet_in>>14,16);
cnt-=1;
}
writepos = (writepos + 1)&LENGTHMASK;

uint32_t P1=((uint32_t)phs)>>1;
uint32_t P2=((uint32_t)phs+(1<<31))>>1;
int32_t tmp1=READ(phase+(___SMMUL(P1,window)<<2),rate,LNG);
int32_t tmp2=READ(phase+(___SMMUL(P2,window)<<2),rate,LNG);
int32_t mp;
SINE2TINTERP(phs-(1<<30),mp)
mp=(mp>>2)+(1<<29);
int32_t out=tmp2+(___SMMUL(tmp1-tmp2,mp)<<2);

outlet_out=out;

prv=phs;]]></code.srate>
      </object>
   </patchobj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_8" x="2492" y="1834">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="c16a625a661f40e4b359db604dcd00b3befcdbe3" name="*_16" x="2576" y="1834">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_8" x="2660" y="1834">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="d1e2644b-bc5f-495f-8f40-56f616f34f25" name="Fact_7" x="2730" y="1834">
      <params/>
      <attribs>
         <combo attributeName="size" selection="262144 (5.46s)"/>
      </attribs>
      <object id="patch/object" uuid="d1e2644b-bc5f-495f-8f40-56f616f34f25">
         <sDescription>Difficult to name. Pitchshifter, time-stretcher, play-rate adjuster (stretch+pitchshift), sampler, delay, granulizer...

See inputs/controls for their functions (hoover above them)</sDescription>
         <author>Remco van der most</author>
         <license>BSD</license>
         <helpPatch>delay.axh</helpPatch>
         <inlets>
            <frac32buffer name="in" description="audio input"/>
            <bool32 name="rec" description="when high, records to buffer"/>
            <bool32 name="sync" description="when high, restarts at &quot;phase-position&quot;  of phase input+parameter"/>
            <frac32.bipolar name="pitchshift" description="ONLY pitchshifts the signal without stretching it. normal semitone response."/>
            <frac32.bipolar name="stretch" description="ONLY stretches the signal without pitchshifting it. normal semitone response."/>
            <frac32.bipolar name="rate"/>
         </inlets>
         <outlets>
            <frac32buffer name="out"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <combo name="size">
               <MenuEntries>
                  <string>256 (5.33ms)</string>
                  <string>512 (10.66ms)</string>
                  <string>1024 (21.33ms)</string>
                  <string>2048 (42.66ms)</string>
                  <string>4096 (85.33ms)</string>
                  <string>8192 (170ms)</string>
                  <string>16384 (341ms)</string>
                  <string>32768 (682ms)</string>
                  <string>65536 (1.36s)</string>
                  <string>131072 (2.73s)</string>
                  <string>262144 (5.46s)</string>
                  <string>524288 (10.9s)</string>
                  <string>1048576 (21.8s)</string>
                  <string>2097152 (43.7s)</string>
               </MenuEntries>
               <CEntries>
                  <string>8</string>
                  <string>9</string>
                  <string>10</string>
                  <string>11</string>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
                  <string>16</string>
                  <string>17</string>
                  <string>18</string>
                  <string>19</string>
                  <string>20</string>
                  <string>21</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
int16_t *array;
uint32_t writepos;
int32_t out;
uint32_t phase;
uint32_t phs;
bool rec;
int32_t rate;
uint32_t length;
int32_t cnt;
int32_t fade;
int32_t fd;
float32_t ratio;
int32_t fBase;
int32_t fRate;
int32_t LNG;
int dir;
int32_t READ(int T,uint32_t R,uint32_t L){
      int32_t tmp_a2;
      uint32_t tmp_di = T/R;
      uint32_t tmp_w1 = (T-tmp_di*R)*R>>2;
      int32_t tmp_a1 = array[tmp_di];
      tmp_a1 = (tmp_a1<<14)+___SMMUL(array[(tmp_di+1)]-tmp_a1<<16,tmp_w1);
      if(tmp_di<fade){
      tmp_a2 = array[tmp_di+L];
      tmp_a2 = (tmp_a2<<14)+___SMMUL(array[(tmp_di+1)+L]-tmp_a2<<16,tmp_w1);
      tmp_a1+=___SMMUL(tmp_a2-tmp_a1,__USAT(fade-tmp_di,30)<<(30-fd))<<2;
      }
     
      
      return out= tmp_a1;
}
uint32_t prv;
bool Dr;


bool snc;]]></code.declaration>
         <code.init><![CDATA[static int16_t _array[attr_poly][1<<attr_size]  __attribute__ ((section (".sdram")));
array = &_array[parent->polyIndex][0];
   int i;
   writepos = 0;
   for(i=0;i<LENGTH;i++) array[i] = 0;
   dir=1;]]></code.init>
         <code.krate><![CDATA[fade=1<<10;
fd=10;






if((inlet_sync>0)&&!snc){
phase=0;
phs=0;
snc=1;
}
else if(inlet_sync==0){snc=0;}

MTOFEXTENDED(0,fBase);
MTOFEXTENDED(inlet_stretch,fRate)
ratio=(float32_t)fRate/fBase;

if((inlet_rec>0)&&!rec){
	rec=1;
	
	writepos=0;
	cnt=0;
}
else if((inlet_rec==0)&&rec){rec=0;length=writepos;cnt=fade;}
LNG=___SMMUL(length,0x7FFFFFF0)<<1;

rate=((uint64_t)1<<32)/LNG;
int32_t RATE=rate*ratio;



int32_t prate;
MTOFEXTENDED(inlet_pitchshift-inlet_stretch,prate)
float32_t pratio=(float32_t)prate/fBase;
int32_t window=((uint64_t)0x7FFFFFF0<<12)/length;


float32_t wratio=(float32_t)(1<<30)/(window>>1);
prate=(int64_t)((int64_t)RATE*pratio-RATE)*wratio;]]></code.krate>
         <code.srate><![CDATA[int32_t FRQ=___SMMUL(prate<<2,inlet_rate<<3);
phase+=___SMMUL(RATE<<2,inlet_rate<<3);
phs+=FRQ;
uint32_t P3=phs;

if(rec>0){
array[writepos] = __SSAT(inlet_in>>14,16);
}
if(cnt>0){
array[writepos]=__SSAT(inlet_in>>14,16);
cnt-=1;
}
writepos = (writepos + 1)&LENGTHMASK;

uint32_t P1=((uint32_t)phs)>>1;
uint32_t P2=((uint32_t)phs+(1<<31))>>1;
int32_t tmp1=READ(phase+(___SMMUL(P1,window)<<2),rate,LNG);
int32_t tmp2=READ(phase+(___SMMUL(P2,window)<<2),rate,LNG);
int32_t mp;
SINE2TINTERP(phs-(1<<30),mp)
mp=(mp>>2)+(1<<29);
int32_t out=tmp2+(___SMMUL(tmp1-tmp2,mp)<<2);

outlet_out=out;

prv=phs;]]></code.srate>
      </object>
   </patchobj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_9" x="2870" y="1834">
      <params/>
      <attribs/>
   </obj>
   <obj type="drj/math/sum8" uuid="23a294411ed86ae23cb1214a6a72122a99d46692" name="sum8_1" x="2968" y="1834">
      <params/>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_5" x="3066" y="1834">
      <params/>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_6" x="3150" y="1834">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_9" x="3220" y="1918">
      <params/>
      <attribs/>
   </obj>
   <obj type="audio/out left" uuid="b11a3c09b2fdd575ea8212f2ce7743d5269253b1" name="out_2" x="3304" y="1918">
      <params/>
      <attribs/>
   </obj>
   <nets>
      <net>
         <source obj="mute_1" outlet="o"/>
         <dest obj="+_4" inlet="in1"/>
         <dest obj="+_1" inlet="in2"/>
         <dest obj="+_2" inlet="in1"/>
         <dest obj="+_3" inlet="in1"/>
         <dest obj="+_6" inlet="in1"/>
         <dest obj="+_7" inlet="in2"/>
         <dest obj="+_8" inlet="in1"/>
      </net>
      <net>
         <source obj="clock_1" outlet="kbeat"/>
         <dest obj="1_10" inlet="kbeat"/>
         <dest obj="1_12" inlet="kbeat"/>
      </net>
      <net>
         <source obj="or_3" outlet="o"/>
         <dest obj="1_10" inlet="start"/>
         <dest obj="object_2" inlet="reset"/>
         <dest obj="object_3" inlet="reset"/>
         <dest obj="1_12" inlet="start"/>
      </net>
      <net>
         <source obj="clock_1" outlet="stop"/>
         <dest obj="or_1" inlet="i3"/>
         <dest obj="1_10" inlet="stop"/>
         <dest obj="1_12" inlet="stop"/>
      </net>
      <net>
         <source obj="clock_1" outlet="count"/>
         <dest obj="1_10" inlet="1ppq"/>
         <dest obj="1_12" inlet="1ppq"/>
      </net>
      <net>
         <source obj="1_10" outlet="step"/>
         <dest obj="latch_1" inlet="in"/>
      </net>
      <net>
         <source obj="i_3" outlet="out"/>
         <dest obj="1_10" inlet="divmul"/>
         <dest obj="1_12" inlet="divmul"/>
      </net>
      <net>
         <source obj="Fact_1" outlet="out"/>
         <dest obj="vca_1" inlet="a"/>
         <dest obj="*_3" inlet="a"/>
      </net>
      <net>
         <source obj="vca_4" outlet="o"/>
         <dest obj="sum8_1" inlet="in4"/>
      </net>
      <net>
         <source obj="Fact_2" outlet="out"/>
         <dest obj="vca_2" inlet="a"/>
         <dest obj="*_2" inlet="a"/>
      </net>
      <net>
         <source obj="Fact_3" outlet="out"/>
         <dest obj="vca_3" inlet="a"/>
         <dest obj="*_1" inlet="a"/>
      </net>
      <net>
         <source obj="Fact_4" outlet="out"/>
         <dest obj="vca_4" inlet="a"/>
         <dest obj="*_14" inlet="a"/>
      </net>
      <net>
         <source obj="vca_3" outlet="o"/>
         <dest obj="sum8_1" inlet="in3"/>
      </net>
      <net>
         <source obj="vca_2" outlet="o"/>
         <dest obj="sum8_1" inlet="in2"/>
      </net>
      <net>
         <source obj="vca_1" outlet="o"/>
         <dest obj="sum8_1" inlet="in1"/>
      </net>
      <net>
         <source obj="sum8_1" outlet="out"/>
         <dest obj="vca_5" inlet="a"/>
         <dest obj="*_6" inlet="a"/>
      </net>
      <net>
         <source obj="adsr_1" outlet="env"/>
         <dest obj="*_5" inlet="a"/>
      </net>
      <net>
         <source obj="1_1" outlet="env"/>
         <dest obj="*_7" inlet="a"/>
      </net>
      <net>
         <source obj="1_2" outlet="env"/>
         <dest obj="*_8" inlet="a"/>
      </net>
      <net>
         <source obj="1_3" outlet="env"/>
         <dest obj="*_9" inlet="a"/>
      </net>
      <net>
         <source obj="vca_5" outlet="o"/>
         <dest obj="+_9" inlet="in2"/>
      </net>
      <net>
         <source obj="wetdry_1" outlet="wet"/>
         <dest obj="vca_5" inlet="v"/>
      </net>
      <net>
         <source obj="wetdry_1" outlet="dry"/>
         <dest obj="vca_6" inlet="v"/>
      </net>
      <net>
         <source obj="vca_6" outlet="o"/>
         <dest obj="+_9" inlet="in1"/>
      </net>
      <net>
         <source obj="+_1" outlet="out"/>
         <dest obj="Fact_2" inlet="in"/>
      </net>
      <net>
         <source obj="+_2" outlet="out"/>
         <dest obj="Fact_3" inlet="in"/>
      </net>
      <net>
         <source obj="+_3" outlet="out"/>
         <dest obj="Fact_4" inlet="in"/>
      </net>
      <net>
         <source obj="+_4" outlet="out"/>
         <dest obj="Fact_1" inlet="in"/>
      </net>
      <net>
         <source obj="*_1" outlet="result"/>
         <dest obj="+_3" inlet="in2"/>
      </net>
      <net>
         <source obj="*_2" outlet="result"/>
         <dest obj="+_2" inlet="in2"/>
      </net>
      <net>
         <source obj="*_3" outlet="result"/>
         <dest obj="+_1" inlet="in1"/>
      </net>
      <net>
         <source obj="*_4" outlet="result"/>
         <dest obj="+_4" inlet="in2"/>
      </net>
      <net>
         <source obj="1_16" outlet="feedforward"/>
         <dest obj="*_22" inlet="b"/>
         <dest obj="*_13" inlet="b"/>
         <dest obj="*_17" inlet="b"/>
         <dest obj="*_18" inlet="a"/>
         <dest obj="*_19" inlet="a"/>
         <dest obj="*_20" inlet="b"/>
         <dest obj="*_21" inlet="b"/>
      </net>
      <net>
         <source obj="dial_4" outlet="out"/>
         <dest obj="adsr_1" inlet="a"/>
         <dest obj="1_3" inlet="a"/>
         <dest obj="1_1" inlet="a"/>
         <dest obj="adsr_2" inlet="a"/>
         <dest obj="1_4" inlet="a"/>
         <dest obj="1_5" inlet="a"/>
         <dest obj="1_2" inlet="a"/>
      </net>
      <net>
         <source obj="1_16" outlet="decay"/>
         <dest obj="adsr_1" inlet="r"/>
         <dest obj="1_3" inlet="r"/>
         <dest obj="1_1" inlet="r"/>
         <dest obj="adsr_2" inlet="r"/>
         <dest obj="1_4" inlet="r"/>
         <dest obj="1_5" inlet="r"/>
         <dest obj="1_2" inlet="r"/>
      </net>
      <net>
         <source obj="+_10" outlet="pitch"/>
         <dest obj="dial_13" inlet="in"/>
         <dest obj="Fact_2" inlet="pitchshift"/>
         <dest obj="Fact_3" inlet="pitchshift"/>
         <dest obj="Fact_4" inlet="pitchshift"/>
         <dest obj="Fact_5" inlet="pitchshift"/>
         <dest obj="Fact_6" inlet="pitchshift"/>
         <dest obj="Fact_7" inlet="pitchshift"/>
         <dest obj="Fact_1" inlet="pitchshift"/>
      </net>
      <net>
         <source obj="+_10" outlet="stretch"/>
         <dest obj="dial_14" inlet="in"/>
         <dest obj="Fact_2" inlet="stretch"/>
         <dest obj="Fact_3" inlet="stretch"/>
         <dest obj="Fact_4" inlet="stretch"/>
         <dest obj="Fact_5" inlet="stretch"/>
         <dest obj="Fact_6" inlet="stretch"/>
         <dest obj="Fact_7" inlet="stretch"/>
         <dest obj="Fact_1" inlet="stretch"/>
      </net>
      <net>
         <source obj="dial_8" outlet="out"/>
         <dest obj="Fact_2" inlet="rate"/>
         <dest obj="Fact_3" inlet="rate"/>
         <dest obj="Fact_4" inlet="rate"/>
         <dest obj="Fact_5" inlet="rate"/>
         <dest obj="Fact_6" inlet="rate"/>
         <dest obj="Fact_7" inlet="rate"/>
         <dest obj="Fact_1" inlet="rate"/>
      </net>
      <net>
         <source obj="*_6" outlet="result"/>
         <dest obj="+_5" inlet="in2"/>
      </net>
      <net>
         <source obj="in_1" outlet="wave"/>
         <dest obj="vca_6" inlet="a"/>
         <dest obj="+_5" inlet="in1"/>
      </net>
      <net>
         <source obj="dial_9" outlet="out"/>
         <dest obj="*_6" inlet="b"/>
      </net>
      <net>
         <source obj="inv_3" outlet="o"/>
         <dest obj="*_8" inlet="b"/>
      </net>
      <net>
         <source obj="inv_4" outlet="o"/>
         <dest obj="*_9" inlet="b"/>
      </net>
      <net>
         <source obj="inv_2" outlet="o"/>
         <dest obj="*_7" inlet="b"/>
      </net>
      <net>
         <source obj="inv_1" outlet="o"/>
         <dest obj="*_5" inlet="b"/>
      </net>
      <net>
         <source obj="Fact_5" outlet="out"/>
         <dest obj="vca_7" inlet="a"/>
         <dest obj="*_15" inlet="a"/>
      </net>
      <net>
         <source obj="vca_9" outlet="o"/>
         <dest obj="sum8_1" inlet="in7"/>
      </net>
      <net>
         <source obj="Fact_6" outlet="out"/>
         <dest obj="vca_8" inlet="a"/>
         <dest obj="*_16" inlet="a"/>
      </net>
      <net>
         <source obj="Fact_7" outlet="out"/>
         <dest obj="vca_9" inlet="a"/>
         <dest obj="*_4" inlet="a"/>
      </net>
      <net>
         <source obj="vca_8" outlet="o"/>
         <dest obj="sum8_1" inlet="in6"/>
      </net>
      <net>
         <source obj="vca_7" outlet="o"/>
         <dest obj="sum8_1" inlet="in5"/>
      </net>
      <net>
         <source obj="+_7" outlet="out"/>
         <dest obj="Fact_6" inlet="in"/>
      </net>
      <net>
         <source obj="+_8" outlet="out"/>
         <dest obj="Fact_7" inlet="in"/>
      </net>
      <net>
         <source obj="+_6" outlet="out"/>
         <dest obj="Fact_5" inlet="in"/>
      </net>
      <net>
         <source obj="*_16" outlet="result"/>
         <dest obj="+_8" inlet="in2"/>
      </net>
      <net>
         <source obj="*_15" outlet="result"/>
         <dest obj="+_7" inlet="in1"/>
      </net>
      <net>
         <source obj="*_14" outlet="result"/>
         <dest obj="+_6" inlet="in2"/>
      </net>
      <net>
         <source obj="inv_7" outlet="o"/>
         <dest obj="*_12" inlet="b"/>
      </net>
      <net>
         <source obj="inv_6" outlet="o"/>
         <dest obj="*_11" inlet="b"/>
      </net>
      <net>
         <source obj="inv_5" outlet="o"/>
         <dest obj="*_10" inlet="b"/>
      </net>
      <net>
         <source obj="adsr_2" outlet="env"/>
         <dest obj="*_10" inlet="a"/>
      </net>
      <net>
         <source obj="1_4" outlet="env"/>
         <dest obj="*_11" inlet="a"/>
      </net>
      <net>
         <source obj="1_5" outlet="env"/>
         <dest obj="*_12" inlet="a"/>
      </net>
      <net>
         <source obj="1_10" outlet="gate"/>
         <dest obj="1_16" inlet="gate"/>
      </net>
      <net>
         <source obj="dial_10" outlet="out"/>
         <dest obj="1_10" inlet="gatelength"/>
      </net>
      <net>
         <source obj="1_16" outlet="o0"/>
         <dest obj="inv_1" inlet="i"/>
         <dest obj="1_14" inlet="gate"/>
         <dest obj="Fact_1" inlet="rec"/>
      </net>
      <net>
         <source obj="1_16" outlet="o1"/>
         <dest obj="inv_2" inlet="i"/>
         <dest obj="1_15" inlet="gate"/>
         <dest obj="Fact_2" inlet="rec"/>
      </net>
      <net>
         <source obj="1_16" outlet="o2"/>
         <dest obj="inv_3" inlet="i"/>
         <dest obj="1_6" inlet="gate"/>
         <dest obj="Fact_3" inlet="rec"/>
      </net>
      <net>
         <source obj="1_16" outlet="o3"/>
         <dest obj="inv_4" inlet="i"/>
         <dest obj="1_7" inlet="gate"/>
         <dest obj="Fact_4" inlet="rec"/>
      </net>
      <net>
         <source obj="1_16" outlet="o4"/>
         <dest obj="inv_5" inlet="i"/>
         <dest obj="1_8" inlet="gate"/>
         <dest obj="Fact_5" inlet="rec"/>
      </net>
      <net>
         <source obj="1_16" outlet="o5"/>
         <dest obj="inv_6" inlet="i"/>
         <dest obj="1_11" inlet="gate"/>
         <dest obj="Fact_6" inlet="rec"/>
      </net>
      <net>
         <source obj="1_16" outlet="o6"/>
         <dest obj="inv_7" inlet="i"/>
         <dest obj="1_13" inlet="gate"/>
         <dest obj="Fact_7" inlet="rec"/>
      </net>
      <net>
         <source obj="1_16" outlet="i0"/>
         <dest obj="1_5" inlet="gate"/>
         <dest obj="Fact_7" inlet="sync"/>
      </net>
      <net>
         <source obj="1_16" outlet="i6"/>
         <dest obj="1_4" inlet="gate"/>
         <dest obj="Fact_6" inlet="sync"/>
      </net>
      <net>
         <source obj="1_16" outlet="i5"/>
         <dest obj="adsr_2" inlet="gate"/>
         <dest obj="Fact_5" inlet="sync"/>
      </net>
      <net>
         <source obj="1_16" outlet="i1"/>
         <dest obj="adsr_1" inlet="gate"/>
         <dest obj="Fact_1" inlet="sync"/>
      </net>
      <net>
         <source obj="1_16" outlet="i2"/>
         <dest obj="1_1" inlet="gate"/>
         <dest obj="Fact_2" inlet="sync"/>
      </net>
      <net>
         <source obj="1_16" outlet="i3"/>
         <dest obj="1_2" inlet="gate"/>
         <dest obj="Fact_3" inlet="sync"/>
      </net>
      <net>
         <source obj="1_16" outlet="i4"/>
         <dest obj="1_3" inlet="gate"/>
         <dest obj="Fact_4" inlet="sync"/>
      </net>
      <net>
         <source obj="1_10" outlet="tied"/>
         <dest obj="1_16" inlet="tied"/>
      </net>
      <net>
         <source obj="1_9" outlet="division"/>
         <dest obj="+_11" inlet="in1"/>
         <dest obj="1_10" inlet="division"/>
         <dest obj="ibar_2" inlet="in"/>
      </net>
      <net>
         <source obj="dial_11" outlet="out"/>
         <dest obj="1_9" inlet="division"/>
      </net>
      <net>
         <source obj="+_9" outlet="out"/>
         <dest obj="out_2" inlet="wave"/>
      </net>
      <net>
         <source obj="dial_7" outlet="out"/>
         <dest obj="+_10" inlet="stretch"/>
      </net>
      <net>
         <source obj="dial_6" outlet="out"/>
         <dest obj="+_10" inlet="pitch"/>
      </net>
      <net>
         <source obj="toggle_1" outlet="o"/>
         <dest obj="+_10" inlet="syncpitch"/>
      </net>
      <net>
         <source obj="toggle_2" outlet="o"/>
         <dest obj="+_10" inlet="syncstretch"/>
      </net>
      <net>
         <source obj="toggle_3" outlet="o"/>
         <dest obj="+_10" inlet="lock"/>
      </net>
      <net>
         <source obj="object_2" outlet="out"/>
         <dest obj="+_10" inlet="arpindex"/>
      </net>
      <net>
         <source obj="i_2" outlet="out"/>
         <dest obj="object_2" inlet="length"/>
      </net>
      <net>
         <source obj="toggle_6" outlet="o"/>
         <dest obj="+_10" inlet="arp2pitch"/>
         <dest obj="+_10" inlet="arp2stretch"/>
      </net>
      <net>
         <source obj="1_12" outlet="step"/>
         <dest obj="object_2" inlet="i1"/>
      </net>
      <net>
         <source obj="+_11" outlet="out"/>
         <dest obj="1_12" inlet="division"/>
      </net>
      <net>
         <source obj="i_6" outlet="out"/>
         <dest obj="&lt;&lt;_1" inlet="in"/>
      </net>
      <net>
         <source obj="&lt;&lt;_1" outlet="out"/>
         <dest obj="+_11" inlet="in2"/>
      </net>
      <net>
         <source obj="i_7" outlet="out"/>
         <dest obj="object_2" inlet="mode"/>
      </net>
      <net>
         <source obj="*_13" outlet="result"/>
         <dest obj="*_3" inlet="b"/>
      </net>
      <net>
         <source obj="*_17" outlet="result"/>
         <dest obj="*_2" inlet="b"/>
      </net>
      <net>
         <source obj="*_18" outlet="result"/>
         <dest obj="*_1" inlet="b"/>
      </net>
      <net>
         <source obj="*_19" outlet="result"/>
         <dest obj="*_14" inlet="b"/>
      </net>
      <net>
         <source obj="*_20" outlet="result"/>
         <dest obj="*_15" inlet="b"/>
      </net>
      <net>
         <source obj="*_21" outlet="result"/>
         <dest obj="*_16" inlet="b"/>
      </net>
      <net>
         <source obj="*_22" outlet="result"/>
         <dest obj="*_4" inlet="b"/>
      </net>
      <net>
         <source obj="1_6" outlet="env"/>
         <dest obj="*_17" inlet="a"/>
      </net>
      <net>
         <source obj="1_7" outlet="env"/>
         <dest obj="*_18" inlet="b"/>
      </net>
      <net>
         <source obj="1_8" outlet="env"/>
         <dest obj="*_19" inlet="b"/>
      </net>
      <net>
         <source obj="1_11" outlet="env"/>
         <dest obj="*_20" inlet="a"/>
      </net>
      <net>
         <source obj="1_13" outlet="env"/>
         <dest obj="*_21" inlet="a"/>
      </net>
      <net>
         <source obj="1_14" outlet="env"/>
         <dest obj="*_22" inlet="a"/>
      </net>
      <net>
         <source obj="1_15" outlet="env"/>
         <dest obj="*_13" inlet="a"/>
      </net>
      <net>
         <source obj="dial_12" outlet="out"/>
         <dest obj="1_14" inlet="a"/>
         <dest obj="1_15" inlet="a"/>
         <dest obj="1_6" inlet="a"/>
         <dest obj="1_7" inlet="a"/>
         <dest obj="1_8" inlet="a"/>
         <dest obj="1_11" inlet="a"/>
         <dest obj="1_13" inlet="a"/>
      </net>
      <net>
         <source obj="dial_15" outlet="out"/>
         <dest obj="1_14" inlet="r"/>
         <dest obj="1_15" inlet="r"/>
         <dest obj="1_6" inlet="r"/>
         <dest obj="1_7" inlet="r"/>
         <dest obj="1_8" inlet="r"/>
         <dest obj="1_11" inlet="r"/>
         <dest obj="1_13" inlet="r"/>
      </net>
      <net>
         <source obj="i_8" outlet="out"/>
         <dest obj="object_3" inlet="mode"/>
      </net>
      <net>
         <source obj="*_12" outlet="result"/>
         <dest obj="vca_9" inlet="v"/>
      </net>
      <net>
         <source obj="*_11" outlet="result"/>
         <dest obj="vca_8" inlet="v"/>
      </net>
      <net>
         <source obj="*_10" outlet="result"/>
         <dest obj="vca_7" inlet="v"/>
      </net>
      <net>
         <source obj="*_9" outlet="result"/>
         <dest obj="vca_4" inlet="v"/>
      </net>
      <net>
         <source obj="*_8" outlet="result"/>
         <dest obj="vca_3" inlet="v"/>
      </net>
      <net>
         <source obj="*_7" outlet="result"/>
         <dest obj="vca_2" inlet="v"/>
      </net>
      <net>
         <source obj="*_5" outlet="result"/>
         <dest obj="vca_1" inlet="v"/>
      </net>
      <net>
         <source obj="object_3" outlet="out"/>
         <dest obj="ibar_1" inlet="in"/>
         <dest obj="1_16" inlet="s"/>
      </net>
      <net>
         <source obj="latch_1" outlet="out"/>
         <dest obj="object_3" inlet="i1"/>
      </net>
      <net>
         <source obj="i_9" outlet="out"/>
         <dest obj="latch_1" inlet="holdfreq"/>
      </net>
      <net>
         <source obj="i_10" outlet="out"/>
         <dest obj="latch_1" inlet="holdduration"/>
      </net>
      <net>
         <source obj="dial_2" outlet="out"/>
         <dest obj="wetdry_1" inlet="wetdry"/>
      </net>
      <net>
         <source obj="toggle_4" outlet="o"/>
         <dest obj="wetdry_1" inlet="bypass"/>
         <dest obj="rising_1" inlet="in"/>
         <dest obj="or_2" inlet="i2"/>
      </net>
      <net>
         <source obj="toggle_7" outlet="o"/>
         <dest obj="latch_1" inlet="hold"/>
      </net>
      <net>
         <source obj="1_16" outlet="kill"/>
         <dest obj="or_2" inlet="i1"/>
      </net>
      <net>
         <source obj="+_5" outlet="out"/>
         <dest obj="mute_1" inlet="a"/>
      </net>
      <net>
         <source obj="button_2" outlet="o"/>
         <dest obj="or_1" inlet="i1"/>
      </net>
      <net>
         <source obj="dial_3" outlet="out"/>
         <dest obj="1_16" inlet="feedforward"/>
      </net>
      <net>
         <source obj="or_1" outlet="o"/>
         <dest obj="1_16" inlet="kill"/>
      </net>
      <net>
         <source obj="rising_1" outlet="trig"/>
         <dest obj="or_1" inlet="i2"/>
      </net>
      <net>
         <source obj="or_2" outlet="o"/>
         <dest obj="mute_1" inlet="kill"/>
      </net>
      <net>
         <source obj="dial_5" outlet="out"/>
         <dest obj="1_16" inlet="decay"/>
      </net>
      <net>
         <source obj="toggle_8" outlet="o"/>
         <dest obj="1_16" inlet="freeze"/>
      </net>
      <net>
         <source obj="toggle_9" outlet="o"/>
         <dest obj="clock_2" inlet="run"/>
         <dest obj="clock_2" inlet="rst"/>
      </net>
      <net>
         <source obj="dial_1" outlet="out"/>
         <dest obj="clock_2" inlet="bpm"/>
      </net>
      <net>
         <source obj="clock_1" outlet="bpm"/>
         <dest obj="i_4" inlet="in"/>
      </net>
      <net>
         <source obj="clock_1" outlet="start"/>
         <dest obj="or_3" inlet="i1"/>
      </net>
      <net>
         <source obj="button_1" outlet="o"/>
         <dest obj="or_3" inlet="i2"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>460</x>
      <y>47</y>
      <width>1616</width>
      <height>876</height>
   </windowPos>
</patch-1.0>