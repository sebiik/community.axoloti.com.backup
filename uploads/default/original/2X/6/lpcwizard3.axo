<objdefs appVersion="1.0.12">
   <obj.normal id="lpcwizard3" uuid="601d009f-0616-48c9-b646-c38d5510bd56">
      <sDescription>Creates 2 Files on the SDCard for later use with my LPC object. one large file that contains all speech data, one smaller with the wordsizes.</sDescription>
      <author>Simon Iten</author>
      <license>GPL</license>
      <inlets/>
      <outlets/>
      <displays/>
      <params/>
      <attribs>
         <text name="lpcarray"/>
         <spinner name="lpcsize" MinValue="0" MaxValue="1000000" DefaultValue="0"/>
         <text name="sizearray"/>
         <spinner name="wordcount" MinValue="0" MaxValue="10000" DefaultValue="0"/>
         <combo name="append">
            <MenuEntries>
               <string>No</string>
               <string> Yes</string>
            </MenuEntries>
            <CEntries>
               <string>0</string>
               <string> 1</string>
            </CEntries>
         </combo>
      </attribs>
      <depends>
         <depend>fatfs</depend>
      </depends>
      <code.declaration><![CDATA[int i;
//uint16_t lpcsize = 0;

uint8_t lpcdata[attr_lpcsize]={
     attr_lpcarray	
};

uint16_t wordsize[attr_wordcount]={
	attr_sizearray
};


FRESULT open_append (
    FIL* fp,            /* [OUT] File object to create */
    const char* path    /* [IN]  File name to be opened */
)
{
    FRESULT fr;

    /* Opens an existing file. If not exist, creates a new file. */
    fr = f_open(fp, path, FA_WRITE | FA_OPEN_ALWAYS);
    if (fr == FR_OK) {
        /* Seek to end of the file to append data */
        fr = f_lseek(fp, f_size(fp));
        if (fr != FR_OK)
            f_close(fp);
    }
    return fr;
}]]></code.declaration>
      <code.init><![CDATA[FIL LpcFile,OnsetFile, CoeffFile;
    FRESULT err;
    UINT bytes_written;
    //lpcarray
   
    if (attr_append) {
    	err = open_append(&LpcFile, "lpcdata.sns");
	if (err != FR_OK) return;
	
    } else {
    	 err = f_open(&LpcFile, "lpcdata.sns", FA_WRITE | FA_CREATE_ALWAYS);
    if (err != FR_OK) {report_fatfs_error(err,"lpcdata.sns"); return;}
    }
    int rem_sz = sizeof(*lpcdata)*attr_lpcsize;
    int offset = 0;
    while (rem_sz>0) {
      if (rem_sz>sizeof(fbuff)) {
        memcpy((char *)fbuff,(char *)(&lpcdata[0]) + offset, sizeof(fbuff));
        err = f_write(&LpcFile, fbuff, sizeof(fbuff),&bytes_written);
        rem_sz -= sizeof(fbuff);
        offset += sizeof(fbuff);
      } else {
        memcpy((char *)fbuff,(char *)(&lpcdata[0]) + offset, rem_sz);
        err = f_write(&LpcFile, fbuff, rem_sz, &bytes_written);
        rem_sz = 0;
      }
    }    if (err != FR_OK) report_fatfs_error(err,"lpcdata.sns");
    err = f_close(&LpcFile);
    if (err != FR_OK) report_fatfs_error(err,"lpcdata.sns");
    
//word onsets
    
    if (attr_append) {
    	err = open_append(&OnsetFile, "onsets.sns");
		if (err != FR_OK) return;
	
    } else {
    	err = f_open(&OnsetFile, "onsets.sns", FA_WRITE | FA_CREATE_ALWAYS);
    if (err != FR_OK) {report_fatfs_error(err,"onsets.sns"); return;}
    }
    rem_sz = sizeof(*wordsize)*attr_wordcount;
    offset = 0;
    while (rem_sz>0) {
      if (rem_sz>sizeof(fbuff)) {
        memcpy((char *)fbuff,(char *)(&wordsize[0]) + offset, sizeof(fbuff));
        err = f_write(&OnsetFile, fbuff, sizeof(fbuff),&bytes_written);
        rem_sz -= sizeof(fbuff);
        offset += sizeof(fbuff);
      } else {
        memcpy((char *)fbuff,(char *)(&wordsize[0]) + offset, rem_sz);
        err = f_write(&OnsetFile, fbuff, rem_sz, &bytes_written);
        rem_sz = 0;
      }
    }    if (err != FR_OK) report_fatfs_error(err,"onsets.sns");
    err = f_close(&OnsetFile);
    if (err != FR_OK) report_fatfs_error(err,"onsets.sns");
LogTextMessage("Succesfully copied words to sdcard");]]></code.init>
   </obj.normal>
</objdefs>