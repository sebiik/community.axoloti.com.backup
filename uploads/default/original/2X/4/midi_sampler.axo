<objdefs>
	<obj.normal id="midi sampler" uuid="3887f56bec72b5f70007ee8b30b9d55aa359835b" sha="8201eb5032799724e54c3920ad800ffa3ba24b6b">
    	<upgradeSha>5d623ad73ade2280421069a67ee3f30595794cx2</upgradeSha>
		<sDescription>Midi Sampler</sDescription>
      	<author>James Rotgard</author>
      	<license>BSD</license>
      	<helpPatch>midi_in.axh</helpPatch>
      	<inlets/>
      	<outlets>
			<bool32 name="gate" description="key pressed?"/>
			<frac32.bipolar name="note" description="note number"/>
			<frac32.positive name="velocity" description="note-on velocity"/>
			<frac32.positive name="releaseVelocity" description="note-off velocity"/>
			<frac32buffer name="out" description="output"/>
		</outlets>
		<displays/>
		<params/>
		<attribs>
			<spinner name="attr_offset" MinValue="0" MaxValue="64" DefaultValue="0"/>
		</attribs>
		<includes>
			<include>./streamer.h</include>
			<include>chibios/ext/fatfs/src/ff.h</include>
		</includes>
		
		<code.declaration>
			<![CDATA[   
				WORKING_AREA(waThreadSD, 512);
				sdReadFilePingpong *stream;
				int starttrig;
				int stoptrig;
			
				uint8_t _gate;
				int8_t _note;	  
				uint8_t _velo;
				uint8_t _rvelo;
			]]>
		</code.declaration>
		
		<code.init>
			<![CDATA[static sdReadFilePingpong s[attr_poly] __attribute__ ((section (".data")));
				// unmap from aliased memory for DMA
				stream = (sdReadFilePingpong *)(0x20000000 | (int)&s[parent->polyIndex]);
				stream->pingpong = CLOSED;
				stream->doSeek = 0;
				stream->offset = -1;
				starttrig = 0;
				stoptrig = 0;
				stream->pThreadSD = chThdCreateStatic(waThreadSD, sizeof(waThreadSD), HIGHPRIO, ThreadSD, (void *)stream);
				
				_gate = 0;
			]]>
		</code.init>
		
		<code.dispose>
			<![CDATA[
				sdStopStreamer(stream);
			]]>
		</code.dispose>
		
		<code.krate>
			<![CDATA[
				outlet_gate= _gate<<27;
				outlet_velocity= _velo<<20;
				outlet_releaseVelocity= _rvelo<<20;
				
				int32_t i;
				int16_t *p = 0;
			    int16_t *q = 0;
			    p=sdReadStream(stream);
			     if (p) {
			        for(i=0;i<BUFSIZE;i++){
           				outlet_out[i] = (*(p++))<<10;
			        }
			     } else 
			        for(i=0;i<BUFSIZE;i++) outlet_out[i] = 0;
			]]>
		</code.krate>
		<code.srate>
		</code.srate>
      	<code.midihandler>
			char c[64];
			<![CDATA[
				strcpy(&c[0],"000.wav");
				int i = data1;   int i0 = i/10;
   				c[0+2] = '0'+i-10*i0;
				i = i0; i0 = i/10;
			    c[0+1] = '0'+i-10*i0;
			    i = i0; i0 = i/10;
                c[0+0] = '0'+i-10*i0;
				
				if ((status == MIDI_NOTE_ON + attr_midichannel) && (data2)) {
					LogTextMessage(&c[0]);
					sdOpenStream(stream, &c[0]); 
					sdSeekStream(stream,(0>>4)<<2);
					_note = data1;
					_velo = data2;
					_gate = 1;
				} else if (((status == MIDI_NOTE_ON + attr_midichannel) && (!data2)) || (status == MIDI_NOTE_OFF + attr_midichannel)) {
					sdCloseStream(stream);	
					_rvelo = data2;
					_gate = 0;
				} else if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == MIDI_C_ALL_NOTES_OFF)) {
					_gate = 0;
				}
				
			]]>
		</code.midihandler>
		
	</obj.normal>
</objdefs>
