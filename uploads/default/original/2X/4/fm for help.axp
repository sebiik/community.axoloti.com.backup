<patch-1.0 appVersion="1.0.11">
   <patchobj type="patch/object" uuid="6d5c7057-4138-4d41-87a2-7a9a07b7df7a" name="mix" x="350" y="0">
      <params>
         <frac32.s.map name="o1" value="64.0"/>
         <frac32.s.map name="o2" value="0.0"/>
         <frac32.s.map name="o3" value="0.0"/>
         <frac32.s.map name="o1xo2" value="0.0"/>
         <frac32.s.map name="o2xo3" value="0.0"/>
         <frac32.s.map name="o1xo3" value="0.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="6d5c7057-4138-4d41-87a2-7a9a07b7df7a">
         <inlets/>
         <outlets/>
         <displays/>
         <params>
            <frac32.s.map.ratio name="o1"/>
            <frac32.s.map.ratio name="o2"/>
            <frac32.s.map.ratio name="o3"/>
            <frac32.s.map.ratio name="o1xo2"/>
            <frac32.s.map.ratio name="o2xo3"/>
            <frac32.s.map.ratio name="o1xo3"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t _o1;
int32_t _o2;
int32_t _o3;
int32_t _o1xo2;
int32_t _o2xo3;
int32_t _o1xo3;]]></code.declaration>
         <code.krate><![CDATA[_o1 = param_o1;
_o2 = param_o2;
_o3 = param_o3;
_o1xo2 = param_o1xo2;
_o2xo3 = param_o2xo3;
_o1xo3 = param_o1xo3;]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="8" y="12" text="Oscillators"/>
   <patchobj type="patch/object" uuid="7989c2c5-ed95-4c9b-8fd4-b4bedcccd865" name="o1" x="0" y="28">
      <params>
         <int32.hradio name="wave" value="0"/>
         <int32 name="freq" value="1"/>
         <frac32.u.map name="phase" value="0.0"/>
         <frac32.u.map name="pw" value="32.0"/>
         <bool32.tgl name="sync" value="0"/>
         <frac32.s.map name="pitch" value="0.0"/>
         <bool32.tgl name="unipolar" value="0"/>
         <bool32.tgl name="invert" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="7989c2c5-ed95-4c9b-8fd4-b4bedcccd865">
         <inlets/>
         <outlets/>
         <displays/>
         <params>
            <int32.hradio name="wave">
               <MaxValue i="4"/>
            </int32.hradio>
            <int32 name="freq">
               <MinValue i="-256"/>
               <MaxValue i="256"/>
            </int32>
            <frac32.u.map name="phase"/>
            <frac32.u.map.ratio name="pw"/>
            <bool32.tgl name="sync"/>
            <frac32.s.map.pitch name="pitch"/>
            <bool32.tgl name="unipolar"/>
            <bool32.tgl name="invert"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t _wave;
int32_t _freq;
int32_t _phase;
int32_t _pw;
bool _sync;
int32_t _pitch;
bool _unipolar;
bool _invert;]]></code.declaration>
         <code.krate><![CDATA[_wave = param_wave;
_freq = param_freq;
_phase = param_phase;
_pw = param_pw;
_sync = param_sync;
_pitch = param_pitch;
_unipolar = param_unipolar;
_invert = param_invert;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="7989c2c5-ed95-4c9b-8fd4-b4bedcccd865" name="o2" x="98" y="28">
      <params>
         <int32.hradio name="wave" value="0"/>
         <int32 name="freq" value="1"/>
         <frac32.u.map name="phase" value="0.0"/>
         <frac32.u.map name="pw" value="32.0"/>
         <bool32.tgl name="sync" value="0"/>
         <frac32.s.map name="pitch" value="0.0"/>
         <bool32.tgl name="unipolar" value="0"/>
         <bool32.tgl name="invert" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="7989c2c5-ed95-4c9b-8fd4-b4bedcccd865">
         <inlets/>
         <outlets/>
         <displays/>
         <params>
            <int32.hradio name="wave">
               <MaxValue i="4"/>
            </int32.hradio>
            <int32 name="freq">
               <MinValue i="-256"/>
               <MaxValue i="256"/>
            </int32>
            <frac32.u.map name="phase"/>
            <frac32.u.map.ratio name="pw"/>
            <bool32.tgl name="sync"/>
            <frac32.s.map.pitch name="pitch"/>
            <bool32.tgl name="unipolar"/>
            <bool32.tgl name="invert"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t _wave;
int32_t _freq;
int32_t _phase;
int32_t _pw;
bool _sync;
int32_t _pitch;
bool _unipolar;
bool _invert;]]></code.declaration>
         <code.krate><![CDATA[_wave = param_wave;
_freq = param_freq;
_phase = param_phase;
_pw = param_pw;
_sync = param_sync;
_pitch = param_pitch;
_unipolar = param_unipolar;
_invert = param_invert;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="7989c2c5-ed95-4c9b-8fd4-b4bedcccd865" name="o3" x="196" y="28">
      <params>
         <int32.hradio name="wave" value="0"/>
         <int32 name="freq" value="1"/>
         <frac32.u.map name="phase" value="0.0"/>
         <frac32.u.map name="pw" value="32.0"/>
         <bool32.tgl name="sync" value="0"/>
         <frac32.s.map name="pitch" value="0.0"/>
         <bool32.tgl name="unipolar" value="0"/>
         <bool32.tgl name="invert" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="7989c2c5-ed95-4c9b-8fd4-b4bedcccd865">
         <inlets/>
         <outlets/>
         <displays/>
         <params>
            <int32.hradio name="wave">
               <MaxValue i="4"/>
            </int32.hradio>
            <int32 name="freq">
               <MinValue i="-256"/>
               <MaxValue i="256"/>
            </int32>
            <frac32.u.map name="phase"/>
            <frac32.u.map.ratio name="pw"/>
            <bool32.tgl name="sync"/>
            <frac32.s.map.pitch name="pitch"/>
            <bool32.tgl name="unipolar"/>
            <bool32.tgl name="invert"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t _wave;
int32_t _freq;
int32_t _phase;
int32_t _pw;
bool _sync;
int32_t _pitch;
bool _unipolar;
bool _invert;]]></code.declaration>
         <code.krate><![CDATA[_wave = param_wave;
_freq = param_freq;
_phase = param_phase;
_pw = param_pw;
_sync = param_sync;
_pitch = param_pitch;
_unipolar = param_unipolar;
_invert = param_invert;]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="448" y="28" text="operator1 output mix"/>
   <patchobj type="patch/object" uuid="02dee5da-5ece-48e3-916b-8510d985926d" name="object_1" x="644" y="56">
      <params>
         <int32 name="a" value="6"/>
         <int32 name="b" value="2"/>
      </params>
      <attribs>
         <combo attributeName="size" selection="1024 (46.88 Hz)"/>
         <objref attributeName="op1" obj="o1"/>
         <objref attributeName="op2" obj="o2"/>
         <objref attributeName="op3" obj="o3"/>
         <objref attributeName="pm1" obj="m1"/>
         <objref attributeName="pm2" obj="m2"/>
         <objref attributeName="pm3" obj="m3"/>
         <objref attributeName="mix" obj="mix"/>
      </attribs>
      <object id="patch/object" uuid="02dee5da-5ece-48e3-916b-8510d985926d">
         <inlets/>
         <outlets>
            <frac32buffer name="out"/>
         </outlets>
         <displays>
            <int8array128.vbar name="w"/>
            <frac32.s.dial name="d1"/>
         </displays>
         <params>
            <int32 name="a">
               <MinValue i="0"/>
               <MaxValue i="6"/>
            </int32>
            <int32 name="b">
               <MinValue i="0"/>
               <MaxValue i="2"/>
            </int32>
         </params>
         <attribs>
            <combo name="size">
               <MenuEntries>
                  <string>64 (750Hz)</string>
                  <string>128 (375 Hz)</string>
                  <string>256 (187.5Hz)</string>
                  <string>512 (93.75 Hz)</string>
                  <string>1024 (46.88 Hz)</string>
                  <string>2048 (23.44 Hz)</string>
                  <string>4096 (11.72 Hz)</string>
                  <string>8192 (5.86 Hz)</string>
               </MenuEntries>
               <CEntries>
                  <string>6</string>
                  <string>7</string>
                  <string>8</string>
                  <string>9</string>
                  <string>10</string>
                  <string>11</string>
                  <string>12</string>
                  <string>13</string>
               </CEntries>
            </combo>
            <objref name="op1"/>
            <objref name="op2"/>
            <objref name="op3"/>
            <objref name="pm1"/>
            <objref name="pm2"/>
            <objref name="pm3"/>
            <objref name="mix"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
static const uint32_t BITS = 16;
static const uint32_t GAIN = 12;
int16_t *array;

uint32_t wave[3];
int32_t freq[3];
uint32_t phase[3];
uint32_t pw[3];
bool sync[3];
int32_t pitch[3];
bool unipolar[3];
bool invert[3];

int32_t mix[3];

int32_t modmatrix[7][3]; //row = source; column = dest

uint32_t phasor[3];
uint32_t reset_phasor = 0;


int32_t out_old[6] = {0,0,0,0,0,0};
int32_t out[3];

int32_t output;





//these functions convert an unsigned (0 ~ 2^32) phase signal into a  sine/triangle/square/saw waveform
int32_t phase2sine(uint32_t phase_in,uint32_t pw_in ,bool invert_in, bool uns)
{

	uint32_t phase_rect;
	int32_t out;
	if (phase_in<pw_in)
	{
	phase_rect = 2147483648.0f*((float)(phase_in)/(float)(pw_in));
	SINE2TINTERP(phase_rect,out);
	}
	else
	{
	phase_rect = 2147483648.0f*((float)(phase_in-pw_in)/(4294967296.0f-(float)pw_in));
	SINE2TINTERP((1<<31)+phase_rect,out);
	}
	out = out>>4;
	if (invert_in)
	out = -out;
	if (uns)
	out =(1<<26) + (out>>1);
	return out;	
}
int32_t phase2tri(uint32_t phase_in,uint32_t pw_in ,bool invert_in, bool uns)
{

	uint32_t phase_rect;
	int32_t out;
	if (phase_in<pw_in)
	{
	phase_rect = 2147483647.0f*((float)(phase_in)/(float)(pw_in));
	if (phase_rect<(1<<30))
		out = phase_rect<<1;
	else
		out = 2147483647-phase_rect<<1;
	}
	else
	{
	phase_rect = 2147483647.0f*((float)(phase_in-pw_in)/(4294967296.0f-(float)pw_in));
	if (phase_rect<(1<<30))
		out = -phase_rect<<1;
	else
		out = phase_rect-2147483647<<1;
	}
	out = out>>4;
	if (invert_in)
	out = -out;
	if (uns)
	out =(1<<26) + (out>>1);
	return out;	
}
int32_t phase2square(uint32_t phase_in,uint32_t pw_in ,bool invert_in, bool uns)
{
	int32_t out;
	if (phase_in<pw_in)
	out =  (1<<27);
	else
	out =  -(1<<27);
	if (invert_in)
	out = -out;
	if (uns)
	out =(1<<26) + (out>>1);
	return out;
}
int32_t phase2saw(uint32_t phase_in,uint32_t pw_in ,bool invert_in, bool uns)
{
	uint32_t phase_rect;
	int32_t out;
	if (phase_in<pw_in)
	{
	phase_rect = 2147483648.0f*((float)(phase_in)/(float)(pw_in));
	out = (phase_rect>>4)-(1<<27);
	}
	else
	{
	phase_rect = 2147483648.0f*((float)(phase_in-pw_in)/(4294967296.0f-(float)pw_in));
	out = (phase_rect>>4);
	}
	if (invert_in)
	out = -out;
	if (uns)
	out =(1<<26) + (out>>1);
	return out;	
}]]></code.declaration>
         <code.init><![CDATA[for (int i = 0;i<3;i++)
phasor[i] = phase[i];

static int16_t _array[attr_poly][LENGTH] __attribute__ ((section (".sdram")));
array = &_array[parent->polyIndex][0];
{ 
  int i;
  for(i=0;i<LENGTH;i++) array[i]=0;
}]]></code.init>
         <code.krate><![CDATA[sync[0] = attr_op1._sync;
	sync[1] = attr_op2._sync;
	sync[2] = attr_op3._sync;

	unipolar[0] = attr_op1._unipolar;
	unipolar[1] = attr_op2._unipolar;
	unipolar[2] = attr_op3._unipolar;
	
	invert [0] = attr_op1._invert;
	invert [1] = attr_op2._invert;
	invert [2] = attr_op3._invert;
	
	pitch[0] = attr_op1._pitch;
	pitch[1] = attr_op2._pitch;
	pitch[2] = attr_op3._pitch;
	
	wave[0] = attr_op1._wave;
	wave[1] = attr_op2._wave;
	wave[2] = attr_op3._wave;
	
	freq[0] = attr_op1._freq;
	freq[1] = attr_op2._freq;
	freq[2] = attr_op3._freq;
	
	phase[0] = attr_op1._phase<<5;
	phase[1] = attr_op2._phase<<5;
	phase[2] = attr_op3._phase<<5;
	
	pw[0] = attr_op1._pw<<5;
	pw[1] = attr_op2._pw<<5;
	pw[2] = attr_op3._pw<<5;
	
	modmatrix[1][0] = attr_pm1._o1;
	modmatrix[2][0] = attr_pm1._o2;
	modmatrix[3][0] = attr_pm1._o3;
	modmatrix[4][0] = attr_pm1._o1xo2;
	modmatrix[5][0] = attr_pm1._o2xo3;
	modmatrix[6][0] = attr_pm1._o1xo3;

	modmatrix[1][1] = attr_pm2._o1;
	modmatrix[2][1] = attr_pm2._o2;
	modmatrix[3][1] = attr_pm2._o3;
	modmatrix[4][1] = attr_pm2._o1xo2;
	modmatrix[5][1] = attr_pm2._o2xo3;
	modmatrix[6][1] = attr_pm2._o1xo3;

	modmatrix[1][2] = attr_pm3._o1;
	modmatrix[2][2] = attr_pm3._o2;
	modmatrix[3][2] = attr_pm3._o3;
	modmatrix[4][2] = attr_pm3._o1xo2;
	modmatrix[5][2] = attr_pm3._o2xo3;
	modmatrix[6][2] = attr_pm3._o1xo3;

	mix[0] = attr_mix._o1;
	mix[1] = attr_mix._o2;
	mix[2] = attr_mix._o3;
	mix[3] = attr_mix._o1xo2;
	mix[4] = attr_mix._o2xo3;
	mix[5] = attr_mix._o1xo3;

disp_d1 = modmatrix[param_a][param_b];


for(int i=0;i<128;i++)
{
    disp_w[i]=array[i*(1<<(attr_size-7)) ]>>9;
}


int32_t increment[3];

for(int Q=0;Q<3;Q++)
{
	if (sync[Q])
	{
		MTOFEXTENDED(pitch[Q],increment[Q]);
	}
	else
		increment[Q] = (1<<26)/(1<<(attr_size-6));	
}]]></code.krate>
         <code.srate><![CDATA[int32_t temp;


for(int i=0;i<3;i++)
{
	phasor[i] +=  (freq[i]>0?((increment[i])*freq[i]):(increment[i]>>(1-freq[i])));
	temp = phasor[i]; 
	for(int j=0;j<6;j++)
	{
		temp+=___SMMUL(out_old[j]<<2,modmatrix[j+1][i]<<3)<<4;
	}
	switch (wave[i])
	{
		case 0: out[i]=phase2sine(temp,pw[i],invert[i],unipolar[i]); break;
		case 1: out[i]=phase2saw(temp,pw[i],invert[i],unipolar[i]); break;
		case 2: out[i]=phase2tri(temp,pw[i],invert[i],unipolar[i]); break;
		case 3: out[i]=phase2square(temp,pw[i],invert[i],unipolar[i]); break;
	}
}
for(int k=0;k<3;k++)
out_old[k] = out[k];

out_old[3] = ___SMMUL(out_old[0]<<2,out_old[1]<<3);
out_old[4] = ___SMMUL(out_old[1]<<2,out_old[2]<<3);
out_old[5] = ___SMMUL(out_old[0]<<2,out_old[2]<<3);

output =0;
for(int l=0;l<6;l++)
{
	output = ___SMMLA(out_old[l]<<2,mix[l]<<3,output);
}
output = __SSAT(output,28);
outlet_out = output;
array[reset_phasor] = output>>GAIN;

reset_phasor++;
if (reset_phasor>=(1<<attr_size))
{
	reset_phasor =0;
	for (int u = 0;u<3;u++)
	phasor[u] = phase[u];
}]]></code.srate>
      </object>
   </patchobj>
   <obj type="math/*c" uuid="7a66f52a9594e7e9eb31328ea725cb3641a80b55" name="*c_1" x="882" y="56">
      <params>
         <frac32.u.map name="amp" value="1.6999998092651367"/>
      </params>
      <attribs/>
   </obj>
   <obj type="audio/out stereo" uuid="a1ca7a567f535acc21055669829101d3ee7f0189" name="out_1" x="1064" y="56">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="447" y="66" text="operator2 output mix"/>
   <comment type="patch/comment" x="448" y="98" text="operator3 output mix"/>
   <comment type="patch/comment" x="448" y="140" text="op1*op2 output mix"/>
   <comment type="patch/comment" x="448" y="177" text="op2*ou3 output mix"/>
   <comment type="patch/comment" x="448" y="210" text="op1*op3 output mix"/>
   <comment type="patch/comment" x="785" y="272" text="You can select the row and the column of the modmatrix [a][b] vector"/>
   <comment type="patch/comment" x="14" y="280" text="Destinations for phase modulation"/>
   <comment type="patch/comment" x="14" y="294" text="Operator 1"/>
   <comment type="patch/comment" x="112" y="294" text="Operator 2"/>
   <comment type="patch/comment" x="210" y="294" text="Operator 3"/>
   <patchobj type="patch/object" uuid="c9d7ad67-6f33-4728-ba2c-81afedd92cad" name="m1" x="14" y="308">
      <params>
         <frac32.s.map name="o1" value="0.0"/>
         <frac32.s.map name="o2" value="0.0"/>
         <frac32.s.map name="o3" value="0.0"/>
         <frac32.s.map name="o1xo2" value="0.0"/>
         <frac32.s.map name="o2xo3" value="0.0"/>
         <frac32.s.map name="o1xo3" value="0.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="c9d7ad67-6f33-4728-ba2c-81afedd92cad">
         <inlets/>
         <outlets/>
         <displays/>
         <params>
            <frac32.s.map name="o1"/>
            <frac32.s.map name="o2"/>
            <frac32.s.map name="o3"/>
            <frac32.s.map name="o1xo2"/>
            <frac32.s.map name="o2xo3"/>
            <frac32.s.map name="o1xo3"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t _o1;
int32_t _o2;
int32_t _o3;
int32_t _o1xo2;
int32_t _o2xo3;
int32_t _o1xo3;]]></code.declaration>
         <code.krate><![CDATA[_o1 = param_o1;
_o2 = param_o2;
_o3 = param_o3;
_o1xo2 = param_o1xo2;
_o2xo3 = param_o2xo3;
_o1xo3 = param_o1xo3;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="c9d7ad67-6f33-4728-ba2c-81afedd92cad" name="m2" x="112" y="308">
      <params>
         <frac32.s.map name="o1" value="0.0"/>
         <frac32.s.map name="o2" value="0.0"/>
         <frac32.s.map name="o3" value="0.0"/>
         <frac32.s.map name="o1xo2" value="0.0"/>
         <frac32.s.map name="o2xo3" value="0.0"/>
         <frac32.s.map name="o1xo3" value="-13.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="c9d7ad67-6f33-4728-ba2c-81afedd92cad">
         <inlets/>
         <outlets/>
         <displays/>
         <params>
            <frac32.s.map name="o1"/>
            <frac32.s.map name="o2"/>
            <frac32.s.map name="o3"/>
            <frac32.s.map name="o1xo2"/>
            <frac32.s.map name="o2xo3"/>
            <frac32.s.map name="o1xo3"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t _o1;
int32_t _o2;
int32_t _o3;
int32_t _o1xo2;
int32_t _o2xo3;
int32_t _o1xo3;]]></code.declaration>
         <code.krate><![CDATA[_o1 = param_o1;
_o2 = param_o2;
_o3 = param_o3;
_o1xo2 = param_o1xo2;
_o2xo3 = param_o2xo3;
_o1xo3 = param_o1xo3;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="c9d7ad67-6f33-4728-ba2c-81afedd92cad" name="m3" x="210" y="308">
      <params>
         <frac32.s.map name="o1" value="0.0"/>
         <frac32.s.map name="o2" value="0.0"/>
         <frac32.s.map name="o3" value="0.0"/>
         <frac32.s.map name="o1xo2" value="0.0"/>
         <frac32.s.map name="o2xo3" value="0.0"/>
         <frac32.s.map name="o1xo3" value="-13.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="c9d7ad67-6f33-4728-ba2c-81afedd92cad">
         <inlets/>
         <outlets/>
         <displays/>
         <params>
            <frac32.s.map name="o1"/>
            <frac32.s.map name="o2"/>
            <frac32.s.map name="o3"/>
            <frac32.s.map name="o1xo2"/>
            <frac32.s.map name="o2xo3"/>
            <frac32.s.map name="o1xo3"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t _o1;
int32_t _o2;
int32_t _o3;
int32_t _o1xo2;
int32_t _o2xo3;
int32_t _o1xo3;]]></code.declaration>
         <code.krate><![CDATA[_o1 = param_o1;
_o2 = param_o2;
_o3 = param_o3;
_o1xo2 = param_o1xo2;
_o2xo3 = param_o2xo3;
_o1xo3 = param_o1xo3;]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="126" y="322" text="Operator 1"/>
   <comment type="patch/comment" x="294" y="336" text="source: op1"/>
   <comment type="patch/comment" x="294" y="378" text="source: op2"/>
   <comment type="patch/comment" x="294" y="406" text="source:op3"/>
   <comment type="patch/comment" x="784" y="434" text="Read the value of the modmatrix vector"/>
   <comment type="patch/comment" x="294" y="448" text="source: op4"/>
   <comment type="patch/comment" x="294" y="490" text="source: op5"/>
   <comment type="patch/comment" x="294" y="518" text="source: op6"/>
   <nets>
      <net>
         <source obj="*c_1" outlet="out"/>
         <dest obj="out_1" inlet="left"/>
         <dest obj="out_1" inlet="right"/>
      </net>
      <net>
         <source obj="object_1" outlet="out"/>
         <dest obj="*c_1" inlet="in"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>-8</x>
      <y>-8</y>
      <width>1382</width>
      <height>784</height>
   </windowPos>
</patch-1.0>