<patch-1.0 appVersion="1.0.12">
   <patchobj type="patch/object" uuid="75543b26-e4c5-40d8-a39c-e92fd17d6ec2" name="sel_1" x="196" y="56">
      <params>
         <bin16 name="b16" value="0"/>
      </params>
      <attribs>
         <spinner attributeName="cc" value="33"/>
      </attribs>
      <object id="patch/object" uuid="75543b26-e4c5-40d8-a39c-e92fd17d6ec2">
         <sDescription>select one out of 16 booleans, chainable</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <inlets>
            <int32 name="in" description="in"/>
            <bool32 name="def" description="default value"/>
            <int32 name="TEST"/>
         </inlets>
         <outlets>
            <int32 name="chain" description="chain out (in-16)"/>
            <bool32 name="o" description="output"/>
         </outlets>
         <displays>
            <int32.bar16 name="v" noLabel="true"/>
         </displays>
         <params>
            <bin16 name="b16" noLabel="true"/>
         </params>
         <attribs>
            <spinner name="cc" MinValue="0" MaxValue="128" DefaultValue="0"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int32_t ccv1;
int32_t ntrig1;

int32_t ccv2;
int32_t ntrig2;

int32_t ccv3;
int32_t ntrig3;

int32_t ccv4;
int32_t ntrig4;

int32_t ccv5;
int32_t ntrig5;

int32_t ccv6;
int32_t ntrig6;

int32_t ccv7;
int32_t ntrig7;

int32_t ccv8;
int32_t ntrig8;

int32_t ccv9;
int32_t ntrig9;

int32_t ccv10;
int32_t ntrig10;

int32_t ccv11;
int32_t ntrig11;

int32_t ccv12;
int32_t ntrig12;

int32_t ccv13;
int32_t ntrig13;

int32_t ccv14;
int32_t ntrig14;

int32_t ccv15;
int32_t ntrig15;

int32_t ccv16;
int32_t ntrig16;]]></code.declaration>
         <code.krate><![CDATA[/*
 * Channels on/off
 */

ntrig1 = 0;	int32_t P1 = (ccv1)?(1<<0):0;
ntrig2 = 0;	int32_t P2 = (ccv2)?(1<<1):0;
ntrig3 = 0;	int32_t P3 = (ccv3)?(1<<2):0;
ntrig4 = 0;	int32_t P4 = (ccv4)?(1<<3):0;
ntrig5 = 0;	int32_t P5 = (ccv5)?(1<<4):0;
ntrig6 = 0;	int32_t P6 = (ccv6)?(1<<5):0;
ntrig7 = 0;	int32_t P7 = (ccv7)?(1<<6):0;
ntrig8 = 0;	int32_t P8 = (ccv8)?(1<<7):0;
ntrig9 = 0;	int32_t P9 = (ccv9)?(1<<9):0;
ntrig10 = 0;	int32_t P10 = (ccv10)?(1<<10):0;
ntrig11 = 0;	int32_t P11 = (ccv11)?(1<<11):0;
ntrig12 = 0;	int32_t P12 = (ccv12)?(1<<12):0;
ntrig13 = 0;	int32_t P13 = (ccv13)?(1<<13):0;
ntrig14 = 0;	int32_t P14 = (ccv14)?(1<<14):0;
ntrig15 = 0;	int32_t P15 = (ccv15)?(1<<15):0;
ntrig16 = 0;	int32_t P16 = (ccv16)?(1<<16):0;

int32_t CollectAllControls = P1+P2+P3+P4+P5+P6+P7+P8+P9+P10+P11+P12+P13+P14+P15+P16;

disp_v=inlet_in;
PExParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_b16],CollectAllControls,0xFFFD);

/*
 * Sequencer.
 */
if ((inlet_in>=0)&&(inlet_in<16))   outlet_o=param_b16&(1<<inlet_in);
else outlet_o = inlet_def;
outlet_chain = inlet_in-16;]]></code.krate>
         <code.midihandler><![CDATA[if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == attr_cc  )) { ccv1 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == attr_cc+1)) { ccv2 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == attr_cc+2)) { ccv3 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == attr_cc+3)) { ccv4 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == attr_cc+4)) { ccv5 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == attr_cc+5)) { ccv6 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == attr_cc+6)) { ccv7 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == attr_cc+7)) { ccv8 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == attr_cc+8)) { ccv9 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == attr_cc+9)) { ccv10 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == attr_cc+10)) { ccv11 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == attr_cc+11)) { ccv12 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == attr_cc+12)) { ccv13 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == attr_cc+13)) { ccv14 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == attr_cc+14)) { ccv15 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == attr_cc+15)) { ccv16 = data2;}]]></code.midihandler>
      </object>
   </patchobj>
   <nets/>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>282</x>
      <y>115</y>
      <width>924</width>
      <height>561</height>
   </windowPos>
</patch-1.0>