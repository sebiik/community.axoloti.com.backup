<patch-1.0 appVersion="1.0.12">
   <obj type="damonp/SuperInput_a10" uuid="68c8c3d7-b5b9-41a5-8062-f64da7487d6d" name="SuperInput_a10_1" x="0" y="0">
      <params>
         <frac32.u.map name="gate" value="2.0"/>
         <frac32.u.map name="smooth" value="57.0"/>
         <frac32.u.map name="m0" value="0.0"/>
         <frac32.u.map name="m1" value="0.0"/>
         <frac32.u.map name="m2" value="0.0"/>
         <frac32.u.map name="m3" value="0.0"/>
         <frac32.u.map name="m4" value="0.0"/>
         <frac32.u.map name="m5" value="0.0"/>
         <frac32.u.map name="m6" value="0.0"/>
         <frac32.u.map name="m7" value="0.0"/>
         <frac32.u.map name="m8" value="0.0"/>
         <frac32.u.map name="m9" value="0.0"/>
      </params>
      <attribs>
         <combo attributeName="c0" selection="PA0 (ADC1_IN0)"/>
         <combo attributeName="c1" selection="PA1 (ADC1_IN1)"/>
         <combo attributeName="c2" selection="PA2 (ADC1_IN2)"/>
         <combo attributeName="c3" selection="PA3 (ADC1_IN3)"/>
         <combo attributeName="c4" selection="PC1 (ADC1_IN11)"/>
         <combo attributeName="c5" selection="PC0 (ADC1_IN10)"/>
         <combo attributeName="c6" selection="PC3 (ADC1_IN13)"/>
         <combo attributeName="c7" selection="PC2 (ADC1_IN12)"/>
         <combo attributeName="c8" selection="PA6 (ADC1_IN6)"/>
         <combo attributeName="c9" selection="PA5 (ADC1_IN5)"/>
      </attribs>
   </obj>
   <obj type="damonp/SuperInput_d4" uuid="a6b57406-f269-453b-adf0-c50dce16377d" name="SuperInput_d4_1" x="140" y="0">
      <params>
         <bool32.mom name="button1" value="0"/>
         <bool32.tgl name="ToggleOn1" value="0"/>
         <bool32.mom name="button2" value="0"/>
         <bool32.tgl name="ToggleOn2" value="0"/>
         <bool32.mom name="button3" value="0"/>
         <bool32.tgl name="ToggleOn3" value="0"/>
         <bool32.mom name="button4" value="0"/>
         <bool32.tgl name="ToggleOn4" value="0"/>
      </params>
      <attribs>
         <combo attributeName="a1" selection="PC5"/>
         <combo attributeName="m1" selection="pulldown"/>
         <combo attributeName="a2" selection="PC4"/>
         <combo attributeName="m2" selection="pulldown"/>
         <combo attributeName="a3" selection="PB7"/>
         <combo attributeName="m3" selection="pulldown"/>
         <combo attributeName="a4" selection="PB6"/>
         <combo attributeName="m4" selection="pulldown"/>
      </attribs>
   </obj>
   <obj type="audio/in stereo" uuid="99848ad6d90a8e615e83b2e619cfc806f28e7281" name="in_1" x="378" y="0">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="0477ffe3-c75f-4e04-9821-b6f2d08add8b" name="glitchBeast_1" x="532" y="0">
      <params>
         <frac32.u.map name="mix" value="0.0"/>
      </params>
      <attribs>
         <combo attributeName="size" selection="131072 (2.73s)"/>
      </attribs>
      <object id="patch/object" uuid="0477ffe3-c75f-4e04-9821-b6f2d08add8b">
         <sDescription>multi glitch effect
all effects can be used simultanuously!
this module is almost a patch-filling module on it&apos;s own (with automation recorders added). So you could use this for a stand-alone glitch-fx module for your hardware.
each effect first starts with a gate input  (eg. Glag) and then has one or more CV-inputs for the parameter (eg lag) (refer to fx-patch in my community folder how to use it with midi-note&amp;touch-modules and automation recorders)
Delay times can be controlled with my host-tempo-timing modules

the effects:
-lag: introduces a (tempo-synced) delay to the audio output-&gt;100% wet. Actually, the module constantly reads out the buffer, even when everything is off (no delaytime used, just direct readout of latest recorded input). Lot of the delay-effects do something to the readout-position of the delay.
-retrigger: feeds back the output audio back into the start of the delaybuffer and bypasses the input. This is not your regular retrigger! ALL the other effects are WITHIN the retrigger effect for instant granular mahem!
-gap: introduces a volume gap to the audio at the rate of the current retrigger time. &quot;Gap&quot; controls the gap size while &quot;offset&quot; changes the phase of the gap in respect to the delay, allowing a different part to come through.
-reverse: reverses the play direction of the buffer reader, reversing the audio. The CV controls the rate the audio goes into reverse play (hard press is instant reverse)
-tapestop: stops the buffer reader, slowing down the audiorate to zero. CV controls the rate at which it stops, the higher the CV, the quicker the stop.
-mod: modulates the delaytime using a sine LFO with CV&apos;s for rate and modulation width
-samplerate: reduces the sample rate with higher CV&apos;s
-spatial: offsets the left or right channel up to 64 samples delay. (32=no delay to either channel)
-phaser: some kind of weird phaser/chorus/modulated delay effect. Prerate controls the modulation rate at which the incoming audio is written to the buffer (interpolated and summed with buffer which is set to zero just before the writer starts adding audio), feedrate controls the modulation rate of the feedback time modulation (readout) and feedback controls the volume/amount of thefeedback.
-repeater: repeater delay repeats the incoming audio several times (up to 16) at the same volume and adds this to the original (or retriggering) signal. RepeatSize sets the time of the delay and Repeats sets the amount of delays.
-ringmodulator: ringmodulates the audio and adds it to original. Ring controls the pitch of the modulator wave, ringgain adds gain to the triangle wave, turning it into a squared trapezoid.
-panning: panning pans the stereo signal between left and right, panRate controls the rate of the panning
-multi mode filter: SVF filter with controls for cutoff, resonance and filter-mode. Morphs continously through 4 filter modes: LP-&gt;BP-&gt;HP-&gt;Notch
-grainuliser: read out a position somewhere within the recorded buffer and use it as a waveshape for an oscillator. GrainSize sets the size of the buffer being read. Grain position controls where in the buffer the samples are taken and GrainRate sets the play-rate of the grain
-pitchshifter: pitchshifts the signal up or down. Pitchshift sets the shifting size while Window sets the buffer size for the pitchshifter.
-scratch: uses the CV directly to offset the readout position. Kind of like &quot;lag&quot;, but lag is meant to use tempo-synced delay times while this uses continous filtered signals.
-random delaytime jam: randomises several delay-buffer-readouts throughout the effect, causing a lot of hard-glitching. CV controls the rate at which the randomisation is updating.
-Octaver: simple rectifier&amp;highpass based octaving effect, more like a distortion. CV controls feedback amount, causing even higher frequencies.
-suboctaver: generates suboctaves by using a counter. subrate controls the rate at which the sub-generator responds to an up/down command of the counter-&gt;slow rate causes a triangle shape of low volume.</sDescription>
         <author>Remco van der Most</author>
         <license>BSD</license>
         <helpPatch>delay.axh</helpPatch>
         <inlets>
            <frac32buffer name="inL" description="wave input"/>
            <frac32buffer name="inR"/>
            <bool32 name="Glag"/>
            <frac32 name="CVlag"/>
            <bool32 name="Gretrig"/>
            <frac32 name="CVretrig"/>
            <bool32 name="Ggap"/>
            <frac32 name="gap"/>
            <frac32 name="offset"/>
            <bool32 name="Greverse"/>
            <frac32 name="reverserate"/>
            <bool32 name="Gtapestop"/>
            <frac32 name="stoprate"/>
            <bool32 name="Gmod"/>
            <frac32 name="modrate"/>
            <frac32 name="modwidth"/>
            <bool32 name="Gsr"/>
            <frac32 name="samplerate"/>
            <bool32 name="Gspatial"/>
            <frac32 name="spatial"/>
            <bool32 name="Gphaser"/>
            <frac32 name="preRate"/>
            <frac32 name="feedRate"/>
            <frac32 name="feedback"/>
            <bool32 name="Grepeater"/>
            <frac32 name="repeatSize"/>
            <frac32 name="repeats"/>
            <bool32 name="Gring"/>
            <frac32 name="ringRate"/>
            <frac32 name="ringGain"/>
            <bool32 name="Gpan"/>
            <frac32 name="panRate"/>
            <bool32 name="Gfilter"/>
            <frac32 name="filterMode"/>
            <frac32 name="filterFreq"/>
            <frac32 name="filterRes"/>
            <bool32 name="Ggrain"/>
            <frac32 name="grainSize"/>
            <frac32 name="grainPosition"/>
            <frac32 name="grainRate"/>
            <bool32 name="Gpitchshifter"/>
            <frac32 name="pitchShift"/>
            <frac32 name="window"/>
            <bool32 name="Gscratch"/>
            <frac32 name="scratch"/>
            <bool32 name="GrndJam"/>
            <frac32 name="rndRate"/>
            <bool32 name="Goctaver"/>
            <frac32 name="octaver"/>
            <bool32 name="Gsub"/>
            <frac32 name="subRate"/>
            <frac32 name="mix"/>
         </inlets>
         <outlets>
            <frac32buffer name="outL"/>
            <frac32buffer name="outR"/>
            <int32 name="samplelength"/>
            <frac32.positive name="o1"/>
            <frac32.positive name="o2"/>
         </outlets>
         <displays>
            <frac32.u.chart name="d1"/>
            <frac32.s.chart name="d2"/>
         </displays>
         <params>
            <frac32.u.map name="mix" noLabel="true"/>
         </params>
         <attribs>
            <combo name="size">
               <MenuEntries>
                  <string>4096 (85.33ms)</string>
                  <string>8192 (170ms)</string>
                  <string>16384 (341ms)</string>
                  <string>32768 (682ms)</string>
                  <string>65536 (1.36s)</string>
                  <string>131072 (2.73s)</string>
                  <string>262144 (5.46s)</string>
                  <string>524288 (10.9s)</string>
                  <string>1048576 (21.8s)</string>
                  <string>2097152 (43.7s)</string>
               </MenuEntries>
               <CEntries>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
                  <string>16</string>
                  <string>17</string>
                  <string>18</string>
                  <string>19</string>
                  <string>20</string>
                  <string>21</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
int32_t *array;

static const uint32_t PLENGTHPOW = 12;
static const uint32_t PLENGTH = (1<<12);
static const uint32_t PLENGTHMASK = ((1<<12)-1);
int32_t *Array;

static const uint32_t pLENGTHPOW = 10;
static const uint32_t pLENGTH = (1<<10);
static const uint32_t pLENGTHMASK = ((1<<10)-1);
int32_t *ARRAY;
int32_t Q[16];
uint32_t qpos;
uint32_t Writepos;
uint32_t writepos;
uint32_t WRITEpos;
int sctrig;
uint32_t sRead;
uint32_t POSI;
uint32_t pitchpos;
uint32_t pitchphase;
uint32_t pPhase;
int32_t Time;
int32_t P[8];
int32_t S[8];
int32_t tmp_rL;
int32_t tmp_rR;
int32_t valL;
int32_t valR;
int32_t vilL;
int32_t vilR;
int32_t volL1;
int32_t volR1;
int32_t volL2;
int32_t volR2;
int32_t rectL;
int32_t rectR;
int32_t feedL;
int32_t feedR;
int on;
uint32_t tmp_d;
int32_t gap;
int32_t offset;
int32_t caunt;
int32_t count;
int Trig;
int i;
uint32_t phase;
int32_t reverserate;
uint32_t cnt;
int32_t tempL;
int32_t tempR;
int32_t spatialL;
int32_t spatialR;
int32_t Size;
int32_t tmpL;
int32_t tmpR;
int32_t vol;
int32_t rphase;
int32_t shape;
int32_t Mem;
int32_t lowL;
int32_t bandL;
int32_t lowR;
int32_t bandR;
int32_t phsOut;
int32_t phsPre;
int32_t phsFeed;
uint32_t panphase;
uint32_t grainphase;
int rndTrg;
int ttrig;
uint32_t jam;
uint32_t tmppos;
int subtrigL;
int subtrigR;
int subL;
int subR;
int32_t SUBL;
int32_t SUBR;
int32_t phaser(int32_t in,int32_t PreRate,int32_t FeedRate,int32_t Feedback, int Dir)
   {
   int32_t Predelay;
   int32_t Feedtime;
   MTOFEXTENDED(PreRate,Predelay)
   MTOFEXTENDED(FeedRate,Feedtime)
   phsPre+=(Predelay>>2)*Dir;
   phsFeed+=(Feedtime>>2)*Dir;
   SINE2TINTERP(phsPre,Predelay)
   SINE2TINTERP(phsFeed,Feedtime)
   Predelay=(Predelay>>6)+(5<<24);
   Feedtime=(Feedtime>>6)+(5<<24);
   Writepos = (Writepos + 1)&PLENGTHMASK;
   Array[Writepos] += __SSAT(in,29);
   Predelay=__USAT(Predelay,27);
   uint32_t Tmp_dwrite = Predelay -(__USAT(Feedtime,27));
   uint32_t Tmp_diwrite = Writepos - (Tmp_dwrite>>(27-PLENGTHPOW)) ;
   uint32_t Tmp_w1write = (Tmp_dwrite<<(PLENGTHPOW+3)) & 0x3FFFFFFF;
   uint32_t Tmp_w2write = (1<<30) - Tmp_w1write;
   Mem=___SMMUL(Mem<<3,Feedback<<2);
   Array[Tmp_diwrite&PLENGTHMASK] +=  ___SMMUL(Mem<<4,Tmp_w1write);
   Array[(Tmp_diwrite+1)&PLENGTHMASK] += ___SMMUL(Mem<<4,Tmp_w2write);

   
      uint32_t Tmp_dread =  Predelay;
      uint32_t Tmp_diread = Writepos - (Tmp_dread>>(27-PLENGTHPOW)) ;
      uint32_t Tmp_w1read = (Tmp_dread<<(PLENGTHPOW+3)) & 0x3FFFFFFF;
      uint32_t Tmp_w2read = (1<<30) - Tmp_w1read;
      int32_t Tmp_a1read = Array[Tmp_diread&PLENGTHMASK];
      int32_t Tmp_a2read = Array[(Tmp_diread+1)&PLENGTHMASK];
      int32_t Tmp_rread = ___SMMUL(Tmp_a1read,Tmp_w1read);
      Tmp_rread = ___SMMLA(Tmp_a2read,Tmp_w2read,Tmp_rread);

     Array[(Writepos+PLENGTHMASK/4)&PLENGTHMASK]=0; 
     Mem= Tmp_rread;
     phsOut= ___SMMUL(Mem<<3,Feedback<<2)+in;
     }]]></code.declaration>
         <code.init><![CDATA[static int32_t _array[1<<attr_size]  __attribute__ ((section (".sdram")));
array = &_array[0];
   int i;
   writepos = 0;
   for(i=0;i<LENGTH;i++) {array[i] = 0;}

static int32_t _Array[1<<12]  __attribute__ ((section (".sdram")));
Array = &_Array[0];
   for(i=0;i<PLENGTH;i++) {Array[i] = 0;}

static int32_t _ARRAY[1<<12]  __attribute__ ((section (".sdram")));
ARRAY = &_ARRAY[0];
   for(i=0;i<pLENGTH;i++) {ARRAY[i] = 0;}
   
lowL = 0;
bandL = 0;
lowR = 0;
bandR = 0;]]></code.init>
         <code.krate><![CDATA[outlet_samplelength=attr_size;
int32_t freq;
MTOFEXTENDED((inlet_modrate<<1)-(1<<27),freq)
phase+=freq>>5;
int32_t sine;
SINE2TINTERP(phase,sine)
sine=___SMMUL((sine>>1)+(1<<31)>>(attr_size-9),inlet_modwidth<<2);

   int32_t TIME=inlet_CVlag*inlet_Glag+sine*inlet_Gmod+(inlet_scratch*inlet_Gscratch>>LENGTHPOW-15);
   TIME=TIME>((1<<27)-3)?((1<<27)-3):TIME;
   S[0] = (TIME - P[0])>>4;
   Time = P[0];
   P[0] = TIME;


gap=___SMMUL(inlet_gap<<3,(tmp_d>>(27-LENGTHPOW))<<2);
offset=___SMMUL(inlet_offset<<3,(tmp_d>>(27-LENGTHPOW))<<2);

if(inlet_Gspatial>0){
spatialL=(inlet_spatial>>18)-256;
spatialR=-(inlet_spatial>>18)+256;
spatialL=spatialL<0?0:spatialL;
spatialR=spatialR<0?0:spatialR;
}

else{
spatialL=0;
spatialR=0;}

int32_t size=inlet_repeatSize>>(27-LENGTHPOW);
   S[1] = (size - P[1])>>4;
   Size = P[1];
   P[1] = size;

  int32_t rfreq;
  MTOFEXTENDED((inlet_ringRate<<1)-(5<<25),rfreq)

  int32_t damp = (0x80<<24) - (inlet_filterRes<<4);
damp = ___SMMUL(damp,damp);
int32_t alpha;
int32_t Ffreq;
MTOFEXTENDED((inlet_filterFreq<<1)-(1<<27),alpha);
SINE2TINTERP(alpha,Ffreq);
int32_t MIX1;
int32_t MIX2;
SINE2TINTERP(inlet_filterMode<<5,MIX1)
SINE2TINTERP((inlet_filterMode<<5)+(1<<30),MIX2)
MIX1=(MIX1>>2)+(1<<29);
MIX2=(MIX2>>2)+(1<<29);
int32_t panfreq;
MTOFEXTENDED((inlet_panRate<<1)-(1<<27),panfreq)
panphase+=panfreq>>3;
int32_t pansine;
SINE2TINTERP(panphase,pansine)
pansine=pansine>>1;
int32_t Lsine=pansine>0?pansine:0;
int32_t Rsine=pansine<0?-pansine:0;
int32_t invsineL=(1<<30)-Lsine;
int32_t invsineR=(1<<30)-Rsine;
disp_d1=invsineL;
disp_d2=invsineR;
outlet_o1=invsineL;
outlet_o2=invsineR;
int32_t grainfreq;
MTOFEXTENDED((inlet_grainRate<<1)-(1<<27),grainfreq)
grainfreq=grainfreq>>2;

int32_t PSrate;
PSrate=(1<<22)*powf(2,((float32_t)((inlet_pitchShift<<1)-(3<<25))/(1<<24)))/4;
int32_t Window=(1<<23)+(inlet_window>>1);
int32_t window;
window=___SMMUL(pLENGTH<<3,Window<<2);


int32_t sfrq;
MTOFEXTENDED(inlet_subRate-(1<<27),sfrq)]]></code.krate>
         <code.srate><![CDATA[qpos=(qpos+1)&7;
Q[qpos]=inlet_inL;
Q[qpos+8]=inlet_inR;
uint32_t qPos=qpos-2;
qPos=qPos&7;


Time += S[0];
  int32_t TIme=inlet_CVretrig*inlet_Gretrig+Time;
  TIme=TIme<0?0:TIme;
  TIme=TIme>((1<<27)-3)?((1<<27)-3):TIme;
Size+= S[1];

//random jam
if(inlet_GrndJam>0){
if(!(rndTrg)){
tmppos=WRITEpos;
rndTrg=1;
}
int chance1=(((uint32_t)GenerateRandomNumber()))<(inlet_rndRate>>3)?1:0;
if((chance1>0)&&!ttrig){
ttrig=1;
if((uint32_t)(GenerateRandomNumber())>(1<<31)){
jam=(uint32_t)(GenerateRandomNumber())&LENGTHMASK;}
else{jam-=tmppos;}
}
if(chance1==0){ttrig=0;}}
else if(inlet_GrndJam==0){rndTrg=0;jam=0;}

  //reverser
  if((inlet_Greverse||inlet_Gtapestop)>0){
  if(caunt>((reverserate>>18)-(count>reverserate>>18?reverserate>>18:count))){
  count+=2-(inlet_Gtapestop>0?1:0);
  caunt=0;
  if((inlet_Greverse)){reverserate=(1<<27)-inlet_reverserate;}
  if((inlet_Gtapestop)){reverserate=(1<<27)-inlet_stoprate;}
  Trig=1;
  }
  caunt+=1;
  }
  else {count=0;caunt=0;Trig=0;}

//write to delay
      WRITEpos = (WRITEpos + 1)&LENGTHMASK;
if(inlet_Gscratch>0){
	if(!sctrig){
	POSI=WRITEpos;
	sctrig=1;}
	sRead+=((-1<<26)+inlet_scratch)>>4;
	//writepos=((sRead>>32-LENGTHPOW)+POSI)&LENGTHMASK;
	writepos=POSI;
}
else if(inlet_Gscratch==0){writepos=WRITEpos;sctrig=0;}

      array[WRITEpos] = __SSAT(inlet_inL*(1-inlet_Gretrig)-feedL*inlet_Gretrig>>16,16);
	 array[WRITEpos] += __SSAT(inlet_inR*(1-inlet_Gretrig)-feedR*inlet_Gretrig>>16,16)<<16;


//read delay first part
      tmp_d =  TIme;
      uint32_t tmp_di = writepos-jam -count -1- (tmp_d>>(27-LENGTHPOW));
      uint32_t tmp_w1 = (tmp_d<<(LENGTHPOW+3)) & 0x3FFFFFFF;
      uint32_t tmp_w2 = (1<<30) - tmp_w1;
      int32_t tmp_a1 = (array[(tmp_di-spatialL)&LENGTHMASK]&((1<<16)-1))<<16;
      int32_t tmp_a2 = (array[(tmp_di+1-spatialL)&LENGTHMASK]&((1<<16)-1))<<16;
      tmp_rL = ___SMMUL(tmp_a1<<2,tmp_w1);
      tmp_rL = ___SMMLA(tmp_a2<<2,tmp_w2,tmp_rL);
	 tmp_a1 = (array[(tmp_di-spatialR)&LENGTHMASK]>>16)<<16;
      tmp_a2 = (array[(tmp_di+1-spatialR)&LENGTHMASK]>>16)<<16;
      tmp_rR = ___SMMUL(tmp_a1<<2,tmp_w1);
      tmp_rR = ___SMMLA(tmp_a2<<2,tmp_w2,tmp_rR);

      
      //outlet_out= tmp_r*inlet_Gretrig+inlet_in*(1-inlet_Gretrig);

//granuliser
if(inlet_Ggrain>0){
grainphase+=grainfreq;
uint32_t POS=grainphase>>20;
POS=___SMMUL(inlet_grainSize<<3,POS<<2)+(inlet_grainPosition>>27-LENGTHPOW);
tmp_rL+=(array[POS-jam&LENGTHMASK]&((1<<16)-1))<<16;
tmp_rR+=(array[POS-jam&LENGTHMASK]>>16)<<16;
}

//short chunk repeater
if((inlet_Grepeater>0)&&(P[2]==inlet_repeatSize)){
	 vol+=((1<<27)-vol)>>5;
	 for(i=0;i<(inlet_repeats>>23);i++){
	 tmpL=(array[(writepos-(size*(1+i)>>2)-jam)&LENGTHMASK]&16)<<14;
	 tmpR=(array[(writepos-(size*(1+i)>>2)-jam)&LENGTHMASK]>>16)<<14;
	 tmp_rL=__SSAT(___SMMUL(vol<<3,tmpL<<2)+tmp_rL,27);             	//OR//  tmp_rL=__SSAT(___SMMUL(vol<<3,tmpL-tmp_rL<<2)+tmp_rL,27);
	 tmp_rR=__SSAT(___SMMUL(vol<<3,tmpR<<2)+tmp_rR,27);			//OR//  tmp_rR=__SSAT(___SMMUL(vol<<3,tmpR-tmp_rR<<2)+tmp_rR,27);
	 }}
else{vol=0;}
P[2]=inlet_repeatSize;

//ringmod
if(inlet_Gring>0){
rphase+=rfreq;
shape=rphase>0?rphase:-rphase;
shape-=(1<<30);
shape=__SSAT(shape>>3+___SMMUL(inlet_ringGain<<4,shape<<1),27)<<3;
tmp_rL=__SSAT(___SMMUL(tmp_rL<<3,shape)+tmp_rL,27);
tmp_rR=__SSAT(___SMMUL(tmp_rR<<3,shape)+tmp_rR,27);
}

//gapper
   int32_t on=writepos-count+offset;
   on=on-(on/(tmp_d>>(27-LENGTHPOW)))*(tmp_d>>(27-LENGTHPOW));
   on=on>gap?1:1-inlet_Ggap;

//sample rate reducer
if(inlet_Gsr>0){
cnt+=1;
cnt=cnt-(cnt/((inlet_samplerate>>20)+1))*((inlet_samplerate>>20)+1);
if(cnt==0)
{
	tempL=tmp_rL*on;
	tempR=tmp_rR*on;
}
}
else{cnt=0;tempL=tmp_rL*on;tempR=tmp_rR*on;}


int32_t outL=tempL;
int32_t outR=tempR;



//phaser
if(inlet_Gphaser>0){
phaser(outL,inlet_preRate,inlet_feedRate,inlet_feedback,1);
outL=phsOut;
phaser(outR,inlet_preRate,inlet_feedRate,inlet_feedback,-1);
outR=phsOut;
}

//pitchshifter
pitchpos=(pitchpos+1)&pLENGTHMASK;
ARRAY[pitchpos]=(outL>>16)+((outR>>16)<<16);
if(inlet_Gpitchshifter>0){
pitchphase+=PSrate-(1<<32-pLENGTHPOW);
int32_t fade;
SINE2TINTERP(pitchphase-(1<<30),fade)
fade=(fade>>5)+(1<<26);
pPhase=pitchphase>>32-pLENGTHPOW;
pPhase=___SMMUL(Window<<3,pPhase<<2);
uint32_t PPhase=pPhase+(window>>1);
PPhase=PPhase-(PPhase/window)*window;

outL=___SMMUL(((ARRAY[(pitchpos+pPhase-jam-window)&pLENGTHMASK]&((1<<16)-1))<<16)<<3,fade<<2)+___SMMUL(((ARRAY[(pitchpos-PPhase+jam-window)&pLENGTHMASK]&((1<<16)-1))<<16)<<3,(1<<27)-fade<<2);
outR=___SMMUL(((ARRAY[(pitchpos+pPhase+jam-window)&pLENGTHMASK]>>16)<<16)<<3,fade<<2)+___SMMUL(((ARRAY[(pitchpos-PPhase-jam-window)&pLENGTHMASK]>>16)<<16)<<3,(1<<27)-fade<<2);
}

//modulated filter
if(inlet_Gfilter>0){
int32_t notchL = outL - (___SMMUL(damp,bandL)<<1);
lowL = lowL + (___SMMUL(Ffreq,bandL)<<1);
int32_t highL  = notchL - lowL;
bandL = (___SMMUL(Ffreq,highL)<<1) + bandL;

int32_t notchR = outR - (___SMMUL(damp,bandR)<<1);
lowR = lowR + (___SMMUL(Ffreq,bandR)<<1);
int32_t highR  = notchR - lowR;
bandR = (___SMMUL(Ffreq,highR)<<1) + bandR;

outL = ___SMMUL(bandL<<2,MIX1);
outR = ___SMMUL(bandR<<2,MIX1);
outL += ___SMMUL(notchL<<2,(1<<30)-MIX1);
outR += ___SMMUL(notchR<<2,(1<<30)-MIX1);
outL=___SMMUL(outL<<2,MIX2);
outR=___SMMUL(outR<<2,MIX2);
outL+=___SMMUL(___SMMUL(lowL<<2,MIX1)<<2,(1<<30)-MIX2);
outR+=___SMMUL(___SMMUL(lowR<<2,MIX1)<<2,(1<<30)-MIX2);
outL+=___SMMUL(___SMMUL(highL<<2,(1<<30)-MIX1)<<2,(1<<30)-MIX2)+outL;
outR+=___SMMUL(___SMMUL(highR<<2,(1<<30)-MIX1)<<2,(1<<30)-MIX2)+outR;
outL=outL>>1;
outR=outR>>1;
}


//sub octaver
if(inlet_Gsub>0){
if((outL>0)&&!subtrigL){
subL=(subL+1)&1;
subtrigL=1;
}
else if(outL<0){subtrigL=0;}
if((outR>0)&&!subtrigR){
subR=(subR+1)&1;
subtrigR=1;
}
else if(outR<0){subtrigR=0;}
SUBL=__SSAT((subL>0?1:-1)*sfrq+SUBL,26);
SUBR=__SSAT((subR>0?1:-1)*sfrq+SUBR,26);
outL=__SSAT((SUBL)+outL,27);
outR=__SSAT((SUBR)+outR,27);
}

//panner
if(inlet_Gpan>0){
outL=___SMMUL(invsineL,outL<<2)+___SMMUL(Rsine,outR<<2);
outR=___SMMUL(invsineR,outR<<2)+___SMMUL(Lsine,outL<<2);
}

//octaver
if(inlet_Goctaver>0){
outL+=___SMMUL(inlet_octaver<<2,rectL<<2);
outR+=___SMMUL(inlet_octaver<<2,rectR<<2);
rectL=outL>0?outL:(-outL<<1);
rectR=outR>0?outR:(-outR<<1);
volL1+=(rectL-volL1)>>10;
volR1+=(rectR-volR1)>>10;
rectL=rectL-volL1;
rectR=rectR-volR1;
volL2+=(rectL-volL2)>>2;
volR2+=(rectR-volR2)>>2;
rectL=volL2;
rectR=volR2;
outL+=rectL<<2;
outR+=rectR<<2;
}
outL=__SSAT(outL,27);
outR=__SSAT(outR,27);

   //tmp_rL
   //tmp_rR
      outlet_outL= ___SMMUL(outL<<3,(inlet_mix+param_mix)<<2)+___SMMUL(Q[qPos]<<3,(1<<27)-(inlet_mix+param_mix)<<2);
      outlet_outR= ___SMMUL(outR<<3,(inlet_mix+param_mix)<<2)+___SMMUL(Q[qPos+8]<<3,(1<<27)-(inlet_mix+param_mix)<<2);
      valL+=(outL-valL)>>12;
      valR+=(outR-valR)>>12;
      vilL+=((outL-valL)-vilL)>>2;
      vilR+=((outR-valR)-vilR)>>2;
      feedL=outL-valL;
      feedR=outR-valR;
      feedL=vilL;
      feedR=vilR;]]></code.srate>
      </object>
   </patchobj>
   <obj type="audio/out stereo" uuid="a1ca7a567f535acc21055669829101d3ee7f0189" name="out_1" x="756" y="14">
      <params/>
      <attribs/>
   </obj>
   <obj type="damonp/LED_Out5" uuid="77238e83-8990-462d-b6b5-8a9abd1f3e93" name="LED_Out5_1" x="952" y="28">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="6464984d-fc71-43bc-8d10-dad2f37aad20" name="d4a_1" x="294" y="70">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="6464984d-fc71-43bc-8d10-dad2f37aad20">
         <sDescription>displays bipolar k-rate signals</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>disp.axh</helpPatch>
         <inlets>
            <frac32.positive name="0"/>
            <frac32.positive name="1"/>
            <frac32.positive name="2"/>
            <frac32.positive name="3"/>
            <frac32.positive name="4"/>
            <frac32.positive name="5"/>
            <frac32.positive name="6"/>
            <frac32.positive name="7"/>
            <frac32.positive name="8"/>
            <frac32.positive name="9"/>
         </inlets>
         <outlets>
            <bool32 name="o0"/>
            <frac32 name="0"/>
            <bool32 name="o1"/>
            <frac32 name="1"/>
            <bool32 name="o2"/>
            <frac32 name="2"/>
            <bool32 name="o3"/>
            <frac32 name="3"/>
            <bool32 name="o4"/>
            <frac32 name="4"/>
            <bool32 name="o5"/>
            <frac32 name="5"/>
            <bool32 name="o6"/>
            <frac32 name="6"/>
            <bool32 name="o7"/>
            <frac32 name="7"/>
            <bool32 name="o8"/>
            <frac32 name="8"/>
            <bool32 name="o9"/>
            <frac32 name="9"/>
         </outlets>
         <displays>
            <frac32.u.dial name="0"/>
            <bool32 name="d0"/>
            <frac32.u.dial name="1"/>
            <bool32 name="d1"/>
            <frac32.u.dial name="2"/>
            <bool32 name="d2"/>
            <frac32.u.dial name="3"/>
            <bool32 name="d3"/>
            <frac32.u.dial name="4"/>
            <bool32 name="d4"/>
            <frac32.u.dial name="5"/>
            <bool32 name="d5"/>
            <frac32.u.dial name="6"/>
            <bool32 name="d6"/>
            <frac32.u.dial name="7"/>
            <bool32 name="d7"/>
            <frac32.u.dial name="8"/>
            <bool32 name="d8"/>
            <frac32.u.dial name="9"/>
            <bool32 name="d9"/>
         </displays>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[disp_0=inlet_0;outlet_0=inlet_0;disp_d0=outlet_o0;
disp_1=inlet_1;outlet_1=inlet_1;disp_d1=outlet_o1;
disp_2=inlet_2;outlet_2=inlet_2;disp_d2=outlet_o2;
disp_3=inlet_3;outlet_3=inlet_3;disp_d3=outlet_o3;
disp_4=inlet_4;outlet_4=inlet_4;disp_d4=outlet_o4;
disp_5=inlet_5;outlet_5=inlet_5;disp_d5=outlet_o5;
disp_6=inlet_6;outlet_6=inlet_6;disp_d6=outlet_o6;
disp_7=inlet_7;outlet_7=inlet_7;disp_d7=outlet_o7;
disp_8=inlet_8;outlet_8=inlet_8;disp_d8=outlet_o8;
disp_9=inlet_9;outlet_9=inlet_9;disp_d9=outlet_o9;
if(inlet_0>1){outlet_o0=1;} else {outlet_o0=0;}
if(inlet_1>1){outlet_o1=1;} else {outlet_o1=0;}
if(inlet_2>1){outlet_o2=1;} else {outlet_o2=0;}
if(inlet_3>1){outlet_o3=1;} else {outlet_o3=0;}
if(inlet_4>1){outlet_o4=1;} else {outlet_o4=0;}
if(inlet_5>1){outlet_o5=1;} else {outlet_o5=0;}
if(inlet_6>1){outlet_o6=1;} else {outlet_o6=0;}
if(inlet_7>1){outlet_o7=1;} else {outlet_o7=0;}
if(inlet_8>1){outlet_o8=1;} else {outlet_o8=0;}
if(inlet_9>1){outlet_o9=1;} else {outlet_o9=0;}]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="924" y="196" text="Feedback"/>
   <comment type="patch/comment" x="266" y="210" text="Bypass"/>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_1" x="714" y="210">
      <params>
         <frac32.u.map name="value" value="31.0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="910" y="224" text="Delay Time"/>
   <comment type="patch/comment" x="266" y="238" text="Pan Off"/>
   <comment type="patch/comment" x="266" y="266" text="Pan Mode"/>
   <comment type="patch/comment" x="266" y="294" text="???"/>
   <comment type="patch/comment" x="952" y="322" text="Pan"/>
   <comment type="patch/comment" x="938" y="350" text="Flutter"/>
   <comment type="patch/comment" x="126" y="406" text="Delay Time"/>
   <comment type="patch/comment" x="924" y="420" text="Volume"/>
   <comment type="patch/comment" x="126" y="434" text="Delay Feedback"/>
   <comment type="patch/comment" x="126" y="476" text="Delay Mix"/>
   <comment type="patch/comment" x="126" y="504" text="Delay Flutter"/>
   <comment type="patch/comment" x="126" y="546" text="Pan Rate"/>
   <comment type="patch/comment" x="126" y="574" text="Pan Depth"/>
   <comment type="patch/comment" x="126" y="616" text="Pan Swell"/>
   <comment type="patch/comment" x="126" y="644" text="Feedback Loop"/>
   <comment type="patch/comment" x="126" y="686" text="Pan Spread"/>
   <comment type="patch/comment" x="126" y="714" text="???"/>
   <nets>
      <net>
         <source obj="SuperInput_d4_1" outlet="o1"/>
         <dest obj="LED_Out5_1" inlet="sw"/>
      </net>
      <net>
         <source obj="SuperInput_a10_1" outlet="out0"/>
         <dest obj="d4a_1" inlet="0"/>
      </net>
      <net>
         <source obj="SuperInput_a10_1" outlet="out1"/>
         <dest obj="d4a_1" inlet="1"/>
      </net>
      <net>
         <source obj="SuperInput_a10_1" outlet="out2"/>
         <dest obj="d4a_1" inlet="2"/>
      </net>
      <net>
         <source obj="SuperInput_a10_1" outlet="out3"/>
         <dest obj="d4a_1" inlet="3"/>
      </net>
      <net>
         <source obj="SuperInput_a10_1" outlet="out4"/>
         <dest obj="d4a_1" inlet="4"/>
      </net>
      <net>
         <source obj="SuperInput_a10_1" outlet="out6"/>
         <dest obj="d4a_1" inlet="6"/>
      </net>
      <net>
         <source obj="SuperInput_a10_1" outlet="out7"/>
         <dest obj="d4a_1" inlet="7"/>
      </net>
      <net>
         <source obj="SuperInput_a10_1" outlet="out8"/>
         <dest obj="d4a_1" inlet="8"/>
      </net>
      <net>
         <source obj="SuperInput_a10_1" outlet="out9"/>
         <dest obj="d4a_1" inlet="9"/>
      </net>
      <net>
         <source obj="SuperInput_a10_1" outlet="out5"/>
         <dest obj="d4a_1" inlet="5"/>
      </net>
      <net>
         <source obj="in_1" outlet="left"/>
         <dest obj="glitchBeast_1" inlet="inL"/>
      </net>
      <net>
         <source obj="in_1" outlet="right"/>
         <dest obj="glitchBeast_1" inlet="inR"/>
      </net>
      <net>
         <source obj="glitchBeast_1" outlet="outL"/>
         <dest obj="out_1" inlet="left"/>
      </net>
      <net>
         <source obj="glitchBeast_1" outlet="outR"/>
         <dest obj="out_1" inlet="right"/>
      </net>
      <net>
         <source obj="d4a_1" outlet="9"/>
         <dest obj="glitchBeast_1" inlet="subRate"/>
      </net>
      <net>
         <source obj="d4a_1" outlet="o9"/>
         <dest obj="glitchBeast_1" inlet="Gsub"/>
      </net>
      <net>
         <source obj="d4a_1" outlet="8"/>
         <dest obj="glitchBeast_1" inlet="octaver"/>
      </net>
      <net>
         <source obj="d4a_1" outlet="o8"/>
         <dest obj="glitchBeast_1" inlet="Goctaver"/>
      </net>
      <net>
         <source obj="d4a_1" outlet="o4"/>
         <dest obj="glitchBeast_1" inlet="Gpan"/>
      </net>
      <net>
         <source obj="d4a_1" outlet="4"/>
         <dest obj="glitchBeast_1" inlet="panRate"/>
      </net>
      <net>
         <source obj="d4a_1" outlet="o1"/>
         <dest obj="glitchBeast_1" inlet="Greverse"/>
      </net>
      <net>
         <source obj="d4a_1" outlet="1"/>
         <dest obj="glitchBeast_1" inlet="reverserate"/>
      </net>
      <net>
         <source obj="d4a_1" outlet="o2"/>
         <dest obj="glitchBeast_1" inlet="Gmod"/>
      </net>
      <net>
         <source obj="d4a_1" outlet="2"/>
         <dest obj="glitchBeast_1" inlet="modrate"/>
      </net>
      <net>
         <source obj="d4a_1" outlet="o0"/>
         <dest obj="glitchBeast_1" inlet="Gspatial"/>
      </net>
      <net>
         <source obj="d4a_1" outlet="0"/>
         <dest obj="glitchBeast_1" inlet="spatial"/>
      </net>
      <net>
         <source obj="d4a_1" outlet="o5"/>
         <dest obj="glitchBeast_1" inlet="Gsr"/>
      </net>
      <net>
         <source obj="d4a_1" outlet="5"/>
         <dest obj="glitchBeast_1" inlet="samplerate"/>
      </net>
      <net>
         <source obj="d4a_1" outlet="o7"/>
         <dest obj="glitchBeast_1" inlet="Gretrig"/>
      </net>
      <net>
         <source obj="d4a_1" outlet="7"/>
         <dest obj="glitchBeast_1" inlet="CVretrig"/>
      </net>
      <net>
         <source obj="d4a_1" outlet="3"/>
         <dest obj="glitchBeast_1" inlet="mix"/>
      </net>
      <net>
         <source obj="d4a_1" outlet="6"/>
         <dest obj="glitchBeast_1" inlet="modwidth"/>
      </net>
      <net>
         <source obj="glitchBeast_1" outlet="o1"/>
         <dest obj="LED_Out5_1" inlet="pb9"/>
         <dest obj="LED_Out5_1" inlet="pb1"/>
      </net>
      <net>
         <source obj="glitchBeast_1" outlet="o2"/>
         <dest obj="LED_Out5_1" inlet="pa7"/>
         <dest obj="LED_Out5_1" inlet="pb0"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>1699</x>
      <y>-496</y>
      <width>1382</width>
      <height>1057</height>
   </windowPos>
</patch-1.0>