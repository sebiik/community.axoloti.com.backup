<patch-1.0 appVersion="1.0.12">
   <comment type="patch/comment" x="84" y="42" text="****   CLOCK ************************************"/>
   <comment type="patch/comment" x="84" y="70" text="magically switches to the last started clock (midi start or tap or bpmchange)."/>
   <comment type="patch/comment" x="588" y="70" text="***   DISPLAYS   ********************************************************************************************"/>
   <comment type="patch/comment" x="84" y="84" text=" If another clock is running and you press revert to midi, "/>
   <comment type="patch/comment" x="84" y="98" text="it switches back to midiclock, at an appropriate moment"/>
   <comment type="patch/comment" x="588" y="98" text="bpm"/>
   <comment type="patch/comment" x="672" y="98" text="bufferphase"/>
   <comment type="patch/comment" x="770" y="98" text="grainphase"/>
   <comment type="patch/comment" x="868" y="98" text="delayedbufferphase"/>
   <comment type="patch/comment" x="1008" y="98" text="grainlength (samples)"/>
   <obj type="disp/i" uuid="5e35fd0c62d81e70017289250cf28edd26e19e4a" name="i_3" x="588" y="112">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_6" x="672" y="112">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_3" x="770" y="112">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_10" x="868" y="112">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/i" uuid="5e35fd0c62d81e70017289250cf28edd26e19e4a" name="i_2" x="1008" y="112">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="84" y="126" text="tap tempo"/>
   <comment type="patch/comment" x="168" y="126" text="bpm"/>
   <comment type="patch/comment" x="238" y="126" text="revert to midi"/>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_11" x="84" y="140">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/i" uuid="a3786816db6ea5bc6ac4193a5cccdb2c83b83496" name="i_12" x="168" y="140">
      <params>
         <int32 name="value" value="117"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_12" x="238" y="140">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="84" y="224" text="*** mixer ******************************************************************"/>
   <comment type="patch/comment" x="476" y="224" text="****   delay/feedback ********************************************************"/>
   <comment type="patch/comment" x="868" y="224" text=" *** FREEZE MODE *******************************"/>
   <comment type="patch/comment" x="1386" y="224" text="***   BUFFER   **********"/>
   <comment type="patch/comment" x="658" y="252" text="feedback type"/>
   <comment type="patch/comment" x="84" y="266" text="dry/wet"/>
   <comment type="patch/comment" x="168" y="266" text="buffer/grain"/>
   <comment type="patch/comment" x="252" y="266" text="grain gain"/>
   <comment type="patch/comment" x="336" y="266" text="volume"/>
   <comment type="patch/comment" x="476" y="266" text="delay time"/>
   <comment type="patch/comment" x="574" y="266" text="feedback"/>
   <comment type="patch/comment" x="658" y="266" text="buffer/grain"/>
   <comment type="patch/comment" x="868" y="266" text="freeze "/>
   <comment type="patch/comment" x="952" y="266" text="grain trigger"/>
   <comment type="patch/comment" x="1036" y="266" text="freeze position"/>
   <comment type="patch/comment" x="1134" y="266" text=" freeze scrub"/>
   <comment type="patch/comment" x="1218" y="266" text="freeze size"/>
   <comment type="patch/comment" x="1386" y="266" text="freeze buffer"/>
   <comment type="patch/comment" x="1470" y="266" text="replace"/>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_13" x="84" y="280">
      <params>
         <frac32.u.map name="value" value="32.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_1" x="168" y="280">
      <params>
         <frac32.u.map name="value" value="64.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_8" x="252" y="280">
      <params>
         <frac32.u.map name="value" value="32.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_14" x="336" y="280">
      <params>
         <frac32.u.map name="value" value="64.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="55e297a3-1f80-41ed-ad36-284575a5b5b6" name="1_14" x="476" y="280">
      <params>
         <frac32.u.map name="value" value="16.0"/>
         <int32 name="z" value="2"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="55e297a3-1f80-41ed-ad36-284575a5b5b6">
         <sDescription>positive constant value dial</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets/>
         <outlets>
            <frac32.positive name="out" description="output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="value" noLabel="true"/>
            <int32 name="z" description="Zoom dial">
               <MinValue i="0"/>
               <MaxValue i="64"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out= param_value>>param_z;]]></code.krate>
      </object>
   </patchobj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_18" x="574" y="280">
      <params>
         <frac32.u.map name="value" value="25.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_7" x="658" y="280">
      <params>
         <frac32.u.map name="value" value="64.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_2" x="868" y="280">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_2" x="952" y="280">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_16" x="1036" y="280">
      <params>
         <frac32.u.map name="value" value="8.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_20" x="1134" y="280">
      <params>
         <frac32.s.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="6d8fff2d-186a-4160-ac34-9f0775378fd9" name="1_1" x="1218" y="280">
      <params>
         <frac32.u.map name="value" value="0.0"/>
         <int32 name="z" value="2"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="6d8fff2d-186a-4160-ac34-9f0775378fd9">
         <sDescription>positive constant value dial</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets/>
         <outlets>
            <frac32.positive name="out" description="output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="value" noLabel="true"/>
            <int32 name="z" description="Zoom dial">
               <MinValue i="0"/>
               <MaxValue i="64"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out= param_value>>param_z;]]></code.krate>
      </object>
   </patchobj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_5____tmp_" x="1386" y="280">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_3" x="1470" y="280">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="84" y="406" text="***   GRAINS   ***********************************************************************************************************************************************"/>
   <comment type="patch/comment" x="812" y="406" text="***   PITCH   ************************"/>
   <comment type="patch/comment" x="1036" y="406" text="***   TIME    ***********************************************************************"/>
   <comment type="patch/comment" x="1232" y="420" text="corrupt "/>
   <comment type="patch/comment" x="84" y="434" text="grainsize"/>
   <comment type="patch/comment" x="182" y="434" text="density"/>
   <comment type="patch/comment" x="280" y="434" text="disintegrate"/>
   <comment type="patch/comment" x="378" y="434" text="spray"/>
   <comment type="patch/comment" x="476" y="434" text="reversegrains"/>
   <comment type="patch/comment" x="588" y="434" text="shape"/>
   <comment type="patch/comment" x="672" y="434" text="curve"/>
   <comment type="patch/comment" x="812" y="434" text="pitch"/>
   <comment type="patch/comment" x="910" y="434" text="pitchspray"/>
   <comment type="patch/comment" x="1036" y="434" text="reverse delay"/>
   <comment type="patch/comment" x="1134" y="434" text="stretch"/>
   <comment type="patch/comment" x="1232" y="434" text="probability"/>
   <comment type="patch/comment" x="1330" y="434" text="corrupt time"/>
   <patchobj type="patch/object" uuid="7428fc41-8f1a-4518-9fe3-c77468a57daa" name="1_2" x="84" y="448">
      <params>
         <frac32.u.map name="value" value="4.0"/>
         <int32 name="z" value="3"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="7428fc41-8f1a-4518-9fe3-c77468a57daa">
         <sDescription>positive constant value dial</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets/>
         <outlets>
            <frac32.positive name="out" description="output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="value" noLabel="true"/>
            <int32 name="z" description="Zoom dial">
               <MinValue i="0"/>
               <MaxValue i="64"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out= param_value>>param_z;]]></code.krate>
      </object>
   </patchobj>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_19" x="182" y="448">
      <params>
         <frac32.s.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_26" x="280" y="448">
      <params>
         <frac32.u.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="75a97e92-737f-4218-985d-adf22482a18f" name="1_13" x="378" y="448">
      <params>
         <frac32.u.map name="value" value="0.0"/>
         <int32 name="z" value="11"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="75a97e92-737f-4218-985d-adf22482a18f">
         <sDescription>positive constant value dial</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets/>
         <outlets>
            <frac32.positive name="out" description="output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="value" noLabel="true"/>
            <int32 name="z" description="Zoom dial">
               <MinValue i="0"/>
               <MaxValue i="64"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out= param_value>>param_z;]]></code.krate>
      </object>
   </patchobj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_34" x="476" y="448">
      <params>
         <frac32.u.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_23" x="588" y="448">
      <params>
         <frac32.u.map name="value" value="32.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="22b729e9-4007-4b1f-8776-2d7163d7d136" name="i_1" x="672" y="448">
      <params>
         <int32.vradio name="value" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="22b729e9-4007-4b1f-8776-2d7163d7d136">
         <sDescription>positive integer control, vertical radio buttons</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets/>
         <outlets>
            <int32.positive name="out" description="output"/>
         </outlets>
         <displays/>
         <params>
            <int32.vradio name="value" noLabel="true">
               <MaxValue i="2"/>
            </int32.vradio>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out= param_value;
]]></code.krate>
      </object>
   </patchobj>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_2" x="812" y="448">
      <params>
         <frac32.s.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_39" x="910" y="448">
      <params>
         <frac32.u.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_6" x="1036" y="448">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_29" x="1134" y="448">
      <params>
         <frac32.s.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_31" x="1232" y="448">
      <params>
         <frac32.u.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="63aa3bb8-e89d-4ce6-babb-c8b12e3637b3" name="1_3" x="1330" y="448">
      <params>
         <frac32.u.map name="value" value="0.0"/>
         <int32 name="z" value="2"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="63aa3bb8-e89d-4ce6-babb-c8b12e3637b3">
         <sDescription>positive constant value dial</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets/>
         <outlets>
            <frac32.positive name="out" description="output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="value" noLabel="true"/>
            <int32 name="z" description="Zoom dial">
               <MinValue i="0"/>
               <MaxValue i="64"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out= param_value>>param_z;]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="182" y="532" text="resync grain"/>
   <comment type="patch/comment" x="182" y="546" text="to clock"/>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_15" x="182" y="560">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="84" y="630" text="***   grain echo   ***************************************************************************************"/>
   <comment type="patch/comment" x="588" y="630" text="***   SHUFFLE   ******************************************"/>
   <comment type="patch/comment" x="938" y="630" text="***   RANDOM OCTAVE ***************************************************"/>
   <comment type="patch/comment" x="420" y="644" text="feed grainecho back"/>
   <comment type="patch/comment" x="938" y="644" text="random octave"/>
   <comment type="patch/comment" x="84" y="658" text="graineho vol"/>
   <comment type="patch/comment" x="182" y="658" text="grainecho feedback"/>
   <comment type="patch/comment" x="308" y="658" text="grainecho time"/>
   <comment type="patch/comment" x="420" y="658" text="to granulator"/>
   <comment type="patch/comment" x="588" y="658" text="shuffle probability"/>
   <comment type="patch/comment" x="700" y="658" text="shuffle range"/>
   <comment type="patch/comment" x="798" y="658" text="shuffle size"/>
   <comment type="patch/comment" x="938" y="658" text="probability"/>
   <comment type="patch/comment" x="1036" y="658" text="octave time"/>
   <comment type="patch/comment" x="1120" y="658" text="octave mode"/>
   <comment type="patch/comment" x="1204" y="658" text="oct range"/>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_5" x="84" y="672">
      <params>
         <frac32.u.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_25" x="182" y="672">
      <params>
         <frac32.u.map name="value" value="44.5"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="a0298a07-eb9d-4eff-88e8-a5646f0abfdc" name="1_4" x="308" y="672">
      <params>
         <frac32.u.map name="value" value="23.0"/>
         <int32 name="z" value="8"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="a0298a07-eb9d-4eff-88e8-a5646f0abfdc">
         <sDescription>positive constant value dial</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets/>
         <outlets>
            <frac32.positive name="out" description="output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="value" noLabel="true"/>
            <int32 name="z" description="Zoom dial">
               <MinValue i="0"/>
               <MaxValue i="64"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out= param_value>>param_z;]]></code.krate>
      </object>
   </patchobj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_36" x="420" y="672">
      <params>
         <frac32.u.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_9" x="588" y="672">
      <params>
         <frac32.u.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="41de8201-ebfc-4994-be6b-556e67253380" name="1_8" x="700" y="672">
      <params>
         <frac32.u.map name="value" value="32.0"/>
         <int32 name="z" value="2"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="41de8201-ebfc-4994-be6b-556e67253380">
         <sDescription>positive constant value dial</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets/>
         <outlets>
            <frac32.positive name="out" description="output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="value" noLabel="true"/>
            <int32 name="z" description="Zoom dial">
               <MinValue i="0"/>
               <MaxValue i="64"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out= param_value>>param_z;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="8dc6143f-2758-45e2-9960-591796101b03" name="1_7" x="798" y="672">
      <params>
         <frac32.u.map name="value" value="4.0"/>
         <int32 name="z" value="2"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="8dc6143f-2758-45e2-9960-591796101b03">
         <sDescription>positive constant value dial</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets/>
         <outlets>
            <frac32.positive name="out" description="output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="value" noLabel="true"/>
            <int32 name="z" description="Zoom dial">
               <MinValue i="0"/>
               <MaxValue i="64"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out= param_value>>param_z;]]></code.krate>
      </object>
   </patchobj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_15" x="938" y="672">
      <params>
         <frac32.u.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="9ecd288c-4cc2-4614-a9a1-b35086cb326e" name="1_6" x="1036" y="672">
      <params>
         <frac32.u.map name="value" value="3.0"/>
         <int32 name="z" value="2"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="9ecd288c-4cc2-4614-a9a1-b35086cb326e">
         <sDescription>positive constant value dial</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets/>
         <outlets>
            <frac32.positive name="out" description="output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="value" noLabel="true"/>
            <int32 name="z" description="Zoom dial">
               <MinValue i="0"/>
               <MaxValue i="64"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out= param_value>>param_z;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="e9c9875a-139c-4c46-9dbf-278119d6e281" name="i_4" x="1120" y="672">
      <params>
         <int32.vradio name="value" value="2"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="e9c9875a-139c-4c46-9dbf-278119d6e281">
         <sDescription>positive integer control, vertical radio buttons</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets/>
         <outlets>
            <int32.positive name="out" description="output"/>
         </outlets>
         <displays/>
         <params>
            <int32.vradio name="value" noLabel="true">
               <MaxValue i="3"/>
            </int32.vradio>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out= param_value;]]></code.krate>
      </object>
   </patchobj>
   <obj type="ctrl/i" uuid="a3786816db6ea5bc6ac4193a5cccdb2c83b83496" name="i_8" x="1204" y="672">
      <params>
         <int32 name="value" value="1"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="84" y="798" text="***   LFO   *************************************************************************************************************"/>
   <comment type="patch/comment" x="392" y="812" text="lfo to grain repeat"/>
   <comment type="patch/comment" x="504" y="812" text="LFO to buffer"/>
   <comment type="patch/comment" x="84" y="826" text="LFO 1 time"/>
   <comment type="patch/comment" x="168" y="826" text="LFO 1 wave"/>
   <comment type="patch/comment" x="280" y="826" text="LFO to graintime"/>
   <comment type="patch/comment" x="392" y="826" text="time"/>
   <comment type="patch/comment" x="504" y="826" text="delay time"/>
   <patchobj type="patch/object" uuid="8729a322-45e8-4f72-b9a2-de24ffef8333" name="1_5" x="84" y="840">
      <params>
         <frac32.u.map name="value" value="24.0"/>
         <int32 name="z" value="3"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="8729a322-45e8-4f72-b9a2-de24ffef8333">
         <sDescription>positive constant value dial</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets/>
         <outlets>
            <frac32.positive name="out" description="output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="value" noLabel="true"/>
            <int32 name="z" description="Zoom dial">
               <MinValue i="0"/>
               <MaxValue i="64"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out= param_value>>param_z;]]></code.krate>
      </object>
   </patchobj>
   <obj type="ctrl/i" uuid="a3786816db6ea5bc6ac4193a5cccdb2c83b83496" name="i_16" x="168" y="840">
      <params>
         <int32 name="value" value="1"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="272c0b05-e783-48ed-b495-ca1c7cb5ced3" name="1_12" x="294" y="840">
      <params>
         <frac32.u.map name="value" value="0.0"/>
         <int32 name="z" value="13"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="272c0b05-e783-48ed-b495-ca1c7cb5ced3">
         <sDescription>positive constant value dial</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets/>
         <outlets>
            <frac32.positive name="out" description="output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="value" noLabel="true"/>
            <int32 name="z" description="Zoom dial">
               <MinValue i="0"/>
               <MaxValue i="64"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out= param_value>>param_z;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="7e6d6750-8062-4e59-89b8-21d768588296" name="1_11" x="392" y="840">
      <params>
         <frac32.u.map name="value" value="0.0"/>
         <int32 name="z" value="13"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="7e6d6750-8062-4e59-89b8-21d768588296">
         <sDescription>positive constant value dial</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets/>
         <outlets>
            <frac32.positive name="out" description="output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="value" noLabel="true"/>
            <int32 name="z" description="Zoom dial">
               <MinValue i="0"/>
               <MaxValue i="64"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out= param_value>>param_z;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="59200112-9c0b-43fb-bd6a-b29c5102cc3e" name="1_10" x="504" y="840">
      <params>
         <frac32.u.map name="value" value="0.0"/>
         <int32 name="z" value="13"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="59200112-9c0b-43fb-bd6a-b29c5102cc3e">
         <sDescription>positive constant value dial</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets/>
         <outlets>
            <frac32.positive name="out" description="output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="value" noLabel="true"/>
            <int32 name="z" description="Zoom dial">
               <MinValue i="0"/>
               <MaxValue i="64"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out= param_value>>param_z;]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="644" y="840" text="***   random extra things   ***********************************************************************************************************************************************************************************"/>
   <comment type="patch/comment" x="826" y="868" text="all grains on!"/>
   <comment type="patch/comment" x="1050" y="868" text="density range"/>
   <comment type="patch/comment" x="1176" y="868" text="don&apos;t loop stretch"/>
   <comment type="patch/comment" x="1302" y="868" text="resync stretch "/>
   <comment type="patch/comment" x="644" y="882" text="save buffer"/>
   <comment type="patch/comment" x="728" y="882" text="load buffer"/>
   <comment type="patch/comment" x="826" y="882" text="careful now!"/>
   <comment type="patch/comment" x="924" y="882" text="mute grains"/>
   <comment type="patch/comment" x="1036" y="882" text="(loweer densities slower)"/>
   <comment type="patch/comment" x="1190" y="882" text="when faster"/>
   <comment type="patch/comment" x="1274" y="882" text="to delay or corrupt time"/>
   <comment type="patch/comment" x="1414" y="882" text="lofi pitch interp"/>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_7" x="644" y="896">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_6" x="728" y="896">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_7" x="826" y="896">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_1" x="924" y="896">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="967e0c35-ab2f-42ed-a1ac-981bfa7f61ea" name="i_17" x="1050" y="896">
      <params>
         <int32.hradio name="value" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="967e0c35-ab2f-42ed-a1ac-981bfa7f61ea">
         <sDescription>positive integer control, horizontal radio buttons</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets/>
         <outlets>
            <int32.positive name="out" description="output"/>
         </outlets>
         <displays/>
         <params>
            <int32.hradio name="value" noLabel="true">
               <MaxValue i="4"/>
            </int32.hradio>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out= param_value;
]]></code.krate>
      </object>
   </patchobj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_5" x="1190" y="896">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_3" x="1302" y="896">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_8" x="1414" y="896">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1288" y="966" text="hold when frozen"/>
   <comment type="patch/comment" x="1400" y="966" text="scrub amount"/>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_1" x="1316" y="980">
      <params>
         <bool32.tgl name="b" value="1"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/i" uuid="a3786816db6ea5bc6ac4193a5cccdb2c83b83496" name="i_6" x="1400" y="980">
      <params>
         <int32 name="value" value="3"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="84" y="994" text="superclock"/>
   <patchobj type="patch/object" uuid="9c2aacc8-e3b1-4928-93eb-e3675297329c" name="x_1" x="84" y="1008">
      <params>
         <bool32.tgl name="bpmstyle" value="0"/>
         <bool32.tgl name="bpmlock" value="1"/>
         <int32 name="ppq" value="1"/>
         <int32 name="ppqmax" value="0"/>
      </params>
      <attribs>
         <combo attributeName="in" selection="din"/>
         <combo attributeName="thru" selection="off"/>
         <combo attributeName="Thruput" selection="din"/>
      </attribs>
      <object id="patch/object" uuid="9c2aacc8-e3b1-4928-93eb-e3675297329c">
         <sDescription>Midi clock slave</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>midi_in.axh</helpPatch>
         <inlets>
            <int32 name="bpm"/>
            <bool32 name="reset"/>
            <bool32 name="stop"/>
            <bool32 name="tap"/>
            <frac32.positive name="ppqgate"/>
            <bool32.rising name="midirevert"/>
         </inlets>
         <outlets>
            <bool32 name="active" description="Song is playing"/>
            <int32 name="kbeat" description="average length of a beat at k rate"/>
            <int32 name="sbeat"/>
            <bool32.pulse name="start" description="start trigger"/>
            <bool32.pulse name="stop" description="stop trigger"/>
            <bool32.pulse name="1ppq" description="beat trigger, 1ppq"/>
            <int32 name="bpm" description="rough bpm"/>
            <bool32 name="bartrig" description="triggers every bar"/>
            <int32 name="count"/>
            <bool32 name="tapping"/>
            <int32 name="ppq"/>
            <bool32 name="ppqgate"/>
            <bool32 name="o1"/>
         </outlets>
         <displays>
            <int32.label name="kbeat"/>
            <int32.label name="bpm"/>
         </displays>
         <params>
            <bool32.tgl name="bpmstyle"/>
            <bool32.tgl name="bpmlock"/>
            <int32 name="ppq">
               <MinValue i="1"/>
               <MaxValue i="96"/>
            </int32>
            <int32 name="ppqmax">
               <MinValue i="0"/>
               <MaxValue i="6666666"/>
            </int32>
         </params>
         <attribs>
            <combo name="in">
               <MenuEntries>
                  <string>omni</string>
                  <string>din</string>
                  <string>usb host port 1</string>
                  <string>usb host port 2</string>
                  <string>usb host port 3</string>
                  <string>usb host port 4</string>
                  <string>internal port 1</string>
                  <string>internal port 2</string>
                  <string>usb device port 1</string>
               </MenuEntries>
               <CEntries>
                  <string>true</string>
                  <string>dev == MIDI_DEVICE_DIN &amp;&amp; port == 1</string>
                  <string>dev == MIDI_DEVICE_USB_HOST &amp;&amp; port == 1</string>
                  <string>dev == MIDI_DEVICE_USB_HOST &amp;&amp; port == 2</string>
                  <string>dev == MIDI_DEVICE_USB_HOST &amp;&amp; port == 3</string>
                  <string>dev == MIDI_DEVICE_USB_HOST &amp;&amp; port == 4</string>
                  <string>dev == MIDI_DEVICE_INTERNAL &amp;&amp; port == 1</string>
                  <string>dev == MIDI_DEVICE_INTERNAL &amp;&amp; port == 2</string>
                  <string>dev == MIDI_DEVICE_USB_DEVICE &amp;&amp; port == 1</string>
               </CEntries>
            </combo>
            <combo name="thru">
               <MenuEntries>
                  <string>off</string>
                  <string>on</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
               </CEntries>
            </combo>
            <combo name="Thruput">
               <MenuEntries>
                  <string>din</string>
                  <string>usb host port 1</string>
                  <string>usb host port 2</string>
                  <string>usb host port 3</string>
                  <string>usb host port 4</string>
                  <string>internal port 1</string>
                  <string>internal port 2</string>
                  <string>usb device port 1</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_DIN, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 2</string>
                  <string>MIDI_DEVICE_USB_HOST, 3</string>
                  <string>MIDI_DEVICE_USB_HOST, 4</string>
                  <string>MIDI_DEVICE_INTERNAL, 1</string>
                  <string>MIDI_DEVICE_INTERNAL, 2</string>
                  <string>MIDI_DEVICE_USB_DEVICE, 1</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int tap[4];
int tapcount;
int t;
int avg;
int ntrig;
int counttaken;
int lastcount;
int outcount;
int outrig;
int tapping;
int newtap;
int prevavg;
int ppq1;
int resetC;
int tapstart;
int trighold;
int prevfinal;


int bpmclock;
int bpmtrig;
int bpmcount;

int prevtest;
int prevppq;
int ppq;
int ppqclock;
int ppqout;
int barclock;
int incount;
int k;
int prevc;

int _pos;
int stepos;



int ch;
int CCa;
int CCb;

//int prevkb;
int prevbpm;
int active;
int stablebpm;
int solidbpm;
int change;
int rchange;
int xchange;
int changed;
int pkb;
int lastbpm;
int finalbpm;
int pstable;
int pst;
int cl;
int start;
int stop;
int pulse;
int bartrig;
int kbeat;
int Okbeat;
int sent1;
int sent2;
int stable;
int resetbavg;
int setbpm;
int beatavg[4];
int Bavg;
int ppqgate;
int ppqwidth;
int bpm;
int pbpm;
int barpos;
int kbarpos;
int Pbarpos;
int mode;
int Xkbeat[3];
int Xstart[3];
int Xstop[3];
int Xbarpos[3];

//uint32_t kph;
//uint32_t kclock;
//uint32_t pkclock;
bool started;
bool init;
bool ppqtrig;
bool midiactive;
bool rtrig;
bool strig;]]></code.declaration>
         <code.init><![CDATA[active = 0;
barpos=0;
Pbarpos=0;
t=-1;
tapcount=-1;

ch=15;
CCa=80;
CCb=81;

//_active = 0;
midiactive=0;
_pos = -1;


	kbeat=1500;
	Bavg=kbeat;
avg=kbeat;
prevavg=kbeat;

ppq1=4;

stepos=-1;

setbpm=1;
init=1;]]></code.init>
         <code.krate><![CDATA[// modes
// 0 = BPM/tap
// 1 = midi
if (inlet_midirevert){
	mode=1;
}

//tap ***********************************************************************
outcount+=1;
if ((outcount>=avg)){
	if ((avg>20)&&!trighold){
		outrig=1;
	}
	outcount=0;
}
// timer
if (t>=0){
	t+=1;
}
if ((t>=((avg>>1)+avg))&&(avg>20)){
	newtap=0;
	tapping=0;
}

//tap
if (inlet_tap&&!ntrig){
	
	mode=0;
	if (!tapping){
		if (barpos==0){
//		Pbarpos=barpos+1;
		}
		tapcount=-1;
			outrig=1;
			outcount=0;
			tapping=1;
			newtap=1;
			resetC=1;
			trighold=1;
			avg=0x07FFFFFF;
			tap[0]=0;
			tap[1]=0;
			tap[2]=0;
	}
	tapping=1;
	ntrig=1;

		
	if (tapcount>=0){
		
		tap[tapcount]=t;
		if (trighold){
			outrig=1;
			}
		if (newtap){
			
			avg=(tap[0]+tap[1]+tap[2])/(tapcount+1);
		}
		
		if (!newtap){
		avg=(tap[0]+ tap[1]+tap[2])/3;
		}
	}
	lastcount=tapcount;
	tapcount+=1;
	if ((tapcount>=0)&&trighold){
		trighold=0;
		outcount=0;
		outrig=1;
	}
	if (tapcount>=3){
		
		newtap=0;
		//outcount=0;
		//outrig=1;
		
		tapcount=0;
	}

	t=0;
}


if (!inlet_tap){
	ntrig=0;
}


if (outrig){
	ppq1+=1;
	if (resetC){
		ppq1=0;
	}
	if (ppq1==4){
		tapstart=1;
		bpmclock=0;
	}
}

//outlet_trig=outrig;
//outlet_tapping=tapping;

Xkbeat[0]=prevavg;
kbarpos=ppq1-((ppq1>>2)<<2);
Xstart[0]=tapstart;


//bpm***********************************************************************
if (inlet_bpm!=pkb){
	pkb=inlet_bpm;
	if (inlet_bpm>0){
		avg=180000/inlet_bpm;
		}
	else {
		avg=180000;
	}
	mode=0;
	if (!active){
		Xstart[0]=1;
		active=1;
	}
	//setbpm=1;
}
if ((avg!=prevavg)&&(avg!=0X07FFFFFF)){
	prevavg=avg;
	
	
}

//midi CC
Xkbeat[1]=(sent1<<6)+sent2;

incount=(stepos/24);
k+=1;
if ((incount!=prevc)&&(stepos>=0)){
	Xbarpos[1]=incount-((incount>>2)<<2);
	if (stepos>0){
		Xkbeat[1]=k;
		sent1=k>>6;
		sent2=k-((k>>6)<<6);
	}
	prevc=incount;
	k=0;
}

if (inlet_reset&&!rtrig){
	rtrig=1;
	outcount=0;
	ppq1=0;
	
	//if (!active){
		Xstart[0]=1;
	//	}
	if ((mode==2)&&!active){
		mode=0;
	}
}
else if (!inlet_reset){
	rtrig=0;
}
//mode=0;

kbeat=Xkbeat[mode];


start=Xstart[mode];
stop=Xstop[mode];

Xbarpos[0]=kbarpos;



barpos=Xbarpos[mode];

if (inlet_stop&&!strig){
	strig=1;
	stop=1;
}
else if (!inlet_stop){
	strig=0;
}

if (start){
	prevppq=-1;
	resetbavg=1;
	barpos=0;
	Pbarpos=-1;
	barclock=-1;
	//kclock=0;
	//pkclock=0;
	kbarpos=0;
	bpmclock=0;
	bpmcount=0;
	active=1;
	
}
if (stop){
	active=0;
}







if (barpos!=Pbarpos){
	pulse=1;
	Pbarpos=barpos;
	if (barpos==0){
			barclock+=1;
			bartrig=1;
			
		
		}

		
}





int rawbpm=180000/kbeat;
float bpm_float = 180000.0f/kbeat;
int bpm_int = bpm_float;
int tenth=(bpm_float - bpm_int)*10;



if (tenth>=5){
	bpm=rawbpm+1;
}
else {
	bpm=rawbpm;
}
if (mode==0){
	setbpm=1;
}
if (setbpm){
	//bpm=inlet_bpm;
	stablebpm=bpm;
	solidbpm=bpm;
	prevbpm=bpm;
	change=0;
	setbpm=0;
	lastbpm=bpm;
	finalbpm=bpm;
}

if (pulse){
	if (bpm!=prevbpm){
		if (change>(0)){
			stablebpm=bpm;
		}
		if ( ((bpm>lastbpm)&&(bpm>prevbpm)) || ((bpm<lastbpm)&&(bpm<prevbpm)) ){
		change+=1;
		
		}
		else {
			change=0;
		}
		stable=0;
		//lastbpm=prevbpm;
		lastbpm=prevbpm;
		prevbpm=bpm;
		
	}
	else {
		if (change>(1)){
			stablebpm=bpm;
		}
		if (stable>(1)){
			stablebpm=bpm;
		
			
		}
		stable+=1;
		change=0;
	}

	if (stablebpm==pstable){
		if (pst<4){
			pst+=1;	
		}
		if (pst>2){
			solidbpm=stablebpm;
		}
		
	}
	else {
		pst=0;
	}
	pstable=stablebpm;
}
if (!param_bpmstyle){
	finalbpm=stablebpm;
	
}
else {
	finalbpm=solidbpm;
}
if (param_bpmlock){
	Okbeat=180000/finalbpm;
	if ((finalbpm!=prevfinal)&&!tapping){
		avg=Okbeat;
		prevavg=Okbeat;
		prevfinal=finalbpm;
	}
	
}
else {
	Okbeat=kbeat;
}
ppq=param_ppq;
if (bpmclock<(Okbeat-(Okbeat/ppq))){
	bpmclock+=1;
	
}

if (pulse){
	//disp_test=bpmclock/(bpmclock/24);
	
	bpmclock=0;
}
//         
ppqclock=(bpmclock/(Okbeat/ppq))+(barpos*ppq)+(barclock*(ppq<<2));
ppqout=ppqclock-((ppqclock/param_ppqmax)*param_ppqmax);

if (ppqout!=prevppq){
	ppqgate=1;
	prevppq=ppqout;
}
ppqwidth=___SMMUL((Okbeat/ppq)<<3,inlet_ppqgate<<2);
if (ppqwidth<3){
	ppqwidth=3;
}

if (ppqgate>0){
	ppqgate+=1;
	if (ppqgate>=ppqwidth){
		ppqgate=0;
	}
}

 


outlet_ppq=ppqout;
outlet_ppqgate=ppqgate;


outlet_active = active;
outlet_start=Xstart[mode];
outlet_kbeat=Okbeat;
outlet_sbeat=Okbeat<<4;

//outlet_start=start;
outlet_stop=stop;
outlet_bartrig=bartrig;
outlet_1ppq=pulse;
outlet_tapping=tapping;

outlet_count=barpos;
outlet_bpm=finalbpm;
disp_bpm=finalbpm;
disp_kbeat=Okbeat;

if (init){
	init=0;
	pkb=777;
}
//ppqtrig=0;
bpmtrig=0;
start=0;
stop=0;
Xstart[0]=0;
Xstart[1]=0;
Xstop[1]=0;
tapstart=0;
resetC=0;
outrig=0;
pulse=0;
bartrig=0;]]></code.krate>
         <code.midihandler><![CDATA[if (attr_in){
	if ((status == MIDI_TIMING_CLOCK) && midiactive) {
		if ((_pos==0)&&midiactive){
	  	//start=1;
	  	Xstart[1]=1;
	  }
	  _pos++;
	  stepos++;
	  
	  
	}
	else if (status == MIDI_START){
		mode=1;
		//Xstart[1]=1;
		_pos = 0;
	  	stepos=-1;
	  	midiactive=1;
	  	started=1;
		
		
		if (attr_thru){
			MidiSend1((midi_device_t) attr_Thruput, MIDI_START);
		}
	}
	else if (status == MIDI_STOP){
		Xstop[1]=1;
		midiactive=0;
		_pos = -1;
	  	stepos=-1;
		//active=0;
		if (attr_thru){
			MidiSend1((midi_device_t) attr_Thruput, MIDI_STOP);
		}
	}
	//if (status == MIDI_SONG_POSITION){
	if ((status == (ch-1) + MIDI_CONTROL_CHANGE)&&(data1 == (CCb+1))){
		//barpos=data1;
		Xbarpos[1]=data2;
		if (started){
			started=0;
		  	//start=1;
		  	Xstart[1]=1;
		  }
		if ((barpos==0)&&!active){
			//active=1;
			//Xstart[2]=1;
		}
		if (attr_thru){
			MidiSend3((midi_device_t) attr_Thruput, MIDI_CONTROL_CHANGE,data1,data2);
		}
		
	}
	
	
	if ((status == (ch-1) + MIDI_CONTROL_CHANGE)&&(data1 == CCa)){
		
		sent1=data2;
		if (attr_thru){
		MidiSend3((midi_device_t) attr_Thruput, MIDI_CONTROL_CHANGE + (ch-1),data1,data2);	
		}
	}
	if ((status == (ch-1) + MIDI_CONTROL_CHANGE)&&(data1 == CCb)){
		sent2=data2;
		if (attr_thru){
		MidiSend3((midi_device_t) attr_Thruput, MIDI_CONTROL_CHANGE + (ch-1),data1,data2);		
		}
	}
}]]></code.midihandler>
      </object>
   </patchobj>
   <comment type="patch/comment" x="294" y="1078" text="LFO"/>
   <obj type="rbrt/math/&lt;&lt; i c" uuid="984d06ee-2b58-4536-822a-bb4d9e119250" name="&lt;&lt;_4" x="294" y="1092">
      <params>
         <int32 name="shift" value="4"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="560" y="1134" text="lfo to grain time"/>
   <comment type="patch/comment" x="742" y="1134" text="lfo to grain echo time"/>
   <comment type="patch/comment" x="924" y="1134" text="lfo to delayed buffer time"/>
   <comment type="patch/comment" x="1162" y="1134" text="feeback blend (delayed buffer or granulator)"/>
   <patchobj type="patch/object" uuid="ac32d94b-6f19-4945-b26c-94e5a89809ec" name="simple_1" x="294" y="1148">
      <params>
         <frac32.u.map name="pulsewidth" value="32.0"/>
         <bool32.tgl name="oneshot" value="0"/>
         <bool32.tgl name="inverthold" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="ac32d94b-6f19-4945-b26c-94e5a89809ec">
         <license>GPL</license>
         <inlets>
            <int32 name="length"/>
            <frac32.positive name="time"/>
            <int32 name="wave"/>
            <bool32.rising name="trig"/>
            <bool32.risingfalling name="hold"/>
            <frac32.positive name="pulsewidth"/>
         </inlets>
         <outlets>
            <frac32 name="out"/>
            <bool32 name="half"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="pulsewidth">
               <DefaultValue v="32.0"/>
            </frac32.u.map>
            <bool32.tgl name="oneshot"/>
            <bool32.tgl name="inverthold"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[uint32_t rate;
int phase;
//int Phase;
int phaseQ;
int phaseB;
int pulsewidthA;
int pulsewidthB;
int pulsewidthC;
int speed;
int pulsedivide;
int wave;
int depth;

int i;

int dir;

int out;
int outB;

int outBv;





int holdv;


int kbeat;




int Sphase;
int hold;
//int8_t stageW;




int32_t expo[3];


float32_t widthC;

bool rtrig;

//bool xtrig;
bool init;]]></code.declaration>
         <code.init><![CDATA[init=1;]]></code.init>
         <code.krate><![CDATA[if (inlet_length==0){
	kbeat=1500;
}
else {
	kbeat=inlet_length;
}
speed= ___SMMUL(kbeat<<3,inlet_time<<2);
rate=0x07FFFFFF/speed;
phase+=rate;



if (init){
	init=0;
	
	if (param_oneshot){
		phase=0x07FFFFFF;
	}
	else {
		phase=0;
		}
}

if (!param_oneshot){
	if (phase>=0x07FFFFFF){
		phase=0;

	}
}
else if (param_oneshot){
	if (phase>=0x07FFFFFF){
		phase=0x07FFFFFF;
	}
}

if (inlet_trig&&!rtrig){
	rtrig=1;



	phase=0;
}
if (!inlet_trig){
rtrig=0;
}




pulsewidthA=(inlet_pulsewidth+param_pulsewidth);
pulsewidthC=((0x07FFFFFF-(inlet_pulsewidth+param_pulsewidth))-(1<<26))<<1;;
pulsewidthB=0x07FFFFFF-(inlet_pulsewidth+param_pulsewidth);

phaseB=phase-(inlet_pulsewidth+param_pulsewidth);
wave=inlet_wave+1;
switch( wave )
            {
              default:
              case 1 :
                // Triangle
    {
       if (phase<pulsewidthA){
       	float32_t width1=pulsewidthA;
		float32_t ratio=0x07FFFFFF/width1;
		int32_t in=phase>pulsewidthA?pulsewidthA:phase;

		out=in*ratio;
       	
       }
       else if (phase>=pulsewidthA){
       float32_t width1=pulsewidthB;
    
		float32_t ratio=0x07FFFFFF/width1;
		
		int32_t in=phaseB>pulsewidthB?pulsewidthB:phaseB;

		out=0x07FFFFFF-(in*ratio);
       }
    }
                break;

              case 2 :
              {
                // Sine
               // if (phase<(0x07FFFFFF-(0x07FFFFFFF>>2))){
               // Sphase=phase+(0x07FFFFFFF>>2);
               // }
                //else {Sphase=phase;}
                
           	if (phase<(0x07FFFFFF>>2)){
				Sphase=phase+(0x07FFFFFF-(0x07FFFFFF>>2));
				}
			else {Sphase=phase-(0x07FFFFFF>>2);}
                int32_t r;
                SINE2TINTERP( Sphase<<5, r )
                 
                out= ((r>>4)>>1)+(1<<26);


              } 
                break;

              case 3 :
                  // Square
                  {
		if (phase<pulsewidthA){
			out=0x07FFFFFF;
			
		}
		else out=0;
                  }
                break;

              

             

				
                
            }


if (wave==2){
	int32_t inexpo=__SSAT(pulsewidthC,28);
	dir=inexpo>0?1:-1;
	inexpo=inexpo>0?inexpo:-inexpo;
	int32_t inv=(1<<27)-inexpo;
	int dar;
	dar=out>0?1:-1;
	int32_t pos=out>0?out:-out;
	if(dir>0)
	{expo[0]=___SMMUL(pos<<3,(inv+___SMMUL(inexpo<<3,pos<<2))<<2);}
	if(dir<0)
	{expo[0]=___SMMUL(((1<<27)-pos)<<3,(inv+___SMMUL(inexpo<<3,((1<<27)-pos)<<2))<<2);}
	for(i=1;i<=2;i++)
	expo[i]=___SMMUL(expo[i-1]<<3,(inv+___SMMUL(inexpo<<3,expo[i-1]<<2))<<2);
	if(dir>0)
	{outBv=expo[2]*dar;}
	if(dir<0)
	{outBv=((1<<27)-expo[2])*dar;}
	}
else {outBv=out;}


	

if (param_inverthold){
	hold=!inlet_hold;
}
else {hold=inlet_hold;}

if (!hold){
	outB=outBv;
	holdv=outB;
	}
else if (hold){
	outB=holdv;
}



	
if (phase>=pulsewidthA){
	outlet_half=1;
	}
else {
	outlet_half=0;
}
   


outlet_out=outB;



//outlet_out=phase;]]></code.krate>
      </object>
   </patchobj>
   <obj type="math/smooth" uuid="6c5d08c282bb08bff24af85b4891447f99bcbc97" name="smooth_2" x="420" y="1148">
      <params>
         <frac32.u.map name="time" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/smooth" uuid="6c5d08c282bb08bff24af85b4891447f99bcbc97" name="smooth_1" x="560" y="1148">
      <params>
         <frac32.u.map name="time" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_3" x="644" y="1148">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/smooth" uuid="6c5d08c282bb08bff24af85b4891447f99bcbc97" name="smooth_3" x="742" y="1148">
      <params>
         <frac32.u.map name="time" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_4" x="826" y="1148">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/smooth" uuid="6c5d08c282bb08bff24af85b4891447f99bcbc97" name="smooth_4" x="924" y="1148">
      <params>
         <frac32.u.map name="time" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_5" x="1008" y="1148">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="b9d39eb1-e1c5-45d9-a32d-e690a0e06a27" name="crossfade_3" x="1162" y="1148">
      <params>
         <bool32.tgl name="linear" value="1"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="b9d39eb1-e1c5-45d9-a32d-e690a0e06a27">
         <sDescription>Left shift. Doubles the value &quot;shift&quot; times, with overflow. If overflow is not desireable, use &quot;muls&quot;.</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>math.axh</helpPatch>
         <inlets>
            <frac32 name="drywet" description="a"/>
            <frac32 name="volume"/>
         </inlets>
         <outlets>
            <frac32 name="dry"/>
            <frac32 name="wet" description="a amplified in 6dB steps"/>
         </outlets>
         <displays/>
         <params>
            <bool32.tgl name="linear"/>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_dry=  ___SMMUL((__SSAT((0x07FFFFFF-inlet_drywet)<<(1-param_linear),28))<<3,inlet_volume<<2);
outlet_wet= ___SMMUL( (__SSAT((inlet_drywet<<(1-param_linear)),28))<<3,inlet_volume<<2);]]></code.krate>
      </object>
   </patchobj>
   <obj type="conv/interp" uuid="d68c1a8709d8b55e3de8715d727ec0a2d8569d9a" name="interp_1" x="644" y="1204">
      <params/>
      <attribs/>
   </obj>
   <obj type="conv/interp" uuid="d68c1a8709d8b55e3de8715d727ec0a2d8569d9a" name="interp_3" x="826" y="1204">
      <params/>
      <attribs/>
   </obj>
   <obj type="conv/interp" uuid="d68c1a8709d8b55e3de8715d727ec0a2d8569d9a" name="interp_2" x="1008" y="1204">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="602" y="1316" text="delayed buffer/granulator mix"/>
   <comment type="patch/comment" x="798" y="1316" text="dry/wet"/>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_17" x="560" y="1330">
      <params>
         <frac32.u.map name="value" value="64.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="b9d39eb1-e1c5-45d9-a32d-e690a0e06a27" name="crossfade_2" x="630" y="1330">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="b9d39eb1-e1c5-45d9-a32d-e690a0e06a27">
         <sDescription>Left shift. Doubles the value &quot;shift&quot; times, with overflow. If overflow is not desireable, use &quot;muls&quot;.</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>math.axh</helpPatch>
         <inlets>
            <frac32 name="drywet" description="a"/>
            <frac32 name="volume"/>
         </inlets>
         <outlets>
            <frac32 name="dry"/>
            <frac32 name="wet" description="a amplified in 6dB steps"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_dry=  ___SMMUL((__SSAT((0x07FFFFFF-inlet_drywet)<<1,28))<<3,inlet_volume<<2);
outlet_wet= ___SMMUL( (__SSAT((inlet_drywet<<1),28))<<3,inlet_volume<<2);]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="b9d39eb1-e1c5-45d9-a32d-e690a0e06a27" name="crossfade_1" x="784" y="1330">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="b9d39eb1-e1c5-45d9-a32d-e690a0e06a27">
         <sDescription>Left shift. Doubles the value &quot;shift&quot; times, with overflow. If overflow is not desireable, use &quot;muls&quot;.</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>math.axh</helpPatch>
         <inlets>
            <frac32 name="drywet" description="a"/>
            <frac32 name="volume"/>
         </inlets>
         <outlets>
            <frac32 name="dry"/>
            <frac32 name="wet" description="a amplified in 6dB steps"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_dry=  ___SMMUL((__SSAT((0x07FFFFFF-inlet_drywet)<<1,28))<<3,inlet_volume<<2);
outlet_wet= ___SMMUL( (__SSAT((inlet_drywet<<1),28))<<3,inlet_volume<<2);]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="1134" y="1330" text="freeze position control smoothing"/>
   <obj type="math/smooth" uuid="6c5d08c282bb08bff24af85b4891447f99bcbc97" name="smooth_7" x="1134" y="1344">
      <params>
         <frac32.u.map name="time" value="19.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="conv/interp" uuid="d68c1a8709d8b55e3de8715d727ec0a2d8569d9a" name="interp_4" x="1218" y="1344">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="238" y="1400" text="hold                                              "/>
   <obj type="logic/and 2" uuid="c67031682f552aa0a80b23377495c51ea28a8c9c" name="and_1" x="238" y="1414">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/or 2" uuid="3805d3c84d30032a44fbdbe42d9a2988a1790a3e" name="or_1" x="336" y="1414">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/smooth" uuid="6c5d08c282bb08bff24af85b4891447f99bcbc97" name="smooth_6" x="1134" y="1428">
      <params>
         <frac32.u.map name="time" value="21.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="conv/interp" uuid="d68c1a8709d8b55e3de8715d727ec0a2d8569d9a" name="interp_5" x="1218" y="1428">
      <params/>
      <attribs/>
   </obj>
   <obj type="audio/in left" uuid="d40e60b7641fe75af4d7c91b45bb038aacafc52e" name="in_1" x="126" y="1540">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="266" y="1540" text="superbuff"/>
   <comment type="patch/comment" x="966" y="1540" text="turn down when denser (still experimenting!)"/>
   <patchobj type="patch/object" uuid="d90796d6-7675-4b81-8a52-95fadd308c97" name="MikeWatt" x="266" y="1554">
      <params>
         <int32 name="fade" value="64"/>
         <bool32.tgl name="retrigstyle" value="1"/>
      </params>
      <attribs>
         <combo attributeName="dubtrig" selection="internal"/>
         <combo attributeName="size" selection="1048576"/>
      </attribs>
      <object id="patch/object" uuid="d90796d6-7675-4b81-8a52-95fadd308c97">
         <sDescription>Difficult to name. Pitchshifter, time-stretcher, play-rate adjuster (stretch+pitchshift), sampler, delay, granulizer...

See inputs/controls for their functions (hoover above them)</sDescription>
         <author>Remco van der most</author>
         <license>BSD</license>
         <helpPatch>delay.axh</helpPatch>
         <inlets>
            <int32 name="sbeat"/>
            <int32 name="ppq"/>
            <frac32buffer name="in" description="audio input"/>
            <frac32buffer name="Fback"/>
            <frac32buffer name="Fforward"/>
            <bool32.rising name="restart"/>
            <bool32.rising name="play"/>
            <bool32.rising name="stop"/>
            <bool32.risingfalling name="replace"/>
            <bool32 name="freeze"/>
            <bool32.risingfalling name="freerun"/>
         </inlets>
         <outlets>
            <bool32.pulse name="xtrig"/>
            <int32 name="length"/>
            <frac32.positive name="phase"/>
            <bool32.pulse name="stop"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="fade" noLabel="true">
               <MinValue i="1"/>
               <MaxValue i="30000000"/>
            </int32>
            <bool32.tgl name="retrigstyle" description="off = resyncs at buffer restart( 4 bars ) , 1 = resyncs every 6 bars. 6 bars is useful for dotted rythms"/>
         </params>
         <attribs>
            <combo name="dubtrig">
               <MenuEntries>
                  <string>internal</string>
                  <string>external</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
               </CEntries>
            </combo>
            <combo name="size">
               <MenuEntries>
                  <string>2048</string>
                  <string>4096</string>
                  <string>8192</string>
                  <string>16384</string>
                  <string>32768</string>
                  <string>65536</string>
                  <string>131072</string>
                  <string>262144</string>
                  <string>524288</string>
                  <string>1048576</string>
               </MenuEntries>
               <CEntries>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
                  <string>16</string>
                  <string>17</string>
                  <string>18</string>
                  <string>19</string>
                  <string>20</string>
                  <string>21</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[//wholde buffer
static const uint32_t LENGTHPOW = attr_size;
static const uint32_t LENGTH = 1<<attr_size;
static const uint32_t LENGTHMASK = (1<<attr_size)-1;
//half buffer
static const uint32_t LENGTHPOWa = attr_size-1;
static const uint32_t LENGTHa = 1<<(attr_size-1);
static const uint32_t LENGTHMASKa = (1<<(attr_size-1))-1;
//quarter buffer
static const uint32_t LENGTHPOWb = attr_size-2;
static const uint32_t LENGTHb = 1<<(attr_size-2);
static const uint32_t LENGTHMASKb = (1<<(attr_size-2))-1;

static const uint32_t BITS = 16;
static const uint32_t GAIN = 12;
int16_t *array;

int32_t bufferarray[16];
int32_t init;
int32_t ovrfade;
int32_t ovrenv;
int32_t env[2];
int32_t Oenv[2];
int32_t Ienv[2];
int32_t Ostep[2];
int32_t Oprev[2];
int32_t ovrrate;
int32_t ovrcnt;
int32_t prevO;
int32_t stepO;
int32_t rfade;
int32_t renv;
int32_t rate;

int32_t mcnt;
int32_t maxrate;
int32_t mute;
//int32_t rfadeO;
int32_t feeback;
//int32_t delay;
//int32_t prevd;
int32_t prevR;
int32_t syncbusy;
int32_t stepR;
int32_t feedback;
uint32_t x;
uint32_t dubposGB;
uint32_t maxlength;
uint32_t writepos;
uint32_t dubpos;
uint32_t plength;
//uint32_t dubclock;
uint32_t deck;
uint32_t xoffset;
uint32_t synclength;
uint32_t xposremainder;
uint32_t xpos;
uint32_t dub[2];
uint32_t synclock;
uint32_t trigclock;
uint32_t trigpos;
uint32_t prevsynclock;
uint32_t xposGB;
uint32_t length;
uint32_t phase;
uint32_t buffer;
uint32_t bsize;
uint32_t in;
uint32_t fb;
uint32_t gfb;
uint32_t dcount;
uint32_t outpos;
uint32_t outposGB;
bool play;
bool stop;
bool prevp;
bool Prep;
//bool rec;
bool dt;
//bool overdub;
bool delaymode;
bool restarted;
bool dubtrig;
bool ovrin;
bool repin;
bool Pinovr;
bool dubbing;
//bool recording;
bool start;
bool strig;
bool ptrig;
bool xtrig;
bool rtrig;
bool freeze;
//bool ott;
bool hold;
bool player;
//bool dhold;
bool det;
bool mtrigger;
bool synchold;]]></code.declaration>
         <code.init><![CDATA[static int16_t _array[attr_poly][LENGTH] __attribute__ ((section (".sdram")));
array = &_array[parent->polyIndex][0];
{ 
  int i;
  for(i=0;i<LENGTH;i++) array[i]=0;
}

play=1;
//prevp=1;
bsize=16;
bsize=16;
init=16;
syncbusy=512;
maxlength=LENGTH>>1;
xoffset=maxlength;
player=1;
//SO=32+bsize+bsize; buffer, data, preroll]]></code.init>
         <code.krate><![CDATA[//maxlength=((((LENGTH>>1)-((bsize<<1)+(2048<<3)+32))>>4)<<4);
maxlength=LENGTH>>1;
maxrate=(((uint64_t)1<<31)/(maxlength>>1));
freeze=inlet_freeze;
//array[0+bsize]=((maxlength)/(1<<15));
//array[1+bsize]=maxlength-(((maxlength)/(1<<15))<<15);
if (inlet_sbeat>0){
	synclength=inlet_sbeat<<4;
	}
else {
	synclength=maxlength;
}
trigpos+=(1<<4);
dubpos+=(1<<4);
dubposGB+=(1<<4);
if (dubpos>=maxlength){
	xoffset=maxlength;
	dubpos=0;
	xtrig;
	
}
if (dubposGB>=(maxlength>>1)){
	dubposGB=0;
	
}
if (init){
	xoffset=synclength;
	dub[0]=xoffset;
	dub[1]=xoffset;
	dubpos=xoffset;
	restarted=1;
	ovrcnt=1;
	init=0;
}
//synclock=bufferlength pseudo
synclock=inlet_ppq-((inlet_ppq/16)*16);
//trigclock=6barretrig
if (param_retrigstyle){
trigclock=inlet_ppq-((inlet_ppq/24)*24);
}
else {
	trigclock=synclock;
}
if (synclock!=prevsynclock){
	
	if ((synclock==0)&&!inlet_freerun){
		ovrcnt=1;
	restarted=1;
	xtrig=1;
		//trigclock+=1;
			
	}
	if (trigclock==0){
				//trigclock=0;
				trigpos=0;
			}
	if (inlet_ppq==0){
		//trigpos=0;
		//trigclock=0;
	}
	prevsynclock=synclock;
}
//disp_d=trigpos;
//array[2+bsize]=((synclength)/(1<<15));
//array[3+bsize]=synclength-(((synclength)/(1<<15))<<15);

//length=(array[0+bsize]<<15)+array[1+bsize];
//max length = half table length - (bsize (buffer) + bsize (leadin) + 2048<<3 (leadout) + 32 (controls))


//disp_d4=Oenv[1];

//if (synchold&& (array[2+bsize]==0)){
//	ovrin=0;
//}



if (inlet_restart&&!rtrig){
		//	if (player==0){
		//			player=1;
		//		}
		//		else {
		//			player=0;
		//		}
		//		xoffset=dubpos;
		//		dubpos=0;
			//(delaytrigger to sccount for buffer
	ovrcnt=1;
	restarted=1;
	rtrig=1;
}
else if (!inlet_restart){
	rtrig=0;
}


outpos=dubpos;
outposGB=dubposGB;
		




rate=((uint64_t)1<<32)/synclength;
phase=dubpos*rate;
outlet_phase=phase>>5;

if (inlet_freeze!=Pinovr){
	//ovrcnt=(bsize>>4);
	ovrcnt=2;
	Pinovr=inlet_freeze;
}
if (inlet_replace!=Prep){
	ovrcnt=2;
	//ovrcnt=(bsize>>4);
	Prep=inlet_replace;
}
if (ovrcnt>0){
	ovrcnt-=1;
	if (ovrcnt<=0){
			if (restarted){
				restarted=0;
				if (player==0){
					player=1;
				}
				else {
					player=0;
				}
				xoffset=dubpos;
				dubpos=0;
				
			}
			if (!inlet_freeze){
				//overdub=1;
				ovrin=1;
			}
			else {
				ovrin=0;
			}
			if (inlet_replace){
				//overdub=1;
				repin=1;
				ovrin=1;
			}
			else {
				repin=0;
			}
		
	}
}



ovrrate=0x07FFFFFF/param_fade;
if (ovrin){
	if (ovrfade<0x07FFFFFF){
		ovrfade+=ovrrate;
		if (ovrfade>=0x07FFFFFF){
			ovrfade=0x07FFFFFF;
		}
	}
}
else {
	if (ovrfade>0){
		ovrfade-=ovrrate;
	}
	if (ovrfade<=0){
			ovrfade=0;
			
			//if (!ott){
			//	ott=1;
			//	if (!inlet_freeze){
			//		ovrin=1;
			//	}
			//}
		}
}



if (!repin&&inlet_freeze){
	if (rfade<0x07FFFFFF){
		rfade+=ovrrate;
		if (rfade>=0x07FFFFFF){
			rfade=0x07FFFFFF;
		}
	}
}
else {
	if (rfade>0){
		rfade-=ovrrate;
		if (rfade<=0){
			rfade=0;
			
		}
	}
}

//rfadeO= ___SMMUL(rfade<<3,inlet_feedback<<2);
//rfadeO=rfade;
if (rfade>=0x07FFFFFE){
	rfade=1<<27;
}

stepR = (rfade - prevR)>>4;
int32_t renv = prevR;
prevR = rfade;










if (inlet_stop&&!strig){
	strig=1;
	play=0;
}
else if (!inlet_stop){
	strig=0;
}


if (inlet_play&&!ptrig){
	play=1;
	ptrig=1;
}
else if (!inlet_play){
	ptrig=0;
}

if (play!=prevp){
	if (play){
		if (!ovrin&&!inlet_freeze){
			ovrin=1;
		}
		start=1;
	}
	else {
		if (ovrin){
			ovrin=0;
		}
		stop=1;
	}
	prevp=play;
}




//for (x = 0;x<2;x++){
	
	Ienv[0]=ovrfade;
	Ostep[0]= (Ienv[0]- Oprev[0])>>4;
   	Oenv[0]= Oprev[0];
   	if (Oenv[0]>=0x07FFFFFE){
		Oenv[0]=1<<27;
	}
   	Oprev[0] = Ienv[0];


if (!play){
	xtrig=0;
}

//disp_d5= 1031>>1<<1;

outlet_length=synclength;
//outlet_start=start;
if (start){
	xtrig=1;
}

outlet_stop=stop;
outlet_xtrig=xtrig;




start=0;
stop=0;
dubtrig=0;
xtrig=0;]]></code.krate>
         <code.srate><![CDATA[if (play){
	//phase=dubpos*rate;
//	outpos=dubpos[0];
	}
else {
	phase=0;
	outpos=0;
}
//outlet_pos=outpos;
//outlet_phase=phase;
//fb=__SSAT(inlet_Fback>>14,16);
//gfb=__SSAT(inlet_Fforward>>14,16);
fb=__SSAT(inlet_Fback,28)>>GAIN;
gfb=__SSAT(inlet_Fforward,28)>>GAIN;


for (x = 0;x<2;x++){
	array[xpos] = __SSAT((___SMMUL(array[xpos]<<3,renv<<2) + ___SMMUL((bufferarray[buffer]+fb)<<3,Oenv[0]<<2)),16);
	//if (dubpos[0]<(maxlength+(2048<<3))){
	if (x==player){
		dub[x]=dubpos+ buffer_index;
	}
	else {
		if (dub[x]<maxlength){
		dub[x]+=1;
		}
	}
	xpos=dub[x];
		//xposremainder=xpos+xoffset;
		
		//buffer
		

}
		//if ((xposremainder<maxlength)&&(xoffset>0)){
		//	array[xposremainder+32+bsize] =__SSAT((___SMMUL(array[xpos+32+bsize]<<3,renv<<2) + ___SMMUL((array[buffer]+fb)<<3,Oenv[0]<<2)),16);
		//}
		


		xposGB=dubposGB+ buffer_index;
		//feed forward buffer
		//array[xposGB+32+bsize+(maxlength)+bsize] =__SSAT(( ___SMMUL(gfb<<3,Oenv[0]<<2)),16);
		array[xposGB+(maxlength)+bsize] =__SSAT((gfb),16);
		Oenv[0]+=Ostep[0];		
		
		if (xpos==0){
			//xtrig=1;
		}	
		//dubpos[x] = (dubpos[x]+ 1)&LENGTHMASK;
	//}


		

//}
	
	renv+=stepR;






in=__SSAT(inlet_in,28)>>GAIN;
bufferarray[buffer]=in;
buffer+=1;
if (buffer>=bsize){
	buffer=0;
}]]></code.srate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="476" y="1568" text="supergran"/>
   <comment type="patch/comment" x="840" y="1568" text="attenuate when more voices playing"/>
   <patchobj type="patch/object" uuid="410b9420-1293-47ea-8d46-4065c02a7c5e" name="z_1" x="476" y="1582">
      <params>
         <int32 name="fade" value="256"/>
      </params>
      <attribs>
         <objref attributeName="buffer" obj="MikeWatt"/>
         <spinner attributeName="maxgrain" value="17"/>
      </attribs>
      <object id="patch/object" uuid="410b9420-1293-47ea-8d46-4065c02a7c5e">
         <sDescription>convert to integer output</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <inlets>
            <bool32 name="trigger"/>
            <frac32.positive name="delay"/>
            <bool32 name="reverse"/>
            <bool32 name="freeze"/>
            <frac32buffer.positive name="freezepos"/>
            <frac32.positive name="freezesize"/>
            <frac32.positive name="grainsize"/>
            <frac32.positive name="shape"/>
            <bool32 name="curve"/>
            <frac32.bipolar name="density"/>
            <int32 name="densityrange"/>
            <bool32 name="resyncgrain"/>
            <frac32.positive name="disintegrate"/>
            <frac32.positive name="spray"/>
            <frac32.positive name="reversegrain"/>
            <frac32.bipolar name="pitch"/>
            <frac32 name="pitchspray"/>
            <frac32.bipolar name="stretch"/>
            <frac32 name="corrupt"/>
            <frac32.positive name="corrupttime"/>
            <frac32buffer.bipolar name="timemod"/>
            <frac32.bipolar name="posmod"/>
            <frac32.positive name="randomoctave"/>
            <int32 name="octrange"/>
            <int32 name="octmode"/>
            <frac32.positive name="octavespeed"/>
            <frac32.positive name="shuffle"/>
            <frac32.positive name="shufflerate"/>
            <frac32.positive name="shufflerange"/>
            <frac32.positive name="grainecho"/>
            <frac32buffer.bipolar name="grainechomod"/>
            <bool32 name="allgrains"/>
            <bool32 name="mutegrains"/>
            <frac32buffer.bipolar name="buffermod"/>
            <bool32 name="stretchsyncmode"/>
            <bool32 name="stretchsynctrigger"/>
            <bool32 name="lofi"/>
            <frac32buffer.bipolar name="freezescrub"/>
            <int32 name="scrubamount"/>
         </inlets>
         <outlets>
            <frac32buffer name="delayedbuffer"/>
            <frac32buffer name="granulator"/>
            <frac32buffer name="grainecho"/>
            <frac32.positive name="grainphase"/>
            <frac32.positive name="delayphase"/>
            <int32 name="grainlength"/>
            <frac32 name="g1"/>
            <frac32 name="g2"/>
            <frac32 name="g3"/>
            <int32 name="activeplayers"/>
            <frac32.positive name="attenuate"/>
         </outlets>
         <displays>
            <int32.label name="activeplayers"/>
            <int32.label name="grainlength"/>
         </displays>
         <params>
            <int32 name="fade" noLabel="true">
               <MinValue i="1"/>
               <MaxValue i="4194304"/>
            </int32>
         </params>
         <attribs>
            <objref name="buffer"/>
            <spinner name="maxgrain" MinValue="3" MaxValue="20" DefaultValue="0"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int fade;
int fadee;
int fphase;
int fphaseO;
//int gshape;
int bsize;
int x;
int t;
int grain;
int stage[20];
int curve;
int maxgrain;
int v;
int pv;
int SO;
int init;
int xgrain;
int32_t indense;
int32_t tosted;
int32_t ptest;
int32_t krate;
int32_t remainder;
int32_t xfade;
int32_t xfadeGB;
int32_t pgr;
int32_t xf[2];
int32_t xfGB[2];
int32_t spray;
int32_t inPspray;
int32_t pitchspray;
int32_t inTspray;
int32_t posmod;
int32_t probPS;
int32_t inpitch;
int32_t fd;
int32_t fRate;   
int32_t pRate;   
int32_t fBase;
int32_t sRate;
int32_t rate;
int32_t dpos;
int32_t dposGB;
int32_t grainreverse;
int32_t pgpos;
int32_t pggpos;
int32_t octup;
int32_t spos;
int32_t sloop;
int32_t insloop;
//int32_t octdown;
int32_t Goctup[20];
int32_t Goctdn[20];
int32_t reverseG[20];
int32_t octave;
uint32_t probR;
uint32_t probS;
uint32_t shufflerate;
uint32_t pshuffle;
uint32_t sdelay;
int32_t shuffle;
//int32_t prate;
int32_t PRATE;
int32_t SRATE;
int32_t GRATE[20];
uint32_t poct;
uint32_t octclock;
uint32_t grainrate;
uint32_t grainyrate;
uint32_t slooppos;
uint32_t sloopphaseN;

int32_t aprevtits;
int32_t atits;
uint32_t tmp_gps;
uint32_t gyrate;
uint32_t grate;
uint32_t grainphase[20];
uint32_t stretchphase;
uint32_t stretchstart;
uint32_t pstretchstart;
uint32_t synclength;
uint32_t pg;
uint32_t shufflev;

uint32_t grainpos;
uint32_t pos[20];
int32_t genv[20];
//uint32_t boff;
int32_t gE[20];
uint32_t gph[20];
uint32_t Tphase;
uint32_t prevTp;
uint32_t trigrate;
uint32_t tr;
uint32_t delayphase;
//uint32_t kpos;
uint32_t kphase;
uint32_t laststretch;
uint32_t sposphase;
uint32_t sphase;
uint32_t gdelay;
//int32_t xpos;
int32_t phase[2];
uint32_t phaseGB[2];
uint32_t prevP[2];
uint32_t inpos;
//uint32_t kph;
uint32_t probG;
uint32_t probV;
uint32_t probO;
uint32_t lpos;
uint32_t dlength;
uint32_t dlengthGB;
//uint32_t pos;
//uint32_t Opos;
uint32_t out[2];
uint32_t gX[20];
uint32_t gout[20];
uint32_t holdG[20];

uint32_t nextgrain;
uint32_t xout;
uint32_t grainout;
//uint32_t lastmax;
uint32_t length;
uint32_t plength;
uint32_t inlength;
uint32_t outX[2];
uint32_t outGB[2];
uint32_t autorate;
uint32_t autophase;
uint32_t pauto;
uint32_t gpos;
uint32_t lastpos;
uint32_t prevpos;
int32_t phas;
uint32_t phasGB;
uint32_t outI;
uint32_t shape;
uint32_t outXX;
uint32_t delay;
uint32_t density;
uint32_t pgrain;
uint32_t grainlength;
uint32_t opos;
uint32_t inshufflerate;
uint32_t oposGB;
uint32_t AR;
uint32_t xoffset;
uint32_t activeplayers;
uint32_t indelay;
uint32_t indelayGB;
uint32_t prevdposGB;
uint32_t oct;
uint32_t prevdpos;
uint32_t loopcount;
uint32_t trs;
uint32_t pdelay;
//uint64_t TX[32];
uint32_t nglength;
uint32_t shufflewidth;
uint32_t freezelength;
uint32_t freezesize;
uint32_t sloopphase;
uint32_t fakeopos;
uint32_t freezeclock;
uint32_t buffpos;
uint32_t bpos;
uint32_t slength;
uint32_t prevscrub;
uint32_t freezescrub;
int32_t delayGB;
int32_t pdelayGB;
float32_t ratio;
float32_t pratio;
float32_t sratio;
bool octdown;
bool lofi;
bool dchange;
bool rtrig;
bool play;
//bool fadein;
bool phold;
bool pholdGB;
bool frtrig;
bool prevplay;
bool strig;
bool player;
bool playerGB;
bool gtrig;
bool graintrig;
bool ptrig;
//bool Rhold;
int fakehold;
bool ptrigGB;
bool alternate;
bool gforce;
bool ttrig;
int32_t test;
bool testhold;
bool resyncgrain;
bool rstrig;
bool testrig;
bool xloop;
bool xfading;
bool xfadingGB;
bool mutetrig;
bool synchold;
//+(attr_table.LENGTH>>1)]]></code.declaration>
         <code.init><![CDATA[bsize=16;
fadee=1<<6;
fd=6;
SO=32+bsize;
ptrig=1;
init=0;
play=1;
xgrain=-1;
//synchold=1;]]></code.init>
         <code.krate><![CDATA[fphase=0x07FFFFFF/param_fade;
//int ingrain=param_maxgrain;
//maxgrain=16;
if (!inlet_curve){
		maxgrain=attr_maxgrain;	
}
else {
		maxgrain=attr_maxgrain-3;
}


length=attr_buffer.maxlength;
lofi=!inlet_lofi;
xoffset=attr_buffer.xoffset;
if (xoffset<=delay){
	xoffset=length;
}
synclength=attr_buffer.synclength;
if (synclength>0){
	slength=synclength;
	}
else {
	slength=length;
}


play=!inlet_mutegrains;	

if (inlet_freeze){
	if (!frtrig){
		freezescrub=0;
		sposphase=grainpos;
		fakeopos=0;
		fakehold=2;
	}
	frtrig=1;
}
else if (!inlet_freeze){
	frtrig=0;
}


//gshape=inlet_grainshape- (inlet_grainshape>>2<<2);
curve=inlet_curve;
//probG=disintegrate probabilty && shuffle value
probG = (uint32_t)(GenerateRandomNumber())>>5; 
//probV=corrupt probabilty
probV = (uint32_t)(GenerateRandomNumber())>>5; 
//prob O= octave amount probability
probO=(uint32_t)(GenerateRandomNumber())>>5; 
//probR= shuffle value & reverse grain probability
probR=(uint32_t)(GenerateRandomNumber())>>5;
//probS= spray and octaveup?down probability
probS=(uint32_t)(GenerateRandomNumber())>>5;
//probPS=pitchspray (bipolar!)
probPS=(int32_t)(GenerateRandomNumber())>>4;


//kpos=attr_buffer.outpos;
krate=((uint64_t)1<<32)/slength;
kphase=(attr_buffer.trigpos*(krate>>5));

freezelength=___SMMUL(inlet_freezesize<<3,slength<<2);
if (freezelength<1){
	freezelength=1;
}
freezesize=inlet_freezesize;



	



if (((inlet_reversegrain>>21)<=32)&&((inlet_reversegrain>>21)>=31)){
	alternate=1;
}
else {
	alternate=0;
	if (probR<inlet_reversegrain){
		grainreverse=-1;	
	}
	else {
		grainreverse=1;
	}
}
if (inlet_reverse){
	
	
		if (grainreverse<0){
			grainreverse=1;
		}
		else {
			grainreverse=-1;
		}
	

}

//if (!inlet_reversegrain){
//	grainreverse=1;
//}
//else if (inlet_reversegrain){
//	grainreverse=-1;
//}


//outlet_compensate=(0x07FFFFFF/(((v+1)>>1)+1))>>4<<5;
if (!inlet_freeze){
	if (inlet_shufflerate>0){
		shufflerate=kphase/inlet_shufflerate;
		}
	else {
		shufflerate=kphase;
	}
	if (inlet_shufflerange>0){
		shufflewidth=inlet_shufflerange;
		}
	else {
		shufflewidth=0x07FFFFFF;
	}
	
	if (shufflerate!=pshuffle){
		pshuffle=shufflerate;
		if ((probR<=inlet_shuffle)&&(inlet_shuffle>0) ){
			shufflev=___SMMUL(probG<<3,shufflewidth<<2);
			if (inlet_shufflerate>0){
			shuffle=0-((((((shufflev/inlet_shufflerate)+1)*inlet_shufflerate)<<5)/krate)*rate);
			}
			else {
			shuffle=((shufflev<<5)/krate)*rate;
			}
		}
		else {
			shuffle=0;
		}
		
	
	}

}	
else {
	shuffle=0;	
}


//spray=(inlet_spray<<5);

if (inlet_spray>0){
inTspray=(probS-((probS/slength)*slength))*rate;
}
else {
	inTspray=0;
}
spray=0-(___SMMUL(inlet_spray<<3,inTspray<<2));


//pitchspray
inPspray= ___SMMUL(probPS<<3,(1<<21)<<2);
pitchspray=___SMMUL((inlet_pitchspray>>1)<<3,inPspray<<2);



posmod=(inlet_posmod<<5)+spray+shuffle;
//inpitch=
MTOFEXTENDED(0,fBase);
MTOFEXTENDED(inlet_pitch,fRate)
MTOFEXTENDED(inlet_stretch,sRate)
MTOFEXTENDED((pitchspray+inlet_pitch),pRate)
ratio=(float32_t)fRate/fBase;
pratio=(float32_t)pRate/fBase;
sratio=(float32_t)sRate/fBase;

rate=((uint64_t)1<<32)/length;

int32_t RATE=(rate*ratio);
int32_t PRATE=(rate*(pratio))-RATE;

int32_t SRATE=rate*sratio;
int32_t XSRATE=rate*sratio;
if (inlet_reverse){
	SRATE=-SRATE;
}

grainlength=___SMMUL(inlet_grainsize<<3,slength<<2);

grainrate=(((uint64_t)1<<32)/(grainlength))>>4;
grate=(((uint64_t)1<<32)/(grainlength))>>4;
if (inlet_shape<=(48<<21)){
	shape=inlet_shape;
}
else{
	shape=((inlet_shape-(48<<21))<<3)+(48<<21);
}
gyrate= ___SMMUL(((grate<<3)-grate)<<3,shape<<2);
grainyrate=grate+gyrate;

if (inlet_octavespeed>0){
	octclock=kphase/inlet_octavespeed;
	}
else {
	octclock=probO-((probO/(inlet_octrange+1))*(inlet_octrange+1));
	}
if (octclock!=poct){
			octave=probO-((probO/(inlet_octrange+1))*(inlet_octrange+1));
			if (inlet_octmode==0){
				octdown=0;
			}
			else if (inlet_octmode==1){
				octdown=1;
			}
			else if (inlet_octmode==2){
				if (probS>=(1<<26)){
				octdown=1;
				}
				else {
					octdown=0;
				}
			}
			
			if (inlet_randomoctave<probO){
				oct=0;
			}
			else {
				if (octave>0){
					if (!octdown){
						oct=(octave*(RATE+PRATE));
						
						}
					else {
							oct=0-((RATE+PRATE)-((RATE+PRATE)>>octave));
							
						}
				}
				
				else {
					oct=0;
				}
			}
	poct=octclock;
}

if (inlet_delay<0x07FFFFFF){
	indelay=___SMMUL(inlet_delay<<3,slength<<2);
	}
else {
	indelay=0;
}




if (inlet_grainecho<0x07FFFFFF){
	indelayGB=___SMMUL(inlet_grainecho<<3,slength<<2);
	
	}
else {
	indelayGB=0;
}


autophase=kphase/inlet_corrupttime;
if (autophase!=pauto){
	pauto=autophase;
	prevpos=lpos;
	lpos=delayphase;
	
		lastpos=lpos;
	
}
if (inlet_freeze){
	sdelay=freezelength;
}
else if (!inlet_stretchsynctrigger){
	sdelay=delay;
}
else {
	sdelay=___SMMUL(inlet_corrupttime<<3,slength<<2);;
}




if (inlet_density>=0){
	if(inlet_density >= (1<<27))
	  indense = 0x07FFFFFF;
	else if(inlet_density <= 0)
	  indense = 0;
	else{
		  int32_t i = inlet_density >> (27-2);              // i [0 4[
		  int32_t a = (inlet_density & ((1<<(27-2)) - 1));  // a q25
		  if(i < 2){ // [0 2[
		    if(i < 1){ // [0 1[             q27         q25   q20           q27 
		      indense = ___SMMLA((1<<26) - 0, a, 0>> 7) << 7;
		    } else {   // [1 2[
		      indense = ___SMMLA((48<<21) - (1<<26), a, (1<<26) >> 7) << 7;
		    }
		  } else { // [2 4[
		    if(i < 3){ // [2 3[
		      indense = ___SMMLA((56<<21) - (48<<21), a, (48<<21) >> 7) << 7;
		    } else {   // [3 4[
		      indense = ___SMMLA(0x07FFFFFF - (56<<21), a, (56<<21) >> 7) << 7;
		    }
		  }
		}
		
	density=___SMMUL((inlet_grainsize>>1)<<3,(((1<<27)+(0-indense)))<<2);
	}
else if (inlet_density<0){
		indense=0;
		uint32_t lowdensity = (0-inlet_density)<<inlet_densityrange;
		if (lowdensity<=(1<<24)){
			density=(___SMMUL((inlet_grainsize>>1)<<3,(lowdensity<<3)<<2)) + (inlet_grainsize>>1); 
			}
		else if (lowdensity>(1<<24)){
			uint32_t tempin=(lowdensity<<3)<<5;
			density=(___SMMUL(inlet_grainsize<<3,(tempin>>5)<<2)) + ((lowdensity>>24)*inlet_grainsize); 
			}
	}

tr= ( ___SMMUL(density<<3,((slength))<<2) ) ;

if (tr<=2){
	tr=2;
}
trigrate=(((uint64_t)1<<32)/(tr));




if (inlet_trigger&&!ttrig){
	ttrig=1;
	gtrig=1;
	prevpos=lpos;
	lpos=delayphase;
	
		lastpos=lpos;
	
}
else if (!inlet_trigger){
	ttrig=0;
}




if ((indelay!=pdelay)&&!xfading){
	delay=indelay;
	pdelay=indelay;

}

if (indelayGB!=pdelayGB){
	pdelayGB=indelayGB;
	delayGB=indelayGB;
	if (playerGB==0){
		playerGB=1;
		
	}
	else {
		playerGB=0;
		
	}

}


if (gtrig){
	graintrig=1;
	prevTp=0;
	Tphase=0;
	gtrig=0;
	gforce=1;
	if (inlet_freeze){
		
		//sposphase=delayphase;
		sposphase=(((dpos/(sdelay))*(sdelay)))*rate;
		//sposphase=grainpos;
		fakeopos=0;
		fakehold=1;
	}
	
	
}
resyncgrain=inlet_resyncgrain;



if (!play){
	outlet_grainphase=0;
	outlet_delayphase=0;
}
else{
	uint32_t phd=((grainpos)/rate)*krate;
	uint32_t phdd=((delayphase)/rate)*krate;
	outlet_grainphase=phd>>5;
	outlet_delayphase=phdd>>5;
	}

if (!play&&!grainout){
	int kill;
	graintrig=0;
	for (kill = 0;kill<maxgrain;kill++){	
		stage[kill]=0;
		
		}
}

//outlet_activeplayers=v;outlet_attenuate=indense;
disp_activeplayers=v;
outlet_activeplayers=v;
nglength=( ___SMMUL((0x07FFFFFF-inlet_shape)<<3,((grainlength>>1)+1)<<2))+(grainlength>>1);
disp_grainlength=nglength;
outlet_grainlength=nglength;

//disp_d1=stage[0];
//disp_d2=stage[1];
//disp_d3=stage[2];
//disp_d4=stage[3];
//disp_d5=stage[4];
//disp_d6=stage[5];
//disp_d7=stage[6];
//disp_d8=stage[7];
//disp_d9=stage[8];
//disp_d10=stage[9];
//disp_d11=stage[10];
//disp_d12=stage[11];
//disp_d13=stage[12];
//disp_d14=stage[13];
//disp_d15=stage[14];
//disp_d16=stage[15];
//disp_d17=stage[16];
//disp_d18=stage[17];]]></code.krate>
         <code.srate><![CDATA[opos=attr_buffer.outpos+ buffer_index; 
oposGB=attr_buffer.outposGB+ buffer_index; 



prevdpos=dpos;
dpos=opos-delay;
if (dpos<0){
	dpos=xoffset+dpos;
}
if ((dpos<prevdpos) || (dpos>(prevdpos+1))){
	if (player==0){
		player=1;
	}
	else {
		player=0;
	}
}

insloop=opos-((opos/(sdelay))*(sdelay));
if ((insloop==0)&&(fakehold>0)){
	
	if ((fakehold==2)&&(freezesize>0)){
		sposphase=(((dpos/(sdelay))*(sdelay)))*rate;
	}
	else if ((fakehold==1)&&(freezesize>0)){
		sposphase=(___SMMUL(((inlet_freezepos/freezesize)*freezesize)<<3,slength<<2))*rate;
	}
	fakehold=0;
}
if (!fakehold){
	sloop=insloop;
	}
else {
	sloop=fakeopos-((fakeopos/(sdelay))*(sdelay));
	fakeopos+=1;
}
uint32_t sloopphase=sloop*XSRATE;
slooppos=(sloopphase/rate);
if (!inlet_stretchsyncmode){
sloopphaseN=(slooppos-((slooppos/sdelay)*sdelay))*rate;
}
else {
	sloopphaseN=slooppos*XSRATE;
}

	
if (inlet_freeze){
	if (inlet_freezepos!=pgpos){
		freezescrub=0;
		fakehold=1;
		fakeopos=0;
		sloopphaseN=0;
		sposphase=(___SMMUL(inlet_freezepos<<3,slength<<2))*rate;
		//if (freezesize>0){
			//sposphase=(___SMMUL(((inlet_freezepos/freezesize)*freezesize)<<3,slength<<2))*rate;
		//	sposphase=(___SMMUL(inlet_freezepos<<3,slength<<2))*rate;
		//	}
		//else {
		//	sposphase=(___SMMUL(inlet_freezepos<<3,slength<<2))*rate;
		//	
		//}
		if (inlet_reverse&&(sposphase==0)){
				sposphase=xoffset*rate;
				}
			
			
		}
	if (freezesize==0){
		sloopphaseN=0;
	}
		
	}
pgpos=inlet_freezepos;

if (inlet_freezescrub!=prevscrub){
	if (inlet_freezescrub>=0){
		freezescrub=(___SMMUL((inlet_freezescrub>>inlet_scrubamount)<<3,slength<<2))*rate;
		}
	else {
		freezescrub=(slength*rate) +((___SMMUL((inlet_freezescrub>>inlet_scrubamount)<<3,slength<<2))*rate);
		}
	
	prevscrub=inlet_freezescrub;	
}

if (!inlet_reverse){
	spos=((opos/sdelay)*sdelay) - sdelay;
	if (spos<0){
	spos=xoffset+spos;
	}
	if (!inlet_freeze){
	sposphase=spos*rate;
	}
	
	sphase=sposphase+sloopphaseN+freezescrub;
}
else {
	spos=((opos/sdelay)*sdelay);
	if (!attr_buffer.freeze){
		if (spos<=0){
			spos=xoffset+(spos)-1;
			}
		}
	else {
		if (spos<=0){
			spos=xoffset+(spos);
			}
	}
	if (spos>=attr_buffer.maxlength){
		spos=spos-attr_buffer.maxlength;
	}
	if (!inlet_freeze){
		sposphase=spos*rate;
	}
	sphase=sposphase-sloopphaseN+freezescrub;
}




prevdposGB=dposGB;
dposGB=oposGB-delayGB;
if (dposGB<0){
	dposGB=(attr_buffer.maxlength>>1)+dposGB;
}
//if ( ((dposGB<prevdposGB) || (dposGB>(prevdposGB+1))) && (dposGB>0) ){
//	if (playerGB==0){
//		playerGB=1;
		
//	}
//	else {
//		playerGB=0;
		
//	}
//}
delayphase=dpos*rate;

if (!play && fade){
	fade-=fphase;
	if (fade<=0){
		fade=0;
	}
}
if (!player && xfade){
	xfading=1;
	xfade-=fphase;
	if (xfade<=0){
		xfade=0;
		xfading=0;
	}
}
xf[0]=0x07FFFFFF-xfade;
xf[1]=xfade;

if (!playerGB && xfadeGB){
	xfadeGB-=fphase;
	if (xfadeGB<=0){
		xfadeGB=0;
	}
}
xfGB[0]=0x07FFFFFF-xfadeGB;
xfGB[1]=xfadeGB;


int x;	
for (x = 0;x<2;x++){
	if (x==player){
	phase[x]=dpos;
	
	
	}
	else {
		if (phase[x]<(length-1)){
			phase[x]+=1;
		
		}
	}

		uint32_t T = (phase[x]*rate)+(inlet_buffermod<<5);
	   	uint32_t asat = __USAT(T>>5,27);
	    	int index = asat>>(27-attr_buffer.LENGTHPOWa);
	   	int32_t y1 = attr_buffer.array[index]<<attr_buffer.GAIN;
	   	int32_t y2 = attr_buffer.array[(index+1)&attr_buffer.LENGTHMASKa]<<attr_buffer.GAIN;
	  	 int frac = (asat - (index<<(27-attr_buffer.LENGTHPOWa)))<<(attr_buffer.LENGTHPOWa+3);
	  	int32_t rr;
	  	rr = ___SMMUL(y1,(1<<30)-frac);
	  	rr = ___SMMLA(y2,frac,rr);
		out[x]= ___SMMUL((rr<<2)<<3,xf[x]<<2);
	
////////////////////////////////////////
	if (x==playerGB){
		phaseGB[x]=dposGB;
		}
	else {
		if (phaseGB[x]<((length>>1)-1)){
			phaseGB[x]+=1;
			}
		}
	 	uint32_t TGB = (phaseGB[x]*(rate<<1))+(inlet_grainechomod<<5);
	   	uint32_t asatGB = __USAT((TGB>>5),27);
	    	int indexGB = asatGB>>(27-attr_buffer.LENGTHPOWb);
	   	int32_t y1GB = attr_buffer.array[indexGB+(attr_buffer.maxlength)+bsize]<<attr_buffer.GAIN;
	   	int32_t y2GB = attr_buffer.array[(indexGB+1+(attr_buffer.maxlength)+bsize)]<<attr_buffer.GAIN;
	  	 int fracGB = (asatGB - (indexGB<<(27-attr_buffer.LENGTHPOWb)))<<(attr_buffer.LENGTHPOWb+3);
	  	int32_t rrGB;
	  	rrGB = ___SMMUL(y1GB,(1<<30)-fracGB);
	  	rrGB = ___SMMLA(y2GB,fracGB,rrGB);
		outGB[x]= ___SMMUL((rrGB<<2)<<3,xfGB[x]<<2);
	}




if ((inlet_stretch==0) && (!inlet_reverse) && !inlet_freeze){
	
	int32_t tmp_gpo = (delayphase>>5)+(posmod>>5);
	if ((tmp_gpo)>=0){
		grainpos=delayphase+posmod;
		
		}
	else {
		grainpos=delayphase+posmod+(xoffset*rate);
	}
	}
else {
	int32_t tmp_gpo = (sphase>>5)+(posmod>>5);
	if ((tmp_gpo)>=0){
		grainpos=sphase+posmod;
		
		}
	else {
		grainpos=sphase+posmod+(xoffset*rate);
	}
}
	





Tphase+=trigrate;	
if (resyncgrain){
	Tphase=opos*trigrate;
	prevTp=Tphase-trigrate;
}

if (Tphase<prevTp){
		if (play){
		graintrig=1;
		}
	}
prevTp=Tphase;

if (graintrig){
	graintrig=0;
	pgrain=grain;
	if (grain<maxgrain){
		grain+=1;
		}
	if (grain>=maxgrain){
		grain=0;
	}
	nextgrain=grain+1;
	if (nextgrain>=maxgrain){
		nextgrain=nextgrain-maxgrain;
	}
	if (stage[grain]>0){
		//if grain already playing, don't trigger and tell it to try agin
		graintrig=1;
		grain=pgrain;
		
	}
	else {
		if ((inlet_disintegrate<probG) || gforce){
			gforce=0;
			//activeplayers=v;
			//v+=1;
			if (stage[xgrain]==0){
				xgrain=grain;
				v=pv;
				pv=0;
			}
			if (stage[xgrain]>0){
				pv+=1;
				}
			
			

			stage[grain]=1;
			
			gph[grain]=0;
			if (alternate){
				if (grainreverse<0){
					grainreverse=1;
				}
				else {
					grainreverse=-1;
				}
			}
			reverseG[grain]=grainreverse;
			
				if (inlet_corrupt<probV){
						
					pos[grain]=grainpos;		
					}
				else {
					int32_t tmp_gpo = (lastpos>>5)+(posmod>>5);
					if ((tmp_gpo)<0){
						tmp_gps=lastpos+posmod+(xoffset*rate);
						}
					else {
						tmp_gps=lastpos+posmod;
					}
					pos[grain]=tmp_gps;	
				}

			if ((reverseG[grain]<0)&&((pos[grain]>>5)<=(inlet_grainsize))){
						pos[grain]=pos[grain]+(xoffset*rate);
						
					}

			
			genv[grain]=0;
			grainphase[grain]=0;
			gX[grain]=0;	
			GRATE[grain]=PRATE+oct;
			if (alternate){
				if (grainreverse<0){
					grainreverse=1;
				}
				else {
					grainreverse=-1;
				}
			}
			reverseG[grain]=grainreverse;
			if (inlet_allgrains>0){
				holdG[grain]=1;
			}
			else {
				holdG[grain]=0;
			}
			holdG[nextgrain]=0;
			
		}
	}

	
}
	
grainout=0;


for (t = 0;t<maxgrain;t++){	
	if (stage[t]>0){
		
	switch(lofi>0?lofi:0){
			 case 0: 
				{ 
					uint32_t T = gph[t]+pos[t]+(inlet_timemod<<5);
			      int32_t tmp_di = T/rate;
			      int32_t tmp_w1 = (T-tmp_di*rate)*rate>>2;
			
			      int32_t tmp_a1 = attr_buffer.array[tmp_di];
			      tmp_a1 = (tmp_a1<<attr_buffer.GAIN)+___SMMUL(attr_buffer.array[tmp_di+1]-tmp_a1<<16,tmp_w1);
			      //gX[t]=tmp_a1<<attr_buffer.GAIN;
			      gX[t]=tmp_a1;
					}
			 break;
			 
			 case 1: 
				{
					uint32_t T = gph[t]+pos[t]+(inlet_timemod<<5);
				   	uint32_t asat = __USAT(T>>5,27);
				    	int index = asat>>(27-attr_buffer.LENGTHPOWa);
				    	
				    	
				   	int32_t y1 = attr_buffer.array[index]<<attr_buffer.GAIN;
				   	int32_t y2 = attr_buffer.array[(index+1)]<<attr_buffer.GAIN;
				  	 int frac = (asat - (index<<(27-attr_buffer.LENGTHPOWa)))<<(attr_buffer.LENGTHPOWa+3);
				  	int32_t rr;
				  	rr = ___SMMUL(y1,(1<<30)-frac);
				  	rr = ___SMMLA(y2,frac,rr);
					gX[t]= rr<<2;
			
					}
			 break;
	}

		gph[t]+=((RATE+GRATE[t])*reverseG[t]);
//		*********************************************************************

		grainphase[t]+=grainrate;
		
		if (grainphase[t]<(1<<27)){
			if (genv[t]<0x07FFFFFF){
				genv[t]+=grainyrate;	
				}
			else if (genv[t]>=0x07FFFFFF){
				genv[t]=0x07FFFFFF;
				}
			}
		else {

			
			if (genv[t]>0){
				genv[t]-=grainyrate;	
				}
			else if (genv[t]<=0){
				genv[t]=0;
				if (holdG[t]&&inlet_allgrains){
					stage[t]=1;
					grainphase[t]=0;
					gph[t]=0;
				}
				else {
					//v-=1;
					stage[t]=0;
				}
			}
			
			
		}
		switch(curve>0?curve:0){
	      case 0: 
	     	{ gE[t]=genv[t];}
	      break;
	      
	      case 1: 
	     	{ SINE2TINTERP((genv[t]<<4)-(1<<30),gE[t])
			gE[t]=((gE[t]>>2)+(1<<29))>>3;}
	      break;
	      
		}
		
		
		
	}
	
	//grainout=__SSAT((grainout+ (___SMMUL(gX[t]<<3,gE[t]<<2))),27);
	grainout=(grainout+ (___SMMUL(gX[t]<<3,gE[t]<<2)));
}

//outlet_grain=__SSAT((___SMMUL(grainout<<3,fade<<2)),27);
outlet_granulator=(___SMMUL(grainout<<3,fade<<2));
outlet_grainecho=__SSAT((___SMMUL((outGB[0]+outGB[1])<<3,fade<<2)),27);

outlet_delayedbuffer=__SSAT((___SMMUL((out[0]+out[1])<<3,fade<<2)),27);
	

if (play && (fade<0x07FFFFFF)){
	fade+=fphase;
	if (fade>=0x07FFFFFF){
	fade=0x07FFFFFF;
	}
}
if (player && (xfade<0x07FFFFFF)){
	xfading=1;
	xfade+=fphase;
	if (xfade>=0x07FFFFFF){
		xfading=0;
	xfade=0x07FFFFFF;
	}
}
if (playerGB && (xfadeGB<0x07FFFFFF)){
	xfadeGB+=fphase;
	xfadingGB=1;
	if (xfadeGB>=0x07FFFFFF){
		xfadingGB=0;
	xfadeGB=0x07FFFFFF;
	}
}]]></code.srate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="840" y="1582" text="boost when density below 0"/>
   <comment type="patch/comment" x="1204" y="1582" text="safety compression"/>
   <patchobj type="patch/object" uuid="72c95f4b-a175-434a-9eab-97b0cedd487e" name="object_1" x="840" y="1596">
      <params>
         <frac32.u.map name="more" value="49.5"/>
         <int32 name="start" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="72c95f4b-a175-434a-9eab-97b0cedd487e">
         <inlets>
            <int32 name="activeplayers"/>
            <frac32.bipolar name="dense"/>
         </inlets>
         <outlets>
            <frac32 name="attenuateB"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="more"/>
            <int32 name="start">
               <MinValue i="0"/>
               <MaxValue i="64"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[int outAP;
if (inlet_activeplayers>=(2+param_start)){
outAP=inlet_activeplayers-(2+param_start);
}
else {
	outAP=0;
}


uint32_t atB=( ___SMMUL( (1<<(27-outAP)) <<3,(param_more)<<2))+ (0x07FFFFFF-param_more);

if (atB>=0x07FFFFFF){
	atB=0x07FFFFFF;
}
uint32_t dense=( __SSAT(((0-inlet_dense)<<3),28))>>1;
if (inlet_dense<0){
	atB=atB+dense;
}
outlet_attenuateB=atB;]]></code.krate>
      </object>
   </patchobj>
   <obj type="math/smooth" uuid="6c5d08c282bb08bff24af85b4891447f99bcbc97" name="smooth_5" x="952" y="1596">
      <params>
         <frac32.u.map name="time" value="40.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="env/follower" uuid="356ce1d18ac6b51704833f94dac5dea823fb8223" name="follower_1" x="1134" y="1596">
      <params/>
      <attribs>
         <combo attributeName="time" selection="42.6ms"/>
      </attribs>
   </obj>
   <obj type="math/gain" uuid="6b4dd3da49f98e54900f6c20031f38f4624fa364" name="gain_1" x="1204" y="1596">
      <params>
         <frac32.u.map name="amp" value="26.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="dyn/comp" uuid="2d62720d6a597c586936be74ebb1e1c449772636" name="comp_1" x="1302" y="1596">
      <params>
         <frac32.u.map name="tresh" value="27.0"/>
         <frac32.u.map name="ratio" value="50.0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1064" y="1680" text="attenuate granulator"/>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_1" x="1064" y="1694">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_4" x="1134" y="1694">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="924" y="1750" text="grain gain"/>
   <patchobj type="patch/object" uuid="cb348abb-e975-43a1-a337-68f755ba4cf1" name="*_6" x="924" y="1764">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="cb348abb-e975-43a1-a337-68f755ba4cf1">
         <sDescription>multiply</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>math.axh</helpPatch>
         <inlets>
            <frac32 name="a" description="input"/>
            <frac32 name="b" description="input"/>
         </inlets>
         <outlets>
            <frac32 name="result" description="output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_result= ___SMMUL(inlet_a<<3,(inlet_b<<1)<<2);]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="1120" y="1792" text="granulator vol pre feedback/grain echo"/>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_11" x="1120" y="1806">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="728" y="1862" text="output *************************************************************"/>
   <comment type="patch/comment" x="714" y="1890" text="grain echo vol"/>
   <comment type="patch/comment" x="812" y="1890" text="buffer vol"/>
   <comment type="patch/comment" x="1022" y="1890" text="granulatorer vol"/>
   <comment type="patch/comment" x="1190" y="1890" text="wet vol"/>
   <comment type="patch/comment" x="1274" y="1890" text="input vol"/>
   <comment type="patch/comment" x="1372" y="1890" text="input + wet"/>
   <comment type="patch/comment" x="154" y="1904" text="save/load buffer to/from sdcard"/>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_9" x="742" y="1904">
      <params/>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_4" x="812" y="1904">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_3" x="952" y="1904">
      <params/>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_5" x="1036" y="1904">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_4" x="1106" y="1904">
      <params/>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_2" x="1190" y="1904">
      <params/>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_3" x="1274" y="1904">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_2" x="1372" y="1904">
      <params/>
      <attribs/>
   </obj>
   <obj type="audio/out left" uuid="b11a3c09b2fdd575ea8212f2ce7743d5269253b1" name="out_2" x="1484" y="1904">
      <params/>
      <attribs/>
   </obj>
   <obj type="string/c" uuid="4aa90a90c435a742ddfa152d232883fc5b2f1b3" name="c_1" x="168" y="1918">
      <params/>
      <attribs>
         <table attributeName="str" table="DBoon"/>
      </attribs>
   </obj>
   <obj type="table/save" uuid="3e4108b607d56d9e1cd10abb898b58eea11e53b2" name="save_1" x="98" y="1988">
      <params/>
      <attribs>
         <objref attributeName="table" obj="MikeWatt"/>
      </attribs>
   </obj>
   <obj type="table/load" uuid="600cc22c6734d23a82620da1a14e78782a7e168e" name="load_1" x="294" y="1988">
      <params/>
      <attribs>
         <objref attributeName="table" obj="MikeWatt"/>
      </attribs>
   </obj>
   <comment type="patch/comment" x="728" y="1988" text="feedback **********************************************************"/>
   <comment type="patch/comment" x="714" y="2030" text="grainecho feedback"/>
   <comment type="patch/comment" x="910" y="2030" text="grains + grain echo to grain echo"/>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_8" x="728" y="2044">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_1" x="910" y="2044">
      <params/>
      <attribs/>
   </obj>
   <obj type="filter/hp" uuid="7829b56456e975f1d89bda2ad1c7ad678080a73b" name="hp_2" x="980" y="2044">
      <params>
         <frac32.s.map name="pitch" value="-32.0"/>
         <frac32.u.map name="reso" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1358" y="2044" text="delayed buffer"/>
   <comment type="patch/comment" x="1106" y="2058" text="grainecho to buffer"/>
   <comment type="patch/comment" x="1246" y="2058" text="grain to buffer"/>
   <comment type="patch/comment" x="1358" y="2058" text="to buffer"/>
   <comment type="patch/comment" x="1526" y="2058" text="to buffer"/>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_2" x="1106" y="2072">
      <params/>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_7" x="1176" y="2072">
      <params/>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_6" x="1260" y="2072">
      <params/>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_1" x="1358" y="2072">
      <params/>
      <attribs/>
   </obj>
   <obj type="drj/math/sum3" uuid="93cb11244902274d118a237aed86ae7d7fd46107" name="sum3_1" x="1442" y="2072">
      <params/>
      <attribs/>
   </obj>
   <obj type="filter/hp" uuid="7829b56456e975f1d89bda2ad1c7ad678080a73b" name="hp_1" x="1526" y="2072">
      <params>
         <frac32.s.map name="pitch" value="-32.0"/>
         <frac32.u.map name="reso" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <nets>
      <net>
         <source obj="MikeWatt" outlet="phase"/>
         <dest obj="dial_6" inlet="in"/>
      </net>
      <net>
         <source obj="in_1" outlet="wave"/>
         <dest obj="vca_3" inlet="a"/>
         <dest obj="MikeWatt" inlet="in"/>
      </net>
      <net>
         <source obj="vca_1" outlet="o"/>
         <dest obj="sum3_1" inlet="in2"/>
      </net>
      <net>
         <source obj="vca_2" outlet="o"/>
         <dest obj="+_2" inlet="in2"/>
      </net>
      <net>
         <source obj="vca_3" outlet="o"/>
         <dest obj="+_2" inlet="in1"/>
      </net>
      <net>
         <source obj="dial_13" outlet="out"/>
         <dest obj="crossfade_1" inlet="drywet"/>
      </net>
      <net>
         <source obj="dial_14" outlet="out"/>
         <dest obj="crossfade_1" inlet="volume"/>
      </net>
      <net>
         <source obj="dial_2" outlet="out"/>
         <dest obj="z_1" inlet="pitch"/>
      </net>
      <net>
         <source obj="i_1" outlet="out"/>
         <dest obj="z_1" inlet="curve"/>
      </net>
      <net>
         <source obj="z_1" outlet="granulator"/>
         <dest obj="follower_1" inlet="in"/>
         <dest obj="vca_11" inlet="a"/>
      </net>
      <net>
         <source obj="dial_17" outlet="out"/>
         <dest obj="crossfade_2" inlet="volume"/>
      </net>
      <net>
         <source obj="dial_1" outlet="out"/>
         <dest obj="crossfade_2" inlet="drywet"/>
      </net>
      <net>
         <source obj="vca_4" outlet="o"/>
         <dest obj="+_4" inlet="in1"/>
      </net>
      <net>
         <source obj="vca_5" outlet="o"/>
         <dest obj="+_4" inlet="in2"/>
      </net>
      <net>
         <source obj="+_4" outlet="out"/>
         <dest obj="vca_2" inlet="a"/>
      </net>
      <net>
         <source obj="vca_6" outlet="o"/>
         <dest obj="sum3_1" inlet="in1"/>
      </net>
      <net>
         <source obj="button_2" outlet="o"/>
         <dest obj="z_1" inlet="trigger"/>
      </net>
      <net>
         <source obj="1_14" outlet="out"/>
         <dest obj="z_1" inlet="delay"/>
      </net>
      <net>
         <source obj="dial_19" outlet="out"/>
         <dest obj="object_1" inlet="dense"/>
         <dest obj="z_1" inlet="density"/>
      </net>
      <net>
         <source obj="z_1" outlet="delayedbuffer"/>
         <dest obj="vca_4" inlet="a"/>
         <dest obj="vca_1" inlet="a"/>
      </net>
      <net>
         <source obj="z_1" outlet="grainphase"/>
         <dest obj="dial_3" inlet="in"/>
      </net>
      <net>
         <source obj="sum3_1" outlet="out"/>
         <dest obj="hp_1" inlet="in"/>
      </net>
      <net>
         <source obj="dial_18" outlet="out"/>
         <dest obj="crossfade_3" inlet="volume"/>
      </net>
      <net>
         <source obj="dial_7" outlet="out"/>
         <dest obj="crossfade_3" inlet="drywet"/>
      </net>
      <net>
         <source obj="1_13" outlet="out"/>
         <dest obj="z_1" inlet="spray"/>
      </net>
      <net>
         <source obj="hp_1" outlet="out"/>
         <dest obj="MikeWatt" inlet="Fback"/>
      </net>
      <net>
         <source obj="crossfade_3" outlet="wet"/>
         <dest obj="vca_6" inlet="v"/>
      </net>
      <net>
         <source obj="1_3" outlet="out"/>
         <dest obj="z_1" inlet="corrupttime"/>
      </net>
      <net>
         <source obj="dial_26" outlet="out"/>
         <dest obj="z_1" inlet="disintegrate"/>
      </net>
      <net>
         <source obj="dial_31" outlet="out"/>
         <dest obj="z_1" inlet="corrupt"/>
      </net>
      <net>
         <source obj="dial_15" outlet="out"/>
         <dest obj="z_1" inlet="randomoctave"/>
      </net>
      <net>
         <source obj="i_8" outlet="out"/>
         <dest obj="z_1" inlet="octrange"/>
      </net>
      <net>
         <source obj="+_2" outlet="out"/>
         <dest obj="out_2" inlet="wave"/>
      </net>
      <net>
         <source obj="z_1" outlet="delayphase"/>
         <dest obj="dial_10" inlet="in"/>
      </net>
      <net>
         <source obj="dial_29" outlet="out"/>
         <dest obj="z_1" inlet="stretch"/>
      </net>
      <net>
         <source obj="toggle_6" outlet="o"/>
         <dest obj="z_1" inlet="reverse"/>
      </net>
      <net>
         <source obj="z_1" outlet="grainecho"/>
         <dest obj="vca_8" inlet="a"/>
         <dest obj="vca_9" inlet="a"/>
      </net>
      <net>
         <source obj="hp_2" outlet="out"/>
         <dest obj="MikeWatt" inlet="Fforward"/>
      </net>
      <net>
         <source obj="dial_25" outlet="out"/>
         <dest obj="vca_8" inlet="v"/>
      </net>
      <net>
         <source obj="crossfade_1" outlet="dry"/>
         <dest obj="vca_3" inlet="v"/>
      </net>
      <net>
         <source obj="crossfade_1" outlet="wet"/>
         <dest obj="vca_2" inlet="v"/>
      </net>
      <net>
         <source obj="crossfade_3" outlet="dry"/>
         <dest obj="vca_1" inlet="v"/>
      </net>
      <net>
         <source obj="crossfade_2" outlet="dry"/>
         <dest obj="vca_4" inlet="v"/>
      </net>
      <net>
         <source obj="button_3" outlet="o"/>
         <dest obj="MikeWatt" inlet="replace"/>
      </net>
      <net>
         <source obj="1_4" outlet="out"/>
         <dest obj="z_1" inlet="grainecho"/>
      </net>
      <net>
         <source obj="1_2" outlet="out"/>
         <dest obj="z_1" inlet="grainsize"/>
      </net>
      <net>
         <source obj="c_1" outlet="out"/>
         <dest obj="save_1" inlet="filename"/>
         <dest obj="load_1" inlet="filename"/>
      </net>
      <net>
         <source obj="button_6" outlet="o"/>
         <dest obj="load_1" inlet="trig"/>
      </net>
      <net>
         <source obj="button_7" outlet="o"/>
         <dest obj="save_1" inlet="trig"/>
      </net>
      <net>
         <source obj="dial_9" outlet="out"/>
         <dest obj="z_1" inlet="shuffle"/>
      </net>
      <net>
         <source obj="1_7" outlet="out"/>
         <dest obj="z_1" inlet="shufflerate"/>
      </net>
      <net>
         <source obj="1_8" outlet="out"/>
         <dest obj="z_1" inlet="shufflerange"/>
      </net>
      <net>
         <source obj="+_3" outlet="out"/>
         <dest obj="vca_5" inlet="a"/>
      </net>
      <net>
         <source obj="vca_7" outlet="o"/>
         <dest obj="sum3_1" inlet="in3"/>
      </net>
      <net>
         <source obj="dial_36" outlet="out"/>
         <dest obj="*_2" inlet="a"/>
      </net>
      <net>
         <source obj="1_6" outlet="out"/>
         <dest obj="z_1" inlet="octavespeed"/>
      </net>
      <net>
         <source obj="toggle_2" outlet="o"/>
         <dest obj="and_1" inlet="i1"/>
         <dest obj="z_1" inlet="freeze"/>
      </net>
      <net>
         <source obj="toggle_5____tmp_" outlet="o"/>
         <dest obj="or_1" inlet="i1"/>
      </net>
      <net>
         <source obj="or_1" outlet="o"/>
         <dest obj="MikeWatt" inlet="freeze"/>
      </net>
      <net>
         <source obj="toggle_7" outlet="o"/>
         <dest obj="z_1" inlet="allgrains"/>
      </net>
      <net>
         <source obj="dial_34" outlet="out"/>
         <dest obj="z_1" inlet="reversegrain"/>
      </net>
      <net>
         <source obj="dial_39" outlet="out"/>
         <dest obj="z_1" inlet="pitchspray"/>
      </net>
      <net>
         <source obj="button_1" outlet="o"/>
         <dest obj="z_1" inlet="mutegrains"/>
      </net>
      <net>
         <source obj="+_1" outlet="out"/>
         <dest obj="hp_2" inlet="in"/>
      </net>
      <net>
         <source obj="vca_8" outlet="o"/>
         <dest obj="vca_7" inlet="a"/>
         <dest obj="+_1" inlet="in2"/>
      </net>
      <net>
         <source obj="vca_9" outlet="o"/>
         <dest obj="+_3" inlet="in2"/>
      </net>
      <net>
         <source obj="dial_5" outlet="out"/>
         <dest obj="vca_9" inlet="v"/>
         <dest obj="*_2" inlet="b"/>
      </net>
      <net>
         <source obj="*_2" outlet="result"/>
         <dest obj="vca_7" inlet="v"/>
      </net>
      <net>
         <source obj="x_1" outlet="kbeat"/>
         <dest obj="&lt;&lt;_4" inlet="in"/>
      </net>
      <net>
         <source obj="x_1" outlet="start"/>
         <dest obj="simple_1" inlet="trig"/>
      </net>
      <net>
         <source obj="i_12" outlet="out"/>
         <dest obj="x_1" inlet="bpm"/>
      </net>
      <net>
         <source obj="x_1" outlet="bpm"/>
         <dest obj="i_3" inlet="in"/>
      </net>
      <net>
         <source obj="&lt;&lt;_4" outlet="out"/>
         <dest obj="simple_1" inlet="length"/>
      </net>
      <net>
         <source obj="i_16" outlet="out"/>
         <dest obj="simple_1" inlet="wave"/>
      </net>
      <net>
         <source obj="x_1" outlet="ppq"/>
         <dest obj="MikeWatt" inlet="ppq"/>
      </net>
      <net>
         <source obj="x_1" outlet="sbeat"/>
         <dest obj="MikeWatt" inlet="sbeat"/>
      </net>
      <net>
         <source obj="button_15" outlet="o"/>
         <dest obj="z_1" inlet="resyncgrain"/>
      </net>
      <net>
         <source obj="i_17" outlet="out"/>
         <dest obj="z_1" inlet="densityrange"/>
      </net>
      <net>
         <source obj="interp_1" outlet="o"/>
         <dest obj="z_1" inlet="timemod"/>
      </net>
      <net>
         <source obj="interp_2" outlet="o"/>
         <dest obj="z_1" inlet="buffermod"/>
      </net>
      <net>
         <source obj="smooth_2" outlet="out"/>
         <dest obj="*_3" inlet="b"/>
         <dest obj="*_4" inlet="b"/>
         <dest obj="*_5" inlet="b"/>
      </net>
      <net>
         <source obj="*_3" outlet="result"/>
         <dest obj="interp_1" inlet="i"/>
      </net>
      <net>
         <source obj="*_5" outlet="result"/>
         <dest obj="interp_2" inlet="i"/>
      </net>
      <net>
         <source obj="*_4" outlet="result"/>
         <dest obj="interp_3" inlet="i"/>
      </net>
      <net>
         <source obj="interp_3" outlet="o"/>
         <dest obj="z_1" inlet="grainechomod"/>
      </net>
      <net>
         <source obj="toggle_5" outlet="o"/>
         <dest obj="z_1" inlet="stretchsyncmode"/>
      </net>
      <net>
         <source obj="toggle_3" outlet="o"/>
         <dest obj="z_1" inlet="stretchsynctrigger"/>
      </net>
      <net>
         <source obj="smooth_7" outlet="out"/>
         <dest obj="interp_4" inlet="i"/>
      </net>
      <net>
         <source obj="toggle_8" outlet="o"/>
         <dest obj="z_1" inlet="lofi"/>
      </net>
      <net>
         <source obj="button_11" outlet="o"/>
         <dest obj="x_1" inlet="tap"/>
      </net>
      <net>
         <source obj="button_12" outlet="o"/>
         <dest obj="x_1" inlet="midirevert"/>
      </net>
      <net>
         <source obj="1_12" outlet="out"/>
         <dest obj="smooth_1" inlet="in"/>
      </net>
      <net>
         <source obj="1_11" outlet="out"/>
         <dest obj="smooth_3" inlet="in"/>
      </net>
      <net>
         <source obj="1_10" outlet="out"/>
         <dest obj="smooth_4" inlet="in"/>
      </net>
      <net>
         <source obj="smooth_1" outlet="out"/>
         <dest obj="*_3" inlet="a"/>
      </net>
      <net>
         <source obj="simple_1" outlet="out"/>
         <dest obj="smooth_2" inlet="in"/>
      </net>
      <net>
         <source obj="1_5" outlet="out"/>
         <dest obj="simple_1" inlet="time"/>
      </net>
      <net>
         <source obj="smooth_3" outlet="out"/>
         <dest obj="*_4" inlet="a"/>
      </net>
      <net>
         <source obj="smooth_4" outlet="out"/>
         <dest obj="*_5" inlet="a"/>
      </net>
      <net>
         <source obj="z_1" outlet="grainlength"/>
         <dest obj="i_2" inlet="in"/>
      </net>
      <net>
         <source obj="i_4" outlet="out"/>
         <dest obj="z_1" inlet="octmode"/>
      </net>
      <net>
         <source obj="vca_11" outlet="o"/>
         <dest obj="vca_6" inlet="a"/>
         <dest obj="+_3" inlet="in1"/>
         <dest obj="+_1" inlet="in1"/>
      </net>
      <net>
         <source obj="dial_23" outlet="out"/>
         <dest obj="z_1" inlet="shape"/>
      </net>
      <net>
         <source obj="z_1" outlet="activeplayers"/>
         <dest obj="object_1" inlet="activeplayers"/>
      </net>
      <net>
         <source obj="object_1" outlet="attenuateB"/>
         <dest obj="smooth_5" inlet="in"/>
      </net>
      <net>
         <source obj="comp_1" outlet="out"/>
         <dest obj="*_1" inlet="b"/>
      </net>
      <net>
         <source obj="follower_1" outlet="amp"/>
         <dest obj="gain_1" inlet="in"/>
      </net>
      <net>
         <source obj="gain_1" outlet="out"/>
         <dest obj="comp_1" inlet="in"/>
      </net>
      <net>
         <source obj="*_1" outlet="result"/>
         <dest obj="vca_11" inlet="v"/>
         <dest obj="dial_4" inlet="in"/>
      </net>
      <net>
         <source obj="smooth_5" outlet="out"/>
         <dest obj="*_1" inlet="a"/>
      </net>
      <net>
         <source obj="crossfade_2" outlet="wet"/>
         <dest obj="*_6" inlet="a"/>
      </net>
      <net>
         <source obj="*_6" outlet="result"/>
         <dest obj="vca_5" inlet="v"/>
      </net>
      <net>
         <source obj="dial_8" outlet="out"/>
         <dest obj="*_6" inlet="b"/>
      </net>
      <net>
         <source obj="and_1" outlet="o"/>
         <dest obj="or_1" inlet="i2"/>
      </net>
      <net>
         <source obj="toggle_1" outlet="o"/>
         <dest obj="and_1" inlet="i2"/>
      </net>
      <net>
         <source obj="interp_4" outlet="o"/>
         <dest obj="z_1" inlet="freezepos"/>
      </net>
      <net>
         <source obj="1_1" outlet="out"/>
         <dest obj="z_1" inlet="freezesize"/>
      </net>
      <net>
         <source obj="interp_5" outlet="o"/>
         <dest obj="z_1" inlet="freezescrub"/>
      </net>
      <net>
         <source obj="smooth_6" outlet="out"/>
         <dest obj="interp_5" inlet="i"/>
      </net>
      <net>
         <source obj="i_6" outlet="out"/>
         <dest obj="z_1" inlet="scrubamount"/>
      </net>
      <net>
         <source obj="dial_20" outlet="out"/>
         <dest obj="smooth_6" inlet="in"/>
      </net>
      <net>
         <source obj="dial_16" outlet="out"/>
         <dest obj="smooth_7" inlet="in"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>-8</x>
      <y>-8</y>
      <width>1616</width>
      <height>876</height>
   </windowPos>
</patch-1.0>