<patch-1.0 appVersion="1.0.11">
   <patcher type="patch/patcher" uuid="aee5e624-c7f3-4e12-91fc-5f55176877a5" name="patcher_1" x="686" y="42">
      <params>
         <frac32.s.map name="wavetable_1:pitch" value="-0.19999980926513672"/>
         <bool32.tgl name="wavetable_1:xfade" value="0"/>
         <frac32.s.map name="adsr_1:a" value="39.0"/>
         <frac32.s.map name="adsr_1:d" value="51.0"/>
         <frac32.u.map name="adsr_1:s" value="54.5"/>
         <frac32.s.map name="adsr_1:r" value="15.0"/>
         <frac32.u.map name="vel01" value="48.5"/>
         <frac32.s.map name="wavetable_2:pitch" value="0.0"/>
         <bool32.tgl name="wavetable_2:xfade" value="0"/>
         <frac32.s.map name="adsr_2:a" value="57.0"/>
         <frac32.s.map name="adsr_2:d" value="24.0"/>
         <frac32.u.map name="adsr_2:s" value="14.0"/>
         <frac32.s.map name="adsr_2:r" value="20.0"/>
         <frac32.u.map name="vel02" value="64.0"/>
         <frac32.s.map name="wavetable_3:pitch" value="-12.0"/>
         <bool32.tgl name="wavetable_3:xfade" value="0"/>
         <frac32.s.map name="adsr_3:a" value="-54.0"/>
         <frac32.s.map name="adsr_3:d" value="22.0"/>
         <frac32.u.map name="adsr_3:s" value="64.0"/>
         <frac32.s.map name="adsr_3:r" value="37.0"/>
         <frac32.u.map name="vel03" value="58.0"/>
         <frac32.u.map name="mix_2:gain1" value="28.0"/>
         <frac32.u.map name="mix_2:gain2" value="0.0"/>
         <frac32.u.map name="mix_2:gain3" value="43.5"/>
         <frac32.u.map name="mix_2:gain4" value="7.5"/>
         <frac32.u.map name="mix_2:gain5" value="9.5"/>
         <frac32.u.map name="mix_2:gain6" value="30.0"/>
         <frac32.s.map name="vcf3_1:pitch" value="-30.0"/>
         <frac32.u.map name="vcf3_1:reso" value="39.0"/>
         <frac32.s.map name="adsr_4:a" value="-29.0"/>
         <frac32.s.map name="adsr_4:d" value="26.0"/>
         <frac32.u.map name="adsr_4:s" value="43.0"/>
         <frac32.s.map name="adsr_4:r" value="63.0"/>
         <frac32.u.map name="vel_vol" value="38.5"/>
         <frac32.u.map name="mix_1:gain1" value="26.5"/>
         <frac32.u.map name="mix_1:gain2" value="16.0"/>
         <frac32.u.map name="mix_1:gain3" value="47.5"/>
      </params>
      <attribs>
         <combo attributeName="poly" selection="8"/>
         <combo attributeName="midichannel" selection="inherit"/>
         <combo attributeName="mididevice" selection="omni"/>
         <combo attributeName="midiport" selection="omni"/>
      </attribs>
      <subpatch appVersion="1.0.11">
         <obj type="patch/inlet a" uuid="b577fe41e0a6bc7b5502ce33cb8a3129e2e28ee5" name="inlet_1" x="14" y="0">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/inlet a" uuid="b577fe41e0a6bc7b5502ce33cb8a3129e2e28ee5" name="inlet_2" x="84" y="0">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/inlet a" uuid="b577fe41e0a6bc7b5502ce33cb8a3129e2e28ee5" name="inlet_3" x="154" y="0">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/inlet f" uuid="5c585d2dcd9c05631e345ac09626a22a639d7c13" name="waveindex" x="224" y="0">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/inlet f" uuid="5c585d2dcd9c05631e345ac09626a22a639d7c13" name="waveindex2" x="294" y="0">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/inlet f" uuid="5c585d2dcd9c05631e345ac09626a22a639d7c13" name="waveindex3" x="378" y="0">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/inlet f" uuid="5c585d2dcd9c05631e345ac09626a22a639d7c13" name="pitchmod1" x="448" y="0">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/inlet f" uuid="5c585d2dcd9c05631e345ac09626a22a639d7c13" name="pitchmod2" x="518" y="0">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/inlet f" uuid="5c585d2dcd9c05631e345ac09626a22a639d7c13" name="pitchmod3" x="588" y="0">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/inlet f" uuid="5c585d2dcd9c05631e345ac09626a22a639d7c13" name="filtermod" x="686" y="0">
            <params/>
            <attribs/>
         </obj>
         <obj type="midi/in/bend" uuid="7bd8cace52a8c26ed61d80f65e238408d5d621f4" name="bend_1" x="14" y="42">
            <params/>
            <attribs/>
         </obj>
         <obj type="math/div 32" uuid="40e43d0d284fded6b6cfadd45a5cb69c8d713691" name="div_1" x="112" y="42">
            <params/>
            <attribs/>
         </obj>
         <obj type="math/+" uuid="44553fdc8628c67ab535845ed1be304ad6c9553b" name="+_1" x="224" y="42">
            <params/>
            <attribs/>
         </obj>
         <patchobj type="patch/object" uuid="e3f6cacb-8fb6-4d39-a055-e91716c582b1" name="wavetable_1" x="714" y="56">
            <params>
               <frac32.s.map name="pitch" onParent="true" value="0.0"/>
               <frac32.u.map name="windex" value="0.0"/>
               <bool32.tgl name="xfade" onParent="true" value="0"/>
            </params>
            <attribs>
               <objref attributeName="table" obj="../wt"/>
            </attribs>
            <object id="patch/object" uuid="e3f6cacb-8fb6-4d39-a055-e91716c582b1">
               <sDescription>play a wavetable, which has been loaded by  wave/wavetable load/
crossfade will fade beween waves. (~ double cpu load).
note: you can use as a single wave oscillator by just loadng 1 wave</sDescription>
               <author>Mark Harris</author>
               <license>GPL</license>
               <helpPatch>wavetable.axh</helpPatch>
               <inlets>
                  <frac32.bipolar name="pitch" description="pitch "/>
                  <frac32.positive name="windex" description="wave index"/>
                  <frac32buffer name="freq" description="frequency"/>
               </inlets>
               <outlets>
                  <frac32buffer name="o" description="wave"/>
               </outlets>
               <displays/>
               <params>
                  <frac32.s.map.pitch name="pitch" description="pitch" noLabel="true"/>
                  <frac32.u.map name="windex" description="wavetable index"/>
                  <bool32.tgl name="xfade" description="crossfade between waves"/>
               </params>
               <attribs>
                  <objref name="table" description="wavetable load object"/>
               </attribs>
               <includes/>
               <code.declaration><![CDATA[uint32_t phase;
uint32_t lastPhase;
uint32_t WAVESMASK,WAVESZ;

uint32_t wt1, new_wt1;
uint32_t wt2, new_wt2;
uint32_t mwt, new_mwt;
uint32_t cwt, new_cwt;
uint32_t wt1m, new_wt1m;
uint32_t wt2m, new_wt2m;]]></code.declaration>
               <code.init><![CDATA[WAVESMASK = (~ (( 1 << (21 - (attr_table.WAVESPOW - 6) ) ) - 1));
WAVESZ = (1 << (21 - (attr_table.WAVESPOW - 6)));

phase=0;
lastPhase = 1 << 31;
new_wt1 = 0;
new_wt2 = 0;
new_wt1m = (1 << attr_table.SIZEPOW ) - 1;
new_wt2m = (1 << attr_table.SIZEPOW ) - 1;
new_mwt = 0;
new_cwt = 64 << 21;

wt1 = new_wt1; 
wt2 = new_wt2; 
mwt = new_mwt; 
cwt = new_cwt; 
wt1m = new_wt1m; 
wt2m = new_wt2m;]]></code.init>
               <code.krate><![CDATA[uint32_t freq;
MTOFEXTENDED(param_pitch + inlet_pitch,freq);

uint32_t w =inlet_windex + param_windex;
w = w > (64 << 21) ? (64<<21) - (w - (64<<21)) : w;



new_wt1 = w & WAVESMASK;
uint32_t wsi = __USAT(new_wt1,27) >> (27-attr_table.LENGTHPOW);
new_wt1m = (wsi + (1 << attr_table.SIZEPOW) ) -1 ;


if(param_xfade) {
	new_wt2 = new_wt1 + WAVESZ;

	if (new_wt2 >= (64 << 21)) {
		new_wt2 = new_wt1;
		new_mwt = 128 << 20;
		new_cwt = 0; 
		
	} else {
		uint32_t d  = w - (w & WAVESMASK);
		uint32_t dp  = d << attr_table.WAVESPOW ;
		new_mwt = ((128<<20) - dp);
		new_cwt = dp;
	}
	uint32_t wsi = __USAT(new_wt2,27) >> (27-attr_table.LENGTHPOW);
	new_wt2m = (wsi + (1 << attr_table.SIZEPOW) ) -1 ;
}]]></code.krate>
               <code.srate><![CDATA[//phasor
int32_t phasor;
phase += (freq>>0) + inlet_freq;
phasor= phase>>5;

//trig at new cycle
if(lastPhase > phase) {
	wt1 = new_wt1; 
	wt2 = new_wt2; 
	wt1m = new_wt1m; 
	wt2m = new_wt2m; 
	mwt = new_mwt; 
	cwt = new_cwt; 
}
lastPhase = phase;

//div number of entries
phasor = phasor >> attr_table.WAVESPOW;


//read interp - wt1
int32_t swt1;
{
uint32_t asat = __USAT(phasor + wt1,27);
int index = asat >> (27-attr_table.LENGTHPOW);
int32_t y1 = attr_table.array[index] << attr_table.GAIN;
int32_t y2 = attr_table.array[(index+1) & wt1m] << attr_table.GAIN;
int frac = (asat - (index << (27 - attr_table.LENGTHPOW))) << (attr_table.LENGTHPOW + 3);
swt1 = ___SMMUL(y1,(1 << 30) - frac);
swt1 = ___SMMLA(y2,frac,swt1);
}

if(param_xfade) {
	int32_t swt2;

	// read interp wt2
	uint32_t asat = __USAT(phasor + wt2,27);
	int index = asat >> (27-attr_table.LENGTHPOW);
	int32_t y1 = attr_table.array[index] << attr_table.GAIN;
	int32_t y2 = attr_table.array[(index+1) & wt2m] << attr_table.GAIN;
	int frac = (asat - (index << (27 - attr_table.LENGTHPOW))) << (attr_table.LENGTHPOW + 3);
	swt2 = ___SMMUL(y1,(1 << 30) - frac);
	swt2 = ___SMMLA(y2,frac,swt2);

	//xfade between swt1 swt2
     int64_t a = (int64_t)swt2 * cwt;
     a += (int64_t)swt1 * mwt;
     outlet_o= a >> (27 - 2);
}
else {
	outlet_o = swt1 << 2;	
}]]></code.srate>
            </object>
         </patchobj>
         <obj type="env/adsr" uuid="d1dbcc5fa6f87b98a6a91c87fd44acee5e690bac" name="adsr_1" x="854" y="56">
            <params>
               <frac32.s.map name="a" onParent="true" value="0.0"/>
               <frac32.s.map name="d" onParent="true" value="0.0"/>
               <frac32.u.map name="s" onParent="true" value="0.0"/>
               <frac32.s.map name="r" onParent="true" value="0.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="vel01" x="966" y="56">
            <params>
               <frac32.u.map name="amp" onParent="true" value="64.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="math/+" uuid="44553fdc8628c67ab535845ed1be304ad6c9553b" name="+_2" x="1134" y="56">
            <params/>
            <attribs/>
         </obj>
         <obj type="midi/in/keyb" uuid="53b04874696932f38aceaa168bd5d9efb743716d" name="keyb_1" x="14" y="98">
            <params/>
            <attribs/>
         </obj>
         <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_1" x="1120" y="126">
            <params/>
            <attribs/>
         </obj>
         <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_1" x="1204" y="182">
            <params/>
            <attribs/>
         </obj>
         <obj type="conv/unipolar2bipolar" uuid="efc8ee28c508740c5edf7995eaaa07a6d6818e5e" name="unipolar2bipolar_2" x="1078" y="308">
            <params/>
            <attribs/>
         </obj>
         <obj type="conv/unipolar2bipolar" uuid="efc8ee28c508740c5edf7995eaaa07a6d6818e5e" name="unipolar2bipolar_5" x="994" y="378">
            <params/>
            <attribs/>
         </obj>
         <obj type="math/+" uuid="44553fdc8628c67ab535845ed1be304ad6c9553b" name="+_3" x="112" y="490">
            <params/>
            <attribs/>
         </obj>
         <patchobj type="patch/object" uuid="613a50e7-68c7-48b4-884a-5f467543d6b7" name="wavetable_2" x="196" y="490">
            <params>
               <frac32.s.map name="pitch" onParent="true" value="0.0"/>
               <frac32.u.map name="windex" value="0.0"/>
               <bool32.tgl name="xfade" onParent="true" value="0"/>
            </params>
            <attribs>
               <objref attributeName="table" obj="../wt"/>
            </attribs>
            <object id="patch/object" uuid="613a50e7-68c7-48b4-884a-5f467543d6b7">
               <sDescription>play a wavetable, which has been loaded by  wave/wavetable load/
crossfade will fade beween waves. (~ double cpu load).
note: you can use as a single wave oscillator by just loadng 1 wave</sDescription>
               <author>Mark Harris</author>
               <license>GPL</license>
               <helpPatch>wavetable.axh</helpPatch>
               <inlets>
                  <frac32.bipolar name="pitch" description="pitch "/>
                  <frac32.positive name="windex" description="wave index"/>
                  <frac32buffer name="freq" description="frequency"/>
               </inlets>
               <outlets>
                  <frac32buffer name="o" description="wave"/>
               </outlets>
               <displays/>
               <params>
                  <frac32.s.map.pitch name="pitch" description="pitch" noLabel="true"/>
                  <frac32.u.map name="windex" description="wavetable index"/>
                  <bool32.tgl name="xfade" description="crossfade between waves"/>
               </params>
               <attribs>
                  <objref name="table" description="wavetable load object"/>
               </attribs>
               <includes/>
               <code.declaration><![CDATA[uint32_t phase;
uint32_t lastPhase;
uint32_t WAVESMASK,WAVESZ;

uint32_t wt1, new_wt1;
uint32_t wt2, new_wt2;
uint32_t mwt, new_mwt;
uint32_t cwt, new_cwt;
uint32_t wt1m, new_wt1m;
uint32_t wt2m, new_wt2m;]]></code.declaration>
               <code.init><![CDATA[WAVESMASK = (~ (( 1 << (21 - (attr_table.WAVESPOW - 6) ) ) - 1));
WAVESZ = (1 << (21 - (attr_table.WAVESPOW - 6)));

phase=0;
lastPhase = 1 << 31;
new_wt1 = 0;
new_wt2 = 0;
new_wt1m = (1 << attr_table.SIZEPOW ) - 1;
new_wt2m = (1 << attr_table.SIZEPOW ) - 1;
new_mwt = 0;
new_cwt = 64 << 21;

wt1 = new_wt1; 
wt2 = new_wt2; 
mwt = new_mwt; 
cwt = new_cwt; 
wt1m = new_wt1m; 
wt2m = new_wt2m;]]></code.init>
               <code.krate><![CDATA[uint32_t freq;
MTOFEXTENDED(param_pitch + inlet_pitch,freq);

uint32_t w =inlet_windex + param_windex;
w = w > (64 << 21) ? (64<<21) - (w - (64<<21)) : w;



new_wt1 = w & WAVESMASK;
uint32_t wsi = __USAT(new_wt1,27) >> (27-attr_table.LENGTHPOW);
new_wt1m = (wsi + (1 << attr_table.SIZEPOW) ) -1 ;


if(param_xfade) {
	new_wt2 = new_wt1 + WAVESZ;

	if (new_wt2 >= (64 << 21)) {
		new_wt2 = new_wt1;
		new_mwt = 128 << 20;
		new_cwt = 0; 
		
	} else {
		uint32_t d  = w - (w & WAVESMASK);
		uint32_t dp  = d << attr_table.WAVESPOW ;
		new_mwt = ((128<<20) - dp);
		new_cwt = dp;
	}
	uint32_t wsi = __USAT(new_wt2,27) >> (27-attr_table.LENGTHPOW);
	new_wt2m = (wsi + (1 << attr_table.SIZEPOW) ) -1 ;
}]]></code.krate>
               <code.srate><![CDATA[//phasor
int32_t phasor;
phase += (freq>>0) + inlet_freq;
phasor= phase>>5;

//trig at new cycle
if(lastPhase > phase) {
	wt1 = new_wt1; 
	wt2 = new_wt2; 
	wt1m = new_wt1m; 
	wt2m = new_wt2m; 
	mwt = new_mwt; 
	cwt = new_cwt; 
}
lastPhase = phase;

//div number of entries
phasor = phasor >> attr_table.WAVESPOW;


//read interp - wt1
int32_t swt1;
{
uint32_t asat = __USAT(phasor + wt1,27);
int index = asat >> (27-attr_table.LENGTHPOW);
int32_t y1 = attr_table.array[index] << attr_table.GAIN;
int32_t y2 = attr_table.array[(index+1) & wt1m] << attr_table.GAIN;
int frac = (asat - (index << (27 - attr_table.LENGTHPOW))) << (attr_table.LENGTHPOW + 3);
swt1 = ___SMMUL(y1,(1 << 30) - frac);
swt1 = ___SMMLA(y2,frac,swt1);
}

if(param_xfade) {
	int32_t swt2;

	// read interp wt2
	uint32_t asat = __USAT(phasor + wt2,27);
	int index = asat >> (27-attr_table.LENGTHPOW);
	int32_t y1 = attr_table.array[index] << attr_table.GAIN;
	int32_t y2 = attr_table.array[(index+1) & wt2m] << attr_table.GAIN;
	int frac = (asat - (index << (27 - attr_table.LENGTHPOW))) << (attr_table.LENGTHPOW + 3);
	swt2 = ___SMMUL(y1,(1 << 30) - frac);
	swt2 = ___SMMLA(y2,frac,swt2);

	//xfade between swt1 swt2
     int64_t a = (int64_t)swt2 * cwt;
     a += (int64_t)swt1 * mwt;
     outlet_o= a >> (27 - 2);
}
else {
	outlet_o = swt1 << 2;	
}]]></code.srate>
            </object>
         </patchobj>
         <obj type="env/adsr" uuid="d1dbcc5fa6f87b98a6a91c87fd44acee5e690bac" name="adsr_2" x="322" y="490">
            <params>
               <frac32.s.map name="a" onParent="true" value="0.0"/>
               <frac32.s.map name="d" onParent="true" value="0.0"/>
               <frac32.u.map name="s" onParent="true" value="0.0"/>
               <frac32.s.map name="r" onParent="true" value="0.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="vel02" x="434" y="490">
            <params>
               <frac32.u.map name="amp" onParent="true" value="64.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_2" x="546" y="490">
            <params/>
            <attribs/>
         </obj>
         <obj type="math/+" uuid="44553fdc8628c67ab535845ed1be304ad6c9553b" name="+_4" x="728" y="490">
            <params/>
            <attribs/>
         </obj>
         <patchobj type="patch/object" uuid="778e124d-04e2-4681-9c74-0c4eec588a1a" name="wavetable_3" x="812" y="490">
            <params>
               <frac32.s.map name="pitch" onParent="true" value="0.0"/>
               <frac32.u.map name="windex" value="0.0"/>
               <bool32.tgl name="xfade" onParent="true" value="0"/>
            </params>
            <attribs>
               <objref attributeName="table" obj="../wt"/>
            </attribs>
            <object id="patch/object" uuid="778e124d-04e2-4681-9c74-0c4eec588a1a">
               <sDescription>play a wavetable, which has been loaded by  wave/wavetable load/
crossfade will fade beween waves. (~ double cpu load).
note: you can use as a single wave oscillator by just loadng 1 wave</sDescription>
               <author>Mark Harris</author>
               <license>GPL</license>
               <helpPatch>wavetable.axh</helpPatch>
               <inlets>
                  <frac32.bipolar name="pitch" description="pitch "/>
                  <frac32.positive name="windex" description="wave index"/>
                  <frac32buffer name="freq" description="frequency"/>
               </inlets>
               <outlets>
                  <frac32buffer name="o" description="wave"/>
               </outlets>
               <displays/>
               <params>
                  <frac32.s.map.pitch name="pitch" description="pitch" noLabel="true"/>
                  <frac32.u.map name="windex" description="wavetable index"/>
                  <bool32.tgl name="xfade" description="crossfade between waves"/>
               </params>
               <attribs>
                  <objref name="table" description="wavetable load object"/>
               </attribs>
               <includes/>
               <code.declaration><![CDATA[uint32_t phase;
uint32_t lastPhase;
uint32_t WAVESMASK,WAVESZ;

uint32_t wt1, new_wt1;
uint32_t wt2, new_wt2;
uint32_t mwt, new_mwt;
uint32_t cwt, new_cwt;
uint32_t wt1m, new_wt1m;
uint32_t wt2m, new_wt2m;]]></code.declaration>
               <code.init><![CDATA[WAVESMASK = (~ (( 1 << (21 - (attr_table.WAVESPOW - 6) ) ) - 1));
WAVESZ = (1 << (21 - (attr_table.WAVESPOW - 6)));

phase=0;
lastPhase = 1 << 31;
new_wt1 = 0;
new_wt2 = 0;
new_wt1m = (1 << attr_table.SIZEPOW ) - 1;
new_wt2m = (1 << attr_table.SIZEPOW ) - 1;
new_mwt = 0;
new_cwt = 64 << 21;

wt1 = new_wt1; 
wt2 = new_wt2; 
mwt = new_mwt; 
cwt = new_cwt; 
wt1m = new_wt1m; 
wt2m = new_wt2m;]]></code.init>
               <code.krate><![CDATA[uint32_t freq;
MTOFEXTENDED(param_pitch + inlet_pitch,freq);

uint32_t w =inlet_windex + param_windex;
w = w > (64 << 21) ? (64<<21) - (w - (64<<21)) : w;



new_wt1 = w & WAVESMASK;
uint32_t wsi = __USAT(new_wt1,27) >> (27-attr_table.LENGTHPOW);
new_wt1m = (wsi + (1 << attr_table.SIZEPOW) ) -1 ;


if(param_xfade) {
	new_wt2 = new_wt1 + WAVESZ;

	if (new_wt2 >= (64 << 21)) {
		new_wt2 = new_wt1;
		new_mwt = 128 << 20;
		new_cwt = 0; 
		
	} else {
		uint32_t d  = w - (w & WAVESMASK);
		uint32_t dp  = d << attr_table.WAVESPOW ;
		new_mwt = ((128<<20) - dp);
		new_cwt = dp;
	}
	uint32_t wsi = __USAT(new_wt2,27) >> (27-attr_table.LENGTHPOW);
	new_wt2m = (wsi + (1 << attr_table.SIZEPOW) ) -1 ;
}]]></code.krate>
               <code.srate><![CDATA[//phasor
int32_t phasor;
phase += (freq>>0) + inlet_freq;
phasor= phase>>5;

//trig at new cycle
if(lastPhase > phase) {
	wt1 = new_wt1; 
	wt2 = new_wt2; 
	wt1m = new_wt1m; 
	wt2m = new_wt2m; 
	mwt = new_mwt; 
	cwt = new_cwt; 
}
lastPhase = phase;

//div number of entries
phasor = phasor >> attr_table.WAVESPOW;


//read interp - wt1
int32_t swt1;
{
uint32_t asat = __USAT(phasor + wt1,27);
int index = asat >> (27-attr_table.LENGTHPOW);
int32_t y1 = attr_table.array[index] << attr_table.GAIN;
int32_t y2 = attr_table.array[(index+1) & wt1m] << attr_table.GAIN;
int frac = (asat - (index << (27 - attr_table.LENGTHPOW))) << (attr_table.LENGTHPOW + 3);
swt1 = ___SMMUL(y1,(1 << 30) - frac);
swt1 = ___SMMLA(y2,frac,swt1);
}

if(param_xfade) {
	int32_t swt2;

	// read interp wt2
	uint32_t asat = __USAT(phasor + wt2,27);
	int index = asat >> (27-attr_table.LENGTHPOW);
	int32_t y1 = attr_table.array[index] << attr_table.GAIN;
	int32_t y2 = attr_table.array[(index+1) & wt2m] << attr_table.GAIN;
	int frac = (asat - (index << (27 - attr_table.LENGTHPOW))) << (attr_table.LENGTHPOW + 3);
	swt2 = ___SMMUL(y1,(1 << 30) - frac);
	swt2 = ___SMMLA(y2,frac,swt2);

	//xfade between swt1 swt2
     int64_t a = (int64_t)swt2 * cwt;
     a += (int64_t)swt1 * mwt;
     outlet_o= a >> (27 - 2);
}
else {
	outlet_o = swt1 << 2;	
}]]></code.srate>
            </object>
         </patchobj>
         <obj type="env/adsr" uuid="d1dbcc5fa6f87b98a6a91c87fd44acee5e690bac" name="adsr_3" x="952" y="490">
            <params>
               <frac32.s.map name="a" onParent="true" value="0.0"/>
               <frac32.s.map name="d" onParent="true" value="0.0"/>
               <frac32.u.map name="s" onParent="true" value="0.0"/>
               <frac32.s.map name="r" onParent="true" value="0.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="vel03" x="1064" y="490">
            <params>
               <frac32.u.map name="amp" onParent="true" value="64.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_3" x="1176" y="490">
            <params/>
            <attribs/>
         </obj>
         <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_2" x="546" y="546">
            <params/>
            <attribs/>
         </obj>
         <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_3" x="1064" y="588">
            <params/>
            <attribs/>
         </obj>
         <obj type="conv/unipolar2bipolar" uuid="efc8ee28c508740c5edf7995eaaa07a6d6818e5e" name="unipolar2bipolar_3" x="434" y="616">
            <params/>
            <attribs/>
         </obj>
         <obj type="conv/unipolar2bipolar" uuid="efc8ee28c508740c5edf7995eaaa07a6d6818e5e" name="unipolar2bipolar_4" x="980" y="798">
            <params/>
            <attribs/>
         </obj>
         <obj type="mix/mix 6" uuid="99ad6c2e3b057339d0045ef1a025244b5a6d7adc" name="mix_2" x="42" y="966">
            <params>
               <frac32.u.map name="gain1" onParent="true" value="32.0"/>
               <frac32.u.map name="gain2" onParent="true" value="32.0"/>
               <frac32.u.map name="gain3" onParent="true" value="32.0"/>
               <frac32.u.map name="gain4" onParent="true" value="32.0"/>
               <frac32.u.map name="gain5" onParent="true" value="32.0"/>
               <frac32.u.map name="gain6" onParent="true" value="32.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="filter/vcf3" uuid="92455c652cd098cbb682a5497baa18abbf2ef865" name="vcf3_1" x="140" y="966">
            <params>
               <frac32.s.map name="pitch" onParent="true" value="0.0"/>
               <frac32.u.map name="reso" onParent="true" value="0.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="env/adsr" uuid="d1dbcc5fa6f87b98a6a91c87fd44acee5e690bac" name="adsr_4" x="308" y="966">
            <params>
               <frac32.s.map name="a" onParent="true" value="0.0"/>
               <frac32.s.map name="d" onParent="true" value="0.0"/>
               <frac32.u.map name="s" onParent="true" value="0.0"/>
               <frac32.s.map name="r" onParent="true" value="0.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="vel_vol" x="434" y="966">
            <params>
               <frac32.u.map name="amp" onParent="true" value="40.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="conv/unipolar2bipolar" uuid="efc8ee28c508740c5edf7995eaaa07a6d6818e5e" name="unipolar2bipolar_1" x="560" y="966">
            <params/>
            <attribs/>
         </obj>
         <obj type="mix/mix 3 g" uuid="efc0bdb8ca0ec2184330951eff5203ff487e35a9" name="mix_1" x="1106" y="980">
            <params>
               <frac32.u.map name="gain1" onParent="true" value="32.0"/>
               <frac32.u.map name="gain2" onParent="true" value="32.0"/>
               <frac32.u.map name="gain3" onParent="true" value="32.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_4" x="1456" y="1260">
            <params/>
            <attribs/>
         </obj>
         <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_4" x="1638" y="1316">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/outlet a" uuid="abd8c5fd3b0524a6630f65cad6dc27f6c58e2a3e" name="outlet_1" x="1778" y="1316">
            <params/>
            <attribs/>
         </obj>
         <obj type="spat/pan m" uuid="f6c6c0d7224841d9d76962e64d7f779d8194b7f9" name="pan_1" x="1694" y="1344">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/outlet a" uuid="abd8c5fd3b0524a6630f65cad6dc27f6c58e2a3e" name="outlet_2" x="1778" y="1372">
            <params/>
            <attribs/>
         </obj>
         <nets>
            <net>
               <source obj="adsr_1" outlet="env"/>
               <dest obj="*_1" inlet="a"/>
               <dest obj="unipolar2bipolar_2" inlet="i"/>
            </net>
            <net>
               <source obj="*_1" outlet="result"/>
               <dest obj="vca_1" inlet="v"/>
            </net>
            <net>
               <source obj="bend_1" outlet="bend"/>
               <dest obj="div_1" inlet="in"/>
            </net>
            <net>
               <source obj="div_1" outlet="out"/>
               <dest obj="+_1" inlet="in1"/>
            </net>
            <net>
               <source obj="keyb_1" outlet="note"/>
               <dest obj="+_1" inlet="in2"/>
               <dest obj="mix_2" inlet="in5"/>
               <dest obj="pan_1" inlet="c"/>
            </net>
            <net>
               <source obj="waveindex" outlet="inlet"/>
               <dest obj="wavetable_1" inlet="windex"/>
            </net>
            <net>
               <source obj="inlet_1" outlet="inlet"/>
               <dest obj="wavetable_1" inlet="freq"/>
            </net>
            <net>
               <source obj="+_2" outlet="out"/>
               <dest obj="wavetable_1" inlet="pitch"/>
            </net>
            <net>
               <source obj="+_1" outlet="out"/>
               <dest obj="+_2" inlet="in1"/>
               <dest obj="+_3" inlet="in1"/>
               <dest obj="+_4" inlet="in1"/>
            </net>
            <net>
               <source obj="wavetable_1" outlet="o"/>
               <dest obj="vca_1" inlet="a"/>
            </net>
            <net>
               <source obj="vca_1" outlet="o"/>
               <dest obj="mix_1" inlet="in1"/>
            </net>
            <net>
               <source obj="adsr_2" outlet="env"/>
               <dest obj="*_2" inlet="a"/>
               <dest obj="unipolar2bipolar_3" inlet="i"/>
            </net>
            <net>
               <source obj="*_2" outlet="result"/>
               <dest obj="vca_2" inlet="v"/>
            </net>
            <net>
               <source obj="+_3" outlet="out"/>
               <dest obj="wavetable_2" inlet="pitch"/>
            </net>
            <net>
               <source obj="wavetable_2" outlet="o"/>
               <dest obj="vca_2" inlet="a"/>
            </net>
            <net>
               <source obj="vca_2" outlet="o"/>
               <dest obj="mix_1" inlet="in2"/>
            </net>
            <net>
               <source obj="adsr_3" outlet="env"/>
               <dest obj="*_3" inlet="a"/>
               <dest obj="unipolar2bipolar_4" inlet="i"/>
            </net>
            <net>
               <source obj="*_3" outlet="result"/>
               <dest obj="vca_3" inlet="v"/>
            </net>
            <net>
               <source obj="+_4" outlet="out"/>
               <dest obj="wavetable_3" inlet="pitch"/>
            </net>
            <net>
               <source obj="wavetable_3" outlet="o"/>
               <dest obj="vca_3" inlet="a"/>
            </net>
            <net>
               <source obj="waveindex2" outlet="inlet"/>
               <dest obj="wavetable_2" inlet="windex"/>
            </net>
            <net>
               <source obj="inlet_2" outlet="inlet"/>
               <dest obj="wavetable_2" inlet="freq"/>
            </net>
            <net>
               <source obj="waveindex3" outlet="inlet"/>
               <dest obj="wavetable_3" inlet="windex"/>
            </net>
            <net>
               <source obj="inlet_3" outlet="inlet"/>
               <dest obj="wavetable_3" inlet="freq"/>
            </net>
            <net>
               <source obj="vel01" outlet="out"/>
               <dest obj="*_1" inlet="b"/>
            </net>
            <net>
               <source obj="keyb_1" outlet="velocity"/>
               <dest obj="vel01" inlet="in"/>
               <dest obj="vel02" inlet="in"/>
               <dest obj="vel03" inlet="in"/>
               <dest obj="vel_vol" inlet="in"/>
               <dest obj="unipolar2bipolar_5" inlet="i"/>
               <dest obj="mix_2" inlet="in6"/>
            </net>
            <net>
               <source obj="vel02" outlet="out"/>
               <dest obj="*_2" inlet="b"/>
            </net>
            <net>
               <source obj="vel03" outlet="out"/>
               <dest obj="*_3" inlet="b"/>
            </net>
            <net>
               <source obj="keyb_1" outlet="gate2"/>
               <dest obj="adsr_3" inlet="gate"/>
               <dest obj="adsr_1" inlet="gate"/>
               <dest obj="adsr_2" inlet="gate"/>
               <dest obj="adsr_4" inlet="gate"/>
            </net>
            <net>
               <source obj="vca_3" outlet="o"/>
               <dest obj="mix_1" inlet="in3"/>
            </net>
            <net>
               <source obj="mix_1" outlet="out"/>
               <dest obj="vcf3_1" inlet="in"/>
            </net>
            <net>
               <source obj="vcf3_1" outlet="out"/>
               <dest obj="vca_4" inlet="a"/>
            </net>
            <net>
               <source obj="vca_4" outlet="o"/>
               <dest obj="pan_1" inlet="i1"/>
            </net>
            <net>
               <source obj="pan_1" outlet="left"/>
               <dest obj="outlet_1" inlet="outlet"/>
            </net>
            <net>
               <source obj="pan_1" outlet="right"/>
               <dest obj="outlet_2" inlet="outlet"/>
            </net>
            <net>
               <source obj="adsr_4" outlet="env"/>
               <dest obj="*_4" inlet="a"/>
               <dest obj="unipolar2bipolar_1" inlet="i"/>
            </net>
            <net>
               <source obj="*_4" outlet="result"/>
               <dest obj="vca_4" inlet="v"/>
            </net>
            <net>
               <source obj="vel_vol" outlet="out"/>
               <dest obj="*_4" inlet="b"/>
            </net>
            <net>
               <source obj="pitchmod1" outlet="inlet"/>
               <dest obj="+_2" inlet="in2"/>
            </net>
            <net>
               <source obj="pitchmod2" outlet="inlet"/>
               <dest obj="+_3" inlet="in2"/>
            </net>
            <net>
               <source obj="pitchmod3" outlet="inlet"/>
               <dest obj="+_4" inlet="in2"/>
            </net>
            <net>
               <source obj="mix_2" outlet="out"/>
               <dest obj="vcf3_1" inlet="pitch"/>
            </net>
            <net>
               <source obj="unipolar2bipolar_2" outlet="o"/>
               <dest obj="mix_2" inlet="in1"/>
            </net>
            <net>
               <source obj="unipolar2bipolar_3" outlet="o"/>
               <dest obj="mix_2" inlet="in2"/>
            </net>
            <net>
               <source obj="unipolar2bipolar_4" outlet="o"/>
               <dest obj="mix_2" inlet="in3"/>
            </net>
            <net>
               <source obj="unipolar2bipolar_1" outlet="o"/>
               <dest obj="mix_2" inlet="in4"/>
            </net>
            <net>
               <source obj="filtermod" outlet="inlet"/>
               <dest obj="mix_2" inlet="bus_in"/>
            </net>
         </nets>
         <settings>
            <subpatchmode>polyphonic</subpatchmode>
            <MidiChannel>1</MidiChannel>
            <HasMidiChannelSelector>true</HasMidiChannelSelector>
            <NPresets>8</NPresets>
            <NPresetEntries>32</NPresetEntries>
            <NModulationSources>8</NModulationSources>
            <NModulationTargetsPerSource>8</NModulationTargetsPerSource>
            <Saturate>false</Saturate>
         </settings>
         <notes><![CDATA[]]></notes>
         <windowPos>
            <x>-8</x>
            <y>-8</y>
            <width>1936</width>
            <height>1096</height>
         </windowPos>
      </subpatch>
   </patcher>
   <obj type="tb/wave/wavetable load" uuid="79be5e1d-3c11-489e-9cae-5c2e69d60ddc" name="wt" x="322" y="56">
      <params/>
      <attribs>
         <combo attributeName="waves" selection="128"/>
         <combo attributeName="size" selection="1024"/>
         <file attributeName="filename" file="..\..\WaveTables\Big128_1024.raw"/>
      </attribs>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_1" x="308" y="154">
      <params>
         <frac32.u.map name="value" value="26.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_2" x="308" y="252">
      <params>
         <frac32.u.map name="value" value="49.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_3" x="308" y="350">
      <params>
         <frac32.u.map name="value" value="30.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="52430494-7b27-426a-8789-12563b4e6865" name="multi_wave_1" x="70" y="462">
      <params>
         <frac32.s.map name="pitch" value="-49.0"/>
         <frac32.u.map name="pw" value="0.0"/>
         <frac32.s.map name="amp" value="10.0"/>
         <bool32.tgl name="unipolar" value="0"/>
         <int32 name="wave" value="1"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="52430494-7b27-426a-8789-12563b4e6865">
         <sDescription>LFO, bipolar, multi wave</sDescription>
         <author>Are Leistad</author>
         <license>BSD</license>
         <inlets>
            <frac32.bipolar name="pitch" description="Pitch input"/>
         </inlets>
         <outlets>
            <frac32 name="out" description="Output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.lfopitch name="pitch" description="Pitch" noLabel="false"/>
            <frac32.u.map.ratio name="pw" description="Pulse width" noLabel="false"/>
            <frac32.s.map name="amp" description="Amplitude" noLabel="false"/>
            <bool32.tgl name="unipolar" description="Unipolar output" noLabel="false"/>
            <int32 name="wave" description="1-5 = tri, sine, saw+, saw-, square" noLabel="false">
               <MinValue i="1"/>
               <MaxValue i="5"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[

      uint32_t phase;
      int32_t  old_reset;

     __attribute__( ( always_inline ) ) __STATIC_INLINE int32_t ___ABS (int32_t op1 )
      {
        int32_t result;
        __ASM volatile ( "movs  %0, %1\n"
                         "it    mi\n"
                         "rsbmi %0, %0, #0"
                         : "=r" (result)
                         : "r" (op1)
                       );
        return(result);
      };

    ]]></code.declaration>
         <code.init><![CDATA[

      phase = 0;
      old_reset = 0;

    ]]></code.init>
         <code.krate><![CDATA[

      int32_t pitch;
      pitch = param_pitch + inlet_pitch;
      if( pitch > 0x07FFFFFF )
        pitch = 0x07FFFFFF;
      MTOFEXTENDED( pitch, pitch );
      phase += pitch>>2;

      uint32_t phase1 = phase;

      switch( param_wave )
        {
          case 1 :
            // Triangle
            outlet_out  = (phase1>>4) - (1<<27);
            outlet_out  = (1<<27) - ___ABS(outlet_out);
            break;

          case 2 :
            // Sine
            SINE2TINTERP( phase1, outlet_out )
            outlet_out = (outlet_out>>5) + (1<<26);
            break;

          case 3 :
            // Saw rising
            outlet_out  = (phase1>>5);
            break;

          case 4 :
            // Saw falling
            outlet_out  = (1<<27) - (phase1>>5);
            break;

          case 5 :
            // Square
            {
              if( (phase1>>5) > param_pw )
                {
                  outlet_out = 0;
                }
              else
                {
                  outlet_out = (1<<27)-1;
                }
            }
            break;
        }

      if( !param_unipolar )
        {
          outlet_out = (outlet_out<<1) - (1<<27);
        }

     outlet_out = ___SMMUL( param_amp << 3, outlet_out << 2 );

    ]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="9b45d76e-4483-48e5-8773-27ff3998a7d6" name="multi_wave_2" x="196" y="462">
      <params>
         <frac32.s.map name="pitch" value="22.0"/>
         <frac32.u.map name="pw" value="0.0"/>
         <frac32.s.map name="amp" value="0.09999990463256836"/>
         <bool32.tgl name="unipolar" value="0"/>
         <int32 name="wave" value="1"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="9b45d76e-4483-48e5-8773-27ff3998a7d6">
         <sDescription>LFO, bipolar, multi wave</sDescription>
         <author>Are Leistad</author>
         <license>BSD</license>
         <inlets>
            <frac32.bipolar name="pitch" description="Pitch input"/>
         </inlets>
         <outlets>
            <frac32 name="out" description="Output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.lfopitch name="pitch" description="Pitch" noLabel="false"/>
            <frac32.u.map.ratio name="pw" description="Pulse width" noLabel="false"/>
            <frac32.s.map name="amp" description="Amplitude" noLabel="false"/>
            <bool32.tgl name="unipolar" description="Unipolar output" noLabel="false"/>
            <int32 name="wave" description="1-5 = tri, sine, saw+, saw-, square" noLabel="false">
               <MinValue i="1"/>
               <MaxValue i="5"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[

      uint32_t phase;
      int32_t  old_reset;

     __attribute__( ( always_inline ) ) __STATIC_INLINE int32_t ___ABS (int32_t op1 )
      {
        int32_t result;
        __ASM volatile ( "movs  %0, %1\n"
                         "it    mi\n"
                         "rsbmi %0, %0, #0"
                         : "=r" (result)
                         : "r" (op1)
                       );
        return(result);
      };

    ]]></code.declaration>
         <code.init><![CDATA[

      phase = 0;
      old_reset = 0;

    ]]></code.init>
         <code.krate><![CDATA[

      int32_t pitch;
      pitch = param_pitch + inlet_pitch;
      if( pitch > 0x07FFFFFF )
        pitch = 0x07FFFFFF;
      MTOFEXTENDED( pitch, pitch );
      phase += pitch>>2;

      uint32_t phase1 = phase;

      switch( param_wave )
        {
          case 1 :
            // Triangle
            outlet_out  = (phase1>>4) - (1<<27);
            outlet_out  = (1<<27) - ___ABS(outlet_out);
            break;

          case 2 :
            // Sine
            SINE2TINTERP( phase1, outlet_out )
            outlet_out = (outlet_out>>5) + (1<<26);
            break;

          case 3 :
            // Saw rising
            outlet_out  = (phase1>>5);
            break;

          case 4 :
            // Saw falling
            outlet_out  = (1<<27) - (phase1>>5);
            break;

          case 5 :
            // Square
            {
              if( (phase1>>5) > param_pw )
                {
                  outlet_out = 0;
                }
              else
                {
                  outlet_out = (1<<27)-1;
                }
            }
            break;
        }

      if( !param_unipolar )
        {
          outlet_out = (outlet_out<<1) - (1<<27);
        }

     outlet_out = ___SMMUL( param_amp << 3, outlet_out << 2 );

    ]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="0bf171d8-c8c7-437e-978f-6ad5d1695a41" name="multi_wave_3" x="322" y="462">
      <params>
         <frac32.s.map name="pitch" value="12.0"/>
         <frac32.u.map name="pw" value="34.5"/>
         <frac32.s.map name="amp" value="-12.0"/>
         <bool32.tgl name="unipolar" value="0"/>
         <int32 name="wave" value="5"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="0bf171d8-c8c7-437e-978f-6ad5d1695a41">
         <sDescription>LFO, bipolar, multi wave</sDescription>
         <author>Are Leistad</author>
         <license>BSD</license>
         <inlets>
            <frac32.bipolar name="pitch" description="Pitch input"/>
         </inlets>
         <outlets>
            <frac32 name="out" description="Output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.lfopitch name="pitch" description="Pitch" noLabel="false"/>
            <frac32.u.map.ratio name="pw" description="Pulse width" noLabel="false"/>
            <frac32.s.map name="amp" description="Amplitude" noLabel="false"/>
            <bool32.tgl name="unipolar" description="Unipolar output" noLabel="false"/>
            <int32 name="wave" description="1-5 = tri, sine, saw+, saw-, square" noLabel="false">
               <MinValue i="1"/>
               <MaxValue i="5"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[

      uint32_t phase;
      int32_t  old_reset;

     __attribute__( ( always_inline ) ) __STATIC_INLINE int32_t ___ABS (int32_t op1 )
      {
        int32_t result;
        __ASM volatile ( "movs  %0, %1\n"
                         "it    mi\n"
                         "rsbmi %0, %0, #0"
                         : "=r" (result)
                         : "r" (op1)
                       );
        return(result);
      };

    ]]></code.declaration>
         <code.init><![CDATA[

      phase = 0;
      old_reset = 0;

    ]]></code.init>
         <code.krate><![CDATA[

      int32_t pitch;
      pitch = param_pitch + inlet_pitch;
      if( pitch > 0x07FFFFFF )
        pitch = 0x07FFFFFF;
      MTOFEXTENDED( pitch, pitch );
      phase += pitch>>2;

      uint32_t phase1 = phase;

      switch( param_wave )
        {
          case 1 :
            // Triangle
            outlet_out  = (phase1>>4) - (1<<27);
            outlet_out  = (1<<27) - ___ABS(outlet_out);
            break;

          case 2 :
            // Sine
            SINE2TINTERP( phase1, outlet_out )
            outlet_out = (outlet_out>>5) + (1<<26);
            break;

          case 3 :
            // Saw rising
            outlet_out  = (phase1>>5);
            break;

          case 4 :
            // Saw falling
            outlet_out  = (1<<27) - (phase1>>5);
            break;

          case 5 :
            // Square
            {
              if( (phase1>>5) > param_pw )
                {
                  outlet_out = 0;
                }
              else
                {
                  outlet_out = (1<<27)-1;
                }
            }
            break;
        }

      if( !param_unipolar )
        {
          outlet_out = (outlet_out<<1) - (1<<27);
        }

     outlet_out = ___SMMUL( param_amp << 3, outlet_out << 2 );

    ]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="a6a288fb-51af-4eaf-87a6-afa63d13f48d" name="multi_wave_4" x="434" y="462">
      <params>
         <frac32.s.map name="pitch" value="-47.0"/>
         <frac32.u.map name="pw" value="5.5"/>
         <frac32.s.map name="amp" value="-0.04999971389770508"/>
         <bool32.tgl name="unipolar" value="0"/>
         <int32 name="wave" value="1"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="a6a288fb-51af-4eaf-87a6-afa63d13f48d">
         <sDescription>LFO, bipolar, multi wave</sDescription>
         <author>Are Leistad</author>
         <license>BSD</license>
         <inlets>
            <frac32.bipolar name="pitch" description="Pitch input"/>
         </inlets>
         <outlets>
            <frac32 name="out" description="Output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.lfopitch name="pitch" description="Pitch" noLabel="false"/>
            <frac32.u.map.ratio name="pw" description="Pulse width" noLabel="false"/>
            <frac32.s.map name="amp" description="Amplitude" noLabel="false"/>
            <bool32.tgl name="unipolar" description="Unipolar output" noLabel="false"/>
            <int32 name="wave" description="1-5 = tri, sine, saw+, saw-, square" noLabel="false">
               <MinValue i="1"/>
               <MaxValue i="5"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[

      uint32_t phase;
      int32_t  old_reset;

     __attribute__( ( always_inline ) ) __STATIC_INLINE int32_t ___ABS (int32_t op1 )
      {
        int32_t result;
        __ASM volatile ( "movs  %0, %1\n"
                         "it    mi\n"
                         "rsbmi %0, %0, #0"
                         : "=r" (result)
                         : "r" (op1)
                       );
        return(result);
      };

    ]]></code.declaration>
         <code.init><![CDATA[

      phase = 0;
      old_reset = 0;

    ]]></code.init>
         <code.krate><![CDATA[

      int32_t pitch;
      pitch = param_pitch + inlet_pitch;
      if( pitch > 0x07FFFFFF )
        pitch = 0x07FFFFFF;
      MTOFEXTENDED( pitch, pitch );
      phase += pitch>>2;

      uint32_t phase1 = phase;

      switch( param_wave )
        {
          case 1 :
            // Triangle
            outlet_out  = (phase1>>4) - (1<<27);
            outlet_out  = (1<<27) - ___ABS(outlet_out);
            break;

          case 2 :
            // Sine
            SINE2TINTERP( phase1, outlet_out )
            outlet_out = (outlet_out>>5) + (1<<26);
            break;

          case 3 :
            // Saw rising
            outlet_out  = (phase1>>5);
            break;

          case 4 :
            // Saw falling
            outlet_out  = (1<<27) - (phase1>>5);
            break;

          case 5 :
            // Square
            {
              if( (phase1>>5) > param_pw )
                {
                  outlet_out = 0;
                }
              else
                {
                  outlet_out = (1<<27)-1;
                }
            }
            break;
        }

      if( !param_unipolar )
        {
          outlet_out = (outlet_out<<1) - (1<<27);
        }

     outlet_out = ___SMMUL( param_amp << 3, outlet_out << 2 );

    ]]></code.krate>
      </object>
   </patchobj>
   <obj type="audio/out stereo" uuid="a1ca7a567f535acc21055669829101d3ee7f0189" name="out_1" x="1652" y="1092">
      <params/>
      <attribs/>
   </obj>
   <nets>
      <net>
         <source obj="dial_1" outlet="out"/>
         <dest obj="patcher_1" inlet="waveindex"/>
      </net>
      <net>
         <source obj="dial_2" outlet="out"/>
         <dest obj="patcher_1" inlet="waveindex2"/>
      </net>
      <net>
         <source obj="dial_3" outlet="out"/>
         <dest obj="patcher_1" inlet="waveindex3"/>
      </net>
      <net>
         <source obj="patcher_1" outlet="outlet_1"/>
         <dest obj="out_1" inlet="left"/>
      </net>
      <net>
         <source obj="patcher_1" outlet="outlet_2"/>
         <dest obj="out_1" inlet="right"/>
      </net>
      <net>
         <source obj="multi_wave_1" outlet="out"/>
         <dest obj="patcher_1" inlet="filtermod"/>
      </net>
      <net>
         <source obj="multi_wave_2" outlet="out"/>
         <dest obj="patcher_1" inlet="pitchmod1"/>
      </net>
      <net>
         <source obj="multi_wave_3" outlet="out"/>
         <dest obj="patcher_1" inlet="pitchmod2"/>
      </net>
      <net>
         <source obj="multi_wave_4" outlet="out"/>
         <dest obj="patcher_1" inlet="pitchmod3"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>-8</x>
      <y>-8</y>
      <width>1936</width>
      <height>1096</height>
   </windowPos>
</patch-1.0>