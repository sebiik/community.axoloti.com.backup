<objdefs appVersion="1.0.10">
   <obj.normal id="wolfram_seq" uuid="54350c99-74d8-4c5f-b7d1-499d455bb674">
      <sDescription>Wolfram cellular automata sequencer</sDescription>
      <author>JLS</author>
      <license>BSD</license>
      <helpPatch>wolfram_seq.axh</helpPatch>
      <inlets>
         <bool32.rising name="trig" description="trigger"/>
         <bool32.rising name="rst" description="reset"/>
      </inlets>
      <outlets>
         <frac32.positive name="out" description="wave"/>
         <bool32 name="bit0" description="bit0"/>
         <bool32 name="bit1" description="bit1"/>
         <bool32 name="bit2" description="bit2"/>
         <bool32 name="bit3" description="bit3"/>
         <bool32 name="bit4" description="bit4"/>
         <bool32 name="bit5" description="bit5"/>
         <bool32 name="bit6" description="bit6"/>
         <bool32 name="bit7" description="bit7"/>
      </outlets>
      <displays>
         <bool32 name="bit0"/>
         <bool32 name="bit1"/>
         <bool32 name="bit2"/>
         <bool32 name="bit3"/>
         <bool32 name="bit4"/>
         <bool32 name="bit5"/>
         <bool32 name="bit6"/>
         <bool32 name="bit7"/>
         <frac32.u.chart name="disp"/>
      </displays>
      <params/>
      <attribs>
         <combo name="seed">
            <MenuEntries>
               <string>8</string>
               <string>16</string>
               <string>32</string>
               <string>64</string>
               <string>128</string>
               <string>256</string>
               <string>512</string>
               <string>1024</string>
               <string>2048</string>
            </MenuEntries>
            <CEntries>
               <string>8</string>
               <string>16</string>
               <string>32</string>
               <string>64</string>
               <string>128</string>
               <string>256</string>
               <string>512</string>
               <string>1024</string>
               <string>2048</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[int gate1,gate2;

int out[attr_seed];

int b0,b1,b2,b3,b4,b5,b6,b7;


int rules[8];

int state[attr_seed];
int newstate[attr_seed];
int i,k;]]></code.declaration>
      <code.init><![CDATA[gate1 = 0;
gate2 = 0;

i = 0;
k = 0;

rules[0] = 0;
rules[1] = 1;
rules[2] = 1;
rules[3] = 1;
rules[4] = 1;
rules[5] = 0;
rules[6] = 0;
rules[7] = 0;

for (i=0;i<attr_seed;i++) state[i] = GenerateRandomNumber()%3;
for (i=0;i<attr_seed;i++) newstate[i] = 0;]]></code.init>
      <code.krate><![CDATA[{

if ((inlet_trig) && gate1) {

	for (i=0;i<attr_seed;i++) {

         k = 4*state[(i-1+attr_seed)%attr_seed] + 2*state[i] + state[(i+1)%attr_seed];
         newstate[i] = rules[k];
         
	}

	for (i=0;i<attr_seed;i++) { 
		
		state[i] = newstate[i];

		if (state[i] == 1) out[i] = 1;

 		else out[i] = 0;
 		
	}

	if (inlet_rst && gate2) {

		for (i=0;i<attr_seed;i++) newstate[i] = 0;
		for (i=0;i<attr_seed;i++) state[i] = GenerateRandomNumber()%3;
		k = 0;
		gate2 = 0;
		
	}

	else if (!inlet_rst) gate2 = 1;
	
	gate1 = 0;

}

else if (!inlet_trig) gate1 = 1;

outlet_bit0 = out[0];
outlet_bit1 = out[1];
outlet_bit2 = out[2];
outlet_bit3 = out[3];
outlet_bit4 = out[4];
outlet_bit5 = out[5];
outlet_bit6 = out[6];
outlet_bit7 = out[7];

disp_bit0 = out[0];
disp_bit1 = out[1];
disp_bit2 = out[2];
disp_bit3 = out[3];
disp_bit4 = out[4];
disp_bit5 = out[5];
disp_bit6 = out[6];
disp_bit7 = out[7];

if (out[0] == 1) b0 =   1; else b0 = 0;
if (out[1] == 1) b1 =   2; else b1 = 0;
if (out[2] == 1) b2 =   4; else b2 = 0;
if (out[3] == 1) b3 =   8; else b3 = 0;
if (out[4] == 1) b4 =  16; else b4 = 0;
if (out[5] == 1) b5 =  32; else b5 = 0;
if (out[6] == 1) b6 =  64; else b6 = 0;
if (out[7] == 1) b7 = 128; else b7 = 0;

outlet_out = (b0+b1+b2+b3+b4+b5+b6+b7) * (1<<19);

disp_disp = (b0+b1+b2+b3+b4+b5+b6+b7) * (1<<19);

}]]></code.krate>
   </obj.normal>
</objdefs>