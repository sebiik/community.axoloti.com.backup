<patch-1.0 appVersion="1.0.12">
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_1" x="0" y="0">
      <params>
         <bool32.tgl name="b" MidiCC="86" value="1"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="cfecf865-bc6a-44ee-be99-b0e54924b1cc" name="BPM" x="70" y="0">
      <params/>
      <attribs>
         <spinner attributeName="init" value="180"/>
      </attribs>
      <object id="patch/object" uuid="cfecf865-bc6a-44ee-be99-b0e54924b1cc">
         <sDescription>positive constant value dial</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets/>
         <outlets>
            <int32 name="BPM"/>
         </outlets>
         <displays>
            <int32.label name="BPM"/>
         </displays>
         <params/>
         <attribs>
            <spinner name="init" MinValue="30" MaxValue="500" DefaultValue="0"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int32_t BPM;]]></code.declaration>
         <code.init><![CDATA[BPM=attr_init;]]></code.init>
         <code.krate><![CDATA[outlet_BPM=BPM;
disp_BPM=BPM;]]></code.krate>
         <code.midihandler><![CDATA[if ((status == 0 + MIDI_CONTROL_CHANGE)&&(data1==9)) {
	if(data2==1){BPM+=1;}
	if(data2==127){BPM-=1;}
	}]]></code.midihandler>
      </object>
   </patchobj>
   <obj type="mux/mux 2" uuid="16f90f81694766b0bc8187bfcba5a021e5701d81" name="mux_1" x="154" y="0">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="30196069-cbc4-4b41-8ddb-104c6a9f8d38" name="BPM_2" x="224" y="0">
      <params>
         <int32 name="BPM" value="0"/>
         <int32 name="vari1" value="48"/>
         <int32 name="vari2" value="32"/>
         <int32 name="vari3" value="1"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="30196069-cbc4-4b41-8ddb-104c6a9f8d38">
         <sDescription>simple master clock source in BPM.
outputs pulses for beat, triplets, fourths and a variable rate multiplier.</sDescription>
         <author>Remco van der Most</author>
         <license>BSD</license>
         <helpPatch>lfo.axh</helpPatch>
         <inlets>
            <int32 name="BPM"/>
            <bool32.rising name="reset" description="reset phase"/>
            <int32 name="vari3"/>
            <bool32 name="active"/>
         </inlets>
         <outlets>
            <bool32 name="beat" description="square wave"/>
            <bool32 name="trips"/>
            <bool32 name="fours"/>
            <bool32 name="eights"/>
            <bool32 name="vari1"/>
            <bool32 name="vari2"/>
            <bool32 name="vari3"/>
            <int32 name="rate3"/>
            <int32 name="timing"/>
            <frac32 name="delaybase"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="BPM">
               <MinValue i="0"/>
               <MaxValue i="500"/>
            </int32>
            <int32 name="vari1">
               <MinValue i="1"/>
               <MaxValue i="128"/>
            </int32>
            <int32 name="vari2">
               <MinValue i="1"/>
               <MaxValue i="128"/>
            </int32>
            <int32 name="vari3">
               <MinValue i="1"/>
               <MaxValue i="128"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t Phase;
uint32_t r;
int rate1=3;
int rate2=4;
int rate3=8;
int32_t freq;]]></code.declaration>
         <code.init><![CDATA[Phase = 0;
   r = 1;]]></code.init>
         <code.krate><![CDATA[bool act=inlet_active;
	int BPM=param_BPM+inlet_BPM;
	BPM=BPM>0?BPM:1;
	
      if (inlet_reset && r) {
         Phase = 0;
         r = 0;
      } else {
         if (!inlet_reset) r = 1;
         
         freq=(1<<31)/(45000/BPM);
         
         Phase += freq>>2;}
      
      outlet_beat= (Phase>0)?act:0;
      outlet_trips=((Phase*rate1)>0)?act:0;
      outlet_fours=((Phase*rate2)>0)?act:0;
      outlet_eights=((Phase*rate3)>0)?act:0;
      outlet_vari1=((Phase*param_vari1)>0)?act:0;
      outlet_vari2=((Phase*param_vari2)>0)?act:0;
      outlet_vari3=((Phase*inlet_vari3)>0)?act:0;

      outlet_rate3=inlet_vari3<<4;
   
   outlet_timing=freq/48;
   outlet_delaybase=(1<<31)/outlet_timing<<5;]]></code.krate>
      </object>
   </patchobj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="port" x="868" y="0">
      <params>
         <bool32.tgl name="b" value="1"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="save" x="952" y="0">
      <params>
         <bool32.tgl name="b" MidiCC="84" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="load" x="1036" y="0">
      <params>
         <bool32.tgl name="b" MidiCC="85" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="delete" x="1204" y="0">
      <params>
         <bool32.tgl name="b" MidiCC="79" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="copy" x="1274" y="0">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/i" uuid="a3786816db6ea5bc6ac4193a5cccdb2c83b83496" name="fromMax" x="1344" y="0">
      <params>
         <int32 name="value" value="384"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="delay" x="1400" y="0">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="sss/harmony/scale7Generator" uuid="f9de7a9c-eb93-4711-ab68-564c4595bdf5" name="scale7Generator_1" x="1512" y="0">
      <params/>
      <attribs/>
   </obj>
   <obj type="ctrl/i" uuid="a3786816db6ea5bc6ac4193a5cccdb2c83b83496" name="toMax" x="1288" y="56">
      <params>
         <int32 name="value" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/i" uuid="a3786816db6ea5bc6ac4193a5cccdb2c83b83496" name="fromMin" x="1344" y="56">
      <params>
         <int32 name="value" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="bound" x="1400" y="56">
      <params>
         <bool32.tgl name="b" value="1"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="3a0bde8e-a7e0-4721-a1e5-519603326bc3" name="object_1" x="784" y="70">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="3a0bde8e-a7e0-4721-a1e5-519603326bc3">
         <inlets>
            <bool32 name="button"/>
         </inlets>
         <outlets>
            <bool32.pulse name="trg"/>
            <bool32.pulse name="erase"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[bool trg;
uint32_t cnt;
uint32_t TIME;
int erase;]]></code.declaration>
         <code.krate><![CDATA[cnt=__USAT(cnt+1,28);
if((inlet_button>0)&&!trg){
	trg=1;
	TIME=cnt;
	if(TIME<1000){
	erase+=1;
	}
	cnt=0;
}
else if(inlet_button==0){trg=0;}
outlet_trg=0;
if((TIME<1000)&&cnt<1000){
	outlet_trg=1;
	
}
if(TIME>1000){erase=0;}
outlet_erase=erase>1?1:0;]]></code.krate>
      </object>
   </patchobj>
   <obj type="ctrl/i" uuid="a3786816db6ea5bc6ac4193a5cccdb2c83b83496" name="toMin" x="1288" y="112">
      <params>
         <int32 name="value" value="384"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/i" uuid="a3786816db6ea5bc6ac4193a5cccdb2c83b83496" name="repeats" x="1400" y="112">
      <params>
         <int32 name="value" value="2"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="cfecf865-bc6a-44ee-be99-b0e54924b1cc" name="key-scale" x="616" y="140">
      <params/>
      <attribs>
         <spinner attributeName="key" value="0"/>
         <spinner attributeName="scale" value="0"/>
      </attribs>
      <object id="patch/object" uuid="cfecf865-bc6a-44ee-be99-b0e54924b1cc">
         <sDescription>positive constant value dial</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets/>
         <outlets>
            <int32 name="key"/>
            <int32 name="scale"/>
         </outlets>
         <displays>
            <int32.label name="key"/>
            <int32.label name="scale"/>
         </displays>
         <params/>
         <attribs>
            <spinner name="key" MinValue="0" MaxValue="11" DefaultValue="0"/>
            <spinner name="scale" MinValue="0" MaxValue="45" DefaultValue="0"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int scale;
int key;
bool choice;
int tmp;]]></code.declaration>
         <code.init><![CDATA[key=attr_key;
scale=attr_scale;]]></code.init>
         <code.krate><![CDATA[outlet_key=key>>3;
disp_key=key>>3;
outlet_scale=scale>>3;
disp_scale=scale>>3;]]></code.krate>
         <code.midihandler><![CDATA[if ((status == 0 + MIDI_CONTROL_CHANGE)&&(data1==77)) {
choice=data2;}
int A;


if ((status == 0 + MIDI_CONTROL_CHANGE)&&(data1==10)&&data2>63) {
if(choice==1){
scale-=1;
scale=scale<0?367:scale;
tmp=scale>>3;
A=(tmp+1);
A=A-A/46*46;
A=(A<<1)+1;
}
if(choice==0){
key-=1;
key=key<0?95:key;
tmp=key>>3;
A=(tmp+1);
A=A-A/12*12;
A=(A<<1)+1;}
MidiSend3((midi_device_t) MIDI_DEVICE_USB_HOST, 1, MIDI_NOTE_ON + 1,(tmp<<1)+1,64);
MidiSend3((midi_device_t) MIDI_DEVICE_USB_HOST, 1, MIDI_NOTE_OFF + 1,A,64);
}
if ((status == 0 + MIDI_CONTROL_CHANGE)&&(data1==10)&&data2<63) {
if(choice==1){
scale+=1;
scale=scale>367?0:scale;
tmp=scale>>3;
A=(tmp-1);
A=A-A/46*46;
A=A<0?A+46:A;
A=(A<<1)+1;}
if(choice==0){
key+=1;
key=key>95?0:key;
tmp=key>>3;
A=(tmp-1);
A=A-A/12*12;
A=A<0?A+12:A;
A=(A<<1)+1;}
MidiSend3((midi_device_t) MIDI_DEVICE_USB_HOST, 1, MIDI_NOTE_ON + 1,(tmp<<1)+1,64);
MidiSend3((midi_device_t) MIDI_DEVICE_USB_HOST, 1, MIDI_NOTE_OFF + 1,A,64);
}]]></code.midihandler>
      </object>
   </patchobj>
   <obj type="ctrl/i" uuid="a3786816db6ea5bc6ac4193a5cccdb2c83b83496" name="i_1" x="924" y="168">
      <params>
         <int32 name="value" value="20"/>
      </params>
      <attribs/>
   </obj>
   <obj type="string/indexed" uuid="a28740deef67c39ffc65bd0f341a47c9b196f46" name="indexed_1" x="980" y="168">
      <params/>
      <attribs>
         <table attributeName="prefix" table="0:/POR"/>
         <table attributeName="suffix" table=".tab"/>
      </attribs>
   </obj>
   <obj type="ctrl/i" uuid="a3786816db6ea5bc6ac4193a5cccdb2c83b83496" name="time" x="1400" y="168">
      <params>
         <int32 name="value" value="240"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="b3050645-ce9b-4843-b4d6-028940197017" name="transpose" x="1400" y="224">
      <params>
         <int32 name="value" value="2"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="b3050645-ce9b-4843-b4d6-028940197017">
         <sDescription>positive integer control</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets/>
         <outlets>
            <int32.positive name="out" description="output"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="value" noLabel="true">
               <MinValue i="-32"/>
               <MaxValue i="32"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out= param_value;]]></code.krate>
      </object>
   </patchobj>
   <obj type="ctrl/i" uuid="a3786816db6ea5bc6ac4193a5cccdb2c83b83496" name="barlength" x="378" y="266">
      <params>
         <int32 name="value" value="24"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/i" uuid="a3786816db6ea5bc6ac4193a5cccdb2c83b83496" name="bars" x="434" y="266">
      <params>
         <int32 name="value" value="64"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="6a31299e3a491edd8c4df0e809a519a35cc08a3b" name="*_1" x="490" y="266">
      <params/>
      <attribs/>
   </obj>
   <obj type="sss/logic/countExt" uuid="44ed9668-63af-48f8-a018-99db931c5e37" name="main count" x="546" y="266">
      <params>
         <int32 name="max" value="0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="0b2bfa56-c6b9-453d-a0b7-2c2fe621787c" name="read quantizer" x="672" y="266">
      <params>
         <int32 name="quant" value="1"/>
         <int32 name="range" value="192"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="0b2bfa56-c6b9-453d-a0b7-2c2fe621787c">
         <sDescription>equal</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>math.axh</helpPatch>
         <inlets>
            <int32 name="in1" description="in1"/>
         </inlets>
         <outlets>
            <int32 name="out"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="quant">
               <MinValue i="1"/>
               <MaxValue i="1024"/>
            </int32>
            <int32 name="range">
               <MinValue i="1"/>
               <MaxValue i="1024"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[int tmp=inlet_in1/param_range*param_range;

outlet_out= (inlet_in1-tmp)/param_quant*param_quant+tmp ;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="0b2bfa56-c6b9-453d-a0b7-2c2fe621787c" name="write quantizer" x="756" y="266">
      <params>
         <int32 name="quant" value="1"/>
         <int32 name="range" value="192"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="0b2bfa56-c6b9-453d-a0b7-2c2fe621787c">
         <sDescription>equal</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>math.axh</helpPatch>
         <inlets>
            <int32 name="in1" description="in1"/>
         </inlets>
         <outlets>
            <int32 name="out"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="quant">
               <MinValue i="1"/>
               <MaxValue i="1024"/>
            </int32>
            <int32 name="range">
               <MinValue i="1"/>
               <MaxValue i="1024"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[int tmp=inlet_in1/param_range*param_range;

outlet_out= (inlet_in1-tmp)/param_quant*param_quant+tmp ;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="8f5446a6-729a-4145-8bc0-3ad5121581e7" name="keyb_1" x="840" y="266">
      <params>
         <bool32.mom name="CHANNEL internal/DIN 1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  G   1  2  3  4  5  6  7  8  9 A  B  C  D  E  F " value="0"/>
         <bin32 name="edit" value="1005584384"/>
         <bin32 name="mute" value="0"/>
         <bin32 name="solo" value="0"/>
         <bin32 name="scaled" value="-68157440"/>
         <int32 name="predelay" value="0"/>
         <int32 name="toChnlOffset" value="0"/>
      </params>
      <attribs>
         <combo attributeName="size" selection="8192"/>
         <objref attributeName="scale" obj="scale7Generator_1"/>
      </attribs>
      <object id="patch/object" uuid="8f5446a6-729a-4145-8bc0-3ad5121581e7">
         <sDescription>&quot;Monophonic MIDI keyboard note input, gate, velocity and release velocity&quot;..... well, yes, that&apos;s where it started.. XD

This is now a polyphonic midi-recorder, able to record midinotes from every channel and 2 ports (internal/DIN).
Each channel can be set to be editted (whether it&apos;s recording or only sending thru the played midi to play along with your recording)
Each channel/port can be muted independently
Each channel/port can be solo&apos;d + added to solo&apos;d channels
Each channel can use the scaling of the 46 scales in the scale7bank (used with pads, unused notes are just skipped, 7 pads=1 octave)

Read-and write- counterposition can be set independently. This also allows for timing-adjustments (eg. delay the writeposition in respect to the read-position when you have latency)
The counter can be set pretty fast as it just records positions where recorded notes should be played. So eg. you could run at 192x host tempo with a maxcount of 24*64 to have a short but lively (unquantized) sequence.

Don&apos;t forget to send a &quot;gate-high&quot; to the &quot;active&quot; input when you want the sequencer to actually be active and do something..

Amount of maximum notes to be recorded is set by the &quot;size&quot; attribute. I set it to 8129... never passed it and quick loading time.

Several midi-fx are added:
&quot;copy&quot;: this copies from a part (from min/max) of the selected &quot;edit&quot; channels to a part (to min/max) of the channels &quot;former channel&quot;+&quot;toChannelOffset&quot;. So:
if the &quot;edit&quot; of channels 1,2,3,4 is &quot;on&quot; and &quot;toChannelOffset&quot; is set to 5, it will copy these channels to channels 6,7,8,9 respectively.

&quot;delay&quot;: this adds delayed midi-notes to the existing midi-pattern. The amount of repeats can be set as well as transposition, time and velocity-decay. &quot;bound&quot; will loop delayed notes if they surpass the maximum count.

&quot;DelChnl&quot; deletes only one channel
&quot;erase&quot; erases all channels
&quot;undo&quot; erases last 64 notes (not sure if that&apos;s so very helpful..)

It&apos;s possible to control the channel edit/mute/solo/scaled over midi using midichannel 1. sending a midiCC 57,58,59,60 set the bar to edit (0=edit/1=mute/2=solo/3=scaled)
Sending midiCC 1 to 16 on midichannel2 toggles the seperate steps.</sDescription>
         <author>Remco van der Most</author>
         <license>BSD</license>
         <helpPatch>midi_in.axh</helpPatch>
         <inlets>
            <int32 name="read" description="input of counter for the read-position of the sequencer. Count may go up to 32bits and pretty darn fast!"/>
            <int32 name="write" description="input of counter for the write-position of the sequencer. Count may go up to 32bits and pretty darn fast!"/>
            <bool32 name="restart" description="forces a re-run for finding current position &amp; last played note-&gt;in case it somehow screws up.."/>
            <int32 name="maxcount" description="maximum count that the counter will give. This may go up to 32bit!"/>
            <bool32 name="port" description="select output port: 0=internal 1=midi DIN output"/>
            <bool32 name="load" description="loads a saved sequence"/>
            <bool32 name="save" description="saves a sequence"/>
            <charptr32 name="filename" description="sets filename of saved/loaded sequence"/>
            <bool32 name="DelChnl" description="when high, deletes all notes from the channel of the incoming midi-note"/>
            <int32 name="fromMin" description="start-position for sequence copying"/>
            <int32 name="fromMax" description="end-position for sequence copying"/>
            <bool32 name="copy" description="when high, copies all the &quot;edit&quot; channels to other channels. The other channels are in the same order but have a channel-offset set by the &quot;toChannelOffset&quot; parameter."/>
            <int32 name="toMin" description="start-position for sequence copying"/>
            <int32 name="toMax" description="end-position for sequence copying. Times between start/end will be in ratio to the sizes of &quot;from&quot; and &quot;to&quot;.-&gt;you can stretch parts!"/>
            <bool32 name="delay" description="when high, adds a delayed version of the original channel to the &quot;original channel+toChannelOffset&quot;. The delay can thus be send over another channel!"/>
            <int32 name="time" description="Timing of the delay"/>
            <int32 name="transpose" description="transposition of the delay (useful to use the scaling for this!)"/>
            <frac32 name="tail" description="velocity fade-out for delayed notes"/>
            <int32 name="repeats" description="amount of delays that will be added"/>
            <bool32 name="bound" description="bounds the delays within the maximum count, otherwise it will add them beyond maximum count (eg. when you end, you just use a longer max-count and let it run out)"/>
            <bool32 name="erase" description="ERASES ALL CHANNELS! BOOM! NOTHING LEFT! Be sure to save your stuff if you want to keep it! ;)"/>
            <bool32 name="active" description="when high, the module is in active state. When low, resets and sends a all-notes-off"/>
            <int32 name="key" description="sets key of the internal scale-&gt; needs scale7bank/generator"/>
            <int32 name="scale" description="sets the scale of the internal scale... (say what?!?)-&gt; needs scale7bank/generator"/>
            <bool32 name="undo" description="undoes last 64 played notes... not sure if that&apos;s helpful... XD"/>
         </inlets>
         <outlets/>
         <displays/>
         <params>
            <bool32.mom name="CHANNEL internal/DIN 1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  G   1  2  3  4  5  6  7  8  9 A  B  C  D  E  F " description="just a bunch of names for the rows so you can see what you do :)"/>
            <bin32 name="edit" description="when high, this channel is open for editting (recording) and is used when &quot;copy&quot; or &quot;delay&quot; is used"/>
            <bin32 name="mute" description="when high, this channel is muted"/>
            <bin32 name="solo" description="when high, this channel is added to the &quot;solo&quot;"/>
            <bin32 name="scaled" description="when high, this channel listens to the scaling function, otherwise 12notes/oct"/>
            <int32 name="predelay" description="sets predelay to adjust for latency ">
               <MinValue i="0"/>
               <MaxValue i="1000"/>
            </int32>
            <int32 name="toChnlOffset" description="used by the &quot;copy&quot; and &quot;delay&quot; options to set a channel-offset. When a channel is in &quot;edit&quot; mode, this offset sets the channel to it&apos;s left(-)/right(+) (0=itself) that receives it&apos;s copy/delay">
               <MinValue i="-32"/>
               <MaxValue i="32"/>
            </int32>
         </params>
         <attribs>
            <combo name="size">
               <MenuEntries>
                  <string>2</string>
                  <string>4</string>
                  <string>8</string>
                  <string>16</string>
                  <string>32</string>
                  <string>64</string>
                  <string>128</string>
                  <string>256</string>
                  <string>512</string>
                  <string>1024</string>
                  <string>2048</string>
                  <string>4096</string>
                  <string>8192</string>
                  <string>16384</string>
                  <string>32768</string>
                  <string>65536</string>
                  <string>131072</string>
                  <string>262144</string>
                  <string>524288</string>
                  <string>1048576</string>
                  <string>2097152</string>
                  <string>4194304</string>
               </MenuEntries>
               <CEntries>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>4</string>
                  <string>5</string>
                  <string>6</string>
                  <string>7</string>
                  <string>8</string>
                  <string>9</string>
                  <string>10</string>
                  <string>11</string>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
                  <string>16</string>
                  <string>17</string>
                  <string>18</string>
                  <string>19</string>
                  <string>20</string>
                  <string>21</string>
                  <string>22</string>
               </CEntries>
            </combo>
            <objref name="scale"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);

uint16_t *array;
uint32_t count;
int i;
bool Ctrg;
int32_t S;
int timer[128];
bool trg;
bool prg;
int T;
bool ctrg;
bool ON[128];
int Port;
bool strig;
bool ltrig;
uint32_t CH;
uint32_t cHn;
int D;
bool dtrg;
bool srg;
bool qrg;
bool Dtrg;
int ChL;
bool erase;
bool upd;
uint32_t MUTE;
uint32_t SOLO;
uint32_t KEYED;
int edit;
bool Atrg;
uint16_t semitone;
int scale;
int key;
uint16_t last[2][64];
uint32_t CNT;
bool UNDO;
uint32_t K;]]></code.declaration>
         <code.init><![CDATA[static uint16_t _array[LENGTH*4] __attribute__ ((section (".sdram")));
array = &_array[0];

for(i=0;i<LENGTH;i++){
	array[i<<2]=65534;
}

for(i=0;i<LENGTH*3;i++){
	int j=i<<2;;
	array[j+1]=0;
	array[j+2]=0;
	array[j+3]=0;
}


S=0;
trg=0;
for(i=0;i<128;i++){
	ON[i]=0;
}
for(i=0;i<64;i++){
	last[0][i]=65534;
	last[1][i]=65534;
}
CNT=0;]]></code.init>
         <code.krate><![CDATA[//load sequence
if ((inlet_load>0) && !ltrig) {
    ltrig=1;
    FIL FileObject;
    FRESULT err;
    UINT bytes_read;
    codec_clearbuffer();
    err = f_open(&FileObject, inlet_filename, FA_READ | FA_OPEN_EXISTING);
    if (err != FR_OK) { report_fatfs_error(err,inlet_filename); return;}
    int rem_sz = sizeof(*array)*LENGTH*4;
    int offset = 0;
    while (rem_sz>0) {
      if (rem_sz>sizeof(fbuff)) {
        err = f_read(&FileObject, fbuff, sizeof(fbuff),&bytes_read);
        if (bytes_read == 0) break;
        memcpy((char *)(&array[0]) + offset,(char *)fbuff,bytes_read);
        rem_sz -= bytes_read;
        offset += bytes_read;
      } else {
        err = f_read(&FileObject, fbuff, rem_sz,&bytes_read);
        memcpy((char *)(&array[0]) + offset,(char *)fbuff,bytes_read);
        rem_sz = 0;
      }
    }    if (err != FR_OK) { report_fatfs_error(err,inlet_filename); return;};
    err = f_close(&FileObject);
    if (err != FR_OK) { report_fatfs_error(err,inlet_filename); return;};
  }
  else if (!(inlet_load>0)) ltrig=0;


//save sequence
if ((inlet_save>0) && !strig) {
    strig=1;
    FIL FileObject;
    FRESULT err;
    UINT bytes_written;
    codec_clearbuffer();
    err = f_open(&FileObject, inlet_filename, FA_WRITE | FA_CREATE_ALWAYS);
    if (err != FR_OK) {report_fatfs_error(err,inlet_filename); return;}
    int rem_sz = sizeof(*array)*LENGTH*4;
    int offset = 0;
    while (rem_sz>0) {
      if (rem_sz>sizeof(fbuff)) {
        memcpy((char *)fbuff,(char *)(&array[0]) + offset, sizeof(fbuff));
        err = f_write(&FileObject, fbuff, sizeof(fbuff),&bytes_written);
        rem_sz -= sizeof(fbuff);
        offset += sizeof(fbuff);
      } else {
        memcpy((char *)fbuff,(char *)(&array[0]) + offset, rem_sz);
        err = f_write(&FileObject, fbuff, rem_sz, &bytes_written);
        rem_sz = 0;
      }
    }    if (err != FR_OK) report_fatfs_error(err,inlet_filename);
    err = f_close(&FileObject);
    if (err != FR_OK) report_fatfs_error(err,inlet_filename);
  }
  else if (!(inlet_save>0)) strig=0;

scale=inlet_scale;
scale=scale-scale/46*46;
scale=scale<0?scale+46:scale;
scale=scale*7;

key=(inlet_key)*5;
key=key-(key/12)*12;
key=key<0?key+12:key;




//select edit-channel
if(upd){
if(edit==1){PExParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_mute],MUTE,0xFFFD);}
if(edit==0){PExParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_edit],cHn,0xFFFD);}
if(edit==2){PExParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_solo],SOLO,0xFFFD);}
if(edit==3){PExParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_scaled],KEYED,0xFFFD);}
upd=0;
}
MUTE=param_mute;
cHn=param_edit;
SOLO=param_solo;
KEYED=param_scaled;

//erase all channels
if((inlet_erase>0)&&!erase){
	erase=1;
	for(i=0;i<LENGTH;i++){
	array[i<<2]=65534;
}

for(i=0;i<LENGTH*3;i++){
	int j=i<<2;;
	array[j+1]=0;
	array[j+2]=0;
	array[j+3]=16;
}
}
else if(inlet_erase==0){erase=0;}


//delete selected edit-channels
if(((inlet_DelChnl>0)&&!dtrg)&&(ChL>-1)){
	dtrg=1;
	D=0;
	for(i=0;i<LENGTH;i++){
		if((i+D)<LENGTH){
		array[(i<<2)]=array[((i+D)<<2)];
		array[(i<<2)+1]=array[((i+D)<<2)+1];
		array[(i<<2)+2]=array[((i+D)<<2)+2];
		array[(i<<2)+3]=array[((i+D)<<2)+3];
		//if((cHn>>array[(i<<2)+3])&1)
		if((ChL==array[(i<<2)+3]))
		{	
			D+=1;
			i-=1;
		}}
		else	
		{array[i<<2]=65535;
		 array[(i<<2)+2]=0;
		 array[(i<<2)+3]=16;
		 }
	}
		if(ChL>15)
		{	
			MidiSend3((midi_device_t) MIDI_DEVICE_DIN, 1, MIDI_CONTROL_CHANGE + (ChL-16),MIDI_C_ALL_NOTES_OFF,0);
		}
		if(ChL<16)
		{
			PatchMidiInHandler(MIDI_DEVICE_INTERNAL,0,MIDI_CONTROL_CHANGE + ChL,MIDI_C_ALL_NOTES_OFF,0);
		}	
}
else if((inlet_DelChnl==0)&&(!(ChL>-1))){dtrg=0;}

//undo last 64 notes
if((inlet_undo>0)&&!UNDO){
CNT=0;
UNDO=1;
for(i=0;i<64;i++){
	if(!(last[0][i]==65534)){
	K=0;
	while(((!(last[0][i]==array[K]))&&(!(last[1][i]==array[K+1])))&&!(K>(LENGTH<<2))){
		K+=4;
	}
	if(K<(LENGTH<<2)){
	int B;
	for(B=K;B<LENGTH;B++){
	int k=B<<2;
		array[k]=array[k+4];
		array[k+1]=array[k+5];
		array[k+2]=array[k+6];
		array[k+3]=array[k+7];
	}
last[0][i]=65534;
last[1][i]=65534;}
}
}}
else if(inlet_undo==0){UNDO=0;}

//copy selected edit-channels to channel offset
if((inlet_copy>0)&&!Ctrg){
	

for(i=0;i<LENGTH;i++)
{     
      if((array[(i<<2)]>=inlet_fromMin)&&(array[(i<<2)]<inlet_fromMax)&&((cHn>>array[(i<<2)+3])&1))
      {
     	uint32_t Y=(int64_t)(array[(i<<2)]-inlet_fromMin)*(inlet_toMax-inlet_toMin)/(inlet_fromMax-inlet_fromMin)+inlet_toMin;
          int F=0;srg=0;
     	while((Y>=array[F])&&!srg)
     		{
				F+=4;
				if((F>>2)>=LENGTH){
				srg=1;}
			}
		if(!srg)
		{
			int l;
			for(l=LENGTHMASK;l>(F/4);l--)
				{
					int k=l<<2;
					array[k]=array[k-4];
					array[k+1]=array[k-3];
					array[k+2]=array[k-2];
					array[k+3]=array[k-1];
				}
			array[F]=Y;
      		array[F+1]=array[(i<<2)+1];
      		array[F+2]=array[(i<<2)+2];
      		array[F+3]=array[(i<<2)+3]+80;
      		
      		if(array[i<<2]>=Y)
      		{
      			i+=1;
      		}
      	}
      }
}
for(i=0;i<LENGTH;i++){
	if(array[(i<<2)+3]>79){
		array[(i<<2)+3]-=80-param_toChnlOffset;
	}
}
Ctrg=1;
}
else if(inlet_copy==0){Ctrg=0;}
bool bound=inlet_bound;


//repeating delay selected edit-channels to channel offset
if((inlet_delay>0)&&!Dtrg){
	

for(i=0;i<LENGTH;i++)
{     
      if((array[(i<<2)]>=inlet_fromMin)&&(array[(i<<2)]<inlet_fromMax)&&((cHn>>array[(i<<2)+3])&1)&&(array[(i<<2)+3]<80))
      {
     	int H;
     	for(H=0;H<inlet_repeats;H++)
     	{
     		int32_t Z=(uint32_t)array[(i<<2)]+inlet_time*(H+1);
     		if(bound>0)
     		{
     			int32_t rng=inlet_fromMax-inlet_fromMin;
     			Z=Z-((Z/rng)*rng)+inlet_fromMin;
     		}
         		uint32_t F=0;qrg=0;
     		while((Z>=array[F])&&!qrg)
     			{
				F+=4;
				if((F>>2)>=LENGTH){
				qrg=1;}
				}
			if(!qrg)
			{
				int l;
				for(l=LENGTHMASK;l>(F>>2);l--)
				{
					int k=l<<2;
					array[k]=array[k-4];
					array[k+1]=array[k-3];
					array[k+2]=array[k-2];
					array[k+3]=array[k-1];
				}
				array[F]=Z;
      			array[F+1]=(array[(i<<2)+1]+(H+1)*inlet_transpose)&255;
      			array[F+1]=array[F+1]>127?256-array[F+1]:array[F+1];
      			array[F+2]=__USAT(array[(i<<2)+2]-___SMMUL(array[(i<<2)+2]<<2,((1<<27)-inlet_tail)*(H+1)),16);
      			array[F+3]=array[(i<<2)+3]+80;
      			if(array[i<<2]>=Z){
      			i+=1;}
      		}
      	}
      }
}
int X;
for(X=0;X<LENGTH;X++){
if(array[(X<<2)+3]>79){
   array[(X<<2)+3]-=80-param_toChnlOffset;}
}

Dtrg=1;
}
else if((inlet_delay==0)&&Dtrg){Dtrg=0;}

//get count
count=inlet_read+inlet_maxcount;
count=count-count/inlet_maxcount*inlet_maxcount;

//reset array-read position
if((count==0)&&!ctrg){
	T=0;
	ctrg=1;
}
if((count>0)&&ctrg){ctrg=0;}

while(count>=array[T]){
CH=T+3;
if(((!((MUTE>>array[CH])&1))&&((!(SOLO>0))||(((SOLO>>array[CH])&1))))&&(count==array[T])) //(count==array[T]) for exact play at count
{	
	if((((KEYED>>array[CH])&1))){
	uint16_t pitch=array[T+1]-7;
	uint16_t octave=pitch/7;
	semitone=pitch-octave*7;
	semitone=(attr_scale.note[semitone+scale]+octave*12)+key-4;}
	else{semitone=array[T+1];} 
	//semitone=array[T+1];
if(array[T+2]>1){	
if(array[CH]>15)
{	
	MidiSend3((midi_device_t) MIDI_DEVICE_DIN, 1, MIDI_NOTE_ON + (array[CH]-16),semitone,array[T+2]);}
if(array[CH]<16)
{	
	
	PatchMidiInHandler(MIDI_DEVICE_INTERNAL,0,MIDI_NOTE_ON + array[CH],semitone,array[T+2]);}
}
if(array[T+2]<1){
if(array[CH]>15)
{	
	MidiSend3((midi_device_t) MIDI_DEVICE_DIN, 1, MIDI_NOTE_OFF + (array[CH]-16),semitone,64);}
if(array[CH]<16)
{	
	PatchMidiInHandler((midi_device_t) 0,0,MIDI_NOTE_OFF + array[CH],semitone,64);}}}
T+=4;
}

Port=inlet_port>0?16:0;


//cHn=cHn>>16;

count=inlet_write+inlet_maxcount-param_predelay;
count=count-count/inlet_maxcount*inlet_maxcount;

if((inlet_active==0)&&!Atrg){
	for(i=0;i<16;i++){
	MidiSend3((midi_device_t) MIDI_DEVICE_DIN, 1, MIDI_CONTROL_CHANGE + i,MIDI_C_ALL_NOTES_OFF,0);}
	Atrg=1;
}
else if(inlet_active==1){Atrg=0;}]]></code.krate>
         <code.midihandler><![CDATA[/*
0=position;
1=note;
2=velocity (0 == off) (>0 == on)
3=channel
*/

if(port==1){

if ((status >= MIDI_NOTE_ON)&&(status <= MIDI_NOTE_ON+15) && (data2)) {
	
	ChL=status - MIDI_NOTE_ON+(Port);
	if(((cHn>>status-MIDI_NOTE_ON+16)&1)||((cHn>>status-MIDI_NOTE_OFF+16)&1)){	
	S=0;
	trg=0;

	while((count>=array[S])&&!trg)
	{
		S+=4;
		if((S>>2)>=LENGTH)
		{
			trg=1;
		}
	}
	
	if(!trg)
	{
	for(i=LENGTHMASK;i>(S/4);i--)
		{
		int k=i<<2;
		array[k]=array[k-4];
		array[k+1]=array[k-3];
		array[k+2]=array[k-2];
		array[k+3]=array[k-1];
		}
	}
last[0][CNT]=count;
last[1][CNT]=data1;
CNT=(CNT+1)&63;
array[S]=count;
array[1+S]=data1;
array[2+S]=data2;
array[3+S]=status - MIDI_NOTE_ON+(Port);
ON[data1]=1;
}
} else if ((((status >= MIDI_NOTE_ON)&&(status <= MIDI_NOTE_ON + 15) && (!data2))||
          (status >=  MIDI_NOTE_OFF )&&(status <=  MIDI_NOTE_OFF +15))&&(ON[data1]==1)) {
     ChL=-1;     	
if(((cHn>>(status-MIDI_NOTE_ON+16))&1)||((cHn>>(status-MIDI_NOTE_OFF+16))&1)){   
	       	
S=0;
trg=0;
while((count>=array[S])&&!prg){
	S+=4;
	if((S>>2)>=LENGTH){
	prg=1;}
}
if(!prg){
for(i=LENGTHMASK;i>(S/4);i--){
	int k=i<<2;
	array[k]=array[k-4];
	array[k+1]=array[k-3];
	array[k+2]=array[k-2];
	array[k+3]=array[k-1];
}}
last[0][CNT]=count;
last[1][CNT]=data1;
CNT=(CNT+1)&63;
array[S]=count;
array[1+S]=data1;
array[2+S]=0;
if((status >= MIDI_NOTE_ON)&&(status <= MIDI_NOTE_ON + 15)){
array[3+S]=(status - MIDI_NOTE_ON)+(Port);}
if((status >=  MIDI_NOTE_OFF )&&(status <=  MIDI_NOTE_OFF +15)){
array[3+S]=(status - MIDI_NOTE_OFF)+(Port);}


ON[data1]=0;
}

}

int8_t DATA;
if((status)&&(!((status&15)==0))){
	if((status==((status&15)+MIDI_NOTE_ON))||(status==((status&15)+MIDI_NOTE_OFF))){
	
	if((((uint32_t)KEYED>>(status&15)+16)&1)){
		
	uint16_t pitch=data1-7;
	uint16_t octave=pitch/7;
	DATA=pitch-octave*7;
	DATA=(attr_scale.note[DATA+scale]+octave*12)+key-4;}
	else{DATA=data1;}
	}
	else {DATA=data1;}

if(Port>15){
MidiSend3((midi_device_t) MIDI_DEVICE_DIN, 1, status,DATA,data2);}
else if((Port<16)&&(1==0))												
{PatchMidiInHandler(MIDI_DEVICE_INTERNAL,0,status,DATA,data2);}}  
}

if ((status == 0+ MIDI_CONTROL_CHANGE)&&(data1 > 56)&&(data1<61)) {
edit=(data1-57)&3;
	for(i=0;i<16;i++)
	{
		if(edit==0)
		{
			if((cHn>>(i+16))&1){MidiSend3((midi_device_t) MIDI_DEVICE_USB_HOST, 1, MIDI_NOTE_ON + 1,((i+8)&15)*2+97,64);}
						else{MidiSend3((midi_device_t) MIDI_DEVICE_USB_HOST, 1, MIDI_NOTE_OFF + 1,((i+8)&15)*2+97,64);}
		}
		if(edit==1)
		{
			if((MUTE>>(i+16))&1){MidiSend3((midi_device_t) MIDI_DEVICE_USB_HOST, 1, MIDI_NOTE_ON + 1,((i+8)&15)*2+97,64);}
						else{MidiSend3((midi_device_t) MIDI_DEVICE_USB_HOST, 1, MIDI_NOTE_OFF + 1,((i+8)&15)*2+97,64);}
		}
		if(edit==2)
		{
			if((SOLO>>(i+16))&1){MidiSend3((midi_device_t) MIDI_DEVICE_USB_HOST, 1, MIDI_NOTE_ON + 1,((i+8)&15)*2+97,64);}
						else{MidiSend3((midi_device_t) MIDI_DEVICE_USB_HOST, 1, MIDI_NOTE_OFF + 1,((i+8)&15)*2+97,64);}
		}
		if(edit==3)
		{
			if((KEYED>>(i+16))&1){MidiSend3((midi_device_t) MIDI_DEVICE_USB_HOST, 1, MIDI_NOTE_ON + 1,((i+8)&15)*2+97,64);}
						else{MidiSend3((midi_device_t) MIDI_DEVICE_USB_HOST, 1, MIDI_NOTE_OFF + 1,((i+8)&15)*2+97,64);}
		}
		
	}

}

 if ((status == 1+ MIDI_CONTROL_CHANGE)&&(data1 > 0)&&(data1<17)) {
 if(edit==0){
 uint32_t TMP1=cHn&((1<<15+data1)-1);
 uint32_t TMP2=(uint32_t)(cHn>>(16+data1))<<(16+data1);
 cHn=TMP1+TMP2+(data2>0?(1<<(data1+15)):0);
 }
 if(edit==1){
 uint32_t TMP1=MUTE&((1<<15+data1)-1);
 uint32_t TMP2=(uint32_t)(MUTE>>(16+data1))<<(16+data1);
 MUTE=TMP1+TMP2+(data2>0?(1<<(data1+15)):0);
 MidiSend3((midi_device_t) MIDI_DEVICE_DIN, 1, MIDI_CONTROL_CHANGE + (data1-1),MIDI_C_ALL_NOTES_OFF,0);
 }
 if(edit==2){
 uint32_t TMP1=SOLO&((1<<15+data1)-1);
 uint32_t TMP2=(uint32_t)(SOLO>>(16+data1))<<(16+data1);
 SOLO=TMP1+TMP2+(data2>0?(1<<(data1+15)):0);
 }
 if(edit==3){
 uint32_t TMP1=KEYED&((1<<15+data1)-1);
 uint32_t TMP2=(uint32_t)(KEYED>>(16+data1))<<(16+data1);
 KEYED=TMP1+TMP2+(data2>0?(1<<(data1+15)):0);
 }
 upd=1;	
 }

 if ((status == 2+MIDI_CONTROL_CHANGE)&&(data1>13)&&(data1<17)){
 MidiSend3((midi_device_t) MIDI_DEVICE_DIN, 1, status-(status&15),data1,data2);
 }]]></code.midihandler>
      </object>
   </patchobj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="tail" x="1400" y="308">
      <params>
         <frac32.u.map name="value" value="13.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="logic/counter" uuid="7a141ba82230e54e5f5cd12da5dbe5a74ba854a5" name="counter_2" x="350" y="826">
      <params>
         <int32 name="maximum" value="48"/>
      </params>
      <attribs/>
   </obj>
   <obj type="logic/counter" uuid="7a141ba82230e54e5f5cd12da5dbe5a74ba854a5" name="counter_3" x="434" y="826">
      <params>
         <int32 name="maximum" value="64"/>
      </params>
      <attribs/>
   </obj>
   <obj type="sss/logic/countExt" uuid="44ed9668-63af-48f8-a018-99db931c5e37" name="countExt_4" x="518" y="826">
      <params>
         <int32 name="max" value="384"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="f9352b37-3e9f-4e05-a5f3-325596f28141" name="clock_2" x="644" y="826">
      <params/>
      <attribs>
         <combo attributeName="device" selection="din"/>
      </attribs>
      <object id="patch/object" uuid="f9352b37-3e9f-4e05-a5f3-325596f28141">
         <sDescription>Midi clock master, als outputs Midi clock, start, stop, and continue messages</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>midi_out.axh</helpPatch>
         <inlets>
            <bool32 name="run" description="Run"/>
            <int32 name="clock"/>
         </inlets>
         <outlets/>
         <displays/>
         <params/>
         <attribs>
            <combo name="device">
               <MenuEntries>
                  <string>din</string>
                  <string>usb host port 1</string>
                  <string>usb host port 2</string>
                  <string>usb host port 3</string>
                  <string>usb host port 4</string>
                  <string>internal port 1</string>
                  <string>internal port 2</string>
                  <string>usb device port 1</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_DIN, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 2</string>
                  <string>MIDI_DEVICE_USB_HOST, 3</string>
                  <string>MIDI_DEVICE_USB_HOST, 4</string>
                  <string>MIDI_DEVICE_INTERNAL, 1</string>
                  <string>MIDI_DEVICE_INTERNAL, 2</string>
                  <string>MIDI_DEVICE_USB_DEVICE, 1</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[bool _active;
int32_t _posfrac;
int32_t _pos24ppq;
bool rstp;]]></code.declaration>
         <code.init><![CDATA[_active = 0;
_posfrac = 0;
_pos24ppq = 0;
rstp = 0;]]></code.init>
         <code.krate><![CDATA[if (inlet_run && !_active) {
  _active = 1;
  if (_pos24ppq)     MidiSend1((midi_device_t) attr_device, MIDI_CONTINUE);
  else     MidiSend1((midi_device_t) attr_device, MIDI_START);
} else if (!inlet_run && _active){
  _active = 0;
  MidiSend1((midi_device_t) attr_device, MIDI_STOP);
}if (_active) {

  if (!(inlet_clock==_posfrac)) {

    MidiSend1((midi_device_t) attr_device,MIDI_TIMING_CLOCK);
  }
}
_posfrac=inlet_clock;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="d23483bd-82c7-45d4-91eb-6274d352eeaa" name="THRU_1" x="1456" y="826">
      <params/>
      <attribs>
         <combo attributeName="device" selection="din"/>
      </attribs>
      <object id="patch/object" uuid="d23483bd-82c7-45d4-91eb-6274d352eeaa">
         <sDescription>midi thru module for all channels and all data types</sDescription>
         <author>Remco van der Most</author>
         <license>BSD</license>
         <helpPatch>midi_in.axh</helpPatch>
         <inlets/>
         <outlets/>
         <displays/>
         <params/>
         <attribs>
            <combo name="device">
               <MenuEntries>
                  <string>din</string>
                  <string>usb host port 1</string>
                  <string>usb host port 2</string>
                  <string>usb host port 3</string>
                  <string>usb host port 4</string>
                  <string>internal port 1</string>
                  <string>internal port 2</string>
                  <string>usb device port 1</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_DIN, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 2</string>
                  <string>MIDI_DEVICE_USB_HOST, 3</string>
                  <string>MIDI_DEVICE_USB_HOST, 4</string>
                  <string>MIDI_DEVICE_INTERNAL, 1</string>
                  <string>MIDI_DEVICE_INTERNAL, 2</string>
                  <string>MIDI_DEVICE_USB_DEVICE, 1</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.krate><![CDATA[/*
 HOORT IN MIDI CODE:
 
 if ((status&15)==11) {
MidiSend3((midi_device_t) attr_device, status,data1,data2);
}
*/]]></code.krate>
      </object>
   </patchobj>
   <nets>
      <net>
         <source obj="BPM_2" outlet="vari1"/>
         <dest obj="counter_2" inlet="trig"/>
         <dest obj="main count" inlet="trig"/>
      </net>
      <net>
         <source obj="main count" outlet="o"/>
         <dest obj="write quantizer" inlet="in1"/>
         <dest obj="read quantizer" inlet="in1"/>
      </net>
      <net>
         <source obj="port" outlet="o"/>
         <dest obj="keyb_1" inlet="port"/>
      </net>
      <net>
         <source obj="indexed_1" outlet="out"/>
         <dest obj="keyb_1" inlet="filename"/>
      </net>
      <net>
         <source obj="load" outlet="o"/>
         <dest obj="keyb_1" inlet="load"/>
      </net>
      <net>
         <source obj="save" outlet="o"/>
         <dest obj="keyb_1" inlet="save"/>
      </net>
      <net>
         <source obj="i_1" outlet="out"/>
         <dest obj="indexed_1" inlet="index"/>
      </net>
      <net>
         <source obj="delete" outlet="o"/>
         <dest obj="object_1" inlet="button"/>
         <dest obj="keyb_1" inlet="DelChnl"/>
      </net>
      <net>
         <source obj="fromMin" outlet="out"/>
         <dest obj="keyb_1" inlet="fromMin"/>
      </net>
      <net>
         <source obj="fromMax" outlet="out"/>
         <dest obj="keyb_1" inlet="fromMax"/>
      </net>
      <net>
         <source obj="toMin" outlet="out"/>
         <dest obj="keyb_1" inlet="toMin"/>
      </net>
      <net>
         <source obj="toMax" outlet="out"/>
         <dest obj="keyb_1" inlet="toMax"/>
      </net>
      <net>
         <source obj="copy" outlet="o"/>
         <dest obj="keyb_1" inlet="copy"/>
      </net>
      <net>
         <source obj="main count" outlet="c"/>
         <dest obj="counter_2" inlet="r"/>
      </net>
      <net>
         <source obj="main count" outlet="max"/>
         <dest obj="keyb_1" inlet="maxcount"/>
      </net>
      <net>
         <source obj="toggle_1" outlet="o"/>
         <dest obj="countExt_4" inlet="r"/>
         <dest obj="clock_2" inlet="run"/>
         <dest obj="main count" inlet="r"/>
         <dest obj="mux_1" inlet="s"/>
         <dest obj="BPM_2" inlet="reset"/>
         <dest obj="BPM_2" inlet="active"/>
         <dest obj="keyb_1" inlet="active"/>
      </net>
      <net>
         <source obj="BPM_2" outlet="vari2"/>
         <dest obj="countExt_4" inlet="trig"/>
      </net>
      <net>
         <source obj="countExt_4" outlet="o"/>
         <dest obj="clock_2" inlet="clock"/>
      </net>
      <net>
         <source obj="BPM" outlet="BPM"/>
         <dest obj="mux_1" inlet="i2"/>
      </net>
      <net>
         <source obj="mux_1" outlet="o"/>
         <dest obj="BPM_2" inlet="BPM"/>
      </net>
      <net>
         <source obj="delay" outlet="o"/>
         <dest obj="keyb_1" inlet="delay"/>
      </net>
      <net>
         <source obj="time" outlet="out"/>
         <dest obj="keyb_1" inlet="time"/>
      </net>
      <net>
         <source obj="transpose" outlet="out"/>
         <dest obj="keyb_1" inlet="transpose"/>
      </net>
      <net>
         <source obj="tail" outlet="out"/>
         <dest obj="keyb_1" inlet="tail"/>
      </net>
      <net>
         <source obj="repeats" outlet="out"/>
         <dest obj="keyb_1" inlet="repeats"/>
      </net>
      <net>
         <source obj="bound" outlet="o"/>
         <dest obj="keyb_1" inlet="bound"/>
      </net>
      <net>
         <source obj="read quantizer" outlet="out"/>
         <dest obj="keyb_1" inlet="read"/>
      </net>
      <net>
         <source obj="counter_2" outlet="c"/>
         <dest obj="counter_3" inlet="trig"/>
      </net>
      <net>
         <source obj="write quantizer" outlet="out"/>
         <dest obj="keyb_1" inlet="write"/>
      </net>
      <net>
         <source obj="bars" outlet="out"/>
         <dest obj="*_1" inlet="a"/>
      </net>
      <net>
         <source obj="barlength" outlet="out"/>
         <dest obj="*_1" inlet="b"/>
      </net>
      <net>
         <source obj="*_1" outlet="result"/>
         <dest obj="main count" inlet="MaxCount"/>
      </net>
      <net>
         <source obj="object_1" outlet="trg"/>
         <dest obj="keyb_1" inlet="undo"/>
      </net>
      <net>
         <source obj="object_1" outlet="erase"/>
         <dest obj="keyb_1" inlet="erase"/>
      </net>
      <net>
         <source obj="key-scale" outlet="key"/>
         <dest obj="keyb_1" inlet="key"/>
      </net>
      <net>
         <source obj="key-scale" outlet="scale"/>
         <dest obj="keyb_1" inlet="scale"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>-8</x>
      <y>-8</y>
      <width>1296</width>
      <height>1000</height>
   </windowPos>
</patch-1.0>