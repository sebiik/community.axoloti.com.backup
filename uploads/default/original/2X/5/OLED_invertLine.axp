<patch-1.0 appVersion="1.0.12">
   <obj type="gpio/i2c/config" uuid="b095a33e56de5fcd23740a7d983bc0bafb315d81" name="config_1" x="336" y="56">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="7d23af4d-dce0-4ba8-bab2-2f1785ee90b5" name="font5x8_original" x="448" y="56">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="7d23af4d-dce0-4ba8-bab2-2f1785ee90b5">
         <inlets/>
         <outlets/>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[#ifndef __TIAR_FONT5X8
#define __TIAR_FONT5X8
const uint8_t font5x8[96*5] = {
    //   32
    0b00000000, //                 
    0b00000000, //                 
    0b00000000, //                 
    0b00000000, //                 
    0b00000000, //                 

    // ! 33
    0b00000000, //                 
    0b10111100, // XX  XXXXXXXX    
    0b00000000, //                 
    0b00000000, //                 
    0b00000000, //                 

    // " 34
    0b00000000, //                 
    0b00000110, //           XXXX  
    0b00000000, //                 
    0b00000110, //           XXXX  
    0b00000000, //                 

    // # 35
    0b00100100, //     XX    XX    
    0b01111110, //   XXXXXXXXXXXX  
    0b00100100, //     XX    XX    
    0b01111110, //   XXXXXXXXXXXX  
    0b00100100, //     XX    XX    

    // $ 36                      <---------------------
    0b11111111, // XXXXXXXXXXXXXXXX  
    0b01001100, //   XX    XXXX      
    0b01010000, //   XX  XX      
    0b00110000, //     XX      
    0b00000000, // 

    // % 37
    0b10001000, // XX      XX    
    0b01000000, //   XX          
    0b00100000, //     XX          
    0b00010000, //       XX        
    0b10001000, // XX      XX      

    // & 38
    0b01101000, //   XXXX  XX      
    0b10010100, // XX    XX  XX    
    0b10101000, // XX  XX  XX      
    0b01000000, //   XX            
    0b10100000, // XX  XX          

    // ' 39
    0b00000000, //                 
    0b00000000, //                 
    0b00000010, //             XX  
    0b00000001, //               XX
    0b00000000, //                 

    // ( 40
    0b00000000, //                 
    0b00000000, //                 
    0b01111000, //   XXXXXXXX      
    0b10000100, // XX        XX    
    0b00000000, //                 

    // ) 41
    0b00000000, //                 
    0b10000100, // XX        XX    
    0b01111000, //   XXXXXXXX      
    0b00000000, //                 
    0b00000000, //                 

    // * 42
    0b00100000, //     XX          
    0b10101000, // XX  XX  XX      
    0b01110000, //   XXXXXX        
    0b10101000, // XX  XX  XX      
    0b00100000, //     XX          

    // + 43
    0b00100000, //     XX          
    0b00100000, //     XX          
    0b11111000, // XXXXXXXXXX      
    0b00100000, //     XX          
    0b00100000, //     XX          

    // , 44
    0b10000000, // XX              
    0b01100000, //   XXXX          
    0b00000000, //                 
    0b00000000, //                 
    0b00000000, //                 

    // - 45
    0b00000000, //               
    0b00000000, //               
    0b00100000, //     XX          
    0b00100000, //     XX          
    0b00100000, //     XX          

    // . 46
    0b00000000, //                 
    0b11000000, // XXXX            
    0b11000000, // XXXX            
    0b00000000, //                 
    0b00000000, //                 

    // / 47
    0b01000000, //   XX            
    0b00100000, //     XX          
    0b00010000, //       XX        
    0b00001000, //         XX      
    0b00000100, //           XX      

    // 0 48
    0b01111000, //   XXXXXXXX      
    0b10000100, // XX        XX    
    0b10000100, // XX        XX    
    0b10000100, // XX        XX    
    0b01111000, //   XXXXXXXX      

    // 1 49
    0b10001000, // XX      XX      
    0b10000100, // XX        XX    
    0b11111100, // XXXXXXXXXXXX    
    0b10000000, // XX              
    0b10000000, // XX              

    // 2 50
    0b11001000, // XXXX    XX      
    0b10100100, // XX  XX    XX    
    0b10100100, // XX  XX    XX    
    0b10100100, // XX  XX    XX    
    0b10011000, // XX    XXXX      

    // 3 51
    0b01001000, //   XX    XX      
    0b10000100, // XX        XX    
    0b10010100, // XX    XX  XX    
    0b10010100, // XX    XX  XX    
    0b01101000, //   XXXX  XX      

    // 4 52
    0b00110000, //    XXXX          
    0b00101000, //    XX  XX        
    0b11111100, // XXXXXXXXXXXX    
    0b00100000, //    XX            
    0b00100000, //    XX            

    // 5 53
    0b01011100, //   XX  XXXXXX    
    0b10010100, // XX    XX  XX    
    0b10010100, // XX    XX  XX    
    0b10010100, // XX    XX  XX    
    0b01100100, //   XXXX    XX    

    // 6 54
    0b01111000, //   XXXXXXXX      
    0b10010100, // XX    XX  XX    
    0b10010100, // XX    XX  XX    
    0b10010100, // XX    XX  XX    
    0b01100000, //   XXXX          

    // 7 55
    0b00000100, //           XX    
    0b11000100, // XXXX      XX    
    0b00100100, //     XX    XX    
    0b00010100, //       XX  XX    
    0b00001100, //         XXXX    

    // 8 56
    0b01101000, //   XXXX  XX      
    0b10010100, // XX    XX  XX    
    0b10010100, // XX    XX  XX    
    0b10010100, // XX    XX  XX    
    0b01101000, //   XXXX  XX      

    // 9 57
    0b00011000, //       XXXX      
    0b10100100, // XX  XX    XX    
    0b10100100, // XX  XX    XX    
    0b10100100, // XX  XX    XX    
    0b01111000, //   XXXXXXXX      

    // : 58
    0b00000000, //                 
    0b00000000, //                 
    0b01001000, //   XX    XX        
    0b00000000, //                 
    0b00000000, //                 

    // ; 59
    0b00000000, //                 
    0b10000000, // XX              
    0b01100100, //   XXXX    XX    
    0b00000000, //                 
    0b00000000, //                 

    // < 60
    0b00000000, //               
    0b00100000, //     XX          
    0b01010000, //   XX  XX        
    0b10001000, // XX      XX      
    0b00000000, //                 

    // = 61
    0b01010000, //   XX  XX      
    0b01010000, //   XX  XX      
    0b01010000, //   XX  XX      
    0b01010000, //   XX  XX      
    0b00000000, //                 

    // > 62
    0b00000000, //                 
    0b10001000, // XX      XX      
    0b01010000, //   XX  XX        
    0b00100000, //     XX          
    0b00000000, //                 

    // ? 63
    0b00001000, //         XX      
    0b00000100, //           XX    
    0b10100100, // XX  XX    XX    
    0b00010100, //       XX  XX    
    0b00001000, //         XX      

    // @ 64
    0b01111000, //   XXXXXXXX      
    0b10000100, // XX        XX    
    0b10101100, // XX  XX  XXXX    
    0b10110100, // XX  XXXX  XX    
    0b00111000, //     XXXXXX      

    // A 65
    0b11111000, // XXXXXXXXXX      
    0b00100100, //     XX    XX    
    0b00100100, //     XX    XX    
    0b00100100, //     XX    XX    
    0b11111000, // XXXXXXXXXX      

    // B 66
    0b11111100, // XXXXXXXXXXXX    
    0b10010100, // XX    XX  XX    
    0b10010100, // XX    XX  XX    
    0b10010100, // XX    XX  XX    
    0b01101000, //   XXXX  XX      

    // C 67
    0b01111000, //   XXXXXXXX
    0b10000100, // XX        XX
    0b10000100, // XX        XX
    0b10000100, // XX        XX
    0b01001000, //   XX    XX

    // D 68
    0b11111100, // XXXXXXXXXXXX
    0b10000100, // XX        XX
    0b10000100, // XX        XX
    0b01001000, //   XX    XX
    0b00110000, //     XXXX

    // E 69
    0b11111100, // XXXXXXXXXXXX
    0b10010100, // XX    XX  XX
    0b10010100, // XX    XX  XX
    0b10010100, // XX    XX  XX
    0b10000100, // XX        XX

    // F 70
    0b11111100, // XXXXXXXXXXXX
    0b00010100, //       XX  XX
    0b00010100, //       XX  XX
    0b00010100, //       XX  XX
    0b00000100, //           XX

    // G 71
    0b01111000, //   XXXXXXXX
    0b10000100, // XX        XX
    0b10100100, // XX  XX    XX
    0b10100100, // XX  XX    XX
    0b01101000, //   XXXX  XX

    // H 72
    0b11111100, // XXXXXXXXXXXX
    0b00010000, //       XX
    0b00010000, //       XX
    0b00010000, //       XX
    0b11111100, // XXXXXXXXXXXX

    // I 73
    0b10000100, // XX        XX
    0b10000100, // XX        XX
    0b11111100, // XXXXXXXXXXXX
    0b10000100, // XX        XX
    0b10000100, // XX        XX

    // J 74
    0b01100000, //   XXXX
    0b10000000, // XX
    0b10000000, // XX
    0b10000000, // XX
    0b01111100, //   XXXXXXXXXX

    // K 75
    0b11111100, // XXXXXXXXXXXX
    0b00010000, //       XX
    0b00101000, //     XX  XX
    0b01000100, //   XX      XX
    0b10000000, // XX

    // L 76
    0b11111100, // XXXXXXXXXXXX
    0b10000000, // XX
    0b10000000, // XX
    0b10000000, // XX
    0b10000000, // XX

    // M 77
    0b11111100, // XXXXXXXXXXXX
    0b00001000, //         XX
    0b00010000, //       XX
    0b00001000, //         XX
    0b11111100, // XXXXXXXXXXXX

    // N 78
    0b11111100, // XXXXXXXXXXXX    
    0b00001000, //         XX      
    0b00010000, //       XX        
    0b00100000, //     XX          
    0b11111100, // XXXXXXXXXXXX    

    // O 79
    0b01111000, //   XXXXXXXX
    0b10000100, // XX        XX
    0b10000100, // XX        XX
    0b10000100, // XX        XX
    0b01111000, //   XXXXXXXX

    // P 80
    0b11111100, // XXXXXXXXXXXX
    0b00100100, //     XX    XX
    0b00100100, //     XX    XX
    0b00100100, //     XX    XX
    0b00011000, //       XXXX

    // Q 81
    0b01111000, //   XXXXXXXX      
    0b10000100, // XX        XX    
    0b10100100, // XX  XX    XX    
    0b11000100, // XXXX      XX    
    0b01111000, //   XXXXXXXX      

    // R 82
    0b11111100, // XXXXXXXXXXXX    
    0b00100100, //     XX    XX    
    0b00100100, //     XX    XX    
    0b01100100, //   XXXX    XX    
    0b10011000, // XX    XXXX      

    // S 83
    0b01001000, //   XX    XX
    0b10010100, // XX    XX  XX
    0b10010100, // XX    XX  XX
    0b10010100, // XX    XX  XX
    0b01100000, //   XXXX

    // T 84
    0b00000100, //           XX    
    0b00000100, //           XX    
    0b11111100, // XXXXXXXXXXXX    
    0b00000100, //           XX    
    0b00000100, //           XX    

    // U 85
    0b01111100, //   XXXXXXXXXX
    0b10000000, // XX
    0b10000000, // XX
    0b10000000, // XX
    0b01111100, //   XXXXXXXXXX

    // V 86
    0b00111100, //     XXXXXXXX
    0b01000000, //   XX
    0b10000000, // XX
    0b01000000, //   XX
    0b00111100, //     XXXXXXXX

    // W 87
    0b01111100, //   XXXXXXXXXX
    0b10000000, // XX
    0b01000000, //   XX
    0b10000000, // XX
    0b01111100, //   XXXXXXXXXX

    // X 88
    0b10000100, // XX        XX
    0b01001000, //   XX    XX
    0b00110000, //     XXXX
    0b01001000, //   XX    XX
    0b10000100, // XX        XX

    // Y 89
    0b00000100, //           XX
    0b00001000, //         XX
    0b11110000, // XXXXXXXX
    0b00001000, //         XX
    0b00000100, //           XX

    // Z 90
    0b11000100, // XXXX      XX
    0b10100100, // XX  XX    XX
    0b10010100, // XX    XX  XX
    0b10001100, // XX      XXXX
    0b10000100, // XX        XX

    // [ 91
    0b00000000, //                 
    0b00000000, //                 
    0b11111100, // XXXXXXXXXXXX    
    0b10000100, // XX        XX    
    0b10000100, // XX        XX    

    // \ 92
    0b00001000, //         XX      
    0b00010000, //       XX        
    0b00100000, //     XX          
    0b01000000, //   XX            
    0b10000000, // XX              

    // ] 93
    0b10000100, // XX        XX    
    0b10000100, // XX        XX    
    0b11111100, // XXXXXXXXXXXX    
    0b00000000, //                 
    0b00000000, //                 

    // ^ 94   <---------------------------------------
    0b01100000, //   XXXX      
    0b11110000, // XXXXXXXX        
    0b11110000, // XXXXXXXX        
    0b01111111, //   XXXXXXXXXXXXXX
    0b00000000, //

    // _ 95
    0b10000000, // XX              
    0b10000000, // XX              
    0b10000000, // XX              
    0b10000000, // XX              
    0b10000000, // XX              

    // ` 96
    0b00000000, //                 
    0b00000000, //                 
    0b00000010, //             XX
    0b00000100, //           XX  
    0b00000000, //                 

    // a 97
    0b01000000, //   XX            
    0b10101000, // XX  XX  XX      
    0b10101000, // XX  XX  XX      
    0b10101000, // XX  XX  XX      
    0b11110000, // XXXXXXXX        

    // b 98
    0b11111100, // XXXXXXXXXXXX    
    0b10010000, // XX    XX        
    0b10010000, // XX    XX        
    0b10010000, // XX    XX        
    0b01100000, //   XXXX          

    // c 99
    0b00000000, //                 
    0b01110000, //   XXXXXX        
    0b10001000, // XX      XX      
    0b10001000, // XX      XX      
    0b10001000, // XX      XX      

    // d 100
    0b01100000, //   XXXX          
    0b10010000, // XX    XX        
    0b10010000, // XX    XX        
    0b10010000, // XX    XX        
    0b11111100, // XXXXXXXXXXXX    

    // e 101
    0b01110000, //   XXXXXX        
    0b10101000, // XX  XX  XX      
    0b10101000, // XX  XX  XX      
    0b10101000, // XX  XX  XX      
    0b10010000, // XX    XX        

    // f 102
    0b00000000, //                 
    0b11111000, // XXXXXXXXXX      
    0b00010100, //       XX  XX    
    0b00010100, //       XX  XX    
    0b00000100, //           XX    

    // g 103
    0b00011000, //       XXXX        
    0b00100100, //     XX    XX      
    0b10100100, // XX  XX    XX      
    0b10100100, // XX  XX    XX      
    0b01111100, //   XXXXXXXXXX      

    // h 104
    0b11111100, // XXXXXXXXXXXX    
    0b00010000, //       XX        
    0b00010000, //       XX        
    0b00010000, //       XX        
    0b11100000, // XXXXXX          

    // i 105
    0b00000000, //                 
    0b10010000, // XX    XX        
    0b11110100, // XXXXXXXX  XX    
    0b10000000, // XX              
    0b00000000, //                 

    // j 106
    0b01000000, //   XX              
    0b10000000, // XX                
    0b10000000, // XX                
    0b01111010, //   XXXXXXXX  XX    
    0b00000000, //                 

    // k 107
    0b00000000, //                 
    0b11111100, // XXXXXXXXXXXX    
    0b00110000, //     XXXX        
    0b01001000, //   XX    XX      
    0b10000000, // XX              

    // l 108
    0b00000000, //                 
    0b01111100, //   XXXXXXXXXX    
    0b10000000, // XX              
    0b10000000, // XX              
    0b00000000, //                 

    // m 109
    0b11111000, // XXXXXXXXXX      
    0b00001000, //         XX      
    0b11110000, // XXXXXXXX        
    0b00001000, //         XX      
    0b11110000, // XXXXXXXX        

    // n 110
    0b11111000, // XXXXXXXXXX      
    0b00001000, //         XX      
    0b00001000, //         XX      
    0b00001000, //         XX      
    0b11110000, // XXXXXXXX        

    // o 111
    0b01110000, //   XXXXXX        
    0b10001000, // XX      XX      
    0b10001000, // XX      XX      
    0b10001000, // XX      XX      
    0b01110000, //   XXXXXX        

    // p 112
    0b11111000, // XXXXXXXXXX      
    0b01001000, //   XX    XX      
    0b01001000, //   XX    XX      
    0b01001000, //   XX    XX      
    0b00110000, //     XXXX        

    // q 113
    0b00110000, //     XXXX        
    0b01001000, //   XX    XX      
    0b01001000, //   XX    XX      
    0b01001000, //   XX    XX      
    0b11111000, // XXXXXXXXXX      

    // r 114
    0b00000000, //                 
    0b11110000, // XXXXXXXX        
    0b00001000, //         XX      
    0b00001000, //         XX      
    0b00001000, //         XX      

    // s 115
    0b10010000, // XX    XX        
    0b10101000, // XX  XX  XX      
    0b10101000, // XX  XX  XX      
    0b10101000, // XX  XX  XX      
    0b01000000, //   XX            

    // t 116
    0b00000000, //                 
    0b00001000, //         XX      
    0b01111100, //   XXXXXXXXXX    
    0b10001000, // XX      XX      
    0b10000000, // XX              

    // u 117
    0b01111000, //   XXXXXXXX      
    0b10000000, // XX              
    0b10000000, // XX              
    0b10000000, // XX              
    0b01111000, //   XXXXXXXX      

    // v 118
    0b00011000, //       XXXX      
    0b01100000, //   XXXX          
    0b10000000, // XX              
    0b01100000, //   XXXX          
    0b00011000, //       XXXX      

    // w 119
    0b01111000, //   XXXXXXXX      
    0b10000000, // XX              
    0b01110000, //   XXXXXX        
    0b10000000, // XX              
    0b01111000, //   XXXXXXXX      

    // x 120
    0b10001000, // XX      XX      
    0b01010000, //   XX  XX        
    0b00100000, //     XX          
    0b01010000, //   XX  XX        
    0b10001000, // XX      XX      

    // y 121
    0b00011100, //       XXXXXX    
    0b10100000, // XX  XX          
    0b10100000, // XX  XX          
    0b10100000, // XX  XX          
    0b01111100, //   XXXXXXXXXX    

    // z 122
    0b10001000, // XX      XX      
    0b11001000, // XXXX    XX      
    0b10101000, // XX  XX  XX      
    0b10011000, // XX    XXXX      
    0b10001000, // XX      XX      

    // { 123
    0b00010000, //       XX        
    0b00010000, //       XX        
    0b01101100, //   XXXX  XXXX    
    0b10000010, // XX          XX    
    0b10000010, // XX          XX    

    // | 124
    0b00000000, //                 
    0b00000000, //                 
    0b11111111, // XXXXXXXXXXXXXXXX    
    0b00000000, //                 
    0b00000000, //                 

    // } 125
    0b10000010, // XX          XX    
    0b10000010, // XX          XX    
    0b01101100, //   XXXX  XXXX      
    0b00010000, //       XX        
    0b00010000, //       XX        

    // ~ 126
    0b00000000, //                 
    0b10010000, // XX    XX  
    0b10001000, // XX      XX
    0b10010000, // XX    XX  
    0b10001000, // XX      XX

    //  127
    0b10101010, // XX  XX  XX  XX  
    0b01010100, //   XX  XX  XX  
    0b10101010, // XX  XX  XX  XX  
    0b01010100, //   XX  XX  XX  
    0b10101010  // XX  XX  XX  XX  
};
#endif]]></code.declaration>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="7d23af4d-dce0-4ba8-bab2-2f1785ee90b5" name="font5x8_offset" x="532" y="56">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="7d23af4d-dce0-4ba8-bab2-2f1785ee90b5">
         <inlets/>
         <outlets/>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[#ifndef __TIAR_FONT5X8_OFFSET
#define __TIAR_FONT5X8_OFFSET

const uint8_t font5x8[96*5] = {
    //   32
    0b00000000, //
    0b00000000, //
    0b00000000, //
    0b00000000, //
    0b00000000, //

    // ! 33
    0b00000000, //
    0b01011110, // XX  XXXXXXXX
    0b00000000, //
    0b00000000, //
    0b00000000, //

    // " 34
    0b00000000, //
    0b00000110, //         XXXX
    0b00000000, //
    0b00000110, //         XXXX
    0b00000000, //

    // # 35
    0b00100100, //   XX    XX
    0b01111110, // XXXXXXXXXXXX
    0b00100100, //   XX    XX
    0b01111110, // XXXXXXXXXXXX
    0b00100100, //   XX    XX

    // $ 36                      <---------------------
    0b01111111, // XXXXXXXXXXXXXXXX
    0b00100110, //   XX    XXXX
    0b00101000, //   XX  XX
    0b00011000, //     XX
    0b00000000, //

    // % 37
    0b01000100, // XX      XX
    0b00100000, //   XX
    0b00010000, //     XX
    0b00001000, //       XX
    0b01000100, // XX      XX

    // & 38
    0b00110100, //   XXXX  XX
    0b01001010, // XX    XX  XX
    0b01010100, // XX  XX  XX
    0b00100000, //   XX
    0b01010000, // XX  XX

    // ' 39
    0b00000000, //
    0b00000000, //
    0b00000100, //             XX
    0b00000010, //               XX
    0b00000000, //

    // ( 40
    0b00000000, //
    0b00000000, //
    0b00111100, //   XXXXXXXX
    0b01000010, // XX        XX
    0b00000000, //

    // ) 41
    0b00000000, //
    0b01000010, // XX        XX
    0b00111100, //   XXXXXXXX
    0b00000000, //
    0b00000000, //

    // * 42
    0b00010000, //     XX
    0b01010100, // XX  XX  XX
    0b00111000, //   XXXXXX
    0b01010100, // XX  XX  XX
    0b00010000, //     XX

    // + 43
    0b00010000, //     XX
    0b00010000, //     XX
    0b01111100, // XXXXXXXXXX
    0b00010000, //     XX
    0b00010000, //     XX

    // , 44
    0b01000000, // XX
    0b00110000, //   XXXX
    0b00000000, //
    0b00000000, //
    0b00000000, //

    // - 45
    0b00000000, //
    0b00000000, //
    0b00010000, //     XX
    0b00010000, //     XX
    0b00010000, //     XX

    // . 46
    0b00000000, //
    0b01100000, // XXXX
    0b01100000, // XXXX
    0b00000000, //
    0b00000000, //

    // / 47
    0b00100000, //   XX
    0b00010000, //     XX
    0b00001000, //       XX
    0b00000100, //         XX
    0b00000010, //           XX

    // 0 48
    0b00111100, //   XXXXXXXX
    0b01000010, // XX        XX
    0b01000010, // XX        XX
    0b01000010, // XX        XX
    0b00111100, //   XXXXXXXX

    // 1 49
    0b01000100, // XX      XX
    0b01000010, // XX        XX
    0b01111110, // XXXXXXXXXXXX
    0b01000000, // XX
    0b01000000, // XX

    // 2 50
    0b01100100, // XXXX    XX
    0b01010010, // XX  XX    XX
    0b01010010, // XX  XX    XX
    0b01010010, // XX  XX    XX
    0b01001100, // XX    XXXX

    // 3 51
    0b00100100, //   XX    XX
    0b01000010, // XX        XX
    0b01001010, // XX    XX  XX
    0b01001010, // XX    XX  XX
    0b00110100, //   XXXX  XX

    // 4 52
    0b00011000, //    XXXX
    0b00010100, //    XX  XX
    0b01111110, // XXXXXXXXXXXX
    0b00010000, //    XX
    0b00010000, //    XX

    // 5 53
    0b00101110, //   XX  XXXXXX
    0b01001010, // XX    XX  XX
    0b01001010, // XX    XX  XX
    0b01001010, // XX    XX  XX
    0b00110010, //   XXXX    XX

    // 6 54
    0b00111100, //   XXXXXXXX
    0b01001010, // XX    XX  XX
    0b01001010, // XX    XX  XX
    0b01001010, // XX    XX  XX
    0b00110000, //   XXXX

    // 7 55
    0b00000010, //           XX
    0b01100010, // XXXX      XX
    0b00010010, //     XX    XX
    0b00001010, //       XX  XX
    0b00000110, //         XXXX

    // 8 56
    0b00110100, //   XXXX  XX
    0b01001010, // XX    XX  XX
    0b01001010, // XX    XX  XX
    0b01001010, // XX    XX  XX
    0b00110100, //   XXXX  XX

    // 9 57
    0b00001100, //       XXXX
    0b01010010, // XX  XX    XX
    0b01010010, // XX  XX    XX
    0b01010010, // XX  XX    XX
    0b00111100, //   XXXXXXXX

    // : 58
    0b00000000, //
    0b00000000, //
    0b00100100, //   XX    XX
    0b00000000, //
    0b00000000, //

    // ; 59
    0b00000000, //
    0b01000000, // XX
    0b00110010, //   XXXX    XX
    0b00000000, //
    0b00000000, //

    // < 60
    0b00000000, //
    0b00010000, //     XX
    0b00101000, //   XX  XX
    0b01000100, // XX      XX
    0b00000000, //

    // = 61
    0b00101000, //   XX  XX
    0b00101000, //   XX  XX
    0b00101000, //   XX  XX
    0b00101000, //   XX  XX
    0b00000000, //

    // > 62
    0b00000000, //
    0b01000100, // XX      XX
    0b00101000, //   XX  XX
    0b00010000, //     XX
    0b00000000, //

    // ? 63
    0b00000100, //         XX
    0b00000010, //           XX
    0b01010010, // XX  XX    XX
    0b00001010, //       XX  XX
    0b00000100, //         XX

    // @ 64
    0b00111100, //   XXXXXXXX
    0b01000010, // XX        XX
    0b01010110, // XX  XX  XXXX
    0b01011010, // XX  XXXX  XX
    0b00011100, //     XXXXXX

    // A 65
    0b01111100, // XXXXXXXXXX
    0b00010010, //     XX    XX
    0b00010010, //     XX    XX
    0b00010010, //     XX    XX
    0b01111100, // XXXXXXXXXX

    // B 66
    0b01111110, // XXXXXXXXXXXX
    0b01001010, // XX    XX  XX
    0b01001010, // XX    XX  XX
    0b01001010, // XX    XX  XX
    0b00110100, //   XXXX  XX

    // C 67
    0b00111100, //   XXXXXXXX
    0b01000010, // XX        XX
    0b01000010, // XX        XX
    0b01000010, // XX        XX
    0b00100100, //   XX    XX

    // D 68
    0b01111110, // XXXXXXXXXXXX
    0b01000010, // XX        XX
    0b01000010, // XX        XX
    0b00100100, //   XX    XX
    0b00011000, //     XXXX

    // E 69
    0b01111110, // XXXXXXXXXXXX
    0b01001010, // XX    XX  XX
    0b01001010, // XX    XX  XX
    0b01001010, // XX    XX  XX
    0b01000010, // XX        XX

    // F 70
    0b01111110, // XXXXXXXXXXXX
    0b00001010, //       XX  XX
    0b00001010, //       XX  XX
    0b00001010, //       XX  XX
    0b00000010, //           XX

    // G 71
    0b00111100, //   XXXXXXXX
    0b01000010, // XX        XX
    0b01010010, // XX  XX    XX
    0b01010010, // XX  XX    XX
    0b00110100, //   XXXX  XX

    // H 72
    0b01111110, // XXXXXXXXXXXX
    0b00001000, //       XX
    0b00001000, //       XX
    0b00001000, //       XX
    0b01111110, // XXXXXXXXXXXX

    // I 73
    0b01000010, // XX        XX
    0b01000010, // XX        XX
    0b01111110, // XXXXXXXXXXXX
    0b01000010, // XX        XX
    0b01000010, // XX        XX

    // J 74
    0b00110000, //   XXXX
    0b01000000, // XX
    0b01000000, // XX
    0b01000000, // XX
    0b00111110, //   XXXXXXXXXX

    // K 75
    0b01111110, // XXXXXXXXXXXX
    0b00001000, //       XX
    0b00010100, //     XX  XX
    0b00100010, //   XX      XX
    0b01000000, // XX

    // L 76
    0b01111110, // XXXXXXXXXXXX
    0b01000000, // XX
    0b01000000, // XX
    0b01000000, // XX
    0b01000000, // XX

    // M 77
    0b01111110, // XXXXXXXXXXXX
    0b00000100, //         XX
    0b00001000, //       XX
    0b00000100, //         XX
    0b01111110, // XXXXXXXXXXXX

    // N 78
    0b01111110, // XXXXXXXXXXXX
    0b00000100, //         XX
    0b00001000, //       XX
    0b00010000, //     XX
    0b01111110, // XXXXXXXXXXXX

    // O 79
    0b00111100, //   XXXXXXXX
    0b01000010, // XX        XX
    0b01000010, // XX        XX
    0b01000010, // XX        XX
    0b00111100, //   XXXXXXXX

    // P 80
    0b01111110, // XXXXXXXXXXXX
    0b00010010, //     XX    XX
    0b00010010, //     XX    XX
    0b00010010, //     XX    XX
    0b00001100, //       XXXX

    // Q 81
    0b00111100, //   XXXXXXXX
    0b01000010, // XX        XX
    0b01010010, // XX  XX    XX
    0b01100010, // XXXX      XX
    0b00111100, //   XXXXXXXX

    // R 82
    0b01111110, // XXXXXXXXXXXX
    0b00010010, //     XX    XX
    0b00010010, //     XX    XX
    0b00110010, //   XXXX    XX
    0b01001100, // XX    XXXX

    // S 83
    0b00100100, //   XX    XX
    0b01001010, // XX    XX  XX
    0b01001010, // XX    XX  XX
    0b01001010, // XX    XX  XX
    0b00110000, //   XXXX

    // T 84
    0b00000010, //           XX
    0b00000010, //           XX
    0b01111110, // XXXXXXXXXXXX
    0b00000010, //           XX
    0b00000010, //           XX

    // U 85
    0b00111110, //   XXXXXXXXXX
    0b01000000, // XX
    0b01000000, // XX
    0b01000000, // XX
    0b00111110, //   XXXXXXXXXX

    // V 86
    0b00011110, //     XXXXXXXX
    0b00100000, //   XX
    0b01000000, // XX
    0b00100000, //   XX
    0b00011110, //     XXXXXXXX

    // W 87
    0b00111110, //   XXXXXXXXXX
    0b01000000, // XX
    0b00110000, //   XXXX
    0b01000000, // XX
    0b00111110, //   XXXXXXXXXX

    // X 88
    0b01000010, // XX        XX
    0b00100100, //   XX    XX
    0b00011000, //     XXXX
    0b00100100, //   XX    XX
    0b01000010, // XX        XX

    // Y 89
    0b00000010, //           XX
    0b00000100, //         XX
    0b01111000, // XXXXXXXX
    0b00000100, //         XX
    0b00000010, //           XX

    // Z 90
    0b01100010, // XXXX      XX
    0b01010010, // XX  XX    XX
    0b01001010, // XX    XX  XX
    0b01000110, // XX      XXXX
    0b01000010, // XX        XX

    // [ 91
    0b00000000, //
    0b00000000, //
    0b01111110, // XXXXXXXXXXXX
    0b01000010, // XX        XX
    0b01000010, // XX        XX

    // \ 92
    0b00000100, //         XX
    0b00001000, //       XX
    0b00010000, //     XX
    0b00100000, //   XX
    0b01000000, // XX

    // ] 93
    0b01000010, // XX        XX
    0b01000010, // XX        XX
    0b01111110, // XXXXXXXXXXXX
    0b00000000, //
    0b00000000, //

    // ^ 94   <---------------------------------------
    0b00110000, //   XXXX
    0b01111000, // XXXXXXXX
    0b01111000, // XXXXXXXX
    0b00111111, //   XXXXXXXXXXXXXX
    0b00000000, //

    // _ 95
    0b01000000, // XX
    0b01000000, // XX
    0b01000000, // XX
    0b01000000, // XX
    0b01000000, // XX

    // ` 96
    0b00000000, //
    0b00000000, //
    0b00000010, //             XX
    0b00000100, //           XX
    0b00000000, //

    // a 97
    0b00100000, //   XX
    0b01010100, // XX  XX  XX
    0b01010100, // XX  XX  XX
    0b01010100, // XX  XX  XX
    0b01111000, // XXXXXXXX

    // b 98
    0b01111110, // XXXXXXXXXXXX
    0b01001000, // XX    XX
    0b01001000, // XX    XX
    0b01001000, // XX    XX
    0b00110000, //   XXXX

    // c 99
    0b00000000, //
    0b00111000, //   XXXXXX
    0b01000100, // XX      XX
    0b01000100, // XX      XX
    0b01000100, // XX      XX

    // d 100
    0b00110000, //   XXXX
    0b01001000, // XX    XX
    0b01001000, // XX    XX
    0b01001000, // XX    XX
    0b01111110, // XXXXXXXXXXXX

    // e 101
    0b00111000, //   XXXXXX
    0b01010100, // XX  XX  XX
    0b01010100, // XX  XX  XX
    0b01010100, // XX  XX  XX
    0b01001000, // XX    XX

    // f 102
    0b00000000, //
    0b01111100, // XXXXXXXXXX
    0b00001010, //       XX  XX
    0b00001010, //       XX  XX
    0b00000010, //           XX

    // g 103
    0b00001100, //       XXXX
    0b00010010, //     XX    XX
    0b01010010, // XX  XX    XX
    0b01010010, // XX  XX    XX
    0b00111110, //   XXXXXXXXXX

    // h 104
    0b01111110, // XXXXXXXXXXXX
    0b00001000, //       XX
    0b00001000, //       XX
    0b00001000, //       XX
    0b01110000, // XXXXXX

    // i 105
    0b00000000, //
    0b01001000, // XX    XX
    0b01111010, // XXXXXXXX  XX
    0b01000000, // XX
    0b00000000, //

    // j 106
    0b00100000, //   XX
    0b01000000, // XX
    0b01000000, // XX
    0b00111010, //   XXXXXX  XX
    0b00000000, //

    // k 107
    0b00000000, //
    0b01111110, // XXXXXXXXXXXX
    0b00011000, //     XXXX
    0b00100100, //   XX    XX
    0b01000000, // XX

    // l 108
    0b00000000, //
    0b00111110, //   XXXXXXXXXX
    0b01000000, // XX
    0b01000000, // XX
    0b00000000, //

    // m 109
    0b01111100, // XXXXXXXXXX
    0b00000100, //         XX
    0b01111000, // XXXXXXXX
    0b00000100, //         XX
    0b01111000, // XXXXXXXX

    // n 110
    0b01111100, // XXXXXXXXXX
    0b00000100, //         XX
    0b00000100, //         XX
    0b00000100, //         XX
    0b01111000, // XXXXXXXX

    // o 111
    0b00111000, //   XXXXXX
    0b01000100, // XX      XX
    0b01000100, // XX      XX
    0b01000100, // XX      XX
    0b00111000, //   XXXXXX

    // p 112
    0b01111100, // XXXXXXXXXX
    0b00100100, //   XX    XX
    0b00100100, //   XX    XX
    0b00100100, //   XX    XX
    0b00011000, //     XXXX

    // q 113
    0b00011000, //     XXXX
    0b00100100, //   XX    XX
    0b00100100, //   XX    XX
    0b00100100, //   XX    XX
    0b01111100, // XXXXXXXXXX

    // r 114
    0b00000000, //
    0b01111000, // XXXXXXXX
    0b00000100, //         XX
    0b00000100, //         XX
    0b00000100, //         XX

    // s 115
    0b01001000, // XX    XX
    0b01010100, // XX  XX  XX
    0b01010100, // XX  XX  XX
    0b01010100, // XX  XX  XX
    0b00100000, //   XX

    // t 116
    0b00000000, //
    0b00000100, //         XX
    0b00111110, //   XXXXXXXXXX
    0b01000100, // XX      XX
    0b01000000, // XX

    // u 117
    0b00111100, //   XXXXXXXX
    0b01000000, // XX
    0b01000000, // XX
    0b01000000, // XX
    0b00111100, //   XXXXXXXX

    // v 118
    0b00001100, //       XXXX
    0b00110000, //   XXXX
    0b01000000, // XX
    0b00110000, //   XXXX
    0b00001100, //       XXXX

    // w 119
    0b00111100, //   XXXXXXXX
    0b01000000, // XX
    0b00111000, //   XXXXXX
    0b01000000, // XX
    0b00111100, //   XXXXXXXX

    // x 120
    0b01000100, // XX      XX
    0b00101000, //   XX  XX
    0b00010000, //     XX
    0b00101000, //   XX  XX
    0b01000100, // XX      XX

    // y 121
    0b00001110, //       XXXXXX
    0b01010000, // XX  XX
    0b01010000, // XX  XX
    0b01010000, // XX  XX
    0b00111110, //   XXXXXXXXXX

    // z 122
    0b01000100, // XX      XX
    0b01100100, // XXXX    XX
    0b01010100, // XX  XX  XX
    0b01001100, // XX    XXXX
    0b01000100, // XX      XX

    // { 123
    0b00001000, //       XX
    0b00001000, //       XX
    0b00110110, //   XXXX  XXXX
    0b01000001, // XX          XX
    0b01000001, // XX          XX

    // | 124
    0b00000000, //
    0b00000000, //
    0b01111111, // XXXXXXXXXXXXXX
    0b00000000, //
    0b00000000, //

    // } 125
    0b01000001, // XX          XX
    0b01000001, // XX          XX
    0b00110110, //   XXXX  XXXX
    0b00001000, //       XX
    0b00001000, //       XX

    // ~ 126
    0b00000000, //
    0b01001000, // XX    XX
    0b01000100, // XX      XX
    0b01001000, // XX    XX
    0b01000100, // XX      XX

    //  127
    0b01010101, // XX  XX  XX  XX
    0b00101010, //   XX  XX  XX
    0b01010101, // XX  XX  XX  XX
    0b00101010, //   XX  XX  XX
    0b01010101  // XX  XX  XX  XX
};
#endif // __TIAR_FONT5X8_OFFSET]]></code.declaration>
      </object>
   </patchobj>
   <obj type="string/c" uuid="4aa90a90c435a742ddfa152d232883fc5b2f1b3" name="c_1" x="196" y="168">
      <params/>
      <attribs>
         <table attributeName="str" table="01234567890"/>
      </attribs>
   </obj>
   <patchobj type="patch/object" uuid="33b40bd7-951e-4206-9f62-77ad9080bc70" name="OLED128x64nice_1" x="364" y="168">
      <params/>
      <attribs>
         <objref attributeName="scope" obj="scopeForOLED_1"/>
         <objref attributeName="fontObject" obj="font5x8_offset"/>
         <combo attributeName="type" selection="SSD1306"/>
         <combo attributeName="I2CADDR" selection="0x3C"/>
      </attribs>
      <object id="patch/object" uuid="33b40bd7-951e-4206-9f62-77ad9080bc70">
         <sDescription>OLED 128x64 SSD1306 or SH1106 on I2C. PB8=SCL PB9=SDA
      needs a single foactory/gpio/i2c/config object
Added an invertLine input which will is off when ==0 and highlight the respective line when &gt;0</sDescription>
         <license>LGPL</license>
         <helpPatch>OLED128x64nice.axh</helpPatch>
         <inlets>
            <charptr32 name="line1"/>
            <charptr32 name="line2"/>
            <charptr32 name="line3"/>
            <charptr32 name="line4"/>
            <int32.positive name="invertLine"/>
            <int32.positive name="mode"/>
            <bool32 name="disable"/>
         </inlets>
         <outlets/>
         <displays/>
         <params/>
         <attribs>
            <objref name="scope"/>
            <objref name="fontObject"/>
            <combo name="type">
               <MenuEntries>
                  <string>SSD1306</string>
                  <string>SH1106</string>
                  <string>SSD1309</string>
               </MenuEntries>
               <CEntries>
                  <string>1306</string>
                  <string>1106</string>
                  <string>1309</string>
               </CEntries>
            </combo>
            <combo name="I2CADDR">
               <MenuEntries>
                  <string>0x3C</string>
                  <string>0x3D</string>
               </MenuEntries>
               <CEntries>
                  <string>0x3C</string>
                  <string>0x3D</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <depends>
            <depend>SD1</depend>
            <depend>I2CD1</depend>
         </depends>
         <code.declaration><![CDATA[enum SSD1306 {
LCDWIDTH            = 128,
LCDHEIGHT           = 64,
SETCONTRAST         = 0x81, // 2byte cmd,256 contrast steps, reset = 7F
DISPLAYON           = 0xAF, // entire display on
DISPLAYOFF          = 0xAE, // entire display off
DISPLAYALLON_RESUME = 0xA4,
NORMALDISPLAY       = 0xA6, // invert = 0xA7
DEACTIVATE_SCROLL   = 0x2E, // stop control scroll conf by 26 27 29 2A
MEMORYMODE          = 0x20, // 2byte cmd, 0 horizontal, 1 vertical, 2 page addressing, 3 invalid
COLUMNADDR          = 0x21, // 3bytes, start, end (included) valid in horizontal or vertical mode
PAGEADDR            = 0x22, // 3bytes, start, end (included) valid in horizontal or vertical mode
SETSTARTLINE_0      = 0x40, // set display RAM start line at 0
SEGREMAP            = 0xA0, // segment remap 0 mapped to SEG0
SETMULTIPLEX        = 0xA8, // 2 byte cmd, set mux ratio
COMSCANDEC          = 0xC8, // scan from COM[N-1] to COM[0] (0xC0 is COM0 to COM[N-1])
SETDISPLAYOFFSET    = 0xD3, // 2 byte cmd, vertical shift
SETCOMPINS          = 0xDA, // 2 byte cmd, seq com pin conf, left right remap
SETDISPLAYCLOCKDIV  = 0xD5, // 2 byte cmd, low nibble A[3:0]+1 = div ratio, high nibble A[7:4] freq, reset 1000b
SETPRECHARGE        = 0xD9, // 2 byte cmd, precharge period A[3:0] phase1 A[7:4] phase2, reset:2
SETVCOMDETECT       = 0xDB, // 2 byte Vcomh deselect level A[6:4] 000b 0.65xVcc 010b 0.77(reset) 011b 0.83
CHARGEPUMP          = 0x8D, // Enable charge pump seq: 0x8D, 0x14, 0xAF (Charge pump setting, enable charge pump, display on)
EXTERNALVCC         = 0x1,
SWITCHCAPVCC        = 0x2
};
uint8_t const nibbleToByte[16]={
0b00000000,
0b00000011,
0b00001100,
0b00001111,
0b00110000,
0b00110011,
0b00111100,
0b00111111,
0b11000000,
0b11000011,
0b11001100,
0b11001111,
0b11110000,
0b11110011,
0b11111100,
0b11111111};

uint8_t *txbuf;
uint8_t *rxbuf;
int32_t mode;
uint8_t invertLine = 0;


uint8_t text[11*4];    // text inputs
uint8_t textBuf[11*4]; // text inputs copy (to avoid flicker)
uint8_t tY[128];       // scope input copied and rescaled
bool disable;
    // SETUP
    // ------------------
void cmd(uint8_t c){
  txbuf[0] = 0;
  txbuf[1] = c;
  i2cMasterTransmitTimeout(&I2CD1, attr_I2CADDR, txbuf, 2, rxbuf, 0, 30);
}
void cmd(uint8_t c1, uint8_t c2){  cmd(c1);  cmd(c2);}
void cmd(uint8_t c1, uint8_t c2, uint8_t c3){  cmd(c1, c2);  cmd(c3);}

// _____________________________________________________________________
void fill(uint8_t v){
  i2cAcquireBus(&I2CD1);
  cmd(COLUMNADDR, 0, 127); // Column start end
  cmd(PAGEADDR,   0,   7); // Page start end
  txbuf[0] = 0x40;
  for(int i = 1; i < 129; i++)
    txbuf[i] = v;
  for(int p = 0; p < 8; p++){
     i2cMasterTransmitTimeout(&I2CD1, attr_I2CADDR, txbuf, 129, rxbuf, 0, 30);
  }
  i2cReleaseBus(&I2CD1);
}

/* returns i
*/
int drawTxt(int i, int NBC, uint8_t *tb, int page, uint8_t *tPage){
  for(int nc = 0; nc < NBC; nc++){
    int ascii_32 = tb[nc] - ' ';
    const uint8_t *adChar = attr_fontObject.font5x8 + ascii_32 * 5;
    for(int slice = 0; slice < 5; slice++){ //slices are two pixel wide
      uint8_t s;
      if((page & 1) == 0){
         s = nibbleToByte[ adChar[slice]       & 15];  // low nibble
      } else {
         s = nibbleToByte[(adChar[slice] >> 4) & 15]; // high nibble
      }
      tPage[i] = s; i++; // two pixel wide
      tPage[i] = s; i++;
    }
    tPage[i] = 0; i++; // separator space 1 pixel wide => 11 pixels per char
  }
  return i;
}
// _____________________________________________________________________
// scaled x2 text
// returns a page to be sent to the SSD1306 based on contents of text
void calcTextPage(int page, uint8_t tPage[128]){
  int i = 0;
  int tLine = page/2;
  uint8_t *tb = textBuf + 11*tLine;
  if(tb[0] >= ' '){  // full text line
    i = drawTxt(i, 11, tb, page, tPage);
    /*for(int nc = 0; nc < 11; nc++){
      int ascii_32 = tb[nc] - ' ';
      const uint8_t *adChar = tiar_font5x8 + ascii_32 * 5;
      for(int slice = 0; slice < 5; slice++){ //slices are two pixel wide
        uint8_t s;
        if((page & 1) == 0){
           s = nibbleToByte[ adChar[slice]       & 15];  // low nibble
        } else {
           s = nibbleToByte[(adChar[slice] >> 4) & 15]; // high nibble
        }
        tPage[i] = s; i++; // two pixel wide
        tPage[i] = s; i++;
      }
      tPage[i] = 0; i++; // separator space 1 pixel wide => 11 pixels per char

    }*/
  } else if(tb[0] == 1 ){ //strbar
    uint8_t filledBar = ((page & 1) == 0) ? 0b11100000 : 0b00111111;
    i = drawTxt(i, 5, tb + 2, page, tPage);
   /* for(int nc = 0; nc < 5; nc++){
      int ascii_32 = tb[nc + 2] - ' ';
      const uint8_t *adChar = tiar_font5x8 + ascii_32 * 5;
      for(int slice = 0; slice < 5; slice++){ //slices are two pixel wide
        uint8_t s;
        if((page & 1) == 0){
           s = nibbleToByte[ adChar[slice]       & 15];  // low nibble
        } else {
           s = nibbleToByte[(adChar[slice] >> 4) & 15]; // high nibble
        }
        tPage[i] = s; i++; // two pixel wide
        tPage[i] = s; i++;
      }
      tPage[i] = 0; i++; // separator space 1 pixel wide => 11 pixels per char
    }*/
    while(i < 63){tPage[i] = 0; i++;} // space padding
    if(tb[1] < 128){ //positive value => filled bar
      tPage[i] = 0; i++;
      for(i = 64; i < 63 + tb[1] && i < 128; i++){
        tPage[i] = filledBar;
      }
    } else {  //negative value => hollow bar
      tPage[i] = filledBar; i++;
      uint8_t hollowBar = ((page & 1) == 0) ? 0b00100000 : 0b00100000;
      for(i = 64; i < 63 + 256 - tb[1] && i < 127; i++){
        tPage[i] = hollowBar;
      }
      tPage[i] = filledBar;
      i++;
    }
  } else if(tb[0] == 2 ){ //bar
    uint8_t filledBar = ((page & 1) == 0) ? 0b11100000 : 0b00111111;
    if(tb[1] <= 128){ //positive value => filled bar
      tPage[i] = 0; i++;
      for(i = 0; i < tb[1]; i++){
        tPage[i] = filledBar;
      }
    } else {  //negative value => hollow bar
      tPage[i] = filledBar; i++;
      uint8_t hollowBar = ((page & 1) == 0) ? 0b00100000 : 0b00100000;
      for(; i < 256 - tb[1]; i++){
        tPage[i] = hollowBar;
      }
      tPage[i] = filledBar;
      i++;
    }
  } else if(tb[0] == 3 ){ //strbar2
    uint8_t filledBar = ((page & 1) == 0) ? 0b11110000 : 0b01111000;
    i = drawTxt(i, 5, tb + 3, page, tPage);
   /* for(int nc = 0; nc < 5; nc++){
      int ascii_32 = tb[nc + 3] - ' ';
      const uint8_t *adChar = tiar_font5x8 + ascii_32 * 5;
      for(int slice = 0; slice < 5; slice++){ //slices are two pixel wide
        uint8_t s;
        if((page & 1) == 0){
           s = nibbleToByte[ adChar[slice]       & 15];  // low nibble
        } else {
           s = nibbleToByte[(adChar[slice] >> 4) & 15]; // high nibble
        }
        tPage[i] = s; i++; // two pixel wide
        tPage[i] = s; i++;
      }
      tPage[i] = 0; i++;
    }*/
    for(;i < 63; i++){tPage[i] = 0; } // space padding
    int v = tb[1 + (page & 1)];
    if(v < 128){ //positive value => filled bar
      tPage[i] = 0; i++;
      for(i = 64; i < 63 + v && i < 128; i++){
        tPage[i] = filledBar;
      }
    } else {  //negative value => hollow bar
      tPage[i] = filledBar; i++;
      uint8_t hollowBar = ((page & 1) == 0) ? 0b10010000 : 0b01001000;
      for(i = 64; i < 63 + 256 - v && i < 127; i++){
        tPage[i] = hollowBar;
      }
      tPage[i] = filledBar;
      i++;
    }
  }
  //_______________________________________________________
  else if(tb[0] == 4 ){ //bar dble
    uint8_t filledBar = ((page & 1) == 0) ? 0b11110000 : 0b01111000;
    int v = tb[1 + (page & 1)];
    if(v <= 128){ //positive value => filled bar
      for(i = 0; i < v; i++){
        tPage[i] = filledBar;
      }
    } else {  //negative value => hollow bar
      tPage[i] = filledBar; i++;
      uint8_t hollowBar = ((page & 1) == 0) ? 0b10010000 : 0b01001000;
      for(; i < 256 - v; i++){
        tPage[i] = hollowBar;
      }
      tPage[i] = filledBar;
      i++;
    }
  }
  for(; i < 128; i++){tPage[i] = 0;} // space padding

}
// _____________________________________________________________________
// opt function draw

//LSB up
uint8_t const tBar[9]={
0b00000000,
0b10000000,
0b11000000,
0b11100000,
0b11110000,
0b11111000,
0b11111100,
0b11111110,
0b11111111
};

/*
page0
    1
    .
    7
*/

uint8_t vBar(uint8_t val, int page){
  uint8_t _page =  7 - (val / 8);
  if(page > _page) return 0b11111111;  // below => light
  else if(page < _page) return 0;      // above => dark
  else return tBar[val & 7];
}


// on the Oled display, a "page" is a 128x8 stripe of pixels
// described by 128 bytes. The 128x64 OLED consists of 8 "pages"
// I calculate and transmit one page at a time.
// It saves memory as small buffers are enough to transmit them.
void calcScopePage(int page, uint8_t tPage[128]){
  uint16_t y0 = tY[0];
  uint16_t y1 = tY[1];
  uint16_t y2;
  for(int i = 0; i < 128; i++){
    if(i < 127) y2 = tY[i + 1];
    uint16_t yM, ym;
    yM = ym = y1;
    uint16_t y = (y0 + y1) >> 1;
    yM = y > yM ? y : yM;
    ym = y < ym ? y : ym;
    y = (y2 + y1) >> 1;
    yM = y > yM ? y : yM;
    ym = y < ym ? y : ym;
    if(ym == yM) if(yM > 0) ym--; else yM++;
    tPage[i] = vBar(yM, page) & ~vBar(ym, page);
    y0 = y1;
    y1 = y2;
  }
}
// _____________________________________________________________________
void sendPage(int page){
  /*
    Note: I consider that having a little flickering is not a big deal
    (compared to potential audio glitches).
    So, i do not use the chSysLock() chSysUnlock to protect the memcpy.
  */
  i2cAcquireBus(&I2CD1);
  //prepare transmission to the "page"
  cmd(COLUMNADDR, 0, 127);   // Column start end
  cmd(PAGEADDR, page, page);  // Page start end
  if(attr_type == 1106){
    cmd(0xB0 + page);//set page address
    cmd(2 & 0xf);//set lower column address
    cmd(0x10 | (2 >> 4));//set higher column address
  }
  i2cReleaseBus(&I2CD1);



  if(mode == 0){ // 4 text lines
    //on the beginning of drawing (page 0) we update the buffers
    if(page == 0){
      memcpy(textBuf, text, 11*4);
    }
    calcTextPage(page, txbuf+1);
 } else if(mode == 1){ //Title and scope
    //on the beginning of drawing (page 0) we update the buffers
    if(page == 0){
      //chSysLock();
      //update the textBuffer
      memcpy(textBuf, text, 11*4);
      //update scope buffer
      memcpy(tY, attr_scope.t, 128);
      //chSysUnlock();
      //scale for the display
      int8_t* stY = (int8_t*)tY;
      for(int i = 0; i < 128; i++){
	      tY[i] = ((stY[i] + 64) * 3 ) >> 3;
      }
    }
    if(page < 2){
  	  calcTextPage(page, txbuf + 1);
    }else{
      calcScopePage(page, txbuf + 1);
    }
  } else if(mode == 2){ //full screen scope
    //on the beginning of drawing (page 0) we update the buffers
    if(page == 0){
      //chSysLock();
      //update scope buffer
      memcpy(tY, attr_scope.t, 128);
      //chSysUnlock();
      //scale for the display
      int8_t* stY = (int8_t*)tY;
      for(int i = 0; i < 128; i++){
	      tY[i] = (stY[i] + 64) >> 1;
      }
    }
    calcScopePage(page, txbuf+1);
  }
  //transmission of the page

  //transmit the page
  txbuf[0] = 0x40;

  // invert the line as highlight
  if (invertLine > 0) {
    if (page == (invertLine-1)*2 || page == (invertLine-1)*2+1) {
      for(int i = 1; i<129; i++) {
        txbuf[i] = ~txbuf[i];
      }
    }
  }

  i2cAcquireBus(&I2CD1);
  i2cMasterTransmitTimeout(&I2CD1, attr_I2CADDR, txbuf, 129, rxbuf, 0, 30);
  i2cReleaseBus(&I2CD1);
}
// _____________________________________________________________________
void init(){
  i2cAcquireBus(&I2CD1);
  // Init sequence
  if(attr_type == 1106 || attr_type == 1306){
    cmd(DISPLAYOFF);
    // 2 byte cmd,
    //  low nibble A[3:0]+1 = div ratio,
    //  high nibble A[7:4] freq  reset 1000b
    cmd(SETDISPLAYCLOCKDIV, 0x80);
    cmd(SETMULTIPLEX, LCDHEIGHT - 1);
    cmd(SETDISPLAYOFFSET, attr_type == 1306 ? 0x00 : 0x01);
    cmd(SETSTARTLINE_0);
    cmd(CHARGEPUMP, 0x14);
    cmd(MEMORYMODE, 0x00); //horizontal
    cmd(SEGREMAP | 0x1);
    cmd(COMSCANDEC);
  // 128 x 64
    cmd(SETCOMPINS, 0x12);
    cmd(SETCONTRAST, 0xCF);
    cmd(SETPRECHARGE, 0xF1);
    cmd(SETVCOMDETECT, 0x40);
    cmd(DISPLAYALLON_RESUME);
    cmd(NORMALDISPLAY);
    cmd(DEACTIVATE_SCROLL);
    cmd(DISPLAYON);
  } else {

    cmd(DISPLAYOFF);
	    cmd(SETDISPLAYCLOCKDIV, 0x0a0);// vs 80
	    cmd(SETMULTIPLEX, 0x03f);	 //vs not in comment
	    cmd(SETSTARTLINE_0);		       //idem
	    cmd(MEMORYMODE, 0x00);        //02 vs00		/* page addressing mode vs line addressing mode*/

	    cmd(SEGREMAP | 0x1);           //idem
	    cmd(COMSCANDEC);               //idem
	      // Flipmode
	      // U8X8_C(0x0a0),				/* segment remap a0/a1*/
	      // U8X8_C(0x0c0),				/* c0: scan dir normal, c8: reverse */

	    cmd(SETCOMPINS, 0x012);   //idem		/* com pin HW config, sequential com pin config (bit 4), disable left/right remap (bit 5) */

	    cmd(SETCONTRAST, 0x06f);    //vs 0xCF 		/* [2] set contrast control */
	    cmd(SETPRECHARGE, 0x0d3);   //vs 0xF1 		/* [2] pre-charge period 0x022/f1*/
	    cmd(SETVCOMDETECT, 0x020);  //vs 0x40 		/* vcomh deselect level */
	      // if vcomh is 0, then this will give the biggest range for contrast control issue #98
	      // restored the old values for the noname constructor, because vcomh=0 will not work for all OLEDs, #116

	    cmd(DEACTIVATE_SCROLL);      //idem				/* Deactivate scroll */
    cmd(DISPLAYALLON_RESUME);    //idem				/* output ram to display */
    cmd(NORMALDISPLAY);          //idem				/* none inverted normal display mode */
    cmd(DISPLAYON);

  }




  i2cReleaseBus(&I2CD1);
}
// _____________________________________________________________________
void setup(){
  static uint8_t _txbuf[132] __attribute__ ((section (".sram2")));
  static uint8_t _rxbuf[8]   __attribute__ ((section (".sram2")));
  txbuf = _txbuf;
  rxbuf = _rxbuf;
  init();
}

// _____________________________________________________________________
// THREADS
msg_t ThreadX2()
{
  setup();
  while (!chThdShouldTerminate()) {
    if(!disable){
      for(int i = 0; i < 8; i++){
        sendPage(i);
      }
    }
    chThdSleepMilliseconds(32);
  }
  chThdExit((msg_t)0);
}

static msg_t ThreadX(void *arg) {
  ((attr_parent *)arg)->ThreadX2();
}

// 128 is not enough, try 192 <-----------
WORKING_AREA(waThreadX, 192);
Thread *Thd;]]></code.declaration>
         <code.init><![CDATA[for(int i = 0; i < 11 * 4; i++){
  text[i] = textBuf[i] = ' ';
}
Thd = chThdCreateStatic(waThreadX, sizeof(waThreadX), NORMALPRIO, ThreadX, (void *)this);]]></code.init>
         <code.dispose><![CDATA[chThdTerminate( Thd );
chThdWait( Thd );]]></code.dispose>
         <code.krate><![CDATA[disable = inlet_disable; // can be useful when playing with future modules targetting the same display
mode = inlet_mode;
invertLine = inlet_invertLine;

if(inlet_line1 != NULL){
  int i = 0;
  while(i < 11 & inlet_line1[i] != '\0'){
  	text[i] = inlet_line1[i];
  	i++;
  }
  while(i < 11 ){text[i] = ' '; i++;}
}
if(mode == 0){
  if(inlet_line2 != NULL){
    int i = 0;
    while(i < 11 & inlet_line2[i] != '\0'){
  	  text[i + 11] = inlet_line2[i];
  	  i++;
    }
    while(i < 11 ){text[i+11] = ' ';i++;}
  }
  if(inlet_line3 != NULL){
    int i = 0;
    while(i < 11 & inlet_line3[i] != '\0'){
  	  text[i + 2*11] = inlet_line3[i];
  	  i++;
    }
    while(i < 11 ){text[i+2*11] = ' ';i++;}
  }
  if(inlet_line4 != NULL){
    int i = 0;
    while(i < 11 & inlet_line4[i] != '\0'){
  	  text[i + 3*11] = inlet_line4[i];
  	  i++;
    }
    while(i < 11 ){text[i+3*11] = ' ';i++;}
  }
}]]></code.krate>
      </object>
   </patchobj>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_1" x="56" y="224">
      <params>
         <frac32.s.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="tiar/HW/scopeForOLED" uuid="070f2d96-ebbb-40e4-b870-0c5aa01dc8e7" name="scopeForOLED_1" x="364" y="406">
      <params/>
      <attribs/>
   </obj>
   <nets>
      <net>
         <source obj="c_1" outlet="out"/>
         <dest obj="OLED128x64nice_1" inlet="line1"/>
         <dest obj="OLED128x64nice_1" inlet="line2"/>
         <dest obj="OLED128x64nice_1" inlet="line3"/>
         <dest obj="OLED128x64nice_1" inlet="line4"/>
      </net>
      <net>
         <source obj="dial_1" outlet="out"/>
         <dest obj="OLED128x64nice_1" inlet="invertLine"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>960</x>
      <y>0</y>
      <width>960</width>
      <height>1040</height>
   </windowPos>
</patch-1.0>