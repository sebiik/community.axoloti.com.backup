<objdefs appVersion="1.0.12">
   <obj.normal id="phasorSelect4" uuid="88fb3ad6-9293-48de-b8e4-d68fb3253940">
      <author>Smashed Transistors</author>
      <license>LGPL</license>
      <helpPatch>AxoEnString.axh</helpPatch>
      <inlets>
         <frac32.bipolar name="note"/>
         <frac32buffer.bipolar name="C"/>
         <frac32buffer.bipolar name="Cs"/>
         <frac32buffer.bipolar name="D"/>
         <frac32buffer.bipolar name="Ds"/>
         <frac32buffer.bipolar name="E"/>
         <frac32buffer.bipolar name="F"/>
         <frac32buffer.bipolar name="Fs"/>
         <frac32buffer.bipolar name="G"/>
         <frac32buffer.bipolar name="Gs"/>
         <frac32buffer.bipolar name="A"/>
         <frac32buffer.bipolar name="As"/>
         <frac32buffer.bipolar name="B"/>
      </inlets>
      <outlets>
         <frac32buffer.bipolar name="out8"/>
         <frac32buffer.bipolar name="out4"/>
         <frac32buffer.bipolar name="out16"/>
      </outlets>
      <displays/>
      <params/>
      <attribs/>
      <code.krate><![CDATA[// _____________________________________________________________________
//Krate
int note = (inlet_note >> 21) + 64;
int oct = note / 12;


int n12 = note - 12 * oct;
int offset = oct - 1;
if(offset < 0) offset = 0;
const int32_t* in = inlet_C;
     if(n12 ==  1) in = inlet_Cs;
else if(n12 ==  2) in = inlet_D;
else if(n12 ==  3) in = inlet_Ds;
else if(n12 ==  4) in = inlet_E;
else if(n12 ==  5) in = inlet_F;
else if(n12 ==  6) in = inlet_Fs;
else if(n12 ==  7) in = inlet_G;
else if(n12 ==  8) in = inlet_Gs;
else if(n12 ==  9) in = inlet_A;
else if(n12 == 10) in = inlet_As;
else if(n12 == 11) in = inlet_B;

for(int k = 0; k < BUFSIZE; k++){
  outlet_out8[k] = (in[k] << offset) & 0x07FFFFFF;
  outlet_out4[k] = (in[k] << offset+1) & 0x07FFFFFF;
  outlet_out16[k] = (in[k] << offset-1) & 0x07FFFFFF;
}]]></code.krate>
   </obj.normal>
</objdefs>