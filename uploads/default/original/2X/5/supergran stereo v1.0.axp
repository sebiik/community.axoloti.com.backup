<patch-1.0 appVersion="1.0.12">
   <comment type="patch/comment" x="1694" y="28" text="preset table, autoloading from sd card"/>
   <patchobj type="patch/object" uuid="d66e0c10-a656-45b0-822e-b03f051cd0af" name="FXpresets" x="1680" y="42">
      <params/>
      <attribs>
         <combo attributeName="size" selection="65536"/>
         <file attributeName="filename" file="/kimdealismyheroyo"/>
      </attribs>
      <object id="patch/object" uuid="d66e0c10-a656-45b0-822e-b03f051cd0af">
         <sDescription>allocate 16bit table in SDRAM memory, -128.00 .. 127.99</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>table.axh</helpPatch>
         <inlets/>
         <outlets/>
         <displays/>
         <params/>
         <attribs>
            <combo name="size">
               <MenuEntries>
                  <string>2</string>
                  <string>4</string>
                  <string>8</string>
                  <string>16</string>
                  <string>32</string>
                  <string>64</string>
                  <string>128</string>
                  <string>256</string>
                  <string>512</string>
                  <string>1024</string>
                  <string>2048</string>
                  <string>4096</string>
                  <string>8192</string>
                  <string>16384</string>
                  <string>32768</string>
                  <string>65536</string>
                  <string>131072</string>
                  <string>262144</string>
                  <string>524288</string>
                  <string>1048576</string>
                  <string>2097152</string>
                  <string>4194304</string>
               </MenuEntries>
               <CEntries>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>4</string>
                  <string>5</string>
                  <string>6</string>
                  <string>7</string>
                  <string>8</string>
                  <string>9</string>
                  <string>10</string>
                  <string>11</string>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
                  <string>16</string>
                  <string>17</string>
                  <string>18</string>
                  <string>19</string>
                  <string>20</string>
                  <string>21</string>
                  <string>22</string>
               </CEntries>
            </combo>
            <file name="filename"/>
         </attribs>
         <includes/>
         <depends>
            <depend>fatfs</depend>
         </depends>
         <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
static const uint32_t BITS = 32;
static const uint32_t GAIN = 0;
int32_t *array;]]></code.declaration>
         <code.init><![CDATA[static int32_t _array[attr_poly][LENGTH] __attribute__ ((section (".sdram")));
array = &_array[parent->polyIndex][0];
int i;
for(i=0;i<LENGTH;i++) array[i]=0;
FIL FileObject;
FRESULT err;
UINT bytes_read;
err = f_open(&FileObject, "attr_filename", FA_READ | FA_OPEN_EXISTING);
if (err != FR_OK) {report_fatfs_error(err,"attr_filename"); return;}
int rem_sz = sizeof(_array[0]);
int offset = 0;
while (rem_sz>0) {
  if (rem_sz>sizeof(fbuff)) {
    err = f_read(&FileObject, fbuff, sizeof(fbuff),&bytes_read);
    if (bytes_read == 0) break;
    memcpy((char *)(&_array[0]) + offset,(char *)fbuff,bytes_read);
    rem_sz -= bytes_read;
    offset += bytes_read;
  } else {
    err = f_read(&FileObject, fbuff, rem_sz, &bytes_read);
    memcpy((char *)(&_array[0]) + offset,(char *)fbuff,bytes_read);
    rem_sz = 0;
  }
}if (err != FR_OK) {LogTextMessage("Read failed\n"); return;}
err = f_close(&FileObject);
if (err != FR_OK) {LogTextMessage("Close failed\n"); return;}]]></code.init>
      </object>
   </patchobj>
   <comment type="patch/comment" x="56" y="70" text="****   CLOCK *********************************************************"/>
   <comment type="patch/comment" x="406" y="70" text="***   PRESETS   **********************************************************"/>
   <comment type="patch/comment" x="770" y="70" text="***   FREEZE   **********************************************"/>
   <comment type="patch/comment" x="1190" y="70" text="****   GLIDE   ********************"/>
   <comment type="patch/comment" x="1386" y="70" text="***   QUANTIZE  **************"/>
   <comment type="patch/comment" x="2198" y="70" text="superclock"/>
   <comment type="patch/comment" x="588" y="84" text="preset"/>
   <obj type="logic/or 2" uuid="3805d3c84d30032a44fbdbe42d9a2988a1790a3e" name="or_3" x="2114" y="84">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="63d1da81-1824-4d70-a981-dd454041fb68" name="1_15" x="2198" y="84">
      <params>
         <bool32.tgl name="bpmstyle" value="0"/>
         <bool32.tgl name="bpmlock" value="1"/>
         <int32 name="ppq" value="1"/>
         <int32 name="ppqmax" value="0"/>
      </params>
      <attribs>
         <combo attributeName="in" selection="omni"/>
         <combo attributeName="thru" selection="off"/>
         <combo attributeName="Thruput" selection="din"/>
      </attribs>
      <object id="patch/object" uuid="63d1da81-1824-4d70-a981-dd454041fb68">
         <sDescription>Midi clock slave</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>midi_in.axh</helpPatch>
         <inlets>
            <int32 name="bpm"/>
            <bool32 name="reset"/>
            <bool32 name="stop"/>
            <bool32 name="tap"/>
            <frac32.positive name="ppqgate"/>
            <bool32.rising name="midirevert"/>
         </inlets>
         <outlets>
            <bool32 name="active" description="Song is playing"/>
            <int32 name="kbeat" description="average length of a beat at k rate"/>
            <int32 name="sbeat"/>
            <bool32.pulse name="start" description="start trigger"/>
            <bool32.pulse name="stop" description="stop trigger"/>
            <bool32.pulse name="1ppq" description="beat trigger, 1ppq"/>
            <int32 name="bpm" description="rough bpm"/>
            <bool32 name="bartrig" description="triggers every bar"/>
            <int32 name="count"/>
            <bool32 name="tapping"/>
            <int32 name="ppq"/>
            <bool32 name="ppqgate"/>
            <bool32 name="o1"/>
         </outlets>
         <displays>
            <int32.label name="kbeat"/>
            <int32.label name="bpm"/>
            <int32.label name="d1"/>
            <int32.label name="d2"/>
            <bool32 name="d3"/>
         </displays>
         <params>
            <bool32.tgl name="bpmstyle"/>
            <bool32.tgl name="bpmlock"/>
            <int32 name="ppq">
               <MinValue i="1"/>
               <MaxValue i="96"/>
            </int32>
            <int32 name="ppqmax">
               <MinValue i="0"/>
               <MaxValue i="6666666"/>
            </int32>
         </params>
         <attribs>
            <combo name="in">
               <MenuEntries>
                  <string>omni</string>
                  <string>din</string>
                  <string>usb host port 1</string>
                  <string>usb host port 2</string>
                  <string>usb host port 3</string>
                  <string>usb host port 4</string>
                  <string>internal port 1</string>
                  <string>internal port 2</string>
                  <string>usb device port 1</string>
               </MenuEntries>
               <CEntries>
                  <string>true</string>
                  <string>dev == MIDI_DEVICE_DIN &amp;&amp; port == 1</string>
                  <string>dev == MIDI_DEVICE_USB_HOST &amp;&amp; port == 1</string>
                  <string>dev == MIDI_DEVICE_USB_HOST &amp;&amp; port == 2</string>
                  <string>dev == MIDI_DEVICE_USB_HOST &amp;&amp; port == 3</string>
                  <string>dev == MIDI_DEVICE_USB_HOST &amp;&amp; port == 4</string>
                  <string>dev == MIDI_DEVICE_INTERNAL &amp;&amp; port == 1</string>
                  <string>dev == MIDI_DEVICE_INTERNAL &amp;&amp; port == 2</string>
                  <string>dev == MIDI_DEVICE_USB_DEVICE &amp;&amp; port == 1</string>
               </CEntries>
            </combo>
            <combo name="thru">
               <MenuEntries>
                  <string>off</string>
                  <string>on</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
               </CEntries>
            </combo>
            <combo name="Thruput">
               <MenuEntries>
                  <string>din</string>
                  <string>usb host port 1</string>
                  <string>usb host port 2</string>
                  <string>usb host port 3</string>
                  <string>usb host port 4</string>
                  <string>internal port 1</string>
                  <string>internal port 2</string>
                  <string>usb device port 1</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_DIN, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 2</string>
                  <string>MIDI_DEVICE_USB_HOST, 3</string>
                  <string>MIDI_DEVICE_USB_HOST, 4</string>
                  <string>MIDI_DEVICE_INTERNAL, 1</string>
                  <string>MIDI_DEVICE_INTERNAL, 2</string>
                  <string>MIDI_DEVICE_USB_DEVICE, 1</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int tap[4];
int tapcount;
int t;
int avg;
int ntrig;
int counttaken;
int lastcount;
int outcount;
int outrig;
int tapping;
int newtap;
int prevavg;
int ppq1;
int resetC;
int tapstart;
int trighold;
int prevfinal;


int bpmclock;
int bpmtrig;
int bpmcount;

int prevtest;
int prevppq;
int ppq;
int ppqclock;
int ppqout;
int barclock;
int incount;
int k;
int prevc;

int _pos;
int stepos;



int ch;
int CCa;
int CCb;

//int prevkb;
int prevbpm;
int active;
int stablebpm;
int solidbpm;
int change;
int rchange;
int xchange;
int changed;
int pkb;
int lastbpm;
int finalbpm;
int pstable;
int pst;
int cl;
int start;
int stop;
int pulse;
int bartrig;
int kbeat;
int Okbeat;
int sent1;
int sent2;
int stable;
int resetbavg;
int setbpm;
int beatavg[4];
int Bavg;
int ppqgate;
int ppqwidth;
int bpm;
int pbpm;
int barpos;
int kbarpos;
int Pbarpos;
int mode;
int Xkbeat[3];
int Xstart[3];
int Xstop[3];
int Xbarpos[3];

//uint32_t kph;
//uint32_t kclock;
//uint32_t pkclock;
bool midihold;
bool started;
bool init;
bool ppqtrig;
bool midiactive;
bool rtrig;
bool strig;]]></code.declaration>
         <code.init><![CDATA[active = 0;
barpos=0;
Pbarpos=0;
t=-1;
tapcount=-1;

ch=15;
CCa=80;
CCb=81;

//_active = 0;
midiactive=0;
_pos = -1;


	kbeat=1500;
	Bavg=kbeat;
avg=kbeat;
prevavg=kbeat;

ppq1=4;

stepos=-1;

setbpm=1;
init=1;]]></code.init>
         <code.krate><![CDATA[// modes
// 0 = BPM/tap
// 1 = midi
if (inlet_midirevert){
	mode=1;
}

//tap ***********************************************************************
outcount+=1;
if ((outcount>=avg)){
	if ((avg>20)&&!trighold){
		outrig=1;
	}
	outcount=0;
}
// timer
if (t>=0){
	t+=1;
}
if ((t>=((avg>>1)+avg))&&(avg>20)){
	newtap=0;
	tapping=0;
}

//tap
if (inlet_tap&&!ntrig){
	midihold=0;
	mode=0;
	if (!tapping){
		if (barpos==0){
//		Pbarpos=barpos+1;
		}
		tapcount=-1;
			outrig=1;
			outcount=0;
			tapping=1;
			newtap=1;
			resetC=1;
			trighold=1;
			avg=0x07FFFFFF;
			tap[0]=0;
			tap[1]=0;
			tap[2]=0;
	}
	tapping=1;
	ntrig=1;

		
	if (tapcount>=0){
		
		tap[tapcount]=t;
		if (trighold){
			outrig=1;
			}
		if (newtap){
			
			avg=(tap[0]+tap[1]+tap[2])/(tapcount+1);
		}
		
		if (!newtap){
		avg=(tap[0]+ tap[1]+tap[2])/3;
		}
	}
	lastcount=tapcount;
	tapcount+=1;
	if ((tapcount>=0)&&trighold){
		trighold=0;
		outcount=0;
		outrig=1;
	}
	if (tapcount>=3){
		
		newtap=0;
		//outcount=0;
		//outrig=1;
		
		tapcount=0;
	}

	t=0;
}


if (!inlet_tap){
	ntrig=0;
}


if (outrig){
	ppq1+=1;
	if (resetC){
		ppq1=0;
	}
	if (ppq1==4){
		tapstart=1;
		bpmclock=0;
	}
}

//outlet_trig=outrig;
//outlet_tapping=tapping;

Xkbeat[0]=prevavg;

Xstart[0]=tapstart;


//bpm***********************************************************************
if (inlet_bpm!=pkb){
	midihold=0;
	pkb=inlet_bpm;
	if (inlet_bpm>0){
		avg=180000/inlet_bpm;
		}
	else {
		avg=180000;
	}
	mode=0;
	if (!active){
		Xstart[0]=1;
		active=1;
	}
	//setbpm=1;
}
if ((avg!=prevavg)&&(avg!=0X07FFFFFF)){
	prevavg=avg;
	
	
}

//midi CC
Xkbeat[1]=(sent1<<6)+sent2;

incount=(stepos/24);
k+=1;
if ((incount!=prevc)&&(stepos>=0)){
	
	Xbarpos[1]=incount-((incount>>2)<<2);
	if (stepos>0){
		Xkbeat[1]=k;
		sent1=k>>6;
		sent2=k-((k>>6)<<6);
	}
	prevc=incount;
	k=0;
}

if (inlet_reset&&!rtrig){
	rtrig=1;
	outcount=0;
	ppq1=0;
	
	//if (!active){
		Xstart[0]=1;
	//	}
	if ((mode==2)&&!active){
		mode=0;
	}
}
else if (!inlet_reset){
	rtrig=0;
}
//mode=0;

kbeat=Xkbeat[mode];
if (mode==1){
	ppq1=incount;
}
kbarpos=ppq1-((ppq1>>2)<<2);

start=Xstart[mode];
stop=Xstop[mode];
Xbarpos[0]=kbarpos;
if (!mode){
	//Xbarpos[0]=kbarpos;
	}
else {
	//Xbarpos[0]=Xbarpos[1];
}
disp_d1=ppq1;
disp_d2=incount;
disp_d3=midihold;
barpos=Xbarpos[mode];

if (inlet_stop&&!strig){
	strig=1;
	stop=1;
}
else if (!inlet_stop){
	strig=0;
}

if (start){
	prevppq=-1;
	resetbavg=1;
	barpos=0;
	Pbarpos=-1;
	barclock=-1;
	//kclock=0;
	//pkclock=0;
	kbarpos=0;
	bpmclock=0;
	bpmcount=0;
	active=1;
	
}
if (stop){
	active=0;
}







if (barpos!=Pbarpos){
	pulse=1;
	Pbarpos=barpos;
	if (barpos==0){
			barclock+=1;
			bartrig=1;
			
		
		}

		
}





int rawbpm=180000/kbeat;
float bpm_float = 180000.0f/kbeat;
int bpm_int = bpm_float;
int tenth=(bpm_float - bpm_int)*10;



if (tenth>=5){
	bpm=rawbpm+1;
}
else {
	bpm=rawbpm;
}
if (mode==0){
	setbpm=1;
}
if (setbpm){
	//bpm=inlet_bpm;
	stablebpm=bpm;
	solidbpm=bpm;
	prevbpm=bpm;
	change=0;
	setbpm=0;
	lastbpm=bpm;
	finalbpm=bpm;
}

if (pulse){
	if (bpm!=prevbpm){
		if (change>(0)){
			stablebpm=bpm;
		}
		if ( ((bpm>lastbpm)&&(bpm>prevbpm)) || ((bpm<lastbpm)&&(bpm<prevbpm)) ){
			change+=1;
		
		}
		else {
			change=0;
		}
		stable=0;
		//lastbpm=prevbpm;
		lastbpm=prevbpm;
		prevbpm=bpm;
		
	}
	else {
		if (change>(1)){
			stablebpm=bpm;
		}
		if (stable>(1)){
			stablebpm=bpm;
		
			
		}
		stable+=1;
		change=0;
	}

	if (stablebpm==pstable){
		if (pst<4){
			pst+=1;	
		}
		if (pst>2){
			solidbpm=stablebpm;
		}
		
	}
	else {
		pst=0;
	}
	pstable=stablebpm;
}
if (!param_bpmstyle){
	finalbpm=stablebpm;
	
}
else {
	finalbpm=solidbpm;
}
if (param_bpmlock){
	Okbeat=180000/finalbpm;
	if ((finalbpm!=prevfinal)&&!tapping){
		avg=Okbeat;
		prevavg=Okbeat;
		prevfinal=finalbpm;
	}
	
}
else {
	Okbeat=kbeat;
}
ppq=param_ppq;
if (bpmclock<(Okbeat-(Okbeat/ppq))){
	bpmclock+=1;
	
}

if (pulse){
	//disp_test=bpmclock/(bpmclock/24);
	
	bpmclock=0;
}
//         
ppqclock=(bpmclock/(Okbeat/ppq))+(barpos*ppq)+(barclock*(ppq<<2));
ppqout=ppqclock-((ppqclock/param_ppqmax)*param_ppqmax);

if (ppqout!=prevppq){
	ppqgate=1;
	prevppq=ppqout;
}
ppqwidth=___SMMUL((Okbeat/ppq)<<3,inlet_ppqgate<<2);
if (ppqwidth<3){
	ppqwidth=3;
}

if (ppqgate>0){
	ppqgate+=1;
	if (ppqgate>=ppqwidth){
		ppqgate=0;
	}
}

 


outlet_ppq=ppqout;
outlet_ppqgate=ppqgate;


outlet_active = active;
outlet_start=Xstart[mode];
outlet_kbeat=Okbeat;
outlet_sbeat=Okbeat<<4;

//outlet_start=start;
outlet_stop=stop;
outlet_bartrig=bartrig;
outlet_1ppq=pulse;
outlet_tapping=tapping;

outlet_count=barpos;
outlet_bpm=finalbpm;
disp_bpm=finalbpm;
disp_kbeat=Okbeat;

if (init){
	init=0;
	pkb=777;
}
//ppqtrig=0;
bpmtrig=0;
start=0;
stop=0;
Xstart[0]=0;
Xstart[1]=0;
Xstop[1]=0;
tapstart=0;
resetC=0;
outrig=0;
pulse=0;
bartrig=0;]]></code.krate>
         <code.midihandler><![CDATA[if (attr_in){
	if ((status == MIDI_TIMING_CLOCK) && midiactive) {
		if ((_pos==0)&&midiactive){
	  	//start=1;
	  	Xstart[1]=1;
	  	Xstart[0]=1;
	  }
	  _pos++;
	  stepos++;
	  
	  
	}
	else if (status == MIDI_START){
		midihold=0;
		mode=1;
		//Xstart[1]=1;
		_pos = 0;
	  	stepos=-1;
	  	midiactive=1;
	  	started=1;
		
		
		if (attr_thru){
			MidiSend1((midi_device_t) attr_Thruput, MIDI_START);
		}
	}
	else if (status == MIDI_STOP){
		mode=0;
		midihold=1;
		Xstop[1]=1;
		midiactive=0;
		_pos = -1;
	  	stepos=-1;
		//active=0;
		if (attr_thru){
			MidiSend1((midi_device_t) attr_Thruput, MIDI_STOP);
		}
	}
	//if (status == MIDI_SONG_POSITION){
	if ((status == (ch-1) + MIDI_CONTROL_CHANGE)&&(data1 == (CCb+1))){
		//barpos=data1;
		Xbarpos[1]=data2;
		if (started){
			started=0;
		  	//start=1;
		  	Xstart[1]=1;
		  }
		if ((barpos==0)&&!active){
			//active=1;
			//Xstart[2]=1;
		}
		if (attr_thru){
			MidiSend3((midi_device_t) attr_Thruput, MIDI_CONTROL_CHANGE,data1,data2);
		}
		
	}
	
	
	if ((status == (ch-1) + MIDI_CONTROL_CHANGE)&&(data1 == CCa)){
		
		sent1=data2;
		if (attr_thru){
		MidiSend3((midi_device_t) attr_Thruput, MIDI_CONTROL_CHANGE + (ch-1),data1,data2);	
		}
	}
	if ((status == (ch-1) + MIDI_CONTROL_CHANGE)&&(data1 == CCb)){
		sent2=data2;
		if (attr_thru){
		MidiSend3((midi_device_t) attr_Thruput, MIDI_CONTROL_CHANGE + (ch-1),data1,data2);		
		}
	}
}]]></code.midihandler>
      </object>
   </patchobj>
   <comment type="patch/comment" x="56" y="98" text="bpm"/>
   <comment type="patch/comment" x="126" y="98" text="revert to midi"/>
   <comment type="patch/comment" x="210" y="98" text="tap"/>
   <comment type="patch/comment" x="406" y="98" text="35. presetknob"/>
   <comment type="patch/comment" x="504" y="98" text="preset"/>
   <comment type="patch/comment" x="588" y="98" text="save"/>
   <comment type="patch/comment" x="658" y="98" text="load"/>
   <comment type="patch/comment" x="770" y="98" text="freeze"/>
   <comment type="patch/comment" x="882" y="98" text="graintrig"/>
   <comment type="patch/comment" x="966" y="98" text="holdbuffer"/>
   <comment type="patch/comment" x="1190" y="98" text="36. preset glide"/>
   <comment type="patch/comment" x="1274" y="98" text="37. control glide"/>
   <comment type="patch/comment" x="1386" y="98" text="quantize"/>
   <comment type="patch/comment" x="1470" y="98" text="quantize"/>
   <obj type="rbrt/math/&lt;&lt; i c" uuid="984d06ee-2b58-4536-822a-bb4d9e119250" name="&lt;&lt;_2" x="2338" y="98">
      <params>
         <int32 name="shift" value="5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/i" uuid="a3786816db6ea5bc6ac4193a5cccdb2c83b83496" name="i_12" x="56" y="112">
      <params>
         <int32 name="value" value="118"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_12" x="126" y="112">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_3" x="210" y="112">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="bool_12" x="308" y="112">
      <params/>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_61" x="406" y="112">
      <params>
         <frac32.u.map name="value" value="30.5"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="e87b9ee1-fd3f-4b47-8cd4-a63633bf2c81" name="i_7" x="504" y="112">
      <params>
         <int32 name="value" value="3"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="e87b9ee1-fd3f-4b47-8cd4-a63633bf2c81">
         <sDescription>positive integer control</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets/>
         <outlets>
            <int32.positive name="out" description="output"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="value" noLabel="true">
               <MinValue i="1"/>
               <MaxValue i="65536"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out= param_value-1;]]></code.krate>
      </object>
   </patchobj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_16" x="588" y="112">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_17" x="658" y="112">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_13" x="770" y="112">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_4" x="868" y="112">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_7" x="966" y="112">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_85" x="1190" y="112">
      <params>
         <frac32.u.map name="value" value="51.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_4" x="1274" y="112">
      <params>
         <frac32.u.map name="value" value="21.5"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1386" y="112" text="time controls"/>
   <comment type="patch/comment" x="1470" y="112" text="pitch controls"/>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_1" x="1386" y="126">
      <params>
         <bool32.tgl name="b" value="1"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="6da5a3e7-627d-416a-8032-57473f72b9dc" name="i_15" x="1470" y="126">
      <params>
         <int32.hradio name="value" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="6da5a3e7-627d-416a-8032-57473f72b9dc">
         <sDescription>positive integer control, horizontal radio buttons</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets/>
         <outlets>
            <int32.positive name="out" description="output"/>
         </outlets>
         <displays/>
         <params>
            <int32.hradio name="value" noLabel="true">
               <MaxValue i="3"/>
            </int32.hradio>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out= param_value;]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="56" y="168" text="magically switches to the last started clock"/>
   <comment type="patch/comment" x="588" y="168" text="autosave"/>
   <comment type="patch/comment" x="658" y="168" text="save table"/>
   <comment type="patch/comment" x="770" y="168" text="31. freezepos"/>
   <comment type="patch/comment" x="868" y="168" text="32. freezescrub"/>
   <comment type="patch/comment" x="966" y="168" text="34. freezesize"/>
   <comment type="patch/comment" x="2366" y="168" text="LFO A"/>
   <comment type="patch/comment" x="56" y="182" text=" (midi start or tap or bpmchange)."/>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_17" x="588" y="182">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_9" x="658" y="182">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_66" x="770" y="182">
      <params>
         <frac32.u.map name="value" value="32.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_80" x="868" y="182">
      <params>
         <frac32.s.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_79" x="966" y="182">
      <params>
         <frac32.u.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="0d33e4f7-e2a3-4572-9ba4-8d2c219f3b2f" name="kbeat_1" x="2366" y="182">
      <params>
         <frac32.u.map name="pulsewidth" value="0.0"/>
         <bool32.tgl name="oneshot" value="0"/>
         <bool32.tgl name="inverthold" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="0d33e4f7-e2a3-4572-9ba4-8d2c219f3b2f">
         <license>GPL</license>
         <inlets>
            <int32 name="length"/>
            <frac32.positive name="time"/>
            <int32 name="wave"/>
            <bool32.rising name="trig"/>
            <bool32.risingfalling name="hold"/>
            <frac32.positive name="pulsewidth"/>
         </inlets>
         <outlets>
            <frac32 name="out"/>
            <bool32 name="half"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="pulsewidth">
               <DefaultValue v="32.0"/>
            </frac32.u.map>
            <bool32.tgl name="oneshot"/>
            <bool32.tgl name="inverthold"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[uint32_t rate;
int phase;
//int Phase;
int phaseQ;
int phaseB;
int pulsewidthA;
int pulsewidthB;
int pulsewidthC;
int speed;
int pulsedivide;
int wave;
int depth;

int i;

int dir;

int out;
int outB;

int outBv;





int holdv;


int kbeat;




int Sphase;
int hold;
//int8_t stageW;




int32_t expo[3];


float32_t widthC;

bool rtrig;

//bool xtrig;
bool init;]]></code.declaration>
         <code.init><![CDATA[init=1;]]></code.init>
         <code.krate><![CDATA[if (inlet_length==0){
	kbeat=1500;
}
else {
	kbeat=inlet_length;
}
speed= ___SMMUL(kbeat<<3,inlet_time<<2);
rate=0x07FFFFFF/speed;
phase+=rate;



if (init){
	init=0;
	
	if (param_oneshot){
		phase=0x07FFFFFF;
	}
	else {
		phase=0;
		}
}

if (!param_oneshot){
	if (phase>=0x07FFFFFF){
		phase=0;

	}
}
else if (param_oneshot){
	if (phase>=0x07FFFFFF){
		phase=0x07FFFFFF;
	}
}

if (inlet_trig&&!rtrig){
	rtrig=1;



	phase=0;
}
if (!inlet_trig){
rtrig=0;
}




pulsewidthA=(inlet_pulsewidth+param_pulsewidth);
pulsewidthC=((0x07FFFFFF-(inlet_pulsewidth+param_pulsewidth))-(1<<26))<<1;;
pulsewidthB=0x07FFFFFF-(inlet_pulsewidth+param_pulsewidth);

phaseB=phase-(inlet_pulsewidth+param_pulsewidth);
wave=inlet_wave+1;
switch( wave )
            {
              default:
              case 1 :
                // Triangle
    {
       if (phase<pulsewidthA){
       	float32_t width1=pulsewidthA;
		float32_t ratio=0x07FFFFFF/width1;
		int32_t in=phase>pulsewidthA?pulsewidthA:phase;

		out=in*ratio;
       	
       }
       else if (phase>=pulsewidthA){
       float32_t width1=pulsewidthB;
    
		float32_t ratio=0x07FFFFFF/width1;
		
		int32_t in=phaseB>pulsewidthB?pulsewidthB:phaseB;

		out=0x07FFFFFF-(in*ratio);
       }
    }
                break;

              case 2 :
              {
                // Sine
               // if (phase<(0x07FFFFFF-(0x07FFFFFFF>>2))){
               // Sphase=phase+(0x07FFFFFFF>>2);
               // }
                //else {Sphase=phase;}
                
           	if (phase<(0x07FFFFFF>>2)){
				Sphase=phase+(0x07FFFFFF-(0x07FFFFFF>>2));
				}
			else {Sphase=phase-(0x07FFFFFF>>2);}
                int32_t r;
                SINE2TINTERP( Sphase<<5, r )
                 
                out= ((r>>4)>>1)+(1<<26);


              } 
                break;

              case 3 :
                  // Square
                  {
		if (phase<pulsewidthA){
			out=0x07FFFFFF;
			
		}
		else out=0;
                  }
                break;

              

             

				
                
            }


if (wave==2){
	int32_t inexpo=__SSAT(pulsewidthC,28);
	dir=inexpo>0?1:-1;
	inexpo=inexpo>0?inexpo:-inexpo;
	int32_t inv=(1<<27)-inexpo;
	int dar;
	dar=out>0?1:-1;
	int32_t pos=out>0?out:-out;
	if(dir>0)
	{expo[0]=___SMMUL(pos<<3,(inv+___SMMUL(inexpo<<3,pos<<2))<<2);}
	if(dir<0)
	{expo[0]=___SMMUL(((1<<27)-pos)<<3,(inv+___SMMUL(inexpo<<3,((1<<27)-pos)<<2))<<2);}
	for(i=1;i<=2;i++)
	expo[i]=___SMMUL(expo[i-1]<<3,(inv+___SMMUL(inexpo<<3,expo[i-1]<<2))<<2);
	if(dir>0)
	{outBv=expo[2]*dar;}
	if(dir<0)
	{outBv=((1<<27)-expo[2])*dar;}
	}
else {outBv=out;}


	

if (param_inverthold){
	hold=!inlet_hold;
}
else {hold=inlet_hold;}

if (!hold){
	outB=outBv;
	holdv=outB;
	}
else if (hold){
	outB=holdv;
}



	
if (phase>=pulsewidthA){
	outlet_half=1;
	}
else {
	outlet_half=0;
}
   


outlet_out=outB;



//outlet_out=phase;]]></code.krate>
      </object>
   </patchobj>
   <obj type="math/smooth" uuid="6c5d08c282bb08bff24af85b4891447f99bcbc97" name="smooth_3" x="2506" y="182">
      <params>
         <frac32.u.map name="time" value="14.0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="56" y="196" text=" If another clock is running and you press revert to midi, "/>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_57" x="406" y="196">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/i" uuid="5e35fd0c62d81e70017289250cf28edd26e19e4a" name="i_3" x="504" y="196">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_58" x="1190" y="196">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_60" x="1274" y="196">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="56" y="210" text="it switches back to midiclock, at an appropriate moment"/>
   <comment type="patch/comment" x="2506" y="280" text="LFO B"/>
   <patchobj type="patch/object" uuid="0d33e4f7-e2a3-4572-9ba4-8d2c219f3b2f" name="kbeat_2" x="2506" y="294">
      <params>
         <frac32.u.map name="pulsewidth" value="0.0"/>
         <bool32.tgl name="oneshot" value="0"/>
         <bool32.tgl name="inverthold" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="0d33e4f7-e2a3-4572-9ba4-8d2c219f3b2f">
         <license>GPL</license>
         <inlets>
            <int32 name="length"/>
            <frac32.positive name="time"/>
            <int32 name="wave"/>
            <bool32.rising name="trig"/>
            <bool32.risingfalling name="hold"/>
            <frac32.positive name="pulsewidth"/>
         </inlets>
         <outlets>
            <frac32 name="out"/>
            <bool32 name="half"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="pulsewidth">
               <DefaultValue v="32.0"/>
            </frac32.u.map>
            <bool32.tgl name="oneshot"/>
            <bool32.tgl name="inverthold"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[uint32_t rate;
int phase;
//int Phase;
int phaseQ;
int phaseB;
int pulsewidthA;
int pulsewidthB;
int pulsewidthC;
int speed;
int pulsedivide;
int wave;
int depth;

int i;

int dir;

int out;
int outB;

int outBv;





int holdv;


int kbeat;




int Sphase;
int hold;
//int8_t stageW;




int32_t expo[3];


float32_t widthC;

bool rtrig;

//bool xtrig;
bool init;]]></code.declaration>
         <code.init><![CDATA[init=1;]]></code.init>
         <code.krate><![CDATA[if (inlet_length==0){
	kbeat=1500;
}
else {
	kbeat=inlet_length;
}
speed= ___SMMUL(kbeat<<3,inlet_time<<2);
rate=0x07FFFFFF/speed;
phase+=rate;



if (init){
	init=0;
	
	if (param_oneshot){
		phase=0x07FFFFFF;
	}
	else {
		phase=0;
		}
}

if (!param_oneshot){
	if (phase>=0x07FFFFFF){
		phase=0;

	}
}
else if (param_oneshot){
	if (phase>=0x07FFFFFF){
		phase=0x07FFFFFF;
	}
}

if (inlet_trig&&!rtrig){
	rtrig=1;



	phase=0;
}
if (!inlet_trig){
rtrig=0;
}




pulsewidthA=(inlet_pulsewidth+param_pulsewidth);
pulsewidthC=((0x07FFFFFF-(inlet_pulsewidth+param_pulsewidth))-(1<<26))<<1;;
pulsewidthB=0x07FFFFFF-(inlet_pulsewidth+param_pulsewidth);

phaseB=phase-(inlet_pulsewidth+param_pulsewidth);
wave=inlet_wave+1;
switch( wave )
            {
              default:
              case 1 :
                // Triangle
    {
       if (phase<pulsewidthA){
       	float32_t width1=pulsewidthA;
		float32_t ratio=0x07FFFFFF/width1;
		int32_t in=phase>pulsewidthA?pulsewidthA:phase;

		out=in*ratio;
       	
       }
       else if (phase>=pulsewidthA){
       float32_t width1=pulsewidthB;
    
		float32_t ratio=0x07FFFFFF/width1;
		
		int32_t in=phaseB>pulsewidthB?pulsewidthB:phaseB;

		out=0x07FFFFFF-(in*ratio);
       }
    }
                break;

              case 2 :
              {
                // Sine
               // if (phase<(0x07FFFFFF-(0x07FFFFFFF>>2))){
               // Sphase=phase+(0x07FFFFFFF>>2);
               // }
                //else {Sphase=phase;}
                
           	if (phase<(0x07FFFFFF>>2)){
				Sphase=phase+(0x07FFFFFF-(0x07FFFFFF>>2));
				}
			else {Sphase=phase-(0x07FFFFFF>>2);}
                int32_t r;
                SINE2TINTERP( Sphase<<5, r )
                 
                out= ((r>>4)>>1)+(1<<26);


              } 
                break;

              case 3 :
                  // Square
                  {
		if (phase<pulsewidthA){
			out=0x07FFFFFF;
			
		}
		else out=0;
                  }
                break;

              

             

				
                
            }


if (wave==2){
	int32_t inexpo=__SSAT(pulsewidthC,28);
	dir=inexpo>0?1:-1;
	inexpo=inexpo>0?inexpo:-inexpo;
	int32_t inv=(1<<27)-inexpo;
	int dar;
	dar=out>0?1:-1;
	int32_t pos=out>0?out:-out;
	if(dir>0)
	{expo[0]=___SMMUL(pos<<3,(inv+___SMMUL(inexpo<<3,pos<<2))<<2);}
	if(dir<0)
	{expo[0]=___SMMUL(((1<<27)-pos)<<3,(inv+___SMMUL(inexpo<<3,((1<<27)-pos)<<2))<<2);}
	for(i=1;i<=2;i++)
	expo[i]=___SMMUL(expo[i-1]<<3,(inv+___SMMUL(inexpo<<3,expo[i-1]<<2))<<2);
	if(dir>0)
	{outBv=expo[2]*dar;}
	if(dir<0)
	{outBv=((1<<27)-expo[2])*dar;}
	}
else {outBv=out;}


	

if (param_inverthold){
	hold=!inlet_hold;
}
else {hold=inlet_hold;}

if (!hold){
	outB=outBv;
	holdv=outB;
	}
else if (hold){
	outB=holdv;
}



	
if (phase>=pulsewidthA){
	outlet_half=1;
	}
else {
	outlet_half=0;
}
   


outlet_out=outB;



//outlet_out=phase;]]></code.krate>
      </object>
   </patchobj>
   <obj type="math/smooth" uuid="6c5d08c282bb08bff24af85b4891447f99bcbc97" name="smooth_6" x="2646" y="294">
      <params>
         <frac32.u.map name="time" value="14.0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="496" y="298" text="\\\\\\\\\\\\\\\\\\\\\\\   DISPLAYS   ///////////////////////"/>
   <comment type="patch/comment" x="532" y="322" text="recording"/>
   <comment type="patch/comment" x="616" y="322" text="delay"/>
   <comment type="patch/comment" x="700" y="322" text="grain"/>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_68" x="532" y="336">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_74" x="616" y="336">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_69" x="700" y="336">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1890" y="336" text="read controls from table &amp; manages LFOs"/>
   <obj type="rbrt/math/&lt;&lt; i c" uuid="984d06ee-2b58-4536-822a-bb4d9e119250" name="&lt;&lt;_1" x="1778" y="350">
      <params>
         <int32 name="shift" value="2"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="12e7ff4f-4f53-4fef-a862-f8efc27d968b" name="tableread_1" x="1890" y="350">
      <params>
         <bool32.tgl name="scalemod" value="1"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="FXpresets"/>
         <objref attributeName="presetmanager" obj="boss"/>
      </attribs>
      <object id="patch/object" uuid="12e7ff4f-4f53-4fef-a862-f8efc27d968b">
         <sDescription>read 8 values from a table,starting from &apos;offset&apos;</sDescription>
         <author>robert schirmer</author>
         <license>who cares</license>
         <inlets>
            <int32 name="offset" description="sets an offset for writing to the table"/>
            <int32 name="kbeat"/>
            <frac32.positive name="LFOa"/>
            <bool32 name="quantize"/>
            <frac32.positive name="LFOb"/>
         </inlets>
         <outlets>
            <frac32 name="v0"/>
            <frac32 name="v1"/>
            <frac32 name="v2"/>
            <frac32 name="v3"/>
            <frac32 name="v4"/>
            <frac32 name="v5"/>
            <frac32 name="v6"/>
            <frac32 name="v7"/>
            <frac32 name="v8"/>
            <frac32 name="v9"/>
            <frac32 name="v10"/>
            <frac32 name="v11"/>
            <frac32 name="v12"/>
            <frac32 name="v13"/>
            <frac32 name="v14"/>
            <frac32 name="v15"/>
            <frac32 name="v16"/>
            <frac32 name="v17"/>
            <frac32 name="v18"/>
            <frac32 name="v19"/>
            <frac32 name="v20"/>
            <frac32 name="v21"/>
            <frac32 name="v22"/>
            <frac32 name="v23"/>
            <frac32 name="v24"/>
            <frac32 name="v25"/>
            <frac32 name="v26"/>
            <frac32 name="v27"/>
            <frac32 name="v28"/>
            <frac32 name="v29"/>
            <frac32 name="v30"/>
            <frac32 name="v31"/>
            <frac32 name="v32"/>
            <frac32 name="v33"/>
            <frac32 name="v34"/>
            <frac32 name="v35"/>
            <frac32 name="v36"/>
            <frac32 name="v37"/>
            <frac32 name="v38"/>
            <frac32 name="v39"/>
            <frac32 name="v40"/>
            <frac32 name="v41"/>
            <frac32 name="v42"/>
            <frac32 name="v43"/>
            <frac32 name="v44"/>
            <frac32 name="v45"/>
            <frac32 name="v46"/>
            <frac32 name="v47"/>
            <frac32 name="v48"/>
            <frac32 name="v49"/>
            <frac32 name="v50"/>
            <frac32 name="v51"/>
            <frac32 name="v52"/>
            <frac32 name="v53"/>
            <frac32 name="v54"/>
            <frac32 name="v55"/>
            <int32 name="v56"/>
            <frac32 name="v57"/>
            <int32 name="v58"/>
            <frac32 name="v59"/>
            <int32 name="v60"/>
            <frac32 name="v61"/>
            <int32 name="v62"/>
            <frac32 name="v63"/>
            <frac32 name="v64"/>
            <frac32 name="v65"/>
            <frac32 name="v66"/>
            <frac32 name="v67"/>
         </outlets>
         <displays>
            <int32.label name="d6"/>
            <int32.label name="d2"/>
            <int32.label name="d3"/>
            <int32.label name="d4"/>
         </displays>
         <params>
            <bool32.tgl name="scalemod"/>
         </params>
         <attribs>
            <objref name="table"/>
            <objref name="presetmanager"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int half;
///
int ctrl;
int ctrlA;
int ctrlZ[4];
int typeZ[4];
int pctrlA;
int ctrlB;
int ctrlC;
int ctrlD;
//int pctrlD;
int typeA;
int typeB;
int INtype[4];
int MODdest[4];
int prevdest[4];
int lastdest;
int dirA;
int dirB;
int quant[4];

uint8_t ccV;
int32_t v;
int32_t Vprev;


bool init;
bool cc;

//

int32_t value[68];
int32_t prev[68];
int32_t outvalue[68];
int32_t MODvalue[68];

int32_t INdepth[4];
int32_t glideamount;
int32_t offset;
int32_t XvalueA;
int32_t SvalueA;
int32_t follow[68];
int32_t diff[68];
int64_t rate;

int32_t pxv[4];


//int moving;
bool gliding;
bool stop;
bool convert[4];]]></code.declaration>
         <code.init><![CDATA[for (int i = 0;i<40;i++){
MODvalue[i]=0;
	prev[i]=65<<20;
}]]></code.init>
         <code.krate><![CDATA[offset=attr_presetmanager.start;

//depth inputs (outvalues could be swapped for new inlets)
INdepth[0]=outvalue[57]+MODvalue[57];
INdepth[1]=outvalue[59]+MODvalue[59];
INdepth[2]=outvalue[61]+MODvalue[61];
INdepth[3]=outvalue[63]+MODvalue[63];
//destination inputs;
ctrlZ[0]=attr_table.array[__USAT((offset + 56),attr_table.LENGTHPOW)]<<attr_table.GAIN;
ctrlZ[1]=attr_table.array[__USAT((offset + 58),attr_table.LENGTHPOW)]<<attr_table.GAIN;
ctrlZ[2]=attr_table.array[__USAT((offset + 60),attr_table.LENGTHPOW)]<<attr_table.GAIN;
ctrlZ[3]=attr_table.array[__USAT((offset + 62),attr_table.LENGTHPOW)]<<attr_table.GAIN;
INtype[0]=attr_presetmanager.type[ctrlZ[0]];
INtype[1]=attr_presetmanager.type[ctrlZ[1]];
INtype[2]=attr_presetmanager.type[ctrlZ[2]];
INtype[3]=attr_presetmanager.type[ctrlZ[3]];
MODvalue[ctrlZ[0]]=0;
MODvalue[ctrlZ[1]]=0;
MODvalue[ctrlZ[2]]=0;
MODvalue[ctrlZ[3]]=0;

disp_d6=attr_table.array[__USAT((offset + 56),attr_table.LENGTHPOW)]<<attr_table.GAIN;

// check to see if a preset is being loaded to decide what glide amount to use (preset or control glide)
if (attr_presetmanager.Pglideamount>0){
	
		glideamount=attr_presetmanager.Pglideamount;
	
}
else {
		glideamount=attr_presetmanager.Cglideamount;
	}
// work out synced rate  for glide
rate= ___SMMUL((inlet_kbeat-1)<<3,glideamount<<2);
//rate can't be 0!
if (rate<1){
	rate=1;
}


//read table to output controls - the outvalue is the dial position
//i was trying to reduce processing by halving the loop length and ony updating the outputs every other krate cycle. I might change that but I'm not sure it makes that much difference (0.3ms?)
//modulation is still krate
for (int i = 0;i<34;i++){
	int32_t Xctrl=i+half;
	value[Xctrl]= attr_table.array[__USAT((offset + Xctrl),attr_table.LENGTHPOW)]<<attr_table.GAIN;
	int32_t type=attr_presetmanager.type[Xctrl];
	int32_t tmpV=value[Xctrl];
	
	int32_t increment;
	
		
	if ((glideamount>0) && (attr_presetmanager.exclude[Xctrl]==0)){	
		
		if(tmpV!=prev[Xctrl])
				{
				diff[Xctrl]=(tmpV-outvalue[Xctrl])/rate;
				}
	
		
		if (diff[Xctrl]>0) {
			outvalue[Xctrl]+=diff[Xctrl];
			if(outvalue[Xctrl]>=tmpV){
				diff[Xctrl]=0;
				outvalue[Xctrl]=tmpV;
				}
			}
		else if(diff[Xctrl]<0) {
			outvalue[Xctrl]+=diff[Xctrl];
			if (outvalue[Xctrl]<=tmpV) {
				diff[Xctrl]=0;
				outvalue[Xctrl]=tmpV;
				}
			}
		
		}
	else { 
		
		


		
		outvalue[Xctrl]=tmpV;
		}
		prev[Xctrl]=tmpV;
	}
if (half==0){
	half=34;
}
else {
	half=0;
}



// loop to check if mod destinations are bipolar (type 1, 6 and 5), unipolar (type 0)
// if destination is time type (9) and quantize is on, do some checking to see what position in quantize array (in preset object init) the  original control setting was
// loop to work out modulation depths for different types (unipolar, bipolar, time)
for (int y = 0;y<4;y++){
		///if destinatin changed clear old destination mod amount and set type and new destination
	
	//int newdest=ctrlZ[y];
	//	INtype[y]=attr_presetmanager.type[newdest];
	///if destinatin changed clear old destination mod amount and set type and new destination
	if (ctrlZ[y]!=prevdest[y]){
		int lastdest=prevdest[y];
		MODvalue[lastdest]=0;
		prevdest[y]=ctrlZ[y];
		
	}
	

	
	if ((INtype[y]==1) || (INtype[y]==6) || (INtype[y]==5)|| (INtype[y]==2)){
		convert[y]=1;
		typeZ[y]=0;
	}
	
	if (INtype[y]==0) {
		convert[y]=0;
		typeZ[y]=INtype[y];
		
	}
	if (INtype[y]==10){
				typeZ[y]=9;
			}
	if (typeZ[y]==9){
		int tmp_ctrl=ctrlZ[y];
		SvalueA= attr_table.array[__USAT((offset + tmp_ctrl),attr_table.LENGTHPOW)]<<attr_table.GAIN;
		if (SvalueA!=pxv[y]){
			pxv[y]=SvalueA;
			for (int x = 0;x<31;x++){
				
						if (SvalueA==attr_presetmanager.quant[x]){
							quant[y]=x;
						}
					
			}
		}
	}




	
	if (INtype[y]<40){
		//////////////////////////////// mod
		ctrl=ctrlZ[y];
		int32_t tmp_value;
		int32_t depth;
		// if type is unipolar (not converted) leave reference value alone
		// else if type is bipolar, convert reference value for depth scaling to unipolar
		if (!convert[y]){
			tmp_value= outvalue[ctrl];
			}
		else {
			tmp_value= (outvalue[ctrl]>>1)+(1<<26);
			
		}
		//positive/negative depth?
		dirA=INdepth[y]>=0?1:0;
		//scale depth from control value to maximum/minimum (dirA)
		if (dirA){
			if (typeZ[y]==0) {
				if (param_scalemod){
					depth= ___SMMUL(INdepth[y]<<3,((1<<27)-tmp_value)<<2);	
				}
				else {
					depth= INdepth[y];
				}
				
			}
			else if (typeZ[y]==9){
					
				if (!inlet_quantize){	
					if (tmp_value<(48<<21)){
						// if time less than 3 bars, max depth= 1bar
						depth=INdepth[y]>>2;
					}
					
					
					else {
						depth=	0;
					}
				}
				else {
					depth= ___SMMUL((30-quant[y])<<3,INdepth[y]<<2);;
				
					
				}
						
					
			
			}
			
		}
		else if (!dirA){
			if (typeZ[y]==0) {
				if (param_scalemod){
					depth= ___SMMUL(INdepth[y]<<3,tmp_value<<2);
					}
				else {
					depth=INdepth[y];
					}
				}
			else if (typeZ[y]==9) {
				if (!inlet_quantize){
						depth= ___SMMUL(INdepth[y]<<3,tmp_value<<2);
					}
				else {
					depth= ___SMMUL(INdepth[y]<<3,quant[y]<<2);
					}
			}
		}
		// double depth if type is bipolar, because it was scaled with the unipolar conversion
		if (convert[y]&&param_scalemod){
				depth=depth<<1;
				}
		// attenuate LFO with depth
		if (y<2){
			XvalueA= ___SMMUL(inlet_LFOa<<3,depth<<2);
		}
		else{
			XvalueA= ___SMMUL(inlet_LFOb<<3,depth<<2);	
		}
		
		// find the quantized value if tye is time, and quantize on, else use value above
		//modvalue = final modulation, added to the stored control value
		if ((typeZ[y]==9) && inlet_quantize){
			
			int tmp_q=quant[y];
			//MODvalue[ctrl]=attr_presetmanager.quant[XvalueA+tmp_q]-tmp_value;
			MODvalue[ctrl]+=attr_presetmanager.quant[XvalueA+tmp_q]-tmp_value;
		}
		else {
			
				MODvalue[ctrl]+=XvalueA;
			
		}
	
	
	}
	
	else {
		MODvalue[ctrl]=0;
	}
}

			


		

		
		
		




//MODvalue[ctrl]=inlet_MOD;
		

			
		
		
		
			
		

////////////////////////////////////
// add dial value to modulation and output

outlet_v0=outvalue[0]+MODvalue[0];
outlet_v1=outvalue[1]+MODvalue[1];
outlet_v2=outvalue[2]+MODvalue[2];
outlet_v3=outvalue[3]+MODvalue[3];
outlet_v4=outvalue[4]+MODvalue[4];
outlet_v5=outvalue[5]+MODvalue[5];
outlet_v6=outvalue[6]+MODvalue[6];
outlet_v7=outvalue[7]+MODvalue[7];
outlet_v8=outvalue[8]+MODvalue[8];
outlet_v9=outvalue[9]+MODvalue[9];
outlet_v10=outvalue[10]+MODvalue[10];
outlet_v11=outvalue[11]+MODvalue[11];
outlet_v12=outvalue[12]+MODvalue[12];
outlet_v13=outvalue[13]+MODvalue[13];
outlet_v14=outvalue[14]+MODvalue[14];
outlet_v15=outvalue[15]+MODvalue[15];
outlet_v16=outvalue[16]+MODvalue[16];
outlet_v17=outvalue[17]+MODvalue[17];
outlet_v18=outvalue[18]+MODvalue[18];
outlet_v19=outvalue[19]+MODvalue[19];
outlet_v20=outvalue[20]+MODvalue[20];
outlet_v21=outvalue[21]+MODvalue[21];
outlet_v22=outvalue[22]+MODvalue[22];
outlet_v23=outvalue[23]+MODvalue[23];
outlet_v24=outvalue[24]+MODvalue[24];
outlet_v25=outvalue[25]+MODvalue[25];
outlet_v26=outvalue[26]+MODvalue[26];
outlet_v27=outvalue[27]+MODvalue[27];
outlet_v28=outvalue[28]+MODvalue[28];
outlet_v29=outvalue[29]+MODvalue[29];
outlet_v30=outvalue[30]+MODvalue[30];
outlet_v31=outvalue[31]+MODvalue[31];
outlet_v32=outvalue[32]+MODvalue[32];
outlet_v33=outvalue[33]+MODvalue[33];
outlet_v34=outvalue[34]+MODvalue[34];
outlet_v35=outvalue[35]+MODvalue[35];
outlet_v36=outvalue[36]+MODvalue[36];
outlet_v37=outvalue[37]+MODvalue[37];
outlet_v38=outvalue[38]+MODvalue[38];
outlet_v39=outvalue[39]+MODvalue[39];
outlet_v40=outvalue[40]+MODvalue[40];
outlet_v41=outvalue[41]+MODvalue[41];
outlet_v42=outvalue[42]+MODvalue[42];
outlet_v43=outvalue[43]+MODvalue[43];
outlet_v44=outvalue[44]+MODvalue[44];
outlet_v45=outvalue[45]+MODvalue[45];
outlet_v46=outvalue[46]+MODvalue[46];
outlet_v47=outvalue[47]+MODvalue[47];
outlet_v48=outvalue[48]+MODvalue[48];
outlet_v49=outvalue[49]+MODvalue[49];
outlet_v50=outvalue[50]+MODvalue[50];
outlet_v51=outvalue[51]+MODvalue[51];
outlet_v52=outvalue[52]+MODvalue[52];
outlet_v53=outvalue[53]+MODvalue[53];
outlet_v54=outvalue[54]+MODvalue[54];
outlet_v55=outvalue[55]+MODvalue[55];
outlet_v56=ctrlZ[0];//;
outlet_v57=outvalue[57]+MODvalue[57];//;
outlet_v58=ctrlZ[1];//;
outlet_v59=outvalue[59]+MODvalue[59];//;
outlet_v60=ctrlZ[2];//;
outlet_v61=outvalue[61]+MODvalue[61];//;
outlet_v62=ctrlZ[3];//;
outlet_v63=outvalue[63]+MODvalue[63];//;
outlet_v64=outvalue[64]+MODvalue[64];
outlet_v65=outvalue[65]+MODvalue[65];
outlet_v66=outvalue[66]+MODvalue[66];//;
outlet_v67=outvalue[67]+MODvalue[67];//;]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="56" y="364" text="****   DELAY/FEEDBACK   ****************************************************************"/>
   <comment type="patch/comment" x="840" y="364" text="***   MIXER    ************************************************************************"/>
   <comment type="patch/comment" x="1218" y="364" text="***   PANNING   *********************************************************"/>
   <comment type="patch/comment" x="364" y="378" text="22. feedback type"/>
   <comment type="patch/comment" x="56" y="392" text="20. delay time"/>
   <comment type="patch/comment" x="154" y="392" text="47 right delay offset"/>
   <comment type="patch/comment" x="280" y="392" text="21. feedback"/>
   <comment type="patch/comment" x="364" y="392" text="buffer/grain"/>
   <comment type="patch/comment" x="840" y="392" text="30. dry/wet"/>
   <comment type="patch/comment" x="924" y="392" text="volume"/>
   <comment type="patch/comment" x="1008" y="392" text="24. buffer/grain"/>
   <comment type="patch/comment" x="1106" y="392" text="25. grain gain"/>
   <comment type="patch/comment" x="1218" y="392" text="49 width"/>
   <comment type="patch/comment" x="1302" y="392" text="51 random pan"/>
   <comment type="patch/comment" x="1400" y="392" text="50 pan mode"/>
   <comment type="patch/comment" x="1484" y="392" text="26. swap feedback "/>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_76" x="56" y="406">
      <params>
         <frac32.u.map name="value" value="26.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_42" x="154" y="406">
      <params>
         <frac32.u.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_18" x="280" y="406">
      <params>
         <frac32.u.map name="value" value="41.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_7" x="364" y="406">
      <params>
         <frac32.u.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_13" x="840" y="406">
      <params>
         <frac32.u.map name="value" value="32.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_14" x="924" y="406">
      <params>
         <frac32.u.map name="value" value="64.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_1" x="1008" y="406">
      <params>
         <frac32.u.map name="value" value="64.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_8" x="1106" y="406">
      <params>
         <frac32.u.map name="value" value="32.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_40" x="1218" y="406">
      <params>
         <frac32.s.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_12" x="1302" y="406">
      <params>
         <frac32.u.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_11" x="1400" y="406">
      <params>
         <bool32.tgl name="b" value="1"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1484" y="406" text="channels"/>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_15" x="1484" y="420">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="658" y="448" text="grainsize"/>
   <comment type="patch/comment" x="574" y="462" text="BPM"/>
   <comment type="patch/comment" x="658" y="462" text="(samples)"/>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="bool_9" x="1400" y="462">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/i" uuid="5e35fd0c62d81e70017289250cf28edd26e19e4a" name="i_1" x="574" y="476">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/i" uuid="5e35fd0c62d81e70017289250cf28edd26e19e4a" name="i_10" x="658" y="476">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="bool_11" x="1484" y="476">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_17" x="56" y="490">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_63" x="154" y="490">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_54" x="280" y="490">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_55" x="364" y="490">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_3" x="840" y="490">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_48" x="1008" y="490">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_49" x="1106" y="490">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial b" uuid="9ffed04e6a3052d9001eda83bae7024cb6d17037" name="dial_45" x="1218" y="490">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_47" x="1302" y="490">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1400" y="518" text="(turn off"/>
   <comment type="patch/comment" x="1400" y="532" text="when other "/>
   <comment type="patch/comment" x="1400" y="546" text="things are"/>
   <comment type="patch/comment" x="1400" y="560" text="more stereo)"/>
   <comment type="patch/comment" x="56" y="588" text="***   GRAINS   ************************************************************************"/>
   <comment type="patch/comment" x="504" y="588" text="***   TIME   *****************************************"/>
   <comment type="patch/comment" x="798" y="588" text="***   PITCH   ************************"/>
   <comment type="patch/comment" x="1008" y="588" text="***   RANDOM OCTAVE   *****************************************************************************************"/>
   <comment type="patch/comment" x="2226" y="588" text="graintrig"/>
   <comment type="patch/comment" x="2338" y="588" text="freeze"/>
   <comment type="patch/comment" x="2436" y="588" text="holdbuffer"/>
   <comment type="patch/comment" x="2534" y="588" text="tap"/>
   <comment type="patch/comment" x="2604" y="588" text="resync grain"/>
   <comment type="patch/comment" x="1008" y="602" text="10. random octave"/>
   <obj type="logic/or 2" uuid="3805d3c84d30032a44fbdbe42d9a2988a1790a3e" name="or_8" x="2226" y="602">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/or 2" uuid="3805d3c84d30032a44fbdbe42d9a2988a1790a3e" name="or_2" x="2338" y="602">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/or 2" uuid="3805d3c84d30032a44fbdbe42d9a2988a1790a3e" name="or_4" x="2436" y="602">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/or 2" uuid="3805d3c84d30032a44fbdbe42d9a2988a1790a3e" name="or_6" x="2520" y="602">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/or 2" uuid="3805d3c84d30032a44fbdbe42d9a2988a1790a3e" name="or_9" x="2604" y="602">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="56" y="616" text="0. grainsize"/>
   <comment type="patch/comment" x="140" y="616" text="1. density"/>
   <comment type="patch/comment" x="224" y="616" text="2. disintegrate"/>
   <comment type="patch/comment" x="308" y="616" text="3. spray"/>
   <comment type="patch/comment" x="392" y="616" text="27. shape"/>
   <comment type="patch/comment" x="504" y="616" text="23. reverse delay"/>
   <comment type="patch/comment" x="602" y="616" text="7.reversegrains"/>
   <comment type="patch/comment" x="686" y="616" text="5. stretch"/>
   <comment type="patch/comment" x="798" y="616" text="4. pitch"/>
   <comment type="patch/comment" x="882" y="616" text="6. pitchspray"/>
   <comment type="patch/comment" x="1008" y="616" text="probability"/>
   <comment type="patch/comment" x="1106" y="616" text="11. octave time"/>
   <comment type="patch/comment" x="1204" y="616" text="44 octave right phase"/>
   <comment type="patch/comment" x="1330" y="616" text="28. octave mode"/>
   <comment type="patch/comment" x="1428" y="616" text="29. oct range"/>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_71" x="56" y="630">
      <params>
         <frac32.u.map name="value" value="32.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_19" x="140" y="630">
      <params>
         <frac32.s.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_26" x="224" y="630">
      <params>
         <frac32.u.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_46" x="308" y="630">
      <params>
         <frac32.u.map name="value" value="0.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_23" x="392" y="630">
      <params>
         <frac32.u.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_6" x="504" y="630">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_34" x="602" y="630">
      <params>
         <frac32.u.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_29" x="686" y="630">
      <params>
         <frac32.s.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_2" x="798" y="630">
      <params>
         <frac32.s.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_39" x="882" y="630">
      <params>
         <frac32.u.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_15" x="1008" y="630">
      <params>
         <frac32.u.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_59" x="1106" y="630">
      <params>
         <frac32.u.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_41" x="1204" y="630">
      <params>
         <frac32.u.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="e9c9875a-139c-4c46-9dbf-278119d6e281" name="i_4" x="1330" y="630">
      <params>
         <int32.vradio name="value" value="2"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="e9c9875a-139c-4c46-9dbf-278119d6e281">
         <sDescription>positive integer control, vertical radio buttons</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets/>
         <outlets>
            <frac32.positive name="out"/>
         </outlets>
         <displays/>
         <params>
            <int32.vradio name="value" noLabel="true">
               <MaxValue i="3"/>
            </int32.vradio>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out= param_value*(0x07FFFFFF/3);]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="d61d50fd-5591-4c21-8c70-a1a8f3d07e47" name="i_8" x="1428" y="630">
      <params>
         <int32 name="value" value="2"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="d61d50fd-5591-4c21-8c70-a1a8f3d07e47">
         <sDescription>positive integer control</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets/>
         <outlets>
            <frac32.positive name="out"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="value" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="65536"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out=  param_value*(0x07FFFFFF/4);]]></code.krate>
      </object>
   </patchobj>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="bool_1" x="504" y="686">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_10" x="56" y="714">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial b" uuid="9ffed04e6a3052d9001eda83bae7024cb6d17037" name="dial_16" x="140" y="714">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_20" x="224" y="714">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_21" x="308" y="714">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_56" x="392" y="714">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_27" x="602" y="714">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial b" uuid="9ffed04e6a3052d9001eda83bae7024cb6d17037" name="dial_22" x="686" y="714">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial b" uuid="9ffed04e6a3052d9001eda83bae7024cb6d17037" name="dial_11" x="798" y="714">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_24" x="882" y="714">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_28" x="1008" y="714">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_30" x="1106" y="714">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_62" x="1204" y="714">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/i" uuid="5e35fd0c62d81e70017289250cf28edd26e19e4a" name="i_6" x="1428" y="714">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/i" uuid="5e35fd0c62d81e70017289250cf28edd26e19e4a" name="i_5" x="1330" y="742">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="56" y="812" text="***   GRAIN ECHO   ***************************************************************************************"/>
   <comment type="patch/comment" x="644" y="812" text="***   SHUFFLE   ******************************************"/>
   <comment type="patch/comment" x="1008" y="812" text="***   CORRUPT   ******************************************"/>
   <comment type="patch/comment" x="140" y="826" text="17. grainecho"/>
   <comment type="patch/comment" x="434" y="826" text="19.feed grainecho back"/>
   <comment type="patch/comment" x="1008" y="826" text="8. corrupt "/>
   <comment type="patch/comment" x="42" y="840" text="16. grainecho vol"/>
   <comment type="patch/comment" x="140" y="840" text="feedback"/>
   <comment type="patch/comment" x="224" y="840" text="18. grainecho time"/>
   <comment type="patch/comment" x="322" y="840" text="48 grainecho width"/>
   <comment type="patch/comment" x="434" y="840" text="to granulator"/>
   <comment type="patch/comment" x="616" y="840" text="12. shuffle probability"/>
   <comment type="patch/comment" x="742" y="840" text="13. shuffle range"/>
   <comment type="patch/comment" x="840" y="840" text="14. shuffle size"/>
   <comment type="patch/comment" x="1008" y="840" text="probability"/>
   <comment type="patch/comment" x="1106" y="840" text="9. corrupt time"/>
   <comment type="patch/comment" x="1204" y="840" text="46 corrupt time right phase"/>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_5" x="56" y="854">
      <params>
         <frac32.u.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_25" x="140" y="854">
      <params>
         <frac32.u.map name="value" value="31.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_75" x="224" y="854">
      <params>
         <frac32.u.map name="value" value="1.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_38" x="336" y="854">
      <params>
         <frac32.s.map name="value" value="-25.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_36" x="434" y="854">
      <params>
         <frac32.u.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_9" x="644" y="854">
      <params>
         <frac32.u.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_72" x="756" y="854">
      <params>
         <frac32.u.map name="value" value="19.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_73" x="840" y="854">
      <params>
         <frac32.u.map name="value" value="16.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_31" x="1008" y="854">
      <params>
         <frac32.u.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_70" x="1106" y="854">
      <params>
         <frac32.u.map name="value" value="34.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_43" x="1218" y="854">
      <params>
         <frac32.u.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_50" x="56" y="924">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_51" x="140" y="938">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_52" x="224" y="938">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial b" uuid="9ffed04e6a3052d9001eda83bae7024cb6d17037" name="dial_53" x="336" y="938">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_65" x="434" y="938">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_32" x="644" y="938">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_33" x="756" y="938">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_35" x="840" y="938">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_37" x="1008" y="938">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_44" x="1106" y="938">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_64" x="1218" y="938">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="2170" y="938" text="preset manager"/>
   <comment type="patch/comment" x="2170" y="952" text="copies data around a table for presets, "/>
   <comment type="patch/comment" x="2170" y="966" text="and sets control types for control write object"/>
   <patchobj type="patch/object" uuid="54e1b800-1a0e-44b6-abdb-c5adcc04a360" name="boss" x="2170" y="980">
      <params>
         <int32 name="offset" value="0"/>
         <int32 name="rangec" value="0"/>
      </params>
      <attribs>
         <objref attributeName="preset" obj="FXpresets"/>
         <combo attributeName="init" selection="do nothing"/>
         <spinner attributeName="channel" value="13"/>
      </attribs>
      <object id="patch/object" uuid="54e1b800-1a0e-44b6-abdb-c5adcc04a360">
         <sDescription>copy the elements of a table from table &apos;src&apos; to table &apos;dst&apos;
the length of the area to copy is defined by &apos;range&apos;,
the read offset is defined by inlet&apos;src&apos; and the write offset by &apos;dst&apos;
&apos;speed&apos; sets the copying speed in terms of audio-rate (16 is really fast!)
if &apos;splat&apos; is enabled,tcopy will preserve the original contents of the destination table.
if &apos;clear&apos; is enabled,tcopy will clear the contents of the table.</sDescription>
         <author>Robert Schirmer</author>
         <license>BSD</license>
         <helpPatch>data.axh</helpPatch>
         <inlets>
            <int32 name="snapshot"/>
            <bool32.rising name="savedefault"/>
            <bool32.rising name="loaddefault"/>
            <int32 name="control"/>
            <int32 name="parameter"/>
            <bool32.rising name="learn"/>
            <bool32 name="Fmoving"/>
            <bool32.rising name="save"/>
            <bool32.rising name="load"/>
            <int32 name="globalzoom"/>
            <int32 name="faderID"/>
            <bool32 name="learnfaderID"/>
            <bool32.risingfalling name="autosave"/>
         </inlets>
         <outlets>
            <int32 name="preset"/>
            <bool32.pulse name="sdsave"/>
         </outlets>
         <displays>
            <int32.label name="d1"/>
         </displays>
         <params>
            <int32 name="offset">
               <MinValue i="0"/>
               <MaxValue i="102102102"/>
            </int32>
            <int32 name="rangec">
               <MinValue i="0"/>
               <MaxValue i="102102102"/>
            </int32>
         </params>
         <attribs>
            <objref name="preset" description="name of the source -table"/>
            <combo name="init">
               <MenuEntries>
                  <string>do nothing</string>
                  <string>load default</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
               </CEntries>
            </combo>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="0"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int preset;
int Psnap;
int INpreset;
int ntrig;
int ctrig;
int ptrig;
int trig;
int currentparam;
int lastparam;
int fader;
int speed;
int save;
int init;
int type[68];
int shift[68];
int freezeparams[4];
int globalzoom;
int outshot;
uint32_t i;
uint32_t ii;
uint32_t previi;
uint32_t src;
uint32_t dst;
uint32_t rangeA;
uint32_t rangeB;

uint32_t copy;
uint32_t paste;
uint32_t startA;
uint32_t startB;
uint32_t snapshot;
uint32_t range;
uint32_t total;
uint32_t totalA;
uint32_t totalB;
uint32_t start;
uint32_t modoffset;
uint32_t soffsetB;
uint32_t tmpV;
uint32_t soffsetA;
uint32_t soffset;
int32_t Pglideamount;
int32_t Cglideamount;
//int32_t prevknob;
//int32_t prevpg;
//int32_t prevcg;
int32_t Pglidein;

int32_t quant[31];
bool exclude[72];

bool sdsave;
bool loading;
bool saving;
bool ltrig;
bool shold;]]></code.declaration>
         <code.init><![CDATA[//ntrig = 1;
snapshot=0;
//trig=1;
init=3000;




//types
// 0 = positive
// 1 = bipolar
// 2 = pitch 
// 5 = stretch
// 6 = show 100th (density bipolar) only different for hardware display
// 7 = positive quantized to whole number with centre lock (for reverse grains controL, but not necessary)

// 9 = time quantized=1/256 - 4bars or unquantized 0-1bar
//10 = grain size
// 40 and above = integer. 30 = 0, 31 = bool, 32 = 2, etc.

type[0]=10;
type[1]=6;
type[2]=0;
type[3]=0;
type[4]=2;
type[5]=5;
type[6]=0;
type[7]=7;
type[8]=0;
type[9]=9;
type[10]=0;
type[11]=9;
type[12]=0;
type[13]=9;
type[14]=9;
type[15]=41;
type[16]=0;
type[17]=0;
type[18]=0;
type[19]=0;
type[20]=9;
type[21]=0;
type[22]=0;
type[23]=41;
type[24]=0;
type[25]=0;
type[26]=41;
type[27]=0;
type[28]=43;
type[29]=44;
type[30]=0;
type[31]=0;
type[32]=1;
type[33]=48;
type[34]=10;
//
type[36]=9;
type[37]=9;
type[38]=41;
type[39]=41;
type[40]=41;
type[41]=41;
type[42]=41;
type[43]=41;
type[44]=0;
type[45]=41;
type[46]=0;
type[47]=0;
type[48]=1;
type[49]=1;
type[50]=41;
type[51]=0;
type[52]=41;
type[53]=9;
type[54]=0;
type[55]=43;
type[56]=0;
type[57]=1;
type[58]=0;
type[59]=1;
type[60]=0;
type[61]=1;
type[62]=0;
type[63]=1;
type[64]=9;
type[65]=0;
type[66]=43;

//for my hardware, if i change control 2 while shift is held, it changes control 41 instead
shift[2+1]=41+1;
shift[3+1]=38+1;
shift[6+1]=42+1;
shift[7+1]=40+1;
shift[8+1]=45+1;
shift[9+1]=46+1;
shift[10+1]=43+1;
shift[11+1]=44+1;
shift[12+1]=39+1;
shift[17+1]=19+1;
shift[20+1]=47+1;
shift[32+1]=33+1;
shift[51+1]=52+1;
shift[49+1]=50+1;









exclude[35]=1;
type[35]=55;
exclude[36]=1;
exclude[37]=1;


freezeparams[0]=31;
freezeparams[1]=32;
freezeparams[2]=34;
freezeparams[3]=1;



/////////////
quant[0]=0;
quant[1]=(1<<17)+(1<<16); // *1/256;
quant[2]=(1<<18); // //128
quant[3]=(1<<18)+(1<<17); //*1/128
quant[4]=(1<<19); //1/64
quant[5]=(1<<19)+(1<<18);// *1/64
quant[6]=(1<<20); //1/32
quant[7]=(1<<20)+(1<<19); //*1/32
quant[8]=(1<<21); //1/16
quant[9]=(1<<21)+(1<<20); // *1/16;
quant[10]=2<<21; // 1/8th
quant[11]=3<<21; // *1/8th
quant[12]=4<<21; // 1/4
quant[13]=5<<21; // 5/16ths
quant[14]=6<<21; // *1/4
quant[15]=7<<21; // 7/16ths
quant[16]=8<<21; // 1/2
quant[17]=9<<21; //9/16ths
quant[18]=10<<21; //10/16ths
quant[19]=11<<21; //11/16ths
quant[20]=12<<21; // *1/2
quant[21]=13<<21; //13/16ths
quant[22]=14<<21; //14/16ths
quant[23]=15<<21; //15/16ths
quant[24]=16<<21; //1bar
quant[25]=20<<21; //5beats
quant[26]=24<<21; //6beats
quant[27]=28<<21; //7beats
quant[28]=32<<21; //2bars
quant[29]=48<<21; // 3bars
quant[30]=0x07FFFFFF; // 4bars]]></code.init>
         <code.krate><![CDATA[//start= offfset
start=64;
speed = 2;
range=72;
//modoffset=64+start;

// preset dial
INpreset=(attr_preset.array[__USAT((start + 35),attr_preset.LENGTHPOW)]<<attr_preset.GAIN)>>21;
//preset glide dial
Pglidein=attr_preset.array[__USAT((start + 36),attr_preset.LENGTHPOW)]<<attr_preset.GAIN;
//control glide dial
Cglideamount=attr_preset.array[__USAT((start + 37),attr_preset.LENGTHPOW)]<<attr_preset.GAIN;

lastparam=attr_preset.array[0];
// if save released, save preset. on release to save to other preset slots (useful for my hardware, press save, change preset, release save and current settings saved to to new preset destination)
if (inlet_save){
	shold=1;
}
else if (!inlet_save&&!ntrig&&shold){
	shold=0;
	if (snapshot==0){
		snapshot=1;
	}
	saving=1;
	ntrig=1;
	trig=1;
}
// load preset
if (inlet_load &&!ntrig){
	Pglideamount=Pglidein;
	if (Pglideamount<1){
		Pglideamount=1;
	}
	saving=0;
	ntrig=1;
	trig=1;
	
}
//if preset dial has changed, set snapshot (index for actual preset loaded) and turn preset glide on, and load preset
if ((preset!=INpreset)&&!init&&!ntrig){
	preset=INpreset;
	
	snapshot=INpreset+1;
	if (!shold){
		Pglideamount=Pglidein;
		if (Pglideamount<1){
			Pglideamount=1;
		}
		saving=0;
		ntrig=1;
		trig=1;
		}
	
}
// if inlet snapshot (integer preset control) changes, set snapshot to load. snapshot basically means preset, but there's two layers because of the dial/integer thing, hardware needds,etc.
if ((inlet_snapshot!=Psnap)&&!init){
	snapshot=inlet_snapshot+1;
	Psnap=inlet_snapshot;
}
//64 = start
//64+PARAM_range = mod control offset
//moddoffset+8 +range  = default preset
//defaultpreset+range= 1st preset


// dont think i use this anymore
globalzoom=inlet_globalzoom;
// initialize
if (init>0){
	Pglideamount=Pglidein;
	preset=INpreset;
	Psnap=inlet_snapshot;
	snapshot=inlet_snapshot+1;
	init-=1;
	
		
}
// if hardware faders have settled down, load default preset or not
if (!inlet_Fmoving) {
	if (init==1){
			
		init=0;
		if (attr_init){
			ntrig=1;
			i = 0;
			ii=0;
			previi=-1;
			src = 0 + start+range;
			dst = 0 + start;
		}
		else if (!attr_init){
			ntrig=0;
			init=0;
		}
	}
	
}

// my hardware stuff, a kind of macro learn thing, not really using it at the mo
//if ((!inlet_learnfaderID) && (inlet_faderID<8)){
//			currentparam=lastparam;
//		}
//if (inlet_learnfaderID && (inlet_faderID<4)){
//		
//			fader=inlet_faderID;
//			if (inlet_Fmoving){
//				attr_preset.array[fader+modoffset]=currentparam;
//			}
//}	
//if (inlet_learn&&!ltrig){
//	attr_preset.array[inlet_control+modoffset]=inlet_parameter+1;
//	ltrig=1;
//}
//else if (!inlet_learn){
//	ltrig=0;
//}




// trigger to save current settings as default (depending on init attribute)
if (inlet_savedefault&&!ntrig){
	saving=1;
	snapshot=0;
	ntrig = 1;
	trig=1;
	
}
// trigger to load default preset
if (inlet_loaddefault&&!ntrig){
	snapshot=0;
	saving=0;
	ntrig = 1;
	trig=1;
	
}



// trigger to load or save presets. basically setting copy (src) and paste (dst) indexes on the table. (0+start) = current controls
if (trig){
	outshot=snapshot;
	i = 0;
	ii=0;
	previi=-1;
	//load
	if (!(saving>0))
		{
		src = (snapshot*range) + start+range;
		dst = 0 + start;
		loading=1;
		}
	//save
	else if (saving>0)
		{
		src = 0 + start;
		dst = (snapshot*range) + start+range;
		}
}

	


// moves data around table, if saving it's moving the input bit of the table to the preset bit of the table. if loading, it's moving the preset bit of the table to the input bit of the table
if ((ii<range)&&(ntrig)){
if (ii!=previi){
		
	if ((exclude[ii]==0)  &&  (ii<(range-4))  ){
		if ((ii>=(modoffset-start))&&(attr_preset.array[ii  + src]==0)){
		//ignore this one, hardware stuff
				tmpV=attr_preset.array[ii  + 0 + start + range];
		}
		else {
			//this is the one that gets the value from the inputs
				tmpV=attr_preset.array[ii  + src] ;
			}
			//writes the value to the table
			attr_preset.array[ii + dst]=  tmpV;
		}
	  
	  previi=ii;
	}
 //slows down copying - speed (set at the top of the page)divides the speed of the copying pasting above
 // i=1 parameter per krate cycle
 // ii is currently set to half that (speed=2)
  i += 1;
  ii=i/speed;	

}
if ((ii==range) && !inlet_save && !inlet_load && !inlet_savedefault && !inlet_loaddefault){
	//if finished, and no buttons are held, initialise
	if (saving){
		sdsave=1;
	}
	saving=0;
	loading=0;
  	ntrig=0;
  	
  }
if (!inlet_autosave){
	sdsave=0;
}
outlet_sdsave=sdsave;
sdsave=0;
 outlet_preset=outshot;
// disp_d1=modparameter[1];
trig=0;]]></code.krate>
         <code.midihandler><![CDATA[if ((status == (attr_channel-1) + MIDI_NOTE_ON) && (data1 < 64) && (data2>0) ) {
	Pglideamount=Pglidein;
	if (Pglideamount<1){
		Pglideamount=1;
	}
	saving=0;
	ntrig=1;
	trig=1;
	snapshot=data1;

}]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="6e3f5e35-4616-4bc6-be75-6d311c7f09ba" name="or_1" x="2324" y="980">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="6e3f5e35-4616-4bc6-be75-6d311c7f09ba">
         <sDescription>logic OR with 4 inputs</sDescription>
         <author>Alex</author>
         <license>BSD</license>
         <helpPatch>logic.axh</helpPatch>
         <inlets>
            <bool32 name="i1" description="input 1"/>
            <bool32 name="i2" description="input 2"/>
            <bool32 name="i3" description="input 1"/>
         </inlets>
         <outlets>
            <bool32 name="o" description="output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_o = (inlet_i1)||(inlet_i2)||(inlet_i3);]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="56" y="1022" text="****************************************************************************************************************   MOD MATRIX   *******************************************************************************************************************************************************************************"/>
   <obj type="string/c" uuid="4aa90a90c435a742ddfa152d232883fc5b2f1b3" name="c_2" x="2422" y="1022">
      <params/>
      <attribs>
         <table attributeName="str" table="/kimdealismyheroyo"/>
      </attribs>
   </obj>
   <comment type="patch/comment" x="56" y="1036" text="***   LFO A    *************************************"/>
   <comment type="patch/comment" x="420" y="1036" text="***   LFO A DESTINATIONS    *************************************"/>
   <comment type="patch/comment" x="798" y="1036" text="***   LFO B    *************************************"/>
   <comment type="patch/comment" x="1176" y="1036" text="***   LFO B   DESTINATIONS    *************************************"/>
   <comment type="patch/comment" x="56" y="1050" text="53 time"/>
   <comment type="patch/comment" x="140" y="1050" text="54 pulse width"/>
   <comment type="patch/comment" x="224" y="1050" text="55 wave"/>
   <comment type="patch/comment" x="420" y="1050" text="56 destA"/>
   <comment type="patch/comment" x="490" y="1050" text="57 depthA"/>
   <comment type="patch/comment" x="574" y="1050" text="58 destB"/>
   <comment type="patch/comment" x="644" y="1050" text="59 depthB"/>
   <comment type="patch/comment" x="798" y="1050" text="64 time"/>
   <comment type="patch/comment" x="882" y="1050" text="65 pulse width"/>
   <comment type="patch/comment" x="966" y="1050" text="66 wave"/>
   <comment type="patch/comment" x="1176" y="1050" text="60 destC"/>
   <comment type="patch/comment" x="1246" y="1050" text="61 depthC"/>
   <comment type="patch/comment" x="1330" y="1050" text="62 destC"/>
   <comment type="patch/comment" x="1400" y="1050" text="63 depthC"/>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_77" x="56" y="1064">
      <params>
         <frac32.u.map name="value" value="14.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_94" x="140" y="1064">
      <params>
         <frac32.u.map name="value" value="32.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="e9c9875a-139c-4c46-9dbf-278119d6e281" name="i_24" x="224" y="1064">
      <params>
         <int32.vradio name="value" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="e9c9875a-139c-4c46-9dbf-278119d6e281">
         <sDescription>positive integer control, vertical radio buttons</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets/>
         <outlets>
            <frac32.positive name="out"/>
         </outlets>
         <displays/>
         <params>
            <int32.vradio name="value" noLabel="true">
               <MaxValue i="3"/>
            </int32.vradio>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out= param_value*(0x07FFFFFF/3);]]></code.krate>
      </object>
   </patchobj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_6" x="308" y="1064">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="d61d50fd-5591-4c21-8c70-a1a8f3d07e47" name="i_20" x="420" y="1064">
      <params>
         <int32 name="value" value="67"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="d61d50fd-5591-4c21-8c70-a1a8f3d07e47">
         <sDescription>positive integer control</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets/>
         <outlets>
            <frac32.positive name="out"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="value" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="65536"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out=  param_value;]]></code.krate>
      </object>
   </patchobj>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_88" x="490" y="1064">
      <params>
         <frac32.s.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="d61d50fd-5591-4c21-8c70-a1a8f3d07e47" name="i_21" x="574" y="1064">
      <params>
         <int32 name="value" value="4"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="d61d50fd-5591-4c21-8c70-a1a8f3d07e47">
         <sDescription>positive integer control</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets/>
         <outlets>
            <frac32.positive name="out"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="value" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="65536"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out=  param_value;]]></code.krate>
      </object>
   </patchobj>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_89" x="644" y="1064">
      <params>
         <frac32.s.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_84" x="798" y="1064">
      <params>
         <frac32.u.map name="value" value="50.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_108" x="882" y="1064">
      <params>
         <frac32.u.map name="value" value="32.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="e9c9875a-139c-4c46-9dbf-278119d6e281" name="i_25" x="966" y="1064">
      <params>
         <int32.vradio name="value" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="e9c9875a-139c-4c46-9dbf-278119d6e281">
         <sDescription>positive integer control, vertical radio buttons</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets/>
         <outlets>
            <frac32.positive name="out"/>
         </outlets>
         <displays/>
         <params>
            <int32.vradio name="value" noLabel="true">
               <MaxValue i="3"/>
            </int32.vradio>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out= param_value*(0x07FFFFFF/3);]]></code.krate>
      </object>
   </patchobj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_78" x="1050" y="1064">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="d61d50fd-5591-4c21-8c70-a1a8f3d07e47" name="i_22" x="1176" y="1064">
      <params>
         <int32 name="value" value="5"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="d61d50fd-5591-4c21-8c70-a1a8f3d07e47">
         <sDescription>positive integer control</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets/>
         <outlets>
            <frac32.positive name="out"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="value" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="65536"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out=  param_value;]]></code.krate>
      </object>
   </patchobj>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_90" x="1246" y="1064">
      <params>
         <frac32.s.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="d61d50fd-5591-4c21-8c70-a1a8f3d07e47" name="i_23" x="1330" y="1064">
      <params>
         <int32 name="value" value="20"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="d61d50fd-5591-4c21-8c70-a1a8f3d07e47">
         <sDescription>positive integer control</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets/>
         <outlets>
            <frac32.positive name="out"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="value" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="65536"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out=  param_value;]]></code.krate>
      </object>
   </patchobj>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_91" x="1400" y="1064">
      <params>
         <frac32.s.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="2422" y="1092" text="save preset table to sd card"/>
   <obj type="table/save" uuid="3e4108b607d56d9e1cd10abb898b58eea11e53b2" name="save_2" x="2422" y="1106">
      <params/>
      <attribs>
         <objref attributeName="table" obj="FXpresets"/>
      </attribs>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_98" x="56" y="1148">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_99" x="140" y="1148">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/i" uuid="5e35fd0c62d81e70017289250cf28edd26e19e4a" name="i_11" x="420" y="1148">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial b" uuid="9ffed04e6a3052d9001eda83bae7024cb6d17037" name="dial_93" x="490" y="1148">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/i" uuid="5e35fd0c62d81e70017289250cf28edd26e19e4a" name="i_13" x="574" y="1148">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial b" uuid="9ffed04e6a3052d9001eda83bae7024cb6d17037" name="dial_95" x="644" y="1148">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_103" x="798" y="1148">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_67" x="882" y="1148">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/i" uuid="5e35fd0c62d81e70017289250cf28edd26e19e4a" name="i_14" x="1176" y="1148">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial b" uuid="9ffed04e6a3052d9001eda83bae7024cb6d17037" name="dial_96" x="1246" y="1148">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/i" uuid="5e35fd0c62d81e70017289250cf28edd26e19e4a" name="i_16" x="1330" y="1148">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial b" uuid="9ffed04e6a3052d9001eda83bae7024cb6d17037" name="dial_97" x="1400" y="1148">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/i" uuid="5e35fd0c62d81e70017289250cf28edd26e19e4a" name="i_17" x="224" y="1176">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/i" uuid="5e35fd0c62d81e70017289250cf28edd26e19e4a" name="i_9" x="994" y="1176">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="56" y="1330" text="//////////////////////////////////////   STEREO PROBABILITIES ON/OFF   ////////////////////////////////////////////////////////////////////////////////////////////////"/>
   <comment type="patch/comment" x="672" y="1344" text="43 stereo octave"/>
   <comment type="patch/comment" x="56" y="1358" text="38 stereo spray"/>
   <comment type="patch/comment" x="168" y="1358" text="39 stereo shuffle"/>
   <comment type="patch/comment" x="280" y="1358" text="40 stereo grain reverse"/>
   <comment type="patch/comment" x="406" y="1358" text="41 stereo disintegrate"/>
   <comment type="patch/comment" x="532" y="1358" text="42 stereo pitchspray"/>
   <comment type="patch/comment" x="672" y="1358" text="prob"/>
   <comment type="patch/comment" x="798" y="1358" text="45 stereo corrupt"/>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_8" x="56" y="1372">
      <params>
         <bool32.tgl name="b" value="1"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_5" x="182" y="1372">
      <params>
         <bool32.tgl name="b" value="1"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_4" x="308" y="1372">
      <params>
         <bool32.tgl name="b" value="1"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_2" x="406" y="1372">
      <params>
         <bool32.tgl name="b" value="1"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_9" x="532" y="1372">
      <params>
         <bool32.tgl name="b" value="1"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_3" x="672" y="1372">
      <params>
         <bool32.tgl name="b" value="1"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_12" x="798" y="1372">
      <params>
         <bool32.tgl name="b" value="1"/>
      </params>
      <attribs/>
   </obj>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="bool_2" x="56" y="1428">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="bool_3" x="182" y="1428">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="bool_4" x="308" y="1428">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="bool_5" x="406" y="1428">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="bool_6" x="532" y="1428">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="bool_7" x="672" y="1428">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="bool_8" x="798" y="1428">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1078" y="1484" text="67 delay "/>
   <comment type="patch/comment" x="1218" y="1484" text="quantize mod"/>
   <comment type="patch/comment" x="1078" y="1498" text="modulation (destination)"/>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_16" x="1218" y="1498">
      <params>
         <bool32.tgl name="b" value="1"/>
      </params>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_102" x="1078" y="1512">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="56" y="1582" text="if patch loaded and half a second gone by,"/>
   <comment type="patch/comment" x="70" y="1596" text=" write current dial positions to table"/>
   <patchobj type="patch/object" uuid="b046e3d3-b9b0-4d43-8156-017b68e45148" name="loadbang_1" x="112" y="1610">
      <params/>
      <attribs>
         <spinner attributeName="delay" value="1500"/>
         <spinner attributeName="hold" value="100"/>
      </attribs>
      <object id="patch/object" uuid="b046e3d3-b9b0-4d43-8156-017b68e45148">
         <sDescription>Generates a single pulse when a patcher is loaded.
similar to PD / Max/Msp &apos;loadbang&apos;</sDescription>
         <author>robert schirmer</author>
         <license>BSD</license>
         <helpPatch>patching.axh</helpPatch>
         <inlets/>
         <outlets>
            <bool32.pulse name="pulse"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <spinner name="delay" MinValue="1" MaxValue="64000" DefaultValue="1"/>
            <spinner name="hold" MinValue="1" MaxValue="64000" DefaultValue="1"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int i;]]></code.declaration>
         <code.init><![CDATA[i=attr_delay+attr_hold;]]></code.init>
         <code.krate><![CDATA[if (i>0){
	i-=1;
	if (i<=attr_hold){
		outlet_pulse=1;
	}
	
}
else {
	outlet_pulse=0;
}]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="308" y="1610" text="32. freezescrub"/>
   <comment type="patch/comment" x="406" y="1610" text="63 depthC"/>
   <comment type="patch/comment" x="490" y="1610" text="57 depthA"/>
   <comment type="patch/comment" x="574" y="1610" text="61 depthC"/>
   <comment type="patch/comment" x="840" y="1610" text="59 depthB"/>
   <comment type="patch/comment" x="1120" y="1610" text="48 grainecho width"/>
   <comment type="patch/comment" x="1246" y="1610" text="15. shuffle direction"/>
   <comment type="patch/comment" x="1358" y="1610" text="49 width"/>
   <comment type="patch/comment" x="1596" y="1610" text="33.scrubamount"/>
   <comment type="patch/comment" x="1694" y="1610" text="5. stretch"/>
   <patchobj type="patch/object" uuid="c5780481-8f38-4e16-98c3-784bccf14b38" name="1___" x="308" y="1624">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="c5780481-8f38-4e16-98c3-784bccf14b38">
         <sDescription>bipolar to unipolar</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <inlets>
            <frac32 name="i" description="input"/>
         </inlets>
         <outlets>
            <frac32 name="o" description="output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[   outlet_o= (inlet_i>>1)+(1<<26);
]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="c5780481-8f38-4e16-98c3-784bccf14b38" name="1____________" x="406" y="1624">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="c5780481-8f38-4e16-98c3-784bccf14b38">
         <sDescription>bipolar to unipolar</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <inlets>
            <frac32 name="i" description="input"/>
         </inlets>
         <outlets>
            <frac32 name="o" description="output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[   outlet_o= (inlet_i>>1)+(1<<26);
]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="c5780481-8f38-4e16-98c3-784bccf14b38" name="1_________" x="490" y="1624">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="c5780481-8f38-4e16-98c3-784bccf14b38">
         <sDescription>bipolar to unipolar</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <inlets>
            <frac32 name="i" description="input"/>
         </inlets>
         <outlets>
            <frac32 name="o" description="output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[   outlet_o= (inlet_i>>1)+(1<<26);
]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="c5780481-8f38-4e16-98c3-784bccf14b38" name="1___________" x="574" y="1624">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="c5780481-8f38-4e16-98c3-784bccf14b38">
         <sDescription>bipolar to unipolar</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <inlets>
            <frac32 name="i" description="input"/>
         </inlets>
         <outlets>
            <frac32 name="o" description="output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[   outlet_o= (inlet_i>>1)+(1<<26);
]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="c5780481-8f38-4e16-98c3-784bccf14b38" name="1__________" x="840" y="1624">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="c5780481-8f38-4e16-98c3-784bccf14b38">
         <sDescription>bipolar to unipolar</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <inlets>
            <frac32 name="i" description="input"/>
         </inlets>
         <outlets>
            <frac32 name="o" description="output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[   outlet_o= (inlet_i>>1)+(1<<26);
]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="c5780481-8f38-4e16-98c3-784bccf14b38" name="1_____" x="1120" y="1624">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="c5780481-8f38-4e16-98c3-784bccf14b38">
         <sDescription>bipolar to unipolar</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <inlets>
            <frac32 name="i" description="input"/>
         </inlets>
         <outlets>
            <frac32 name="o" description="output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[   outlet_o= (inlet_i>>1)+(1<<26);
]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="1246" y="1624" text="(leave off mostly)"/>
   <patchobj type="patch/object" uuid="c5780481-8f38-4e16-98c3-784bccf14b38" name="1____" x="1358" y="1624">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="c5780481-8f38-4e16-98c3-784bccf14b38">
         <sDescription>bipolar to unipolar</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <inlets>
            <frac32 name="i" description="input"/>
         </inlets>
         <outlets>
            <frac32 name="o" description="output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[   outlet_o= (inlet_i>>1)+(1<<26);
]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="d61d50fd-5591-4c21-8c70-a1a8f3d07e47" name="i_18" x="1596" y="1624">
      <params>
         <int32 name="value" value="4"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="d61d50fd-5591-4c21-8c70-a1a8f3d07e47">
         <sDescription>positive integer control</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets/>
         <outlets>
            <frac32.positive name="out"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="value" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="65536"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out=  param_value*(0x07FFFFFF/8);]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="c5780481-8f38-4e16-98c3-784bccf14b38" name="1__" x="1694" y="1624">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="c5780481-8f38-4e16-98c3-784bccf14b38">
         <sDescription>bipolar to unipolar</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <inlets>
            <frac32 name="i" description="input"/>
         </inlets>
         <outlets>
            <frac32 name="o" description="output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[   outlet_o= (inlet_i>>1)+(1<<26);
]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="1792" y="1624" text="4. pitch"/>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_14" x="1246" y="1638">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="c5780481-8f38-4e16-98c3-784bccf14b38" name="1_" x="1792" y="1638">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="c5780481-8f38-4e16-98c3-784bccf14b38">
         <sDescription>bipolar to unipolar</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <inlets>
            <frac32 name="i" description="input"/>
         </inlets>
         <outlets>
            <frac32 name="o" description="output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[   outlet_o= (inlet_i>>1)+(1<<26);
]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="294" y="1708" text="67 delay "/>
   <comment type="patch/comment" x="1176" y="1708" text="52 randomize pan"/>
   <comment type="patch/comment" x="1274" y="1708" text="random pan width"/>
   <comment type="patch/comment" x="294" y="1722" text="modulation"/>
   <comment type="patch/comment" x="420" y="1722" text="1. density"/>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_10" x="1176" y="1722">
      <params>
         <bool32.tgl name="b" value="1"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_81" x="1274" y="1722">
      <params>
         <frac32.u.map name="value" value="64.0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="294" y="1736" text="(mod destination)"/>
   <patchobj type="patch/object" uuid="c5780481-8f38-4e16-98c3-784bccf14b38" name="1" x="420" y="1736">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="c5780481-8f38-4e16-98c3-784bccf14b38">
         <sDescription>bipolar to unipolar</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <inlets>
            <frac32 name="i" description="input"/>
         </inlets>
         <outlets>
            <frac32 name="o" description="output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[   outlet_o= (inlet_i>>1)+(1<<26);
]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="84" y="1750" text="write controls to table, dials and midi"/>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_107" x="294" y="1750">
      <params>
         <frac32.u.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="812" y="1750" text="delayed buffer/granulator mix"/>
   <comment type="patch/comment" x="1008" y="1750" text="dry/wet"/>
   <comment type="patch/comment" x="84" y="1764" text="always expects positive, converts types - "/>
   <patchobj type="patch/object" uuid="b9d39eb1-e1c5-45d9-a32d-e690a0e06a27" name="crossfade_2" x="840" y="1764">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="b9d39eb1-e1c5-45d9-a32d-e690a0e06a27">
         <sDescription>Left shift. Doubles the value &quot;shift&quot; times, with overflow. If overflow is not desireable, use &quot;muls&quot;.</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>math.axh</helpPatch>
         <inlets>
            <frac32 name="drywet" description="a"/>
         </inlets>
         <outlets>
            <frac32 name="dry"/>
            <frac32 name="wet" description="a amplified in 6dB steps"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_dry= (__SSAT((0x07FFFFFF-inlet_drywet)<<1,28));
outlet_wet= (__SSAT((inlet_drywet<<1),28));]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="b9d39eb1-e1c5-45d9-a32d-e690a0e06a27" name="crossfade_1" x="994" y="1764">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="b9d39eb1-e1c5-45d9-a32d-e690a0e06a27">
         <sDescription>Left shift. Doubles the value &quot;shift&quot; times, with overflow. If overflow is not desireable, use &quot;muls&quot;.</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>math.axh</helpPatch>
         <inlets>
            <frac32 name="drywet" description="a"/>
            <frac32 name="volume"/>
         </inlets>
         <outlets>
            <frac32 name="dry"/>
            <frac32 name="wet" description="a amplified in 6dB steps"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_dry=  ___SMMUL((__SSAT((0x07FFFFFF-inlet_drywet)<<1,28))<<3,inlet_volume<<2);
outlet_wet= ___SMMUL( (__SSAT((inlet_drywet<<1),28))<<3,inlet_volume<<2);]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="84" y="1778" text="unipolar,bipolar, integer, time"/>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="bool_10" x="1176" y="1778">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="069efdca-1e30-4652-b255-d435ad9ada17" name="tablewrite_1" x="98" y="1792">
      <params/>
      <attribs>
         <objref attributeName="table" obj="FXpresets"/>
         <objref attributeName="presetmanager" obj="boss"/>
         <spinner attributeName="channel" value="13"/>
      </attribs>
      <object id="patch/object" uuid="069efdca-1e30-4652-b255-d435ad9ada17">
         <sDescription>if &apos;write&apos; is ON,writes 8 values to a table,starting from &apos;offset&apos;</sDescription>
         <author>robert schirmer</author>
         <license>BSD</license>
         <rotatedParams>true</rotatedParams>
         <inlets>
            <int32 name="offset" description="sets an offset for writing to the table"/>
            <int32 name="pitchquantize"/>
            <bool32 name="quantize"/>
            <bool32 name="writeall"/>
            <frac32 name="v0"/>
            <frac32 name="v1"/>
            <frac32 name="v2"/>
            <frac32 name="v3"/>
            <frac32 name="v4"/>
            <frac32 name="v5"/>
            <frac32 name="v6"/>
            <frac32 name="v7"/>
            <frac32 name="v8"/>
            <frac32 name="v9"/>
            <frac32 name="v10"/>
            <frac32 name="v11"/>
            <frac32 name="v12"/>
            <frac32 name="v13"/>
            <frac32 name="v14"/>
            <frac32 name="v15"/>
            <frac32 name="v16"/>
            <frac32 name="v17"/>
            <frac32 name="v18"/>
            <frac32 name="v19"/>
            <frac32 name="v20"/>
            <frac32 name="v21"/>
            <frac32 name="v22"/>
            <frac32 name="v23"/>
            <frac32 name="v24"/>
            <frac32 name="v25"/>
            <frac32 name="v26"/>
            <frac32 name="v27"/>
            <frac32 name="v28"/>
            <frac32 name="v29"/>
            <frac32 name="v30"/>
            <frac32 name="v31"/>
            <frac32 name="v32"/>
            <frac32 name="v33"/>
            <frac32 name="v34"/>
            <frac32 name="v35"/>
            <frac32 name="v36"/>
            <frac32 name="v37"/>
            <frac32 name="v38"/>
            <frac32 name="v39"/>
            <frac32 name="v40"/>
            <frac32 name="v41"/>
            <frac32 name="v42"/>
            <frac32 name="v43"/>
            <frac32 name="v44"/>
            <frac32 name="v45"/>
            <frac32 name="v46"/>
            <frac32 name="v47"/>
            <frac32 name="v48"/>
            <frac32 name="v49"/>
            <frac32 name="v50"/>
            <frac32 name="v51"/>
            <frac32 name="v52"/>
            <frac32 name="v53"/>
            <frac32 name="v54"/>
            <frac32 name="v55"/>
            <frac32 name="v56"/>
            <frac32 name="v57"/>
            <frac32 name="v58"/>
            <frac32 name="v59"/>
            <frac32 name="v60"/>
            <frac32 name="v61"/>
            <frac32 name="v62"/>
            <frac32 name="v63"/>
            <frac32 name="v64"/>
            <frac32 name="v65"/>
            <frac32 name="v66"/>
            <frac32 name="v67"/>
         </inlets>
         <outlets/>
         <displays/>
         <params/>
         <attribs>
            <objref name="table"/>
            <objref name="presetmanager"/>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="1"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int offset;
int zoom;
int half;

uint8_t ccV[68];
int32_t v[68];
int32_t prev[68];

bool init;
bool cc[64];]]></code.declaration>
         <code.init><![CDATA[init=30;]]></code.init>
         <code.krate><![CDATA[offset=attr_presetmanager.start;

//put inputs into input array
v[0]=inlet_v0;
v[1]=inlet_v1;
v[2]=inlet_v2;
v[3]=inlet_v3;
v[4]=inlet_v4;
v[5]=inlet_v5;
v[6]=inlet_v6;
v[7]=inlet_v7;
v[8]=inlet_v8;
v[9]=inlet_v9;
v[10]=inlet_v10;
v[11]=inlet_v11;
v[12]=inlet_v12;
v[13]=inlet_v13;
v[14]=inlet_v14;
v[15]=inlet_v15;
v[16]=inlet_v16;
v[17]=inlet_v17;
v[18]=inlet_v18;
v[19]=inlet_v19;
v[20]=inlet_v20;
v[21]=inlet_v21;
v[22]=inlet_v22;
v[23]=inlet_v23;
v[24]=inlet_v24;
v[25]=inlet_v25;
v[26]=inlet_v26;
v[27]=inlet_v27;
v[28]=inlet_v28;
v[29]=inlet_v29;
v[30]=inlet_v30;
v[31]=inlet_v31;
v[32]=inlet_v32;
v[33]=inlet_v33;
v[34]=inlet_v34;

//globals
v[35]=inlet_v35;
v[36]=inlet_v36;
v[37]=inlet_v37;
v[38]=inlet_v38;
v[39]=inlet_v39;
v[40]=inlet_v40;
v[41]=inlet_v41;
v[42]=inlet_v42;
v[43]=inlet_v43;
v[44]=inlet_v44;
v[45]=inlet_v45;
v[46]=inlet_v46;
v[47]=inlet_v47;
v[48]=inlet_v48;
v[49]=inlet_v49;
v[50]=inlet_v50;
v[51]=inlet_v51;
v[52]=inlet_v52;
v[53]=inlet_v53;
v[54]=inlet_v54;
v[55]=inlet_v55;
v[56]=inlet_v56;
v[57]=inlet_v57;
v[58]=inlet_v58;
v[59]=inlet_v59;
v[60]=inlet_v60;
v[61]=inlet_v61;
v[62]=inlet_v62;
v[63]=inlet_v63;
v[64]=inlet_v64;
v[65]=inlet_v65;
v[66]=inlet_v66;
v[67]=inlet_v67;
//if init timer (30 krate), ignore control changes
if (init>0){
	init-=1;
	int x;
	for (x = 0;x<68;x++){
		prev[x]=v[x];
	}
}
else {
// write controlas when changed
// all inputs are expected to be unipolar, the input type defines if it's unipolar, bipolar, a time control, a pitch control, an integer, a boolean... types are set in the preset object, in the init section
	int x;
	for (x = 0;x<34;x++){
		//if midi cc incoming, write cc to input array
		if (cc[x+half]>0){
			v[x+half]=ccV[x+half]<<20;
		
		}
		//check input array
		if ((v[x+half]!=prev[x+half]) || (inlet_writeall)){
			
			if (!attr_presetmanager.exclude[x+half]){
			attr_presetmanager.Pglideamount=0;
			}
			int32_t in_vx = v[x+half];
			int32_t tmp_vx;
			int32_t tmp_vxb;
			int32_t type=attr_presetmanager.type[x+half];
			//  if type is unipolar (0), use value from input array
				if (type==0){
					//normal
					tmp_vx=in_vx;
					}
				//if type is bipolar, convert input to bipolar (all inputs (inlets/midi) are unipolar, because midi always is
				else if ((type==1) || (type==6) || (type==5)){
					//bipolar
					tmp_vx=(in_vx<<1)-(1<<27);
					}
				// if type is pitch (2) convert input to bipolar, if pitch quantize is on, quantize input
				else if (type==2){
					    tmp_vxb=(in_vx<<1)-(1<<27)>>21<<21;
					if (inlet_pitchquantize==0){
						//unquantized
						tmp_vx=tmp_vxb;
					}
					else if (inlet_pitchquantize==1){
						//octaves
						tmp_vx=((tmp_vxb/(12<<21))*(12<<21)) ;
						}
					else if (inlet_pitchquantize==2){
						//octaves and fifths
						tmp_vx=((tmp_vxb/(12<<21))*(12<<21)) ;
						tmp_vx=tmp_vx + (((tmp_vxb-tmp_vx)/(7<<21))*(7<<21));
						}
					}
				//if type is time, and not qunatized, use a quarter of the time (buffer is 4 bars, but dial works better going to 1 bar, so shift by 2 (*4).	
				// else work out index for quantize position (in preset manager object init)
				else if  (type==9) {
					if (!inlet_quantize){
						
							
							
						
						if (in_vx<0x07FFFFFF){
							tmp_vx=(in_vx>>20<<20)>>2;		
						}
						else {
							tmp_vx=1<<27>>2;
						}
					}
					else {
						int32_t tmp_index=((in_vx  + (((1<<27)/30)>>1)) / ((1<<27)/30));
						tmp_vx=attr_presetmanager.quant[tmp_index];
					}
					
				}
				// type 10 is a special version of type 9 (time) for grainsize quantization, basically the same as 9 but with some  scaling for when quantize is on (generally want smaller grains
				else if  (type==10) {
					if (!inlet_quantize){
							//zoom=3;
						
						if (in_vx<0x07FFFFFF){
							tmp_vx=(in_vx>>20<<20)>>2;		
						}
						else {
							tmp_vx=1<<27>>2;
						}
					}
					else {
						int32_t tmp_index;
						if (in_vx<(1<<26)){
							tmp_index=((in_vx  + (((1<<26)/16)>>1)) / ((1<<26)/16));
							tmp_vx=tmp_index<<16;
						}
						else {
							tmp_index=((in_vx -(1<<26)  + (((1<<26)/18)>>1)) / ((1<<26)/18));
							tmp_vx=attr_presetmanager.quant[tmp_index+6];
						}
					
					}
					
				}
				
				//type 40 and above = integer/boolean controls. if above 40, it's an integer control. 41 = boolean, 48 = 0-8. , 49 = 0-9
				else if (type>=40) {
					//integer
					int32_t inc=(0x07FFFFFF/(type-40));
					tmp_vx= ((in_vx+(inc>>1))/inc)<<21;
					}
				// type 7 is a unipolar control, but with a centre lock/dead spot type of thing. used for reverse grains control because if reverse grains is 32, it alternates the grain reverse.
				// so if input is near 32 it locks on
				else if (type==7){
					//normal
					tmp_vx=in_vx>>21<<21;
					if ((tmp_vx>=(24<<21)) && (tmp_vx<=(40<<21))){
						tmp_vx=32<<21;
					}
					}
	
				//finally, write converted input to the table (storage)
			attr_table.array[offset + x+half]=__SSAT(tmp_vx,28)>>attr_table.GAIN;
		}
		
			
		
		if (cc[x+half]>0){
			cc[x+half]=0;
			v[x+half]=prev[x+half];
		}
		prev[x+half]=v[x+half];
	}
}

if (half==0){
	half=34;
}
else {
	half=0;
}]]></code.krate>
         <code.midihandler><![CDATA[if ((status == (attr_channel-1) + MIDI_CONTROL_CHANGE) && (data1 < 53)) {
 cc[data1]=1;
 if (data2>=127){
 	ccV[data1]=128;
 }
 else {
	 ccV[data1]=data2;
	 }

}]]></code.midihandler>
      </object>
   </patchobj>
   <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="*c_2" x="532" y="1820">
      <params>
         <frac32.u.map name="amp" value="2.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/smooth" uuid="6c5d08c282bb08bff24af85b4891447f99bcbc97" name="smooth_4" x="630" y="1820">
      <params>
         <frac32.u.map name="time" value="5.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="conv/interp" uuid="d68c1a8709d8b55e3de8715d727ec0a2d8569d9a" name="interp_3" x="714" y="1820">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1106" y="1862" text="sprayzoom"/>
   <obj type="math/&gt;&gt;" uuid="d883beaf50b7aae4803ed9941e8f123e87e1e3aa" name="&gt;&gt;_1" x="1106" y="1876">
      <params/>
      <attribs>
         <spinner attributeName="shift" value="12"/>
      </attribs>
   </obj>
   <obj type="logic/or 2" uuid="3805d3c84d30032a44fbdbe42d9a2988a1790a3e" name="or_7" x="938" y="1890">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="336" y="1904" text="auto input - detects mono (left only ) or stereo (right &amp; left)"/>
   <comment type="patch/comment" x="350" y="1918" text="if mono, left is sent to left &amp; right inputs"/>
   <comment type="patch/comment" x="350" y="1932" text="if stereo, effect is true stereo"/>
   <obj type="math/&gt;&gt;" uuid="d883beaf50b7aae4803ed9941e8f123e87e1e3aa" name="&gt;&gt;_2" x="658" y="1932">
      <params/>
      <attribs>
         <spinner attributeName="shift" value="4"/>
      </attribs>
   </obj>
   <obj type="conv/interp" uuid="d68c1a8709d8b55e3de8715d727ec0a2d8569d9a" name="interp_1" x="742" y="1932">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="350" y="1946" text="click the button to redetect"/>
   <obj type="conv/to b" uuid="91ff898f0f2bf6e4dc0165515e0be7c2281da18b" name="to_1" x="924" y="1946">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_82" x="1414" y="1946">
      <params/>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_2" x="336" y="1960">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="65c6fb73-7de6-4510-ace1-f8e4c2ae3c59" name="audio_1" x="420" y="1960">
      <params>
         <frac32.u.map name="threshhold" value="0.5"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="65c6fb73-7de6-4510-ace1-f8e4c2ae3c59">
         <sDescription>Audio input, stereo</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <inlets>
            <bool32.rising name="detect"/>
         </inlets>
         <outlets>
            <frac32buffer name="left" description="Left channel"/>
            <frac32buffer name="right" description="Right channel"/>
         </outlets>
         <displays>
            <frac32.vu name="vuLeft"/>
            <frac32.vu name="vuRight"/>
         </displays>
         <params>
            <frac32.u.map name="threshhold" noLabel="true"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int detecting;
bool rON;
bool lON;
bool leftON;
bool rightON;]]></code.declaration>
         <code.init><![CDATA[detecting=1500;]]></code.init>
         <code.krate><![CDATA[if (inlet_detect){
	detecting=1500;
	rON=0;
	lON=0;
}

if (detecting>0){

	detecting-=1;

	   if ((AudioInputRight[0]>param_threshhold) &&(AudioInputRight[0]>0)){
	   	rON=1;
	   }
	   if ((AudioInputLeft[0]>param_threshhold) &&(AudioInputLeft[0]>0)){
	   	lON=1;
	   }
	 if (detecting<10){
	 	if (lON){
		 	rightON=rON;
		 	detecting=0;
	 	}
	 	else {
	 		detecting=1500;
	 	}
		//rON=0;
	 }
	
}



		
switch( rightON )
            {
             
              case 0 :
                {
               
					for(int j=0;j<BUFSIZE;j++){
		                	outlet_left[j]=AudioInputLeft[j];
			   			outlet_right[j]=AudioInputLeft[j];
					}
                }
       
                break;

              case 1 :
             	{
             		
					for(int j=0;j<BUFSIZE;j++){
			        		outlet_left[j]=AudioInputLeft[j];
			   			outlet_right[j]=AudioInputRight[j];
					}
             	}
    
       
                break;
		    
              
            }

disp_vuLeft=AudioInputLeft[0];
disp_vuRight=AudioInputRight[0];]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="2072" y="1960" text="feeback blend (delayed buffer or granulator)"/>
   <comment type="patch/comment" x="826" y="1974" text="superbuff"/>
   <comment type="patch/comment" x="994" y="1974" text="supergran"/>
   <comment type="patch/comment" x="1890" y="1974" text="echo width smooth"/>
   <patchobj type="patch/object" uuid="b9d39eb1-e1c5-45d9-a32d-e690a0e06a27" name="crossfade_3" x="2072" y="1974">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="b9d39eb1-e1c5-45d9-a32d-e690a0e06a27">
         <sDescription>Left shift. Doubles the value &quot;shift&quot; times, with overflow. If overflow is not desireable, use &quot;muls&quot;.</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>math.axh</helpPatch>
         <inlets>
            <frac32 name="drywet" description="a"/>
            <frac32 name="volume"/>
         </inlets>
         <outlets>
            <frac32 name="dry"/>
            <frac32 name="wet" description="a amplified in 6dB steps"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_dry=  ___SMMUL((__SSAT((0x07FFFFFF-inlet_drywet),28))<<3,inlet_volume<<2);
outlet_wet= ___SMMUL( (__SSAT((inlet_drywet),28))<<3,inlet_volume<<2);]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="6817968a-edc7-43e0-ad03-8f1ed61a5faf" name="MikeWatt" x="826" y="1988">
      <params>
         <int32 name="fade" value="64"/>
         <bool32.tgl name="retrigstyle" value="1"/>
      </params>
      <attribs>
         <combo attributeName="dubtrig" selection="internal"/>
         <combo attributeName="size" selection="2097152 (21.8s)"/>
         <combo attributeName="echosize" selection="1048576 (10.9s)"/>
      </attribs>
      <object id="patch/object" uuid="6817968a-edc7-43e0-ad03-8f1ed61a5faf">
         <sDescription>Difficult to name. Pitchshifter, time-stretcher, play-rate adjuster (stretch+pitchshift), sampler, delay, granulizer...

See inputs/controls for their functions (hoover above them)</sDescription>
         <author>Remco van der most</author>
         <license>BSD</license>
         <helpPatch>delay.axh</helpPatch>
         <inlets>
            <int32 name="sbeat"/>
            <int32 name="ppq"/>
            <frac32buffer name="Lin"/>
            <frac32buffer name="LFback"/>
            <frac32buffer name="Rin" description="audio input"/>
            <frac32buffer name="RFback"/>
            <frac32buffer name="Lgrainecho"/>
            <frac32buffer name="Rgrainecho"/>
            <bool32.rising name="restart"/>
            <bool32.rising name="play"/>
            <bool32.rising name="stop"/>
            <bool32.risingfalling name="replace"/>
            <bool32 name="freeze"/>
            <bool32.risingfalling name="freerun"/>
            <bool32 name="swapFbackCh"/>
         </inlets>
         <outlets>
            <bool32.pulse name="xtrig"/>
            <int32 name="length"/>
            <frac32.positive name="phase"/>
            <bool32.pulse name="stop"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="fade" noLabel="true">
               <MinValue i="1"/>
               <MaxValue i="30000000"/>
            </int32>
            <bool32.tgl name="retrigstyle" description="off = resyncs at buffer restart( 4 bars ) , 1 = resyncs every 6 bars. 6 bars is useful for dotted rythms"/>
         </params>
         <attribs>
            <combo name="dubtrig">
               <MenuEntries>
                  <string>internal</string>
                  <string>external</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
               </CEntries>
            </combo>
            <combo name="size">
               <MenuEntries>
                  <string>131072 (1.36s)</string>
                  <string>262144 (2.73s)</string>
                  <string>524288 (5.46s)</string>
                  <string>1048576 (10.9s)</string>
                  <string>2097152 (21.8s)</string>
               </MenuEntries>
               <CEntries>
                  <string>17</string>
                  <string>18</string>
                  <string>19</string>
                  <string>20</string>
                  <string>21</string>
               </CEntries>
            </combo>
            <combo name="echosize">
               <MenuEntries>
                  <string>131072 (1.36s)</string>
                  <string>262144 (2.73s)</string>
                  <string>524288 (5.46s)</string>
                  <string>1048576 (10.9s)</string>
                  <string>2097152 (21.8s)</string>
               </MenuEntries>
               <CEntries>
                  <string>17</string>
                  <string>18</string>
                  <string>19</string>
                  <string>20</string>
                  <string>21</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[//wholde buffer

//half buffer
static const uint32_t LENGTHPOWa = attr_size-1;
static const uint32_t LENGTHa = 1<<(attr_size-1);
static const uint32_t LENGTHMASKa = (1<<(attr_size-1))-1;
//quarter buffer
static const uint32_t LENGTHPOWb = attr_echosize;
static const uint32_t LENGTHb = 1<<(attr_echosize);
static const uint32_t LENGTHMASKb = (1<<(attr_echosize))-1;

static const uint32_t BITS = 16;
static const uint32_t GAIN = 12;
int16_t *LEFT;
int16_t *RIGHT;

int16_t *echoarray;

int32_t bufferarray_R[16];
int32_t bufferarray_L[16];
int32_t init;
int32_t ovrfade;
int32_t ovrenv;
int32_t env[2];
int32_t Oenv[2];
int32_t Ienv[2];
int32_t Ostep[2];
int32_t Oprev[2];
int32_t ovrrate;
int32_t ovrcnt;
int32_t prevO;
int32_t stepO;
int32_t rfade;
int32_t renv;
int32_t rate;

int32_t mcnt;
int32_t maxrate;
int32_t mute;
//int32_t rfadeO;
int32_t feeback;
//int32_t delay;
//int32_t prevd;
int32_t prevR;
int32_t syncbusy;
int32_t stepR;
int32_t feedback;
uint32_t x;
uint32_t dubposGB;
uint32_t maxlength;
uint32_t writepos;
uint32_t dubpos;
uint32_t plength;
//uint32_t dubclock;
uint32_t deck;
uint32_t xoffset;
uint32_t synclength;
uint32_t xposremainder;
uint32_t xpos;
uint32_t dub[2];
uint32_t synclock;
uint32_t trigclock;
uint32_t trigpos;
uint32_t prevsynclock;
uint32_t xposGB;
uint32_t length;
uint32_t phase;
uint32_t buffer;
uint32_t bsize;
uint32_t in_R;
uint32_t fb_R;
uint32_t in_L;
uint32_t fb_L;
uint32_t gfb;
uint32_t gfbR;
uint32_t dcount;
uint32_t outpos;
uint32_t outposGB;
bool play;
bool stop;
bool prevp;
bool Prep;
//bool rec;
bool dt;
//bool overdub;
bool delaymode;
bool restarted;
bool dubtrig;
bool ovrin;
bool repin;
bool Pinovr;
bool dubbing;
//bool recording;
bool start;
bool strig;
bool ptrig;
bool xtrig;
bool rtrig;
bool freeze;
//bool ott;
bool hold;
bool player;
//bool dhold;
bool det;
bool mtrigger;
bool synchold;]]></code.declaration>
         <code.init><![CDATA[static int16_t _LEFT[attr_poly][LENGTHa] __attribute__ ((section (".sdram")));
LEFT = &_LEFT[parent->polyIndex][0];
{ 
  int i;
  for(i=0;i<LENGTHa;i++) LEFT[i]=0;
}
static int16_t _RIGHT[attr_poly][LENGTHa] __attribute__ ((section (".sdram")));
RIGHT = &_RIGHT[parent->polyIndex][0];
{ 
  int i;
  for(i=0;i<LENGTHa;i++) RIGHT[i]=0;
}
static int16_t _echoarray[attr_poly][LENGTHb] __attribute__ ((section (".sdram")));
echoarray = &_echoarray[parent->polyIndex][0];
{ 
  int i;
  for(i=0;i<LENGTHb;i++) echoarray[i]=0;
}
play=1;
//prevp=1;
bsize=16;
bsize=16;
init=16;
syncbusy=512;
maxlength=LENGTHa;
xoffset=maxlength;
player=1;
//SO=32+bsize+bsize; buffer, data, preroll]]></code.init>
         <code.krate><![CDATA[//maxlength=((((LENGTH>>1)-((bsize<<1)+(2048<<3)+32))>>4)<<4);
maxlength=LENGTHa;
maxrate=(((uint64_t)1<<31)/(maxlength>>1));
freeze=inlet_freeze;
//array[0+bsize]=((maxlength)/(1<<15));
//array[1+bsize]=maxlength-(((maxlength)/(1<<15))<<15);
if (inlet_sbeat>0){
	// one beat << 4 = 4bars
	synclength=inlet_sbeat<<4;
	}
else {
	synclength=maxlength;
}
if (synclength>=maxlength){
	synclength=maxlength-1;
}
trigpos+=(1<<4);
dubpos+=(1<<4);
dubposGB+=(1<<4);
if (dubpos>=maxlength){
	xoffset=maxlength;
	dubpos=0;
	xtrig;
	
}
if (dubposGB>=(LENGTHb>>1)){
	dubposGB=0;
	
}
if (init){
	xoffset=synclength;
	dub[0]=xoffset;
	dub[1]=xoffset;
	dubpos=xoffset;
	restarted=1;
	ovrcnt=1;
	init=0;
}
//synclock=bufferlength pseudo
synclock=inlet_ppq-((inlet_ppq/16)*16);
//trigclock=6barretrig
if (param_retrigstyle){
trigclock=inlet_ppq-((inlet_ppq/24)*24);
}
else {
	trigclock=synclock;
}
if (synclock!=prevsynclock){
	
	if ((synclock==0)&&!inlet_freerun){
		ovrcnt=1;
	restarted=1;
	xtrig=1;
		//trigclock+=1;
			
	}
	if (trigclock==0){
				//trigclock=0;
				trigpos=0;
			}
	if (inlet_ppq==0){
		//trigpos=0;
		//trigclock=0;
	}
	prevsynclock=synclock;
}
//disp_d=trigpos;
//array[2+bsize]=((synclength)/(1<<15));
//array[3+bsize]=synclength-(((synclength)/(1<<15))<<15);

//length=(array[0+bsize]<<15)+array[1+bsize];
//max length = half table length - (bsize (buffer) + bsize (leadin) + 2048<<3 (leadout) + 32 (controls))


//disp_d4=Oenv[1];

//if (synchold&& (array[2+bsize]==0)){
//	ovrin=0;
//}



if (inlet_restart&&!rtrig){
		//	if (player==0){
		//			player=1;
		//		}
		//		else {
		//			player=0;
		//		}
		//		xoffset=dubpos;
		//		dubpos=0;
			//(delaytrigger to sccount for buffer
	ovrcnt=1;
	restarted=1;
	rtrig=1;
}
else if (!inlet_restart){
	rtrig=0;
}


outpos=dubpos;
outposGB=dubposGB;
		




rate=((uint64_t)1<<32)/synclength;
phase=dubpos*rate;
outlet_phase=phase>>5;

if (inlet_freeze!=Pinovr){
	//ovrcnt=(bsize>>4);
	ovrcnt=2;
	Pinovr=inlet_freeze;
}
if (inlet_replace!=Prep){
	ovrcnt=2;
	//ovrcnt=(bsize>>4);
	Prep=inlet_replace;
}
if (ovrcnt>0){
	ovrcnt-=1;
	if (ovrcnt<=0){
			if (restarted){
				restarted=0;
				if (player==0){
					player=1;
				}
				else {
					player=0;
				}
				xoffset=dubpos;
				dubpos=0;
				
			}
			if (!inlet_freeze){
				//overdub=1;
				ovrin=1;
			}
			else {
				ovrin=0;
			}
			if (inlet_replace){
				//overdub=1;
				repin=1;
				ovrin=1;
			}
			else {
				repin=0;
			}
		
	}
}



ovrrate=0x07FFFFFF/param_fade;
if (ovrin){
	if (ovrfade<0x07FFFFFF){
		ovrfade+=ovrrate;
		if (ovrfade>=0x07FFFFFF){
			ovrfade=0x07FFFFFF;
		}
	}
}
else {
	if (ovrfade>0){
		ovrfade-=ovrrate;
	}
	if (ovrfade<=0){
			ovrfade=0;
			
			//if (!ott){
			//	ott=1;
			//	if (!inlet_freeze){
			//		ovrin=1;
			//	}
			//}
		}
}



if (!repin&&inlet_freeze){
	if (rfade<0x07FFFFFF){
		rfade+=ovrrate;
		if (rfade>=0x07FFFFFF){
			rfade=0x07FFFFFF;
		}
	}
}
else {
	if (rfade>0){
		rfade-=ovrrate;
		if (rfade<=0){
			rfade=0;
			
		}
	}
}

//rfadeO= ___SMMUL(rfade<<3,inlet_feedback<<2);
//rfadeO=rfade;
if (rfade>=0x07FFFFFE){
	rfade=1<<27;
}

stepR = (rfade - prevR)>>4;
int32_t renv = prevR;
prevR = rfade;










if (inlet_stop&&!strig){
	strig=1;
	play=0;
}
else if (!inlet_stop){
	strig=0;
}


if (inlet_play&&!ptrig){
	play=1;
	ptrig=1;
}
else if (!inlet_play){
	ptrig=0;
}

if (play!=prevp){
	if (play){
		if (!ovrin&&!inlet_freeze){
			ovrin=1;
		}
		start=1;
	}
	else {
		if (ovrin){
			ovrin=0;
		}
		stop=1;
	}
	prevp=play;
}




//for (x = 0;x<2;x++){
	
	Ienv[0]=ovrfade;
	Ostep[0]= (Ienv[0]- Oprev[0])>>4;
   	Oenv[0]= Oprev[0];
   	if (Oenv[0]>=0x07FFFFFE){
		Oenv[0]=1<<27;
	}
   	Oprev[0] = Ienv[0];


if (!play){
	xtrig=0;
}

//disp_d5= 1031>>1<<1;

outlet_length=synclength;
//outlet_start=start;
if (start){
	xtrig=1;
}

outlet_stop=stop;
outlet_xtrig=xtrig;




start=0;
stop=0;
dubtrig=0;
xtrig=0;]]></code.krate>
         <code.srate><![CDATA[if (play){
	//phase=dubpos*rate;
//	outpos=dubpos[0];
	}
else {
	phase=0;
	outpos=0;
}
//outlet_pos=outpos;
//outlet_phase=phase;
//fb=__SSAT(inlet_Fback>>14,16);
//gfb=__SSAT(inlet_Fforward>>14,16);
if (!inlet_swapFbackCh){
	fb_R=__SSAT(inlet_RFback,28)>>GAIN;
	fb_L=__SSAT(inlet_LFback,28)>>GAIN;
	}
else {
	fb_L=__SSAT(inlet_RFback,28)>>GAIN;
	fb_R=__SSAT(inlet_LFback,28)>>GAIN;
}
gfb=__SSAT(inlet_Lgrainecho,28)>>GAIN;
gfbR=__SSAT(inlet_Rgrainecho,28)>>GAIN;


for (x = 0;x<2;x++){
	LEFT[xpos] = __SSAT((___SMMUL(LEFT[xpos]<<3,renv<<2) + ___SMMUL((bufferarray_L[buffer]+fb_L)<<3,Oenv[0]<<2)),16);
	RIGHT[xpos] = __SSAT((___SMMUL(RIGHT[xpos]<<3,renv<<2) + ___SMMUL((bufferarray_R[buffer]+fb_R)<<3,Oenv[0]<<2)),16);
	//if (dubpos[0]<(maxlength+(2048<<3))){
	if (x==player){
		dub[x]=dubpos+ buffer_index;
	}
	else {
		if (dub[x]<maxlength){
		dub[x]+=1;
		}
	}
	xpos=dub[x];
		//xposremainder=xpos+xoffset;
		
		//buffer
		

}
		//if ((xposremainder<maxlength)&&(xoffset>0)){
		//	array[xposremainder+32+bsize] =__SSAT((___SMMUL(array[xpos+32+bsize]<<3,renv<<2) + ___SMMUL((array[buffer]+fb)<<3,Oenv[0]<<2)),16);
		//}
		


		xposGB=dubposGB+ buffer_index;
		//feed forward buffer
		//array[xposGB+32+bsize+(maxlength)+bsize] =__SSAT(( ___SMMUL(gfb<<3,Oenv[0]<<2)),16);
		echoarray[xposGB] =__SSAT((gfb),16);
		echoarray[xposGB+(LENGTHb>>1)] =__SSAT((gfbR),16);
		Oenv[0]+=Ostep[0];		
		
		if (xpos==0){
			//xtrig=1;
		}	
		//dubpos[x] = (dubpos[x]+ 1)&LENGTHMASK;
	//}


		

//}
	
	renv+=stepR;






in_R=__SSAT(inlet_Rin,28)>>GAIN;
in_L=__SSAT(inlet_Lin,28)>>GAIN;
bufferarray_R[buffer]=in_R;
bufferarray_L[buffer]=in_L;
buffer+=1;
if (buffer>=bsize){
	buffer=0;
}]]></code.srate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="0acbfb5c-eb34-44a0-98f0-cbb69ce2a4cf" name="xyx_1" x="994" y="1988">
      <params>
         <int32 name="fade" value="256"/>
      </params>
      <attribs>
         <objref attributeName="buffer" obj="MikeWatt"/>
         <spinner attributeName="maxgrain" value="8"/>
      </attribs>
      <object id="patch/object" uuid="0acbfb5c-eb34-44a0-98f0-cbb69ce2a4cf">
         <sDescription>convert to integer output</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <inlets>
            <bool32 name="trigger"/>
            <frac32.positive name="delay"/>
            <bool32 name="reverse"/>
            <bool32 name="freezeL"/>
            <frac32.positive name="freezepos"/>
            <frac32.positive name="freezesize"/>
            <frac32.positive name="grainsize"/>
            <frac32.positive name="shape"/>
            <frac32.bipolar name="density"/>
            <int32 name="densityrange"/>
            <bool32 name="resyncgrain"/>
            <frac32.positive name="disintegrate"/>
            <frac32.positive name="spray"/>
            <frac32.positive name="reversegrain"/>
            <frac32.bipolar name="pitch"/>
            <frac32 name="pitchspray"/>
            <frac32.bipolar name="stretch"/>
            <frac32 name="corrupt"/>
            <frac32.positive name="corrupttime"/>
            <frac32.bipolar name="posmod"/>
            <frac32.positive name="randomoctave"/>
            <int32 name="octrange"/>
            <int32 name="octmode"/>
            <frac32.positive name="octavespeed"/>
            <frac32.positive name="shuffle"/>
            <frac32.positive name="shufflerate"/>
            <frac32.positive name="shufflerange"/>
            <frac32buffer.positive name="grainecho"/>
            <bool32 name="allgrains"/>
            <frac32buffer.bipolar name="buffermod"/>
            <bool32 name="stretchsyncmode"/>
            <bool32 name="stretchsynctrigger"/>
            <frac32.positive name="Rdelay"/>
            <frac32.bipolar name="freezescrub"/>
            <int32 name="scrubamount"/>
            <bool32 name="stereodis"/>
            <bool32 name="stereooct"/>
            <bool32 name="stereorev"/>
            <bool32 name="stereoshuff"/>
            <bool32 name="stereospray"/>
            <bool32 name="stereoPspray"/>
            <frac32.positive name="panwidth"/>
            <bool32 name="panmode"/>
            <bool32 name="randompan"/>
            <frac32.bipolar name="width"/>
            <frac32.bipolar name="GEwidth"/>
            <frac32.bipolar name="Rcorrupttime"/>
            <bool32 name="stereocorrupt"/>
            <frac32.bipolar name="Roctavespeed"/>
            <bool32 name="shuffledirection"/>
            <frac32buffer name="grainmod"/>
            <frac32.positive name="panprob"/>
         </inlets>
         <outlets>
            <frac32buffer name="delayedbufferL"/>
            <frac32buffer name="delayedbufferR"/>
            <frac32buffer name="granulatorL"/>
            <frac32buffer name="granulatorR"/>
            <frac32buffer name="grainechoL"/>
            <frac32buffer name="grainechoR"/>
            <frac32.positive name="grainphase"/>
            <frac32.positive name="delayphase"/>
            <int32 name="grainlength"/>
            <int32 name="activeplayers"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="fade" noLabel="true">
               <MinValue i="1"/>
               <MaxValue i="4194304"/>
            </int32>
         </params>
         <attribs>
            <objref name="buffer"/>
            <spinner name="maxgrain" MinValue="3" MaxValue="20" DefaultValue="0"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int fade;
int fadee;
int fphase;
int fphaseO;
//int gshape;
int bsize;
int x;
int t;
int grain;
int stage[20];
//int curve;
int maxgrain;
int v;
int pv;
int SO;
int init;
int xgrain;
int rtimer;
int32_t prevshit;
int32_t indense;
int32_t tosted;
int32_t ptest;
int32_t pan;
int32_t probPAN;
int32_t randPAN;
int32_t krate;
int32_t remainder;
int32_t xfade;
int32_t xfadeGB;
int32_t pgr;
int32_t xf[2];
int32_t xfGB[2];
int32_t sprayL;
int32_t sprayR;
int32_t inPsprayL;
int32_t inPsprayR;
int32_t pitchsprayL;
int32_t pitchsprayR;
int32_t inTsprayL;
int32_t inTsprayR;
int32_t posmodL;
int32_t posmodR;
int32_t probPSR;
int32_t RRdelay;
int32_t haasdelayL;
int32_t haasdelayR;
int32_t GBhaasdelayL;
int32_t GBhaasdelayR;
int32_t probPS;
int32_t inpitch;
int32_t fd;
int32_t fRate;   
int32_t pRateL;   
int32_t pRateR;   
int32_t fBase;
int32_t sRate;
int32_t rate;
int32_t dpos[2];
int32_t dposGB;
int32_t grainreverseL;
int32_t reverseGL[20];
int32_t grainreverseR;
int32_t reverseGR[20];
int32_t pgpos;
int32_t pggpos;
int32_t octup;
int32_t spos;
int32_t rspos;
int32_t sloop;
int32_t insloop;
//int32_t octdown;
//int32_t Goctup[20];
//int32_t Goctdn[20];
int32_t Gleft[20];
int32_t Gright[20];
int32_t GleftR[20];
int32_t GrightL[20];
int32_t octaveL;
int32_t octaveR;


int32_t leftVCA;
int32_t rightVCA;
int32_t leftVCAR;
int32_t rightVCAL;
int32_t shuffleL;
int32_t shuffleR;
//int32_t prate;
int32_t PRATEL;
int32_t PRATER;
int32_t SRATE;
int32_t GRATEL[20];
int32_t GRATER[20];

int32_t aprevtits;
int32_t atits;

int32_t genv[20];
//uint32_t boff;
int32_t gE[20];
int32_t tmp_gE;
int32_t tmp_genv;
int32_t delayGBL;
int32_t delayGBR;
int32_t pdelayGB;
int32_t Tmod;
int32_t LgE;
int32_t RgE;
int32_t phase[2];
int32_t rphase[2];
int32_t phas;
int32_t Dphase;
int32_t DxpL;
int32_t DxpR;

uint32_t Sfrac;
uint32_t bGAIN;
uint32_t probR;
uint32_t probLR;
uint32_t probDR;
uint32_t probS;
uint32_t shufflerate;
uint32_t pshuffle;
uint32_t sdelay[2];
uint32_t poctL;
uint32_t octclockL;
uint32_t poctR;
uint32_t octclockR;
uint32_t grainrate;
uint32_t grainyrate;
uint32_t slooppos;
uint32_t sloopphaseN;
uint32_t tmp_gps;
uint32_t Roctavespeed;
uint32_t tmp_gpsR;
uint32_t gyrate;
uint32_t grate;
uint32_t grainphase[20];
uint32_t stretchphase;
uint32_t stretchstart;
uint32_t pstretchstart;
uint32_t synclength;
uint32_t pg;
uint32_t shufflev;
uint32_t octm;
uint32_t grainpos[2];
uint32_t pos[20];
uint32_t rpos[20];
uint32_t gph[20];
uint32_t gphR[20];
uint32_t Tphase;
uint32_t prevTp;
uint32_t trigrate;
uint32_t prevtrate;
uint32_t tr;
uint32_t delayphase[2];
//uint32_t kpos;
uint32_t kphase;
uint32_t laststretch;
uint32_t sposphase;
uint32_t sphase[2];
uint32_t gdelay;
uint32_t phaseGB[2];
uint32_t prevP[2];
uint32_t inpos;
//uint32_t kph;
uint32_t probG;
uint32_t probV;
uint32_t probO;
uint32_t probOR;
uint32_t probORD;
uint32_t probD;
uint32_t lposL;
uint32_t lposR;
uint32_t dlength;
uint32_t dlengthGB;
//uint32_t pos;
//uint32_t Opos;
uint32_t out[2];
uint32_t outR[2];
uint32_t gX[20];
uint32_t gXR[20];
uint32_t gout[20];
uint32_t holdG[20];
uint32_t RRcorrupt;

uint32_t nextgrain;
uint32_t xout;
uint32_t grainoutL;
uint32_t grainoutR;
//uint32_t lastmax;
uint32_t length;
uint32_t plength;
uint32_t inlength;
uint32_t outX[2];
uint32_t outGB[2];
//uint32_t corruptrate;
uint32_t corruptphaseL;
uint32_t corruptphaseR;
uint32_t probVR;
uint32_t pcorruptL;
uint32_t pcorruptR;
uint32_t gpos;
//uint32_t lastpos;
uint32_t prevpos;

uint32_t phasGB;
uint32_t outI;
uint32_t shape;
uint32_t outXX;
uint32_t delay[2];
uint32_t density;
uint32_t pgrain;
uint32_t grainlength;
uint32_t opos;
uint32_t inshufflerate;
uint32_t oposGB;
uint32_t AR;
uint32_t xoffset;
uint32_t activeplayers;
uint32_t indelay[2];
uint32_t indelayGB;
uint32_t prevdposGB;
uint32_t octL;
uint32_t octR;


uint32_t prevdpos[2];
uint32_t loopcount;
uint32_t trs;
uint32_t pdelay[2];
//uint64_t TX[32];
uint32_t nglength;
uint32_t shufflewidth;
uint32_t freezelength;
uint32_t freezesize;
uint32_t sloopphase;

uint32_t fakeopos;
uint32_t freezeclock;
uint32_t buffpos;
uint32_t bpos;
uint32_t slength;
uint32_t prevscrub;
uint32_t freezescrub;
uint32_t mlength;
uint32_t freezepos;
uint32_t slooposN;
float32_t ratio;
float32_t pratioL;
float32_t pratioR;
float32_t sratio;
bool octdownL;
bool octdownR;
bool lofi;
bool dchange;
bool rtrig;
//bool play;
//bool fadein;
bool revon;
bool phold;
bool pholdGB;
bool frtrig;
bool prevplay;
bool strig;
bool player;
bool playerGB;
bool gtrig;
bool graintrig;
bool ptrig;
//bool Rhold;
int fakehold;
bool ptrigGB;
bool alternate;
bool gforce;
bool ttrig;
int32_t test;
bool testhold;
bool freeze;
bool resyncgrain;
bool rstrig;
bool testrig;
bool xloop;
bool xfading;
bool xfadingGB;
bool mutetrig;
bool disintegratedL;
bool disintegratedR;
bool synchold;
bool dun;
bool panmode;
bool panON;
//+(attr_table.LENGTH>>1)]]></code.declaration>
         <code.init><![CDATA[bsize=16;
fadee=1<<6;
fd=6;
SO=32+bsize;
ptrig=1;
init=0;
//play=1;
xgrain=-1;
//synchold=1;]]></code.init>
         <code.krate><![CDATA[mlength=attr_buffer.maxlength;
fphase=0x07FFFFFF/param_fade;
bGAIN=attr_buffer.GAIN;
revon=inlet_reverse;
//int ingrain=param_maxgrain;
//maxgrain=16;


maxgrain=(attr_maxgrain)+1;


length=attr_buffer.maxlength;

xoffset=attr_buffer.xoffset;
if (xoffset<=delay[0]){
	xoffset=length;
}
synclength=attr_buffer.synclength;
if (synclength>0){
	slength=synclength;
	}
else {
	slength=length;
}


//play=!inlet_mutegrains;	




//gshape=inlet_grainshape- (inlet_grainshape>>2<<2);
//curve=inlet_curve;
//probG= right disintegrate probabilty && shuffle value
probG = (uint32_t)(GenerateRandomNumber())>>5; 
//probV=corrupt probabilty left
probV = (uint32_t)(GenerateRandomNumber())>>5; 
//probVR=corrupt probabilty right
probVR = (uint32_t)(GenerateRandomNumber())>>5; 
//prob O= octave amount probability left
probO=(uint32_t)(GenerateRandomNumber())>>5; 
//prob O= octave amount probability right
probOR=(uint32_t)(GenerateRandomNumber())>>5; 
//octave updown prob right & shuffle value right
probORD=(uint32_t)(GenerateRandomNumber())>>5; 
//probR= shuffle value & reverse grain left probability
probR=(uint32_t)(GenerateRandomNumber())>>5;
//probLR - grainrevers right
probLR=(uint32_t)(GenerateRandomNumber())>>5;
//probS= spray and octaveup?down probability left
probS=(uint32_t)(GenerateRandomNumber())>>5;
//probPS=pitchspray (bipolar!) left
probPS=(int32_t)(GenerateRandomNumber())>>4;
//probPSR=pitchspray (bipolar!) right
probPSR=(int32_t)(GenerateRandomNumber())>>4;

//right disintegrate
probD=(uint32_t)(GenerateRandomNumber())>>5;
//spray right
probDR=(uint32_t)(GenerateRandomNumber())>>5;


freeze=inlet_freezeL;
if (freeze){
	if (!frtrig){
		freezescrub=0;
		//sposphase=grainpos[0];
		spos=spos+slooposN;
		fakeopos=0;
		
		fakehold=2;
		
	}
	frtrig=1;
}
else if (!freeze){
	freezescrub=0;
	frtrig=0;
}


if (!inlet_stereocorrupt){
	probVR=probV;
}
probPAN=(uint32_t)(GenerateRandomNumber())>>5;
if (probPAN<inlet_panprob){
	panON=1;
}
else{
	panON=0;
}

if (inlet_panmode==0) {
	if (!inlet_randompan){
		pan=inlet_panwidth;
	}
	else {
		if (panON){
			randPAN=(uint32_t)(GenerateRandomNumber())>>5;
			pan=___SMMUL(randPAN<<3,inlet_panwidth<<2);
			}
		else {
			pan=0;
		}
	}	
	
	leftVCA=(1<<27)-pan;
	leftVCAR=pan;
	rightVCA=(1<<27)-pan;
	rightVCAL=pan;
}
else if (inlet_panmode==1) {
	if (!inlet_randompan){
		pan=inlet_panwidth;
	}
	else {
		if (panON){
			randPAN=(int32_t)(GenerateRandomNumber())>>5;
			pan=((___SMMUL(randPAN<<3,inlet_panwidth<<2))>>1)+(1<<26);
			}
		else {
			pan= (1<<26);
		}
	}
	leftVCA=((1<<27)-pan)<<1;
	rightVCA=pan<<1;
	leftVCAR=0;
	rightVCAL=0;
}


if (inlet_disintegrate<probG){
	disintegratedL=0;
}
else {
	disintegratedL=1;
}
if (!inlet_stereodis){
	disintegratedR=disintegratedL;
}
else {	
	if (inlet_disintegrate<probD){
		disintegratedR=0;
	}
	else {
		disintegratedR=1;
	}
}
//kpos=attr_buffer.outpos;
krate=((uint64_t)1<<32)/slength;
kphase=(attr_buffer.trigpos*(krate>>5));

freezelength=___SMMUL(inlet_freezesize<<3,slength<<2);
if (freezelength<1){
	freezelength=1;
}
freezesize=inlet_freezesize;



	



if (((inlet_reversegrain>>21)<=32)&&((inlet_reversegrain>>21)>=31)){
	alternate=1;
}
else {
	alternate=0;
	if (probR<inlet_reversegrain){
		grainreverseL=-1;	
	}
	else {
		grainreverseL=1;
	}
	if (probLR<inlet_reversegrain){
		grainreverseR=-1;	
	}
	else {
		grainreverseR=1;
	}
}
if (inlet_reverse){
	
	
		if (grainreverseL<0){
			grainreverseL=1;
		}
		else {
			grainreverseL=-1;
		}
		if (grainreverseR<0){
			grainreverseR=1;
		}
		else {
			grainreverseR=-1;
		}
	

}
if (!inlet_stereorev){
	grainreverseR=grainreverseL;
}

if (!freeze){
	if (inlet_shufflerate>0){
		shufflerate=kphase/inlet_shufflerate;
		}
	else {
		shufflerate=kphase;
	}
	if (inlet_shufflerange>0){
		shufflewidth=inlet_shufflerange;
		}
	else {
		shufflewidth=0x07FFFFFF;
	}
	
	if (shufflerate!=pshuffle){
		pshuffle=shufflerate;
		if ((probR<=inlet_shuffle)&&(inlet_shuffle>0) ){
			shufflev=___SMMUL(probG<<3,shufflewidth<<2);
			if (inlet_shufflerate>0){
			shuffleL=0-((((((shufflev/inlet_shufflerate)+1)*inlet_shufflerate)<<5)/krate)*rate);
			}
			else {
			shuffleL=0-((shufflev<<5)/krate)*rate;
			}
		}
		else {
			shuffleL=0;
		}
		if ((probORD<=inlet_shuffle)&&(inlet_shuffle>0) ){
			shufflev=___SMMUL(probV<<3,shufflewidth<<2);
			if (inlet_shufflerate>0){
			shuffleR=0-((((((shufflev/inlet_shufflerate)+1)*inlet_shufflerate)<<5)/krate)*rate);
			}
			else {
			shuffleR=0-((shufflev<<5)/krate)*rate;
			}
		}
		else {
			shuffleR=0;
		}
		
	//probORD
	}

}	
else {
	shuffleL=0;	
	shuffleR=0;	
}
if (!inlet_stereoshuff){
	shuffleR=shuffleL;
}
if (inlet_shuffledirection){
	shuffleL=-shuffleL;
	shuffleR=-shuffleR;
}
//spray=(inlet_spray<<5);

if (inlet_spray>0){
inTsprayL=(probS-((probS/slength)*slength))*rate;
inTsprayR=(probDR-((probDR/slength)*slength))*rate;
}
else {
	inTsprayL=0;
	inTsprayR=0;
}
sprayL=0-(___SMMUL(inlet_spray<<3,inTsprayL<<2));
sprayR=0-(___SMMUL(inlet_spray<<3,inTsprayR<<2));
if (!inlet_stereospray){
	sprayR=sprayL;
}

//probDR
//pitchspray
inPsprayL= ___SMMUL(probPS<<3,(1<<21)<<2);
pitchsprayL=___SMMUL((inlet_pitchspray>>1)<<3,inPsprayL<<2);
if (!inlet_stereoPspray){
	pitchsprayR=pitchsprayL;
}
else {
inPsprayR= ___SMMUL(probPSR<<3,(1<<21)<<2);
pitchsprayR=___SMMUL((inlet_pitchspray>>1)<<3,inPsprayR<<2);
}

posmodL=(inlet_posmod<<5)+sprayL+shuffleL;
posmodR=(inlet_posmod<<5)+sprayR+shuffleR;
//inpitch=
MTOFEXTENDED(0,fBase);
MTOFEXTENDED(inlet_pitch,fRate)
MTOFEXTENDED(inlet_stretch,sRate)
MTOFEXTENDED((pitchsprayL+inlet_pitch),pRateL)
MTOFEXTENDED((pitchsprayR+inlet_pitch),pRateR)
ratio=(float32_t)fRate/fBase;
pratioL=(float32_t)pRateL/fBase;
pratioR=(float32_t)pRateR/fBase;
sratio=(float32_t)sRate/fBase;

rate=((uint64_t)1<<32)/length;
Sfrac=(rate*slength)>>5;
//pitch increment
int32_t RATE=(rate*ratio);
//pitchspray increment
int32_t PRATEL=(rate*(pratioL))-RATE;
int32_t PRATER=(rate*(pratioR))-RATE;
int32_t SRATE=rate*sratio;
int32_t XSRATE=rate*sratio;
if (inlet_reverse){
	SRATE=-SRATE;
}

grainlength=___SMMUL(inlet_grainsize<<3,slength<<2);

grainrate=(((uint64_t)1<<32)/(grainlength))>>4;
grate=(((uint64_t)1<<32)/(grainlength))>>4;
if (inlet_shape<=(48<<21)){
	shape=inlet_shape;
}
else{
	shape=((inlet_shape-(48<<21))<<3)+(48<<21);
}
gyrate= ___SMMUL(((grate<<3)-grate)<<3,shape<<2);
grainyrate=grate+gyrate;

if (inlet_octavespeed>0){
	octm=inlet_octavespeed;

			
	
	}
else {
	octm=inlet_grainsize;
	
	}

octclockL=kphase/octm;
if (inlet_Roctavespeed>0){
		Roctavespeed=(___SMMUL((octm)<<3,inlet_Roctavespeed<<2));
		
		octclockR=(kphase+Roctavespeed)/octm;
	}
else {
	
	octclockR=octclockL;
}



/////////////////////////////	
if (octclockL!=poctL){
			octaveL=probO-((probO/(inlet_octrange+1))*(inlet_octrange+1));
			if (inlet_octmode==0){
				octdownL=0;
			}
			else if (inlet_octmode==1){
				octdownL=1;
			}
			else if (inlet_octmode==2){
				if (probS>=(1<<26)){
				octdownL=1;
				}
				else {
					octdownL=0;
				}
			}
			
			
	poctL=octclockL;
}
//
			if (inlet_randomoctave<probO){
				octL=0;
			}
			else {
				if (octaveL>0){
					if (!octdownL){
						octL=(octaveL*(RATE+PRATEL));
						
						}
					else {
							octL=0-((RATE+PRATEL)-((RATE+PRATEL)>>octaveL));
							
						}
				}
				
				else {
					octL=0;
				}
			}
//////////////////////////////////////
if(!inlet_stereooct){
						probOR=probO;
						probORD=probS;
					}
if (octclockR!=poctR){
			
			octaveR=probOR-((probOR/(inlet_octrange+1))*(inlet_octrange+1));
			
			if (inlet_octmode==0){
				octdownR=0;
			}
			else if (inlet_octmode==1){
				octdownR=1;
			}
			else if (inlet_octmode==2){
				if (probORD>=(1<<26)){
				octdownR=1;
				}
				else {
					octdownR=0;
				}
			}
			
		
	poctR=octclockR;
}
//
			if (inlet_randomoctave<probOR){
				octR=0;
			}
			else {
				if (octaveR>0){
					if (!octdownR){
						octR=(octaveR*(RATE+PRATER));
						
						}
					else {
							octR=0-((RATE+PRATER)-((RATE+PRATER)>>octaveR));
							
						}
				}
				
				else {
					octR=0;
				}
			}
///////////




if (inlet_width>0){
	haasdelayR=___SMMUL(inlet_width<<3,384<<2);
	haasdelayL=0;
}
else {
	haasdelayL=___SMMUL(inlet_width<<3,384<<2);
	haasdelayR=0;
}



if (inlet_delay<0x07FFFFFF){
	indelay[0]=___SMMUL(inlet_delay<<3,slength<<2) + haasdelayL;
	}
else {
	indelay[0]=0;
}

	//indelay[1]=___SMMUL(inlet_Rdelay<<3,slength<<2);


if (inlet_Rdelay>=0){
RRdelay=inlet_delay+(___SMMUL((inlet_delay<<1)<<3,inlet_Rdelay<<2));
}
else {
RRdelay=inlet_delay;
}
RRdelay=__SSAT(RRdelay,28);

if (RRdelay<0x07FFFFFF){
	indelay[1]=___SMMUL(RRdelay<<3,slength<<2) + haasdelayR;
	}
else {
	indelay[1]=0;
}

if (indelay[0]==0){
	indelay[0]=16;
}
if (indelay[1]==0){
	indelay[1]=16;
}
//////////////
if (inlet_GEwidth<0){
	GBhaasdelayR=(___SMMUL(-inlet_GEwidth<<3,1920<<2))*(rate>>5);
	GBhaasdelayL=0;
}
else {
	GBhaasdelayL=(___SMMUL(inlet_GEwidth<<3,1920<<2))*(rate>>5);
	GBhaasdelayR=0;
}

if (inlet_Rcorrupttime>=0){
RRcorrupt=(___SMMUL((inlet_corrupttime)<<3,inlet_Rcorrupttime<<2));
}
else {
RRcorrupt=0;
}
//RRcorrupt=__SSAT(RRcorrupt,28);

//corruption clock
corruptphaseL=kphase/inlet_corrupttime;
corruptphaseR=(kphase+RRcorrupt)/inlet_corrupttime;
if (corruptphaseL!=pcorruptL){
	pcorruptL=corruptphaseL;
	//prevpos=lpos;
	lposL=delayphase[0];
	//lposR=delayphase[1];
	//	lastpos=lpos;
	
}
if (corruptphaseR!=pcorruptR){
	pcorruptR=corruptphaseR;
	//prevpos=lpos;
	lposR=delayphase[1];
	//lposR=delayphase[1];
	//	lastpos=lpos;
	
}
if (freeze){
	sdelay[0]=freezelength;
	sdelay[1]=freezelength;
}
else if (!inlet_stretchsynctrigger){
	sdelay[0]=delay[0];
	sdelay[1]=delay[1];
}
else {
	sdelay[0]=___SMMUL(inlet_corrupttime<<3,slength<<2);
	sdelay[1]=___SMMUL(inlet_corrupttime<<3,slength<<2);
}




if (inlet_density>=0){
	if(inlet_density >= (1<<27))
	  indense = 0x07FFFFFF;
	else if(inlet_density <= 0)
	  indense = 0;
	else{
		  int32_t i = inlet_density >> (27-2);              // i [0 4[
		  int32_t a = (inlet_density & ((1<<(27-2)) - 1));  // a q25
		  if(i < 2){ // [0 2[
		    if(i < 1){ // [0 1[             q27         q25   q20           q27 
		      indense = ___SMMLA((1<<26) - 0, a, 0>> 7) << 7;
		    } else {   // [1 2[
		      indense = ___SMMLA((48<<21) - (1<<26), a, (1<<26) >> 7) << 7;
		    }
		  } else { // [2 4[
		    if(i < 3){ // [2 3[
		      indense = ___SMMLA((56<<21) - (48<<21), a, (48<<21) >> 7) << 7;
		    } else {   // [3 4[
		      indense = ___SMMLA(0x07FFFFFF - (56<<21), a, (56<<21) >> 7) << 7;
		    }
		  }
		}
		
	density=___SMMUL((inlet_grainsize>>1)<<3,(((1<<27)+(0-indense)))<<2);
	}
else if (inlet_density<0){
		indense=0;
		uint32_t lowdensity = (0-inlet_density)<<inlet_densityrange;
		if (lowdensity<=(1<<24)){
			density=(___SMMUL((inlet_grainsize>>1)<<3,(lowdensity<<3)<<2)) + (inlet_grainsize>>1); 
			}
		else if (lowdensity>(1<<24)){
			uint32_t tempin=(lowdensity<<3)<<5;
			density=(___SMMUL(inlet_grainsize<<3,(tempin>>5)<<2)) + ((lowdensity>>24)*inlet_grainsize); 
			}
	}

tr= ( ___SMMUL(density<<3,((slength))<<2) ) ;

if (tr<=2){
	tr=2;
}
// phase increment for density
trigrate=(((uint64_t)1<<32)/(tr));


resyncgrain=inlet_resyncgrain;
// if density changes, trigger reset on next bar
if (trigrate!=prevtrate){
	rtimer=1500;
	prevtrate=trigrate;
	
}

if (rtimer>0){
	rtimer-=1;
	if (rtimer<=0){
		rtimer=0;
		//if ( (attr_buffer.outpos/(synclength>>2))  != prevshit ){
			//gtrig=1;
			resyncgrain=1;
		//	prevshit=attr_buffer.outpos/(synclength>>2);
			
			
		//}
	}
}

if (inlet_trigger&&!ttrig){
	ttrig=1;
	gtrig=1;
//	prevpos=lpos;
	lposL=delayphase[0];
	lposR=delayphase[0];
		//lastpos=lpos;
	
}
else if (!inlet_trigger){
	ttrig=0;
}




if (( (indelay[0]!=pdelay[0]) || (indelay[1]!=pdelay[1])) &&!xfading){
	delay[0]=indelay[0];
	pdelay[0]=indelay[0];
	delay[1]=indelay[1];
	pdelay[1]=indelay[1];

}


//reset density clock and force a grain to play
//if frozen, selct a new position
if (gtrig){
	graintrig=1;
	prevTp=0;
	Tphase=0;
	gtrig=0;
	gforce=1;
	if (freeze){
		
		//sposphase=delayphase;
		spos=(((dpos[0]/sdelay[0])*sdelay[0]));
		
		freezescrub=0;
		//sposphase=grainpos;
		fakeopos=0;
		//sloopphaseN=0;
		fakehold=2;
	
	}
	
	
	
}

if (freeze){
	if (inlet_freezepos!=pgpos){
		freezescrub=0;
		fakehold=1;
		fakeopos=0;
//		sloopphaseN=0;
		spos=(___SMMUL(inlet_freezepos<<3,slength<<2));
		
		}
//	if (freezesize==0){
	//	sloopphaseN=0;
//	}
		
	}
pgpos=inlet_freezepos;

if (inlet_freezescrub!=prevscrub){
	if (inlet_freezescrub>=0){
		freezescrub=(___SMMUL((inlet_freezescrub>>inlet_scrubamount)<<3,slength<<2))*rate;
		}
	else {
		freezescrub=(slength*rate) +((___SMMUL((inlet_freezescrub>>inlet_scrubamount)<<3,slength<<2))*rate);
		}
	prevscrub=inlet_freezescrub;	
}
if (inlet_freezesize==0){
	fakehold=0;
}

//if (!play){
//	outlet_grainphase=0;
//	outlet_delayphase=0;
//}
//else{
	uint32_t phd=((grainpos[0])/rate)*krate;
	uint32_t phdd=((delayphase[0])/rate)*krate;
	outlet_grainphase=phd>>5;
//	if (!inlet_freeze){
	outlet_delayphase=phdd>>5;
//	}
//	}

//if (!play&&!grainoutL&&!grainoutR){
//	int kill;
//	graintrig=0;
//	for (kill = 0;kill<maxgrain;kill++){	
//		stage[kill]=0;
//		
//		}
//}

//outlet_activeplayers=v;outlet_attenuate=indense;
//disp_activeplayers=v;
outlet_activeplayers=v;
nglength=( ___SMMUL((0x07FFFFFF-inlet_shape)<<3,((grainlength>>1)+1)<<2))+(grainlength>>1);
//disp_grainlength=nglength;
outlet_grainlength=nglength;

//disp_d1=stage[0];
//disp_d2=stage[1];
//disp_d3=stage[2];
//disp_d4=stage[3];
//disp_d5=stage[4];
//disp_d6=stage[5];
//disp_d7=stage[6];
//disp_d8=stage[7];
//disp_d9=stage[8];
//disp_d10=stage[9];
//disp_d11=stage[10];
//disp_d12=stage[11];
//disp_d13=stage[12];
//disp_d14=stage[13];
//disp_d15=stage[14];
//disp_d16=stage[15];
//disp_d17=stage[16];
//disp_d18=stage[17];]]></code.krate>
         <code.srate><![CDATA[//buffer clocks
opos=attr_buffer.outpos+ buffer_index; 
oposGB=attr_buffer.outposGB+ buffer_index; 



//delay clocks
dun=0;
for (int q = 0;q<2;q++){
	prevdpos[q]=dpos[q];
	dpos[q]=opos-delay[q];
	if (dpos[q]<0){
		dpos[q]=xoffset+dpos[q];
	}
	if ((dpos[q]<prevdpos[q]) || (dpos[q]>(prevdpos[q]+1))){
		if (!dun){
			if (player==0){
				player=1;
			}
			else {
				player=0;
			}
			dun=1;
		}
		
	}
}


//loop based on buffer clock - resets every delay repeat
insloop=opos-((opos/(sdelay[0]))*(sdelay[0]));
//set new loop point after new freeze trigger 
if ((insloop==0)&&(fakehold>0)){
	if ((fakehold==2)&&(freezesize>0)){
		spos=(((dpos[0]/(sdelay[0]))*(sdelay[0])));
	}
	else if ((fakehold==1)&&(freezesize>0)){
		spos=(___SMMUL(((inlet_freezepos/freezesize)*freezesize)<<3,slength<<2));
	}
	fakehold=0;
}


if (!fakehold){
	sloop=insloop;
	}
else {
	sloop=fakeopos-((fakeopos/(sdelay[0]))*(sdelay[0]));
	fakeopos+=1;
}
uint32_t sloopphase=sloop*XSRATE;
slooppos=(sloopphase/rate);
slooposN=(slooppos-((slooppos/sdelay[0])*sdelay[0]));


	

//
switch(revon>0?revon:0){
	      case 0: 
	     	{
	     		if (!freeze){
		     		spos=((opos/sdelay[0])*sdelay[0]) - sdelay[0];
		     		}
				if (spos<0){
				spos=xoffset+spos;
				}
				//if (!inlet_freeze){
				sposphase=(spos+slooposN)*rate;
				//}
				sphase[0]=sposphase+freezescrub;
				
			}
	      break;
	      case 1: 
	     	{ 
	     		if (!freeze){
		     		spos=((opos/sdelay[0])*sdelay[0]);
		     		}
				if (!attr_buffer.freeze){
					if (spos<=0){
						spos=xoffset+(spos)-1;
						}
					}
				else {
					if (spos<=0){
						spos=xoffset+(spos);
						}
				}
				if (spos>=attr_buffer.maxlength){
					spos=spos-attr_buffer.maxlength;
				}
				//if (!inlet_freeze){
					sposphase=(spos-slooposN)*rate;
				//}
				sphase[0]=sposphase+freezescrub;
			}
	      break;
	      
		}

rspos=(sphase[0]/rate)-(sdelay[1]-sdelay[0]);
if (rspos<0){
	rspos=xoffset+rspos;
}
sphase[1]=rspos*rate;




delayphase[0]=dpos[0]*rate;
delayphase[1]=dpos[1]*rate;

//if (!play && fade){
//	fade-=fphase;
//	if (fade<=0){
//		fade=0;
//	}
//}
if (!player && xfade){
	xfading=1;
	xfade-=fphase;
	if (xfade<=0){
		xfade=0;
		xfading=0;
	}
}
xf[0]=0x07FFFFFF-xfade;
xf[1]=xfade;



if ((inlet_stretch==0) && (!inlet_reverse) && !freeze){
	
	int32_t tmp_gpo = (delayphase[0]>>5)+(posmodL>>5);
	if ((tmp_gpo)>=0){
		grainpos[0]=delayphase[0]+posmodL;
		
		
		}
	else {
		grainpos[0]=delayphase[0]+posmodL+(xoffset*rate);
		
	}

	int32_t tmp_gpoR = (delayphase[1]>>5)+(posmodR>>5);
	if ((tmp_gpoR)>=0){
		
		grainpos[1]=delayphase[1]+posmodR;
		
		}
	else {
		
		grainpos[1]=delayphase[1]+posmodR+(xoffset*rate);
	}
	}
else {
	int32_t tmp_gpo = (sphase[0]>>5)+(posmodL>>5);
	if ((tmp_gpo)>=0){
		grainpos[0]=sphase[0]+posmodL;
		
		}
	else {
		grainpos[0]=sphase[0]+posmodL+(xoffset*rate);
	}
	int32_t tmp_gpor = (sphase[1]>>5)+(posmodR>>5);
	if ((tmp_gpor)>=0){
		grainpos[1]=sphase[1]+posmodR;
		
		}
	else {
		grainpos[1]=sphase[1]+posmodR+(xoffset*rate);
	}
}
	



//delayed buffer playback
for (int x = 0;x<2;x++){
	
	if (x==player){
	phase[x]=dpos[0];
	rphase[x]=dpos[1];
	
	}
	else {
		if (phase[x]<(length-1)){
			phase[x]+=1;
		
		}
		if (rphase[x]<(length-1)){
			rphase[x]+=1;
		
		}
	}

	uint32_t T = ((phase[x]*rate)+(inlet_buffermod>>1))>>5;
   	uint32_t asat = __USAT(T,27);
    	int index = asat>>(27-attr_buffer.LENGTHPOWa);
   	int32_t y1 = attr_buffer.LEFT[index]<<attr_buffer.GAIN;
   	int32_t y2 = attr_buffer.LEFT[(index+1)&attr_buffer.LENGTHMASKa]<<attr_buffer.GAIN;
   	int frac = (asat - (index<<(27-attr_buffer.LENGTHPOWa)))<<(attr_buffer.LENGTHPOWa+3);
	int32_t rr;
  	rr = ___SMMUL(y1,(1<<30)-frac);
  	rr = ___SMMLA(y2,frac,rr);
	out[x]= ___SMMUL((rr<<2)<<3,xf[x]<<2);

	
   	uint32_t TR = ((rphase[x]*rate)+(inlet_buffermod>>1))>>5;
   	uint32_t asatR = __USAT(TR,27);
    	int indexR = asatR>>(27-attr_buffer.LENGTHPOWa);
   	int32_t y1R = attr_buffer.RIGHT[indexR]<<attr_buffer.GAIN;
   	int32_t y2R = attr_buffer.RIGHT[indexR+1]<<attr_buffer.GAIN;
   	int fracR = (asatR - (indexR<<(27-attr_buffer.LENGTHPOWa)))<<(attr_buffer.LENGTHPOWa+3);
	int32_t rrR;
  	rrR = ___SMMUL(y1R,(1<<30)-fracR);
  	rrR = ___SMMLA(y2R,fracR,rrR);
	outR[x]= ___SMMUL((rrR<<2)<<3,xf[x]<<2);
	
	
}





delayGBL=___SMMUL(inlet_grainecho<<3,(Sfrac>>1)<<2);
//grain echo clock
int32_t DphaseL = ((oposGB*rate)>>5) -delayGBL-GBhaasdelayL;
	if ((DphaseL)>=0){
		DxpL=DphaseL;
		}
	else {
		DxpL=DphaseL+(((attr_buffer.LENGTHb>>1)*rate)>>5);
	}
delayGBR=___SMMUL(inlet_grainecho<<3,(Sfrac>>1)<<2);
//grain echo clock
int32_t DphaseR = ((oposGB*rate)>>5) -delayGBR-GBhaasdelayR;
	if ((DphaseR)>=0){
		DxpR=DphaseR;
		}
	else {
		DxpR=DphaseR+(((attr_buffer.LENGTHb>>1)*rate)>>5);
	}

/// grain echo interpolate & playback

uint32_t asatGBL = __USAT((DxpL),27);
int indexGBL = asatGBL>>(27-attr_buffer.LENGTHPOWb);
int32_t y1GB = attr_buffer.echoarray[indexGBL]<<attr_buffer.GAIN;
int32_t y2GB = attr_buffer.echoarray[(indexGBL+1)]<<attr_buffer.GAIN;
int fracGBL = (asatGBL - (indexGBL<<(27-attr_buffer.LENGTHPOWb)))<<(attr_buffer.LENGTHPOWb+3);
int32_t rrGBL;
rrGBL = ___SMMUL(y1GB,(1<<30)-fracGBL);
rrGBL = ___SMMLA(y2GB,fracGBL,rrGBL);
outGB[0]= rrGBL<<2;

uint32_t asatGBR = __USAT((DxpR),27);
int indexGBR = asatGBR>>(27-attr_buffer.LENGTHPOWb);
int32_t y1GBR = attr_buffer.echoarray[indexGBR+(attr_buffer.LENGTHb>>1)]<<attr_buffer.GAIN;
int32_t y2GBR = attr_buffer.echoarray[(indexGBR+1+(attr_buffer.LENGTHb>>1))]<<attr_buffer.GAIN;
int fracGBR = (asatGBR - (indexGBR<<(27-attr_buffer.LENGTHPOWb)))<<(attr_buffer.LENGTHPOWb+3);
int32_t rrGBR;
rrGBR = ___SMMUL(y1GBR,(1<<30)-fracGBR);
rrGBR = ___SMMLA(y2GBR,fracGBR,rrGBR);
outGB[1]= rrGBR<<2;

// grain trigger clock (density)
Tphase+=trigrate;	
if (resyncgrain){
	Tphase=opos*trigrate;
	prevTp=Tphase-trigrate;
}

if (Tphase<prevTp){
		//if (play){
		graintrig=1;
	//	}
	}
prevTp=Tphase;

//set grain settings and trigger
if (graintrig){
	graintrig=0;
	pgrain=grain;
	if (grain<maxgrain){
		grain+=1;
		}
	if (grain>=maxgrain){
		grain=0;
	}
	nextgrain=grain+1;
	if (nextgrain>=maxgrain){
		nextgrain=nextgrain-maxgrain;
	}
	if (stage[grain]>0){
		//if grain already playing, don't trigger and tell it to try agin
		graintrig=1;
		grain=pgrain;

		
	}
	else {

		if (!disintegratedL || !disintegratedR || gforce){
			gforce=0;
			//activeplayers=v;
			if (stage[xgrain]==0){
				xgrain=grain;
				v=pv;
				pv=0;
			}
			if (stage[xgrain]>0){
				pv+=1;
				}
			stage[grain]=1;
			gph[grain]=0;
			gphR[grain]=0;
			
			if (alternate){
				if (grainreverseL<0){
					grainreverseL=1;
					grainreverseR=-1;
				}
				else {
					grainreverseL=-1;
					grainreverseR=1;
				}
			}
			
			reverseGL[grain]=grainreverseL;
			reverseGR[grain]=grainreverseR;
			
			if (inlet_corrupt<probV){
					
				pos[grain]=grainpos[0];		
				}
			else {
				int32_t tmp_gpo = (lposL>>5)+(posmodL>>5);
				if ((tmp_gpo)<0){
					tmp_gps=lposL+posmodL+(xoffset*rate);
					}
				else {
					tmp_gps=lposL+posmodL;
				}
				int32_t tmp_gpoR = (lposR>>5)+(posmodR>>5);
				
				pos[grain]=tmp_gps;	
				
			}
			
			if (inlet_corrupt<probVR){
				rpos[grain]=grainpos[1];		
				}
			else {
				int32_t tmp_gpo = (lposL>>5)+(posmodL>>5);

				int32_t tmp_gpoR = (lposR>>5)+(posmodR>>5);
				if ((tmp_gpoR)<0){
					tmp_gpsR=lposR+posmodR+(xoffset*rate);
					}
				else {
					tmp_gpsR=lposR+posmodR;
				}
				rpos[grain]=tmp_gpsR;	
			}

			if ((reverseGL[grain]<0)&&((pos[grain]>>5)<=(inlet_grainsize))){
						pos[grain]=pos[grain]+(xoffset*rate);
						
					}

			if ((reverseGR[grain]<0)&&((rpos[grain]>>5)<=(inlet_grainsize))){
						rpos[grain]=rpos[grain]+(xoffset*rate);
						
					}

			
			genv[grain]=0;
			grainphase[grain]=0;
			gX[grain]=0;	
			GRATEL[grain]=PRATEL+octL;
			GRATER[grain]=PRATER+octR;
			if (!disintegratedL){
				Gleft[grain]=leftVCA;
				GleftR[grain]=leftVCAR;
				}
			else {
				Gleft[grain]=0;
				GleftR[grain]=0;
			}
			if (!disintegratedR){
				Gright[grain]=rightVCA;
				GrightL[grain]=rightVCAL;
				}
			else {
				Gright[grain]=0;
				GrightL[grain]=0;
			}
			
			
			if (inlet_allgrains>0){
				holdG[grain]=1;
			}
			else {
				holdG[grain]=0;
			}
			holdG[nextgrain]=0;
			
		}
	}

	
}
	
grainoutL=0;
grainoutR=0;
//grain playback

for (t = 0;t<maxgrain;t++){	
	if (stage[t]>0){

		//envelope
		if (grainphase[t]<(1<<27)){
			grainphase[t]+=grainrate;
			if (genv[t]<0x07FFFFFF){
				genv[t]+=grainyrate;	
				}
			else {
				genv[t]=0x07FFFFFF;
				}
			}
		else {
			
			genv[t]-=grainyrate;
			if (genv[t]<=0){
				genv[t]=0;
				if (holdG[t]&&inlet_allgrains){
					stage[t]=1;
					grainphase[t]=0;
					gph[t]=0;
				}
				else {
					//v-=1;
					stage[t]=0;
				}
			}
			
			
		}
		//read and interpolate
		//left
		uint32_t TGL = (gph[t]+pos[t])+(inlet_grainmod>>1);
	   	uint32_t asat = __USAT((TGL>>5),27);
	    	int index = asat>>(27-attr_buffer.LENGTHPOWa);
	    	
	    	
	   	int32_t y1 = attr_buffer.LEFT[index]<<attr_buffer.GAIN;
	   	int32_t y2 = attr_buffer.LEFT[index+1]<<attr_buffer.GAIN;
	   	
	  	 int frac = (asat - (index<<(27-attr_buffer.LENGTHPOWa)))<<(attr_buffer.LENGTHPOWa+3);
	  	int32_t left;
	  	left = ___SMMUL(y1,(1<<30)-frac);
	  	left = ___SMMLA(y2,frac,left);
	  	left= ___SMMUL((left<<2)<<3,genv[t]<<2);
		

		//right
		uint32_t TGR = (gphR[t]+rpos[t])+(inlet_grainmod>>1);
	   	uint32_t asatR = __USAT((TGR>>5),27);
	    	int inde = (asatR>>(27-attr_buffer.LENGTHPOWa));
	    	
	    	
	   	int32_t y1R = attr_buffer.RIGHT[inde]<<attr_buffer.GAIN;
	   	int32_t y2R = attr_buffer.RIGHT[inde+1]<<attr_buffer.GAIN;
	   	
	  	 int fracR = (asatR - (inde<<(27-attr_buffer.LENGTHPOWa)))<<(attr_buffer.LENGTHPOWa+3);
	  	int32_t right;
	  	right = ___SMMUL(y1R,(1<<30)-fracR);
	  	right = ___SMMLA(y2R,fracR,right);
	  	right = ___SMMUL((right<<2)<<3,genv[t]<<2);
	  	
		//sum all grains for output
		grainoutL+=( (___SMMUL(left<<3,Gleft[t]<<2))  +  (___SMMUL(right<<3,GrightL[t]<<2)) );
		grainoutR+=( (___SMMUL(right<<3,Gright[t]<<2))  +  (___SMMUL(left<<3,GleftR[t]<<2)) );

		//audio/sample clock
		gph[t]+=((RATE+GRATEL[t])*reverseGL[t]);
		gphR[t]+=((RATE+GRATER[t])*reverseGR[t]);
//		*********************************************************************
	}
}

//outlet_granulatorL=(___SMMUL(grainoutL<<3,fade<<2));
//outlet_granulatorR=(___SMMUL(grainoutR<<3,fade<<2));
//outlet_grainechoL=__SSAT((___SMMUL((outGB[0])<<3,fade<<2)),27);
//outlet_grainechoR=__SSAT((___SMMUL((outGB[1])<<3,fade<<2)),27);

//outlet_delayedbufferL=__SSAT((___SMMUL((out[0]+out[1])<<3,fade<<2)),27);
//outlet_delayedbufferR=__SSAT((___SMMUL((outR[0]+outR[1])<<3,fade<<2)),27);

outlet_granulatorL=grainoutL;
outlet_granulatorR=grainoutR;
outlet_grainechoL=__SSAT(outGB[0],27);
outlet_grainechoR=__SSAT(outGB[1],27);

outlet_delayedbufferL=__SSAT((out[0]+out[1]),27);
outlet_delayedbufferR=__SSAT((outR[0]+outR[1]),27);
	

//if (play && (fade<0x07FFFFFF)){
//	fade+=fphase;
//	if (fade>=0x07FFFFFF){
//	fade=0x07FFFFFF;
//	}
//}
if (player && (xfade<0x07FFFFFF)){
	xfading=1;
	xfade+=fphase;
	if (xfade>=0x07FFFFFF){
		xfading=0;
	xfade=0x07FFFFFF;
	}
}]]></code.srate>
      </object>
   </patchobj>
   <obj type="math/smooth" uuid="6c5d08c282bb08bff24af85b4891447f99bcbc97" name="smooth_1" x="1890" y="1988">
      <params>
         <frac32.u.map name="time" value="32.0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1638" y="2044" text="turn down when denser (still experimenting!)"/>
   <comment type="patch/comment" x="1512" y="2072" text="attenuate when more voices playing"/>
   <comment type="patch/comment" x="1512" y="2086" text="boost when density below 0"/>
   <comment type="patch/comment" x="2114" y="2086" text="safety compression"/>
   <comment type="patch/comment" x="2296" y="2086" text="safety compression"/>
   <patchobj type="patch/object" uuid="72c95f4b-a175-434a-9eab-97b0cedd487e" name="object_1" x="1512" y="2100">
      <params>
         <frac32.u.map name="more" value="48.5"/>
         <int32 name="start" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="72c95f4b-a175-434a-9eab-97b0cedd487e">
         <inlets>
            <int32 name="activeplayers"/>
            <frac32.bipolar name="dense"/>
         </inlets>
         <outlets>
            <frac32 name="attenuateB"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="more"/>
            <int32 name="start">
               <MinValue i="0"/>
               <MaxValue i="64"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[int outAP;
if (inlet_activeplayers>=(2+param_start)){
outAP=inlet_activeplayers-(2+param_start);
}
else {
	outAP=0;
}


uint32_t atB=( ___SMMUL( (1<<(27-outAP)) <<3,(param_more)<<2))+ (0x07FFFFFF-param_more);

if (atB>=0x07FFFFFF){
	atB=0x07FFFFFF;
}
uint32_t dense=( __SSAT(((0-inlet_dense)<<3),28))>>1;
if (inlet_dense<0){
	atB=atB+dense;
}
outlet_attenuateB=atB;]]></code.krate>
      </object>
   </patchobj>
   <obj type="math/smooth" uuid="6c5d08c282bb08bff24af85b4891447f99bcbc97" name="smooth_5" x="1624" y="2100">
      <params>
         <frac32.u.map name="time" value="40.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="env/follower" uuid="356ce1d18ac6b51704833f94dac5dea823fb8223" name="follower_1" x="2044" y="2100">
      <params/>
      <attribs>
         <combo attributeName="time" selection="42.6ms"/>
      </attribs>
   </obj>
   <obj type="math/gain" uuid="6b4dd3da49f98e54900f6c20031f38f4624fa364" name="gain_1" x="2114" y="2100">
      <params>
         <frac32.u.map name="amp" value="26.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="dyn/comp" uuid="2d62720d6a597c586936be74ebb1e1c449772636" name="comp_1" x="2212" y="2100">
      <params>
         <frac32.u.map name="tresh" value="52.0"/>
         <frac32.u.map name="ratio" value="50.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="env/follower" uuid="356ce1d18ac6b51704833f94dac5dea823fb8223" name="follower_2" x="2296" y="2100">
      <params/>
      <attribs>
         <combo attributeName="time" selection="42.6ms"/>
      </attribs>
   </obj>
   <obj type="math/gain" uuid="6b4dd3da49f98e54900f6c20031f38f4624fa364" name="gain_2" x="2366" y="2100">
      <params>
         <frac32.u.map name="amp" value="26.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="dyn/comp" uuid="2d62720d6a597c586936be74ebb1e1c449772636" name="comp_2" x="2464" y="2100">
      <params>
         <frac32.u.map name="tresh" value="52.0"/>
         <frac32.u.map name="ratio" value="50.0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="420" y="2114" text="ignore this"/>
   <comment type="patch/comment" x="420" y="2128" text="plus 16384?"/>
   <obj type="disp/i" uuid="5e35fd0c62d81e70017289250cf28edd26e19e4a" name="i_2" x="1400" y="2240">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1596" y="2254" text="grain gain"/>
   <patchobj type="patch/object" uuid="cb348abb-e975-43a1-a337-68f755ba4cf1" name="*_6" x="1596" y="2268">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="cb348abb-e975-43a1-a337-68f755ba4cf1">
         <sDescription>multiply</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>math.axh</helpPatch>
         <inlets>
            <frac32 name="a" description="input"/>
            <frac32 name="b" description="input"/>
         </inlets>
         <outlets>
            <frac32 name="result" description="output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_result= ___SMMUL(inlet_a<<3,(inlet_b<<1)<<2);]]></code.krate>
      </object>
   </patchobj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_1" x="1722" y="2310">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1848" y="2310" text="granulatorleft"/>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_3" x="1988" y="2310">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_87" x="2212" y="2310">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_92" x="2464" y="2310">
      <params/>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_1" x="1848" y="2324">
      <params/>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_2" x="2058" y="2324">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1400" y="2366" text="output *************************************************************"/>
   <comment type="patch/comment" x="1372" y="2394" text="grain echo vol&amp;fback"/>
   <comment type="patch/comment" x="1498" y="2394" text="buffer vol &amp;buff fback"/>
   <comment type="patch/comment" x="1792" y="2394" text="granulatorer vol"/>
   <comment type="patch/comment" x="2114" y="2394" text="input vol"/>
   <patchobj type="patch/object" uuid="3c91e6e3-3f4e-47d4-bb6e-24ab43f24547" name="1_1" x="1386" y="2408">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="3c91e6e3-3f4e-47d4-bb6e-24ab43f24547">
         <sDescription>&quot;voltage controlled amplifier&quot;, multiplies v and a inputs, with linear interpolation from k- to s-rate</sDescription>
         <author>Remco van der Most</author>
         <license>BSD</license>
         <inlets>
            <frac32buffer name="a1" description="audio input"/>
            <frac32buffer name="a2"/>
            <frac32 name="v" description="gain input"/>
            <frac32 name="b"/>
         </inlets>
         <outlets>
            <frac32buffer name="v1" description="output"/>
            <frac32buffer name="v2"/>
            <frac32buffer name="b1"/>
            <frac32buffer name="b2"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t prev;
    int32_t step;
int32_t prevb;
    int32_t stepb;]]></code.declaration>
         <code.krate><![CDATA[step = (inlet_v - prev)>>4;
   int32_t i = prev;
   prev = inlet_v;

stepb = (inlet_b - prevb)>>4;
   int32_t ib = prevb;
   prevb = inlet_b;]]></code.krate>
         <code.srate><![CDATA[outlet_v1 =  ___SMMUL(inlet_a1,i)<<5;
   outlet_v2 =  ___SMMUL(inlet_a2,i)<<5;
   i += step;

outlet_b1 =  ___SMMUL(inlet_a1,ib)<<5;
   outlet_b2 =  ___SMMUL(inlet_a2,ib)<<5;
   ib += stepb;]]></code.srate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="819da615-22f4-4657-887f-7fc5f44be0f5" name="2_1" x="1512" y="2408">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="819da615-22f4-4657-887f-7fc5f44be0f5">
         <sDescription>&quot;voltage controlled amplifier&quot;, multiplies v and a inputs, with linear interpolation from k- to s-rate</sDescription>
         <author>Remco van der Most</author>
         <license>BSD</license>
         <inlets>
            <frac32buffer name="a1" description="audio input"/>
            <frac32buffer name="a2"/>
            <frac32 name="v" description="gain input"/>
            <frac32 name="b"/>
         </inlets>
         <outlets>
            <frac32buffer name="v1" description="output"/>
            <frac32buffer name="v2"/>
            <frac32buffer name="b1"/>
            <frac32buffer name="b2"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t prev;
    int32_t step;
int32_t prevb;
    int32_t stepb;]]></code.declaration>
         <code.krate><![CDATA[step = (inlet_v - prev)>>4;
   int32_t i = prev;
   prev = inlet_v;

stepb = (inlet_b - prevb)>>4;
   int32_t ib = prevb;
   prevb = inlet_b;]]></code.krate>
         <code.srate><![CDATA[outlet_v1 =  ___SMMUL(inlet_a1,i)<<5;
   outlet_v2 =  ___SMMUL(inlet_a2,i)<<5;
   i += step;

outlet_b1 =  ___SMMUL(inlet_a1,ib)<<5;
   outlet_b2 =  ___SMMUL(inlet_a2,ib)<<5;
   ib += stepb;]]></code.srate>
      </object>
   </patchobj>
   <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_3" x="1610" y="2408">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_7" x="1694" y="2408">
      <params/>
      <attribs/>
   </obj>
   <obj type="sss/gain/vcaST" uuid="82f6d1d8-7fb6-413a-994e-96fdf4b98ee7" name="vcaST_6" x="1792" y="2408">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_4" x="1876" y="2408">
      <params/>
      <attribs/>
   </obj>
   <obj type="sss/gain/vcaST" uuid="82f6d1d8-7fb6-413a-994e-96fdf4b98ee7" name="vcaST_3" x="2114" y="2408">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1946" y="2478" text="wet vol"/>
   <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_5" x="1862" y="2492">
      <params/>
      <attribs/>
   </obj>
   <obj type="sss/gain/vcaST" uuid="82f6d1d8-7fb6-413a-994e-96fdf4b98ee7" name="vcaST_2" x="1946" y="2492">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="2114" y="2506" text="input + wet"/>
   <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_2" x="2114" y="2520">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="2114" y="2590" text="input + wet"/>
   <comment type="patch/comment" x="2212" y="2590" text="audio output"/>
   <comment type="patch/comment" x="1274" y="2604" text="grainecho to buffer"/>
   <comment type="patch/comment" x="1484" y="2604" text="grain to buffer"/>
   <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_6" x="2114" y="2604">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="a6852d8f-46ac-4100-96b1-6ba721fe62ac" name="out_1" x="2212" y="2604">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="a6852d8f-46ac-4100-96b1-6ba721fe62ac">
         <sDescription>Audio output, stereo</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <inlets>
            <frac32buffer name="left" description="Left channel"/>
            <frac32buffer name="right" description="Right channel"/>
         </inlets>
         <outlets/>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[int j;
for(j=0;j<BUFSIZE;j++){
   AudioOutputLeft[j] += __SSAT(inlet_left[j],28);
   AudioOutputRight[j] += __SSAT(inlet_right[j],28);
}]]></code.krate>
      </object>
   </patchobj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_2" x="1274" y="2618">
      <params/>
      <attribs/>
   </obj>
   <obj type="sss/gain/vcaST" uuid="82f6d1d8-7fb6-413a-994e-96fdf4b98ee7" name="vcaST_9" x="1330" y="2618">
      <params/>
      <attribs/>
   </obj>
   <obj type="sss/gain/vcaST" uuid="82f6d1d8-7fb6-413a-994e-96fdf4b98ee7" name="vcaST_5" x="1484" y="2618">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1568" y="2730" text="grains + grain echo to grain echo"/>
   <comment type="patch/comment" x="1764" y="2730" text="grains + grain echo to grain echo"/>
   <comment type="patch/comment" x="2156" y="2730" text="to buffer"/>
   <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_1" x="1624" y="2744">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_8" x="1820" y="2744">
      <params/>
      <attribs/>
   </obj>
   <obj type="drj/math/sum3" uuid="93cb11244902274d118a237aed86ae7d7fd46107" name="sum3_1" x="1946" y="2744">
      <params/>
      <attribs/>
   </obj>
   <obj type="drj/math/sum3" uuid="93cb11244902274d118a237aed86ae7d7fd46107" name="sum3_2" x="2044" y="2744">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="0e5b5059-c6fa-40b8-8b7b-b6775ee52306" name="hp_1" x="2156" y="2744">
      <params>
         <frac32.s.map name="freq" value="-35.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="0e5b5059-c6fa-40b8-8b7b-b6775ee52306">
         <sDescription>1st order hipass filter</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>filter.axh</helpPatch>
         <inlets>
            <frac32buffer name="inL" description="input"/>
            <frac32buffer name="inR"/>
         </inlets>
         <outlets>
            <frac32buffer name="outL" description="output"/>
            <frac32buffer name="outR"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.pitch name="freq" noLabel="true"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t val;
int32_t valR;]]></code.declaration>
         <code.init><![CDATA[val = 0;]]></code.init>
         <code.krate><![CDATA[int32_t f;
   MTOF(param_freq,f);]]></code.krate>
         <code.srate><![CDATA[val = ___SMMLA((inlet_inL-val)<<1,f,val);
valR = ___SMMLA((inlet_inR-valR)<<1,f,valR);
outlet_outL= inlet_inL-val;

outlet_outR= inlet_inR-valR;]]></code.srate>
      </object>
   </patchobj>
   <nets>
      <net>
         <source obj="audio_1" outlet="left"/>
         <dest obj="vcaST_3" inlet="a1"/>
         <dest obj="MikeWatt" inlet="Lin"/>
      </net>
      <net>
         <source obj="vcaST_3" outlet="o1"/>
         <dest obj="+_2" inlet="in1"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v30"/>
         <dest obj="crossfade_1" inlet="drywet"/>
         <dest obj="dial_3" inlet="in"/>
      </net>
      <net>
         <source obj="dial_14" outlet="out"/>
         <dest obj="crossfade_1" inlet="volume"/>
      </net>
      <net>
         <source obj="xyx_1" outlet="granulatorL"/>
         <dest obj="follower_1" inlet="in"/>
         <dest obj="vca_1" inlet="a"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v24"/>
         <dest obj="crossfade_2" inlet="drywet"/>
         <dest obj="dial_48" inlet="in"/>
      </net>
      <net>
         <source obj="vcaST_6" outlet="o1"/>
         <dest obj="+_4" inlet="in2"/>
      </net>
      <net>
         <source obj="+_4" outlet="out"/>
         <dest obj="vcaST_2" inlet="a1"/>
      </net>
      <net>
         <source obj="vcaST_5" outlet="o1"/>
         <dest obj="sum3_1" inlet="in1"/>
      </net>
      <net>
         <source obj="or_8" outlet="o"/>
         <dest obj="or_7" inlet="i1"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v20"/>
         <dest obj="dial_17" inlet="in"/>
         <dest obj="xyx_1" inlet="delay"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v1"/>
         <dest obj="object_1" inlet="dense"/>
         <dest obj="dial_16" inlet="in"/>
         <dest obj="xyx_1" inlet="density"/>
      </net>
      <net>
         <source obj="xyx_1" outlet="delayedbufferL"/>
         <dest obj="2_1" inlet="a1"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v21"/>
         <dest obj="crossfade_3" inlet="volume"/>
         <dest obj="dial_54" inlet="in"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v22"/>
         <dest obj="crossfade_3" inlet="drywet"/>
         <dest obj="dial_55" inlet="in"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v3"/>
         <dest obj="&gt;&gt;_1" inlet="a"/>
         <dest obj="dial_21" inlet="in"/>
      </net>
      <net>
         <source obj="crossfade_3" outlet="wet"/>
         <dest obj="vcaST_5" inlet="v"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v9"/>
         <dest obj="dial_44" inlet="in"/>
         <dest obj="xyx_1" inlet="corrupttime"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v2"/>
         <dest obj="dial_20" inlet="in"/>
         <dest obj="xyx_1" inlet="disintegrate"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v8"/>
         <dest obj="dial_37" inlet="in"/>
         <dest obj="xyx_1" inlet="corrupt"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v10"/>
         <dest obj="dial_28" inlet="in"/>
         <dest obj="xyx_1" inlet="randomoctave"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v29"/>
         <dest obj="i_6" inlet="in"/>
         <dest obj="xyx_1" inlet="octrange"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v23"/>
         <dest obj="to_1" inlet="i"/>
         <dest obj="bool_1" inlet="in"/>
      </net>
      <net>
         <source obj="xyx_1" outlet="grainechoL"/>
         <dest obj="1_1" inlet="a1"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v17"/>
         <dest obj="1_1" inlet="b"/>
         <dest obj="dial_51" inlet="in"/>
      </net>
      <net>
         <source obj="crossfade_1" outlet="dry"/>
         <dest obj="vcaST_3" inlet="v"/>
      </net>
      <net>
         <source obj="crossfade_1" outlet="wet"/>
         <dest obj="vcaST_2" inlet="v"/>
      </net>
      <net>
         <source obj="crossfade_3" outlet="dry"/>
         <dest obj="2_1" inlet="b"/>
      </net>
      <net>
         <source obj="crossfade_2" outlet="dry"/>
         <dest obj="2_1" inlet="v"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v18"/>
         <dest obj="&gt;&gt;_2" inlet="a"/>
         <dest obj="dial_52" inlet="in"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v0"/>
         <dest obj="dial_10" inlet="in"/>
         <dest obj="xyx_1" inlet="grainsize"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v12"/>
         <dest obj="dial_32" inlet="in"/>
         <dest obj="xyx_1" inlet="shuffle"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v14"/>
         <dest obj="dial_35" inlet="in"/>
         <dest obj="xyx_1" inlet="shufflerate"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v13"/>
         <dest obj="dial_33" inlet="in"/>
         <dest obj="xyx_1" inlet="shufflerange"/>
      </net>
      <net>
         <source obj="+_3" outlet="out"/>
         <dest obj="vcaST_6" inlet="a1"/>
      </net>
      <net>
         <source obj="vcaST_9" outlet="o1"/>
         <dest obj="sum3_1" inlet="in3"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v19"/>
         <dest obj="*_2" inlet="a"/>
         <dest obj="dial_65" inlet="in"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v11"/>
         <dest obj="dial_30" inlet="in"/>
         <dest obj="xyx_1" inlet="octavespeed"/>
      </net>
      <net>
         <source obj="or_4" outlet="o"/>
         <dest obj="MikeWatt" inlet="freeze"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v6"/>
         <dest obj="dial_24" inlet="in"/>
         <dest obj="xyx_1" inlet="pitchspray"/>
      </net>
      <net>
         <source obj="1_1" outlet="b1"/>
         <dest obj="vcaST_9" inlet="a1"/>
         <dest obj="+_1" inlet="in2"/>
      </net>
      <net>
         <source obj="1_1" outlet="v1"/>
         <dest obj="+_3" inlet="in2"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v16"/>
         <dest obj="1_1" inlet="v"/>
         <dest obj="*_2" inlet="b"/>
         <dest obj="dial_50" inlet="in"/>
      </net>
      <net>
         <source obj="*_2" outlet="result"/>
         <dest obj="vcaST_9" inlet="v"/>
      </net>
      <net>
         <source obj="1_15" outlet="kbeat"/>
         <dest obj="&lt;&lt;_1" inlet="in"/>
         <dest obj="&lt;&lt;_2" inlet="in"/>
      </net>
      <net>
         <source obj="i_12" outlet="out"/>
         <dest obj="1_15" inlet="bpm"/>
      </net>
      <net>
         <source obj="1_15" outlet="ppq"/>
         <dest obj="MikeWatt" inlet="ppq"/>
      </net>
      <net>
         <source obj="1_15" outlet="sbeat"/>
         <dest obj="MikeWatt" inlet="sbeat"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v31"/>
         <dest obj="xyx_1" inlet="freezepos"/>
      </net>
      <net>
         <source obj="button_12" outlet="o"/>
         <dest obj="1_15" inlet="midirevert"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v28"/>
         <dest obj="i_5" inlet="in"/>
         <dest obj="xyx_1" inlet="octmode"/>
      </net>
      <net>
         <source obj="vca_1" outlet="o"/>
         <dest obj="vcaST_5" inlet="a1"/>
         <dest obj="+_3" inlet="in1"/>
         <dest obj="+_1" inlet="in1"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v27"/>
         <dest obj="dial_56" inlet="in"/>
         <dest obj="xyx_1" inlet="shape"/>
      </net>
      <net>
         <source obj="xyx_1" outlet="activeplayers"/>
         <dest obj="object_1" inlet="activeplayers"/>
         <dest obj="i_2" inlet="in"/>
      </net>
      <net>
         <source obj="object_1" outlet="attenuateB"/>
         <dest obj="smooth_5" inlet="in"/>
      </net>
      <net>
         <source obj="comp_1" outlet="out"/>
         <dest obj="*_1" inlet="b"/>
      </net>
      <net>
         <source obj="follower_1" outlet="amp"/>
         <dest obj="gain_1" inlet="in"/>
      </net>
      <net>
         <source obj="gain_1" outlet="out"/>
         <dest obj="comp_1" inlet="in"/>
      </net>
      <net>
         <source obj="*_1" outlet="result"/>
         <dest obj="vca_1" inlet="v"/>
         <dest obj="dial_87" inlet="in"/>
      </net>
      <net>
         <source obj="smooth_5" outlet="out"/>
         <dest obj="*_1" inlet="a"/>
         <dest obj="*_3" inlet="a"/>
      </net>
      <net>
         <source obj="crossfade_2" outlet="wet"/>
         <dest obj="*_6" inlet="a"/>
      </net>
      <net>
         <source obj="*_6" outlet="result"/>
         <dest obj="vcaST_6" inlet="v"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v25"/>
         <dest obj="dial_49" inlet="in"/>
         <dest obj="dial_82" inlet="in"/>
         <dest obj="*_6" inlet="b"/>
      </net>
      <net>
         <source obj="i_7" outlet="out"/>
         <dest obj="boss" inlet="snapshot"/>
      </net>
      <net>
         <source obj="c_2" outlet="out"/>
         <dest obj="save_2" inlet="filename"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v7"/>
         <dest obj="dial_27" inlet="in"/>
         <dest obj="xyx_1" inlet="reversegrain"/>
      </net>
      <net>
         <source obj="dial_71" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v0"/>
      </net>
      <net>
         <source obj="1" outlet="o"/>
         <dest obj="tablewrite_1" inlet="v1"/>
      </net>
      <net>
         <source obj="dial_26" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v2"/>
      </net>
      <net>
         <source obj="dial_46" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v3"/>
      </net>
      <net>
         <source obj="1_" outlet="o"/>
         <dest obj="tablewrite_1" inlet="v4"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v5"/>
         <dest obj="dial_22" inlet="in"/>
         <dest obj="xyx_1" inlet="stretch"/>
      </net>
      <net>
         <source obj="1__" outlet="o"/>
         <dest obj="tablewrite_1" inlet="v5"/>
      </net>
      <net>
         <source obj="dial_39" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v6"/>
      </net>
      <net>
         <source obj="dial_34" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v7"/>
      </net>
      <net>
         <source obj="dial_31" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v8"/>
      </net>
      <net>
         <source obj="dial_70" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v9"/>
      </net>
      <net>
         <source obj="dial_15" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v10"/>
      </net>
      <net>
         <source obj="dial_59" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v11"/>
      </net>
      <net>
         <source obj="dial_9" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v12"/>
      </net>
      <net>
         <source obj="dial_72" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v13"/>
      </net>
      <net>
         <source obj="dial_73" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v14"/>
      </net>
      <net>
         <source obj="dial_5" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v16"/>
      </net>
      <net>
         <source obj="dial_25" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v17"/>
      </net>
      <net>
         <source obj="dial_75" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v18"/>
      </net>
      <net>
         <source obj="dial_36" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v19"/>
      </net>
      <net>
         <source obj="dial_76" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v20"/>
      </net>
      <net>
         <source obj="dial_18" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v21"/>
      </net>
      <net>
         <source obj="dial_7" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v22"/>
      </net>
      <net>
         <source obj="toggle_6" outlet="o"/>
         <dest obj="tablewrite_1" inlet="v23"/>
      </net>
      <net>
         <source obj="dial_1" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v24"/>
      </net>
      <net>
         <source obj="dial_8" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v25"/>
      </net>
      <net>
         <source obj="dial_23" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v27"/>
      </net>
      <net>
         <source obj="i_4" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v28"/>
      </net>
      <net>
         <source obj="i_8" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v29"/>
      </net>
      <net>
         <source obj="dial_19" outlet="out"/>
         <dest obj="1" inlet="i"/>
      </net>
      <net>
         <source obj="dial_2" outlet="out"/>
         <dest obj="1_" inlet="i"/>
      </net>
      <net>
         <source obj="dial_29" outlet="out"/>
         <dest obj="1__" inlet="i"/>
      </net>
      <net>
         <source obj="&gt;&gt;_1" outlet="result"/>
         <dest obj="xyx_1" inlet="spray"/>
      </net>
      <net>
         <source obj="dial_13" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v30"/>
      </net>
      <net>
         <source obj="button_16" outlet="o"/>
         <dest obj="boss" inlet="save"/>
      </net>
      <net>
         <source obj="button_17" outlet="o"/>
         <dest obj="boss" inlet="load"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v34"/>
         <dest obj="xyx_1" inlet="freezesize"/>
      </net>
      <net>
         <source obj="or_2" outlet="o"/>
         <dest obj="xyx_1" inlet="freezeL"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v32"/>
         <dest obj="xyx_1" inlet="freezescrub"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v33"/>
         <dest obj="xyx_1" inlet="scrubamount"/>
      </net>
      <net>
         <source obj="or_6" outlet="o"/>
         <dest obj="or_3" inlet="i1"/>
      </net>
      <net>
         <source obj="or_3" outlet="o"/>
         <dest obj="1_15" inlet="tap"/>
      </net>
      <net>
         <source obj="i_15" outlet="out"/>
         <dest obj="tablewrite_1" inlet="pitchquantize"/>
      </net>
      <net>
         <source obj="&lt;&lt;_1" outlet="out"/>
         <dest obj="tableread_1" inlet="kbeat"/>
      </net>
      <net>
         <source obj="dial_61" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v35"/>
      </net>
      <net>
         <source obj="dial_85" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v36"/>
      </net>
      <net>
         <source obj="dial_4" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v37"/>
      </net>
      <net>
         <source obj="or_1" outlet="o"/>
         <dest obj="save_2" inlet="trig"/>
      </net>
      <net>
         <source obj="button_9" outlet="o"/>
         <dest obj="or_1" inlet="i2"/>
      </net>
      <net>
         <source obj="or_9" outlet="o"/>
         <dest obj="xyx_1" inlet="resyncgrain"/>
      </net>
      <net>
         <source obj="to_1" outlet="o"/>
         <dest obj="xyx_1" inlet="reverse"/>
      </net>
      <net>
         <source obj="toggle_1" outlet="o"/>
         <dest obj="tablewrite_1" inlet="quantize"/>
      </net>
      <net>
         <source obj="&gt;&gt;_2" outlet="result"/>
         <dest obj="interp_1" inlet="i"/>
      </net>
      <net>
         <source obj="xyx_1" outlet="delayedbufferR"/>
         <dest obj="2_1" inlet="a2"/>
      </net>
      <net>
         <source obj="vcaST_2" outlet="o1"/>
         <dest obj="+_2" inlet="in2"/>
      </net>
      <net>
         <source obj="+_5" outlet="out"/>
         <dest obj="vcaST_2" inlet="a2"/>
      </net>
      <net>
         <source obj="vcaST_2" outlet="o2"/>
         <dest obj="+_6" inlet="in2"/>
      </net>
      <net>
         <source obj="+_1" outlet="out"/>
         <dest obj="MikeWatt" inlet="Lgrainecho"/>
      </net>
      <net>
         <source obj="xyx_1" outlet="granulatorR"/>
         <dest obj="follower_2" inlet="in"/>
         <dest obj="vca_2" inlet="a"/>
      </net>
      <net>
         <source obj="vcaST_5" outlet="o2"/>
         <dest obj="sum3_2" inlet="in1"/>
      </net>
      <net>
         <source obj="vca_2" outlet="o"/>
         <dest obj="vcaST_5" inlet="a2"/>
         <dest obj="+_7" inlet="in1"/>
         <dest obj="+_8" inlet="in1"/>
      </net>
      <net>
         <source obj="vcaST_6" outlet="o2"/>
         <dest obj="+_5" inlet="in2"/>
      </net>
      <net>
         <source obj="+_7" outlet="out"/>
         <dest obj="vcaST_6" inlet="a2"/>
      </net>
      <net>
         <source obj="1_1" outlet="v2"/>
         <dest obj="+_7" inlet="in2"/>
      </net>
      <net>
         <source obj="xyx_1" outlet="grainechoR"/>
         <dest obj="1_1" inlet="a2"/>
      </net>
      <net>
         <source obj="1_1" outlet="b2"/>
         <dest obj="vcaST_9" inlet="a2"/>
         <dest obj="+_8" inlet="in2"/>
      </net>
      <net>
         <source obj="+_8" outlet="out"/>
         <dest obj="MikeWatt" inlet="Rgrainecho"/>
      </net>
      <net>
         <source obj="vcaST_9" outlet="o2"/>
         <dest obj="sum3_2" inlet="in3"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v47"/>
         <dest obj="dial_63" inlet="in"/>
         <dest obj="xyx_1" inlet="Rdelay"/>
      </net>
      <net>
         <source obj="interp_1" outlet="o"/>
         <dest obj="xyx_1" inlet="grainecho"/>
      </net>
      <net>
         <source obj="2_1" outlet="v1"/>
         <dest obj="+_4" inlet="in1"/>
      </net>
      <net>
         <source obj="2_1" outlet="v2"/>
         <dest obj="+_5" inlet="in1"/>
      </net>
      <net>
         <source obj="2_1" outlet="b1"/>
         <dest obj="sum3_1" inlet="in2"/>
      </net>
      <net>
         <source obj="2_1" outlet="b2"/>
         <dest obj="sum3_2" inlet="in2"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v41"/>
         <dest obj="bool_5" inlet="in"/>
         <dest obj="xyx_1" inlet="stereodis"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v43"/>
         <dest obj="bool_7" inlet="in"/>
         <dest obj="xyx_1" inlet="stereooct"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v40"/>
         <dest obj="bool_4" inlet="in"/>
         <dest obj="xyx_1" inlet="stereorev"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v39"/>
         <dest obj="bool_3" inlet="in"/>
         <dest obj="xyx_1" inlet="stereoshuff"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v38"/>
         <dest obj="bool_2" inlet="in"/>
         <dest obj="xyx_1" inlet="stereospray"/>
      </net>
      <net>
         <source obj="+_6" outlet="out"/>
         <dest obj="out_1" inlet="right"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v42"/>
         <dest obj="bool_6" inlet="in"/>
         <dest obj="xyx_1" inlet="stereoPspray"/>
      </net>
      <net>
         <source obj="+_2" outlet="out"/>
         <dest obj="out_1" inlet="left"/>
      </net>
      <net>
         <source obj="follower_2" outlet="amp"/>
         <dest obj="gain_2" inlet="in"/>
      </net>
      <net>
         <source obj="gain_2" outlet="out"/>
         <dest obj="comp_2" inlet="in"/>
      </net>
      <net>
         <source obj="comp_2" outlet="out"/>
         <dest obj="*_3" inlet="b"/>
      </net>
      <net>
         <source obj="*_3" outlet="result"/>
         <dest obj="vca_2" inlet="v"/>
         <dest obj="dial_92" inlet="in"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v4"/>
         <dest obj="dial_11" inlet="in"/>
         <dest obj="xyx_1" inlet="pitch"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v51"/>
         <dest obj="dial_47" inlet="in"/>
         <dest obj="xyx_1" inlet="panprob"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v52"/>
         <dest obj="bool_10" inlet="in"/>
         <dest obj="xyx_1" inlet="randompan"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v50"/>
         <dest obj="bool_9" inlet="in"/>
         <dest obj="xyx_1" inlet="panmode"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v49"/>
         <dest obj="dial_45" inlet="in"/>
         <dest obj="xyx_1" inlet="width"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v48"/>
         <dest obj="smooth_1" inlet="in"/>
         <dest obj="dial_53" inlet="in"/>
      </net>
      <net>
         <source obj="smooth_1" outlet="out"/>
         <dest obj="xyx_1" inlet="GEwidth"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v46"/>
         <dest obj="dial_64" inlet="in"/>
         <dest obj="xyx_1" inlet="Rcorrupttime"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v45"/>
         <dest obj="bool_8" inlet="in"/>
         <dest obj="xyx_1" inlet="stereocorrupt"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v44"/>
         <dest obj="dial_62" inlet="in"/>
         <dest obj="xyx_1" inlet="Roctavespeed"/>
      </net>
      <net>
         <source obj="or_7" outlet="o"/>
         <dest obj="xyx_1" inlet="trigger"/>
      </net>
      <net>
         <source obj="toggle_14" outlet="o"/>
         <dest obj="tablewrite_1" inlet="v15"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v15"/>
         <dest obj="xyx_1" inlet="shuffledirection"/>
      </net>
      <net>
         <source obj="toggle_8" outlet="o"/>
         <dest obj="tablewrite_1" inlet="v38"/>
      </net>
      <net>
         <source obj="toggle_5" outlet="o"/>
         <dest obj="tablewrite_1" inlet="v39"/>
      </net>
      <net>
         <source obj="toggle_4" outlet="o"/>
         <dest obj="tablewrite_1" inlet="v40"/>
      </net>
      <net>
         <source obj="toggle_2" outlet="o"/>
         <dest obj="tablewrite_1" inlet="v41"/>
      </net>
      <net>
         <source obj="toggle_9" outlet="o"/>
         <dest obj="tablewrite_1" inlet="v42"/>
      </net>
      <net>
         <source obj="toggle_3" outlet="o"/>
         <dest obj="tablewrite_1" inlet="v43"/>
      </net>
      <net>
         <source obj="toggle_12" outlet="o"/>
         <dest obj="tablewrite_1" inlet="v45"/>
      </net>
      <net>
         <source obj="1_____" outlet="o"/>
         <dest obj="tablewrite_1" inlet="v48"/>
      </net>
      <net>
         <source obj="1____" outlet="o"/>
         <dest obj="tablewrite_1" inlet="v49"/>
      </net>
      <net>
         <source obj="toggle_11" outlet="o"/>
         <dest obj="tablewrite_1" inlet="v50"/>
      </net>
      <net>
         <source obj="dial_12" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v51"/>
      </net>
      <net>
         <source obj="toggle_10" outlet="o"/>
         <dest obj="tablewrite_1" inlet="v52"/>
      </net>
      <net>
         <source obj="dial_40" outlet="out"/>
         <dest obj="1____" inlet="i"/>
      </net>
      <net>
         <source obj="dial_38" outlet="out"/>
         <dest obj="1_____" inlet="i"/>
      </net>
      <net>
         <source obj="boss" outlet="sdsave"/>
         <dest obj="or_1" inlet="i1"/>
      </net>
      <net>
         <source obj="1_15" outlet="start"/>
         <dest obj="or_7" inlet="i2"/>
         <dest obj="kbeat_1" inlet="trig"/>
      </net>
      <net>
         <source obj="vcaST_3" outlet="o2"/>
         <dest obj="+_6" inlet="in1"/>
      </net>
      <net>
         <source obj="audio_1" outlet="right"/>
         <dest obj="vcaST_3" inlet="a2"/>
         <dest obj="MikeWatt" inlet="Rin"/>
      </net>
      <net>
         <source obj="hp_1" outlet="outL"/>
         <dest obj="MikeWatt" inlet="LFback"/>
      </net>
      <net>
         <source obj="hp_1" outlet="outR"/>
         <dest obj="MikeWatt" inlet="RFback"/>
      </net>
      <net>
         <source obj="sum3_2" outlet="out"/>
         <dest obj="hp_1" inlet="inR"/>
      </net>
      <net>
         <source obj="sum3_1" outlet="out"/>
         <dest obj="hp_1" inlet="inL"/>
      </net>
      <net>
         <source obj="1_15" outlet="bpm"/>
         <dest obj="i_1" inlet="in"/>
      </net>
      <net>
         <source obj="loadbang_1" outlet="pulse"/>
         <dest obj="tablewrite_1" inlet="writeall"/>
      </net>
      <net>
         <source obj="dial_41" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v44"/>
      </net>
      <net>
         <source obj="dial_42" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v47"/>
      </net>
      <net>
         <source obj="dial_43" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v46"/>
      </net>
      <net>
         <source obj="button_2" outlet="o"/>
         <dest obj="audio_1" inlet="detect"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v35"/>
         <dest obj="dial_57" inlet="in"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v36"/>
         <dest obj="dial_58" inlet="in"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v37"/>
         <dest obj="dial_60" inlet="in"/>
      </net>
      <net>
         <source obj="toggle_13" outlet="o"/>
         <dest obj="or_2" inlet="i1"/>
      </net>
      <net>
         <source obj="toggle_7" outlet="o"/>
         <dest obj="or_4" inlet="i1"/>
      </net>
      <net>
         <source obj="button_4" outlet="o"/>
         <dest obj="or_8" inlet="i1"/>
      </net>
      <net>
         <source obj="button_3" outlet="o"/>
         <dest obj="or_6" inlet="i1"/>
         <dest obj="bool_12" inlet="in"/>
      </net>
      <net>
         <source obj="toggle_15" outlet="o"/>
         <dest obj="tablewrite_1" inlet="v26"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v26"/>
         <dest obj="bool_11" inlet="in"/>
         <dest obj="MikeWatt" inlet="swapFbackCh"/>
      </net>
      <net>
         <source obj="dial_80" outlet="out"/>
         <dest obj="1___" inlet="i"/>
      </net>
      <net>
         <source obj="dial_66" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v31"/>
      </net>
      <net>
         <source obj="1___" outlet="o"/>
         <dest obj="tablewrite_1" inlet="v32"/>
      </net>
      <net>
         <source obj="i_18" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v33"/>
      </net>
      <net>
         <source obj="dial_79" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v34"/>
      </net>
      <net>
         <source obj="MikeWatt" outlet="phase"/>
         <dest obj="dial_68" inlet="in"/>
      </net>
      <net>
         <source obj="xyx_1" outlet="grainphase"/>
         <dest obj="dial_69" inlet="in"/>
      </net>
      <net>
         <source obj="dial_77" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v53"/>
      </net>
      <net>
         <source obj="i_24" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v55"/>
      </net>
      <net>
         <source obj="&lt;&lt;_2" outlet="out"/>
         <dest obj="kbeat_1" inlet="length"/>
         <dest obj="kbeat_2" inlet="length"/>
      </net>
      <net>
         <source obj="kbeat_1" outlet="out"/>
         <dest obj="smooth_3" inlet="in"/>
      </net>
      <net>
         <source obj="smooth_3" outlet="out"/>
         <dest obj="dial_6" inlet="in"/>
         <dest obj="tableread_1" inlet="LFOa"/>
      </net>
      <net>
         <source obj="i_20" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v56"/>
      </net>
      <net>
         <source obj="1_________" outlet="o"/>
         <dest obj="tablewrite_1" inlet="v57"/>
      </net>
      <net>
         <source obj="i_21" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v58"/>
      </net>
      <net>
         <source obj="toggle_16" outlet="o"/>
         <dest obj="tableread_1" inlet="quantize"/>
      </net>
      <net>
         <source obj="i_22" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v60"/>
      </net>
      <net>
         <source obj="1___________" outlet="o"/>
         <dest obj="tablewrite_1" inlet="v61"/>
      </net>
      <net>
         <source obj="i_23" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v62"/>
      </net>
      <net>
         <source obj="1____________" outlet="o"/>
         <dest obj="tablewrite_1" inlet="v63"/>
      </net>
      <net>
         <source obj="dial_94" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v54"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v53"/>
         <dest obj="dial_98" inlet="in"/>
         <dest obj="kbeat_1" inlet="time"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v54"/>
         <dest obj="dial_99" inlet="in"/>
         <dest obj="kbeat_1" inlet="pulsewidth"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v55"/>
         <dest obj="i_17" inlet="in"/>
         <dest obj="kbeat_1" inlet="wave"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v56"/>
         <dest obj="i_11" inlet="in"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v57"/>
         <dest obj="dial_93" inlet="in"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v58"/>
         <dest obj="i_13" inlet="in"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v59"/>
         <dest obj="dial_95" inlet="in"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v60"/>
         <dest obj="i_14" inlet="in"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v61"/>
         <dest obj="dial_96" inlet="in"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v62"/>
         <dest obj="i_16" inlet="in"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v63"/>
         <dest obj="dial_97" inlet="in"/>
      </net>
      <net>
         <source obj="dial_88" outlet="out"/>
         <dest obj="1_________" inlet="i"/>
      </net>
      <net>
         <source obj="dial_89" outlet="out"/>
         <dest obj="1__________" inlet="i"/>
      </net>
      <net>
         <source obj="dial_90" outlet="out"/>
         <dest obj="1___________" inlet="i"/>
      </net>
      <net>
         <source obj="dial_91" outlet="out"/>
         <dest obj="1____________" inlet="i"/>
      </net>
      <net>
         <source obj="toggle_17" outlet="o"/>
         <dest obj="boss" inlet="autosave"/>
      </net>
      <net>
         <source obj="*c_2" outlet="out"/>
         <dest obj="smooth_4" inlet="in"/>
      </net>
      <net>
         <source obj="smooth_4" outlet="out"/>
         <dest obj="interp_3" inlet="i"/>
      </net>
      <net>
         <source obj="interp_3" outlet="o"/>
         <dest obj="xyx_1" inlet="buffermod"/>
         <dest obj="xyx_1" inlet="grainmod"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v64"/>
         <dest obj="dial_103" inlet="in"/>
         <dest obj="kbeat_2" inlet="time"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v65"/>
         <dest obj="dial_67" inlet="in"/>
         <dest obj="kbeat_2" inlet="pulsewidth"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v66"/>
         <dest obj="i_9" inlet="in"/>
         <dest obj="kbeat_2" inlet="wave"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v67"/>
         <dest obj="dial_102" inlet="in"/>
         <dest obj="*c_2" inlet="in"/>
      </net>
      <net>
         <source obj="dial_107" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v67"/>
      </net>
      <net>
         <source obj="kbeat_2" outlet="out"/>
         <dest obj="smooth_6" inlet="in"/>
      </net>
      <net>
         <source obj="smooth_6" outlet="out"/>
         <dest obj="dial_78" inlet="in"/>
         <dest obj="tableread_1" inlet="LFOb"/>
      </net>
      <net>
         <source obj="dial_84" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v64"/>
      </net>
      <net>
         <source obj="dial_108" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v65"/>
      </net>
      <net>
         <source obj="i_25" outlet="out"/>
         <dest obj="tablewrite_1" inlet="v66"/>
      </net>
      <net>
         <source obj="boss" outlet="preset"/>
         <dest obj="i_3" inlet="in"/>
      </net>
      <net>
         <source obj="xyx_1" outlet="delayphase"/>
         <dest obj="dial_74" inlet="in"/>
      </net>
      <net>
         <source obj="xyx_1" outlet="grainlength"/>
         <dest obj="i_10" inlet="in"/>
      </net>
      <net>
         <source obj="dial_81" outlet="out"/>
         <dest obj="xyx_1" inlet="panwidth"/>
      </net>
      <net>
         <source obj="1__________" outlet="o"/>
         <dest obj="tablewrite_1" inlet="v59"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
      <MidiChannel>1</MidiChannel>
      <NPresets>0</NPresets>
      <NPresetEntries>0</NPresetEntries>
      <NModulationSources>0</NModulationSources>
      <NModulationTargetsPerSource>0</NModulationTargetsPerSource>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>-8</x>
      <y>-8</y>
      <width>1616</width>
      <height>876</height>
   </windowPos>
</patch-1.0>