<patch-1.0 appVersion="1.0.12">
   <patchobj type="patch/object" uuid="617ff734-cd42-46eb-b242-1992d00a125b" name="square_3" x="112" y="658">
      <params>
         <frac32.s.map name="pitch" value="2.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="617ff734-cd42-46eb-b242-1992d00a125b">
         <sDescription>square wave LFO, boolean output, frequency input</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>lfo.axh</helpPatch>
         <inlets>
            <frac32.bipolar name="pitch" description="pitch"/>
            <bool32.rising name="reset" description="reset phase"/>
         </inlets>
         <outlets>
            <bool32 name="wave" description="square wave"/>
            <frac32 name="phs"/>
            <frac32 name="rate"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.lfopitch name="pitch" noLabel="true"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t Phase;
uint32_t r;]]></code.declaration>
         <code.init><![CDATA[Phase = 0;
   r = 1;]]></code.init>
         <code.krate><![CDATA[{
      if (inlet_reset && r) {
         Phase = 0;
         r = 0;
      } else {
         if (!inlet_reset) r = 1;
         int32_t freq;
         MTOFEXTENDED(param_pitch + inlet_pitch,freq);
         Phase += freq>>2;
      }
      outlet_wave= (Phase>0)?1:0;
      outlet_phs=(uint32_t)Phase>>5;
      outlet_rate=param_pitch+inlet_pitch;
   }]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="0c207e28-cc92-42d3-9acc-a441f9edc44e" name="counter_19" x="210" y="658">
      <params>
         <int32 name="maximum" value="16"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="0c207e28-cc92-42d3-9acc-a441f9edc44e">
         <sDescription>cyclic up counter</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>counter.axh</helpPatch>
         <inlets>
            <bool32.rising name="trig" description="trigger"/>
         </inlets>
         <outlets>
            <int32 name="o" description="output"/>
            <int32 name="max"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="maximum" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="65536"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
   int rtrig;
   int count;]]></code.declaration>
         <code.init><![CDATA[count=-1;
   ntrig = 0;
   rtrig = 0;]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig>0) && !ntrig) {
   count += 1; if (count>=param_maximum) {count = 0;}
   ntrig=1;
}
else if (!(inlet_trig>0)) ntrig=0;

outlet_o= count;
outlet_max=param_maximum;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="0c207e28-cc92-42d3-9acc-a441f9edc44e" name="counter_13" x="280" y="658">
      <params>
         <int32 name="maximum" value="32"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="0c207e28-cc92-42d3-9acc-a441f9edc44e">
         <sDescription>cyclic up counter</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>counter.axh</helpPatch>
         <inlets>
            <bool32.rising name="trig" description="trigger"/>
         </inlets>
         <outlets>
            <int32 name="o" description="output"/>
            <bool32.pulse name="c" description="carry pulse"/>
            <int32 name="max"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="maximum" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="65536"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
   int rtrig;
   int count;]]></code.declaration>
         <code.init><![CDATA[count=-1;
   ntrig = 0;
   rtrig = 0;]]></code.init>
         <code.krate><![CDATA[outlet_c=0;
if ((inlet_trig>0) && !ntrig) {
   count += 1; if (count>=param_maximum) {count = 0; outlet_c = 1;}
   ntrig=1;
}
else if (!(inlet_trig>0)) ntrig=0;

outlet_o= count;
outlet_max=param_maximum;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="0c207e28-cc92-42d3-9acc-a441f9edc44e" name="counter_16" x="350" y="658">
      <params>
         <int32 name="maximum" value="64"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="0c207e28-cc92-42d3-9acc-a441f9edc44e">
         <sDescription>cyclic up counter</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>counter.axh</helpPatch>
         <inlets>
            <bool32.rising name="trig" description="trigger"/>
            <bool32.rising name="r" description="reset"/>
         </inlets>
         <outlets>
            <int32 name="o" description="output"/>
            <bool32.pulse name="c" description="carry pulse"/>
            <int32 name="max"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="maximum" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="65536"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
   int rtrig;
   int count;]]></code.declaration>
         <code.init><![CDATA[count=-1;
   ntrig = 0;
   rtrig = 0;]]></code.init>
         <code.krate><![CDATA[outlet_c=0;
if ((inlet_trig>0) && !ntrig) {
   count += 1; if (count>=param_maximum) {count = 0; outlet_c = 1;}
   ntrig=1;
}
else if (!(inlet_trig>0)) ntrig=0;
if ((inlet_r>0) && !rtrig) {count=0; rtrig = 1;outlet_c=1;}
else if (!(inlet_r>0)) rtrig=0;
outlet_o= count;
outlet_max=param_maximum;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="0c207e28-cc92-42d3-9acc-a441f9edc44e" name="counter_17" x="448" y="658">
      <params>
         <int32 name="maximum" value="4"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="0c207e28-cc92-42d3-9acc-a441f9edc44e">
         <sDescription>cyclic up counter</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>counter.axh</helpPatch>
         <inlets>
            <bool32.rising name="trig" description="trigger"/>
            <bool32.rising name="r" description="reset"/>
         </inlets>
         <outlets>
            <int32 name="o" description="output"/>
            <bool32.pulse name="c" description="carry pulse"/>
            <int32 name="max"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="maximum" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="65536"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
   int rtrig;
   int count;]]></code.declaration>
         <code.init><![CDATA[count=0;
   ntrig = 0;
   rtrig = 0;]]></code.init>
         <code.krate><![CDATA[outlet_c=0;
if ((inlet_trig>0) && !ntrig) {
   count += 1; if (count>=param_maximum) {count = 0; outlet_c = 1;}
   ntrig=1;
}
else if (!(inlet_trig>0)) ntrig=0;
if ((inlet_r>0) && !rtrig) {count=0; rtrig = 1;outlet_c=1;}
else if (!(inlet_r>0)) rtrig=0;
outlet_o= count;
outlet_max=param_maximum;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="0c207e28-cc92-42d3-9acc-a441f9edc44e" name="counter_18" x="546" y="658">
      <params>
         <int32 name="maximum" value="4"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="0c207e28-cc92-42d3-9acc-a441f9edc44e">
         <sDescription>cyclic up counter</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>counter.axh</helpPatch>
         <inlets>
            <bool32.rising name="trig" description="trigger"/>
            <bool32.rising name="r" description="reset"/>
         </inlets>
         <outlets>
            <bool32.pulse name="c" description="carry pulse"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="maximum" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="65536"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
   int rtrig;
   int count;]]></code.declaration>
         <code.init><![CDATA[count=0;
   ntrig = 0;
   rtrig = 0;]]></code.init>
         <code.krate><![CDATA[outlet_c=0;
if ((inlet_trig>0) && !ntrig) {
   count += 1; if (count>=param_maximum) {count = 0; outlet_c = 1;}
   ntrig=1;
}
else if (!(inlet_trig>0)) ntrig=0;
if ((inlet_r>0) && !rtrig) {count=0; rtrig = 1;outlet_c=1;}
else if (!(inlet_r>0)) rtrig=0;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="87e6d53c-c20f-4830-8756-2464ff9dd4ae" name="alloc_2" x="644" y="658">
      <params>
         <int32 name="maxA" value="1"/>
         <int32 name="minA" value="0"/>
         <frac32.u.map name="arpChanges" value="0.0"/>
         <frac32.u.map name="aStepChange" value="16.0"/>
         <frac32.u.map name="baseChanges" value="64.0"/>
         <frac32.u.map name="bStepChange" value="26.0"/>
         <int32 name="maxB" value="7"/>
         <int32 name="minB" value="0"/>
         <int32.hradio name="end" value="4"/>
         <bool32.tgl name="pre" value="1"/>
         <bool32.tgl name="octaver" value="0"/>
         <bool32.tgl name="limit" value="0"/>
         <bool32.tgl name="first0" value="1"/>
      </params>
      <attribs>
         <combo attributeName="size" selection="64"/>
         <objref attributeName="scale" obj="scale"/>
      </attribs>
      <object id="patch/object" uuid="87e6d53c-c20f-4830-8756-2464ff9dd4ae">
         <sDescription>allocate table in SDRAM memory, -128..127</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>table.axh</helpPatch>
         <inlets>
            <int32 name="cntArp"/>
            <int32 name="maxArp"/>
            <int32 name="cntBase"/>
            <int32 name="maxBase"/>
            <int32 name="cntNxt"/>
            <int32 name="maxNxt"/>
            <bool32 name="rnd"/>
         </inlets>
         <outlets>
            <int32 name="note"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="maxA">
               <MinValue i="1"/>
               <MaxValue i="24"/>
            </int32>
            <int32 name="minA">
               <MinValue i="-24"/>
               <MaxValue i="0"/>
            </int32>
            <frac32.u.map.gain name="arpChanges"/>
            <frac32.u.map.gain name="aStepChange"/>
            <frac32.u.map.gain name="baseChanges"/>
            <frac32.u.map.gain name="bStepChange"/>
            <int32 name="maxB">
               <MinValue i="1"/>
               <MaxValue i="24"/>
            </int32>
            <int32 name="minB">
               <MinValue i="-24"/>
               <MaxValue i="0"/>
            </int32>
            <int32.hradio name="end">
               <MaxValue i="8"/>
            </int32.hradio>
            <bool32.tgl name="pre"/>
            <bool32.tgl name="octaver"/>
            <bool32.tgl name="limit"/>
            <bool32.tgl name="first0"/>
         </params>
         <attribs>
            <combo name="size">
               <MenuEntries>
                  <string>2</string>
                  <string>4</string>
                  <string>8</string>
                  <string>16</string>
                  <string>32</string>
                  <string>64</string>
                  <string>128</string>
                  <string>256</string>
                  <string>512</string>
                  <string>1024</string>
                  <string>2048</string>
                  <string>4096</string>
                  <string>8192</string>
                  <string>16384</string>
                  <string>32768</string>
                  <string>65536</string>
                  <string>131072</string>
                  <string>262144</string>
                  <string>524288</string>
                  <string>1048576</string>
                  <string>2097152</string>
                  <string>4194304</string>
               </MenuEntries>
               <CEntries>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>4</string>
                  <string>5</string>
                  <string>6</string>
                  <string>7</string>
                  <string>8</string>
                  <string>9</string>
                  <string>10</string>
                  <string>11</string>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
                  <string>16</string>
                  <string>17</string>
                  <string>18</string>
                  <string>19</string>
                  <string>20</string>
                  <string>21</string>
                  <string>22</string>
               </CEntries>
            </combo>
            <objref name="scale"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
static const uint32_t BITS = 8;
static const uint32_t GAIN = 20;
int8_t *array;
int rnd,DO=1;]]></code.declaration>
         <code.init><![CDATA[static int8_t _array[LENGTH<<1] __attribute__ ((section (".sdram")));
array = &_array[0];]]></code.init>
         <code.krate><![CDATA[if((inlet_rnd||DO)&&!rnd)
{
	rnd=1;
	DO=0;
	array[0]=0;
	int32_t tmp=0;
	int ptmp1=0;
	int force=0;
	int oct=0;
	for(int i=1;i<LENGTH;i++)
	{

		ptmp1=tmp;
		if(((GenerateRandomNumber()>>1)>=param_arpChanges)&&(!force))
		{
			tmp=0;
			oct=0;
		}
		else
		{
			if(((GenerateRandomNumber()>>1)<param_aStepChange)||force||(tmp==0))
			{
				tmp=((int32_t)(GenerateRandomNumber()&3));
				tmp=tmp+(tmp==2?1:0)-2<<1;
				force=0;
				oct=(((int32_t)(GenerateRandomNumber())%3)-1)*7;//octaving
			}
		}
		if(i&1)
		{
			if((tmp>0)&&(ptmp1==0))
			{
				force=1;
			}
			
		}
		int trp;
		trp=array[i-1]+tmp;
		if(param_limit)
		{
			trp=((trp+14)%29)-14;
			trp=trp>7?14-trp:trp;
			trp=trp<-7?-14-trp:trp;
		}
		array[i]=trp+oct*param_octaver;
	}
	array[LENGTH]=0;
	
	tmp=0;
	oct=0;
	for(int i=1;i<LENGTH;i++)
	{
		int k=i+LENGTH;
		
		
		if((GenerateRandomNumber()>>1)>=param_baseChanges)
		{
			tmp=0;
			oct=0;
		}
		else
		{
			if(((GenerateRandomNumber()>>1)<param_bStepChange)||(tmp==0))
			{
				tmp=((int32_t)(GenerateRandomNumber())&3);
				tmp=tmp+(tmp==2?1:0)-2<<1;
				//tmp+=((int32_t)(GenerateRandomNumber())%2)*7;//octaving
				oct=(((int32_t)(GenerateRandomNumber())%3)-1)*7;//octaving
			}
		}
		array[k]=array[k-1]+tmp+oct*param_octaver;
	}
}
else if(!inlet_rnd){rnd=0;}

int cntArp=inlet_maxArp-1-inlet_cntArp;
int cntBase=inlet_maxBase-1-inlet_cntBase;

int nt=array[cntArp];
int cur=array[cntBase+LENGTH];

if((inlet_cntArp==0)&&(param_first0))
{
	nt=0;
}
if((inlet_cntBase==0)&&(param_first0))
{
	cur=0;
}

cur=cur>inlet_cntBase?inlet_cntBase:cur;
cur=cur<-inlet_cntBase?-inlet_cntBase:cur;
int nxt=cntBase-1;
nxt=nxt<0?inlet_maxBase+nxt:nxt;
nxt=array[nxt+LENGTH];
cur=cur+(((nxt-cur)*__USAT(inlet_cntNxt-(param_end>0?(inlet_maxNxt*((1<<param_end)-1)>>param_end):0)<<param_end,27))/inlet_maxNxt);

if(param_pre)
{
	nt+=cur;
}
int dif=param_maxA-param_minA<<1;
nt*=4;
nt=((nt-(param_minA<<1)+dif*1000)%dif)+param_minA;
nt=(nt>0?nt:-nt)+param_minA;
nt=nt>=param_maxA?(param_maxA<<1)-nt:nt;





	dif=param_maxB-param_minB<<1;
	cur=((cur-(param_minB<<1)+dif*1000)%dif)+param_minB;
	cur=(cur>0?cur:-cur)+param_minB;
	cur=cur>=param_maxB?(param_maxB<<1)-cur:cur;
	if(!param_pre)
	{
	nt+=cur;
	}

outlet_note=attr_scale.note[(nt+700)%7]+((nt+700)/7-100)*12;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="0c19dcf9-87cc-48ad-b779-57affee3123d" name="scale" x="980" y="798">
      <params>
         <bin12 name="scale" value="2741"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="0c19dcf9-87cc-48ad-b779-57affee3123d">
         <inlets/>
         <outlets/>
         <displays/>
         <params>
            <bin12 name="scale"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int DO=1;
int note[7];
uint32_t prv=0;]]></code.declaration>
         <code.init><![CDATA[DO=1;]]></code.init>
         <code.krate><![CDATA[if(DO>0)
{
	DO=0;
	int index=0;
	for(int i=0;i<12;i++)
	{
		
		if((param_scale>>i)&1)
		{
			note[index]=i;
			index+=1;
			prv+=1<<i;
		}
	}
}

if(!(prv==param_scale))
{
	int index=0;
	for(int i=0;i<12;i++)
	{
		
		if((param_scale>>i)&1)
		{
			note[index]=i;
			index+=1;
			prv+=1<<i;
			
		}
		if(index>6){break;}
	}
}]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="837d1ace-671b-41d5-af1f-9496b695b2a4" name="tremelo_1" x="84" y="1176">
      <params>
         <frac32.s.map name="d" value="0.0"/>
         <int32 name="maxhrm" value="8"/>
         <frac32.u.map name="chance" value="6.5"/>
         <int32 name="maxwidth" value="7"/>
         <bool32.tgl name="hanningORsine" value="0"/>
         <int32 name="maxSlowOct" value="4"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="837d1ace-671b-41d5-af1f-9496b695b2a4">
         <sDescription>decay envelope, linear ramp</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>env.axh</helpPatch>
         <inlets>
            <frac32 name="trig"/>
            <frac32 name="rate"/>
         </inlets>
         <outlets>
            <frac32.positive name="env" description="envelope output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.klineartime.exp name="d" noLabel="true"/>
            <int32 name="maxhrm">
               <MinValue i="1"/>
               <MaxValue i="16"/>
            </int32>
            <frac32.u.map.gain name="chance"/>
            <int32 name="maxwidth">
               <MinValue i="1"/>
               <MaxValue i="14"/>
            </int32>
            <bool32.tgl name="hanningORsine"/>
            <int32 name="maxSlowOct">
               <MinValue i="0"/>
               <MaxValue i="4"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t val;
int ntrig;
int hrm,size,mod,slow;
int lim=0;]]></code.declaration>
         <code.init><![CDATA[val = 0;
ntrig = 0;
hrm=1;
size=1;
mod=0;
slow=0;]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig > 0)&&(val==0) && !ntrig)
{
	if((GenerateRandomNumber()>>1)<param_chance)
	{
  		val = 1 << 27;
  		hrm=(GenerateRandomNumber()%param_maxhrm)+1;
  		size=(GenerateRandomNumber()%param_maxwidth)+1;
  		mod=(GenerateRandomNumber()%15);
  		lim=GenerateRandomNumber()&1;
  		slow=(GenerateRandomNumber()%(param_maxSlowOct+1));
	}
  ntrig = 1;
}
else {
  if (!(inlet_trig > 0))
    ntrig = 0;
  int32_t t;
  MTOF(-param_d+inlet_rate,t);
  val -= t>>6+slow;
  if (val < 0)
    val = 0;
}
int32_t r;
uint64_t phs=val;
if(lim)
{
	phs=phs>(1<<26)?(1<<26):phs;
}
if(mod>4)
{
if(mod>9)
{
	phs=(1<<27)-1-phs;
}
phs=__USAT(___SMMUL(phs<<3,phs<<2),27);

if(mod>9)
{
	phs=(1<<27)-1-phs;
}
}
phs*=hrm;
int hm=phs>>27;
hm=hm*size/hrm;
if(!param_hanningORsine)
{
	HANNING2TINTERP((uint32_t)phs<<5,r)
	//HANNING2TINTERP(r,r)
}
else
{
	SINE2TINTERP((uint32_t)phs<<5,r)
	//SINE2TINTERP(r>>1,r)
}
int sz=size;
//hm=sz>hm?hm:sz;
switch(mod%5)
{
	case 1:sz=hm;break;
	case 2:sz=hrm-hm-1;break;
	case 3:sz=hm-(hrm-1>>1);sz=sz>0?sz:1-sz;break;
	case 4:sz=hm-(hrm-1>>1);sz=(hrm>>1)-(sz>0?sz:1-sz);break;
}
sz=sz>size?size:sz;
outlet_env = (r/14>>4)*sz;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="0c207e28-cc92-42d3-9acc-a441f9edc44e" name="counter_14" x="196" y="1176">
      <params>
         <int32 name="maximum" value="16"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="0c207e28-cc92-42d3-9acc-a441f9edc44e">
         <sDescription>cyclic up counter</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>counter.axh</helpPatch>
         <inlets>
            <bool32.rising name="trig" description="trigger"/>
            <bool32.rising name="r" description="reset"/>
         </inlets>
         <outlets>
            <int32 name="o" description="output"/>
            <bool32.pulse name="c" description="carry pulse"/>
            <int32 name="max"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="maximum" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="65536"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
   int rtrig;
   int count;]]></code.declaration>
         <code.init><![CDATA[count=0;
   ntrig = 0;
   rtrig = 0;]]></code.init>
         <code.krate><![CDATA[outlet_c=0;
if ((inlet_trig>0) && !ntrig) {
   count += 1; if (count>=param_maximum) {count = 0; outlet_c = 1;}
   ntrig=1;
}
else if (!(inlet_trig>0)) ntrig=0;
if ((inlet_r>0) && !rtrig) {count=0; rtrig = 1;outlet_c=1;}
else if (!(inlet_r>0)) rtrig=0;
outlet_o= count;
outlet_max=param_maximum;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="87e6d53c-c20f-4830-8756-2464ff9dd4ae" name="alloc_3" x="294" y="1176">
      <params>
         <int32 name="maxA" value="21"/>
         <int32 name="minA" value="0"/>
         <frac32.u.map name="arpChanges" value="20.5"/>
         <frac32.u.map name="aStepChange" value="28.0"/>
         <frac32.u.map name="baseChanges" value="20.0"/>
         <frac32.u.map name="bStepChange" value="29.5"/>
         <int32 name="maxB" value="7"/>
         <int32 name="minB" value="0"/>
         <int32.hradio name="end" value="3"/>
         <bool32.tgl name="pre" value="0"/>
         <bool32.tgl name="pendulum" value="0"/>
         <bool32.tgl name="octaver" value="0"/>
         <bool32.tgl name="limit" value="1"/>
         <bool32.tgl name="first0" value="1"/>
         <int32 name="range" value="2"/>
      </params>
      <attribs>
         <combo attributeName="size" selection="64"/>
         <objref attributeName="scale" obj="scale"/>
      </attribs>
      <object id="patch/object" uuid="87e6d53c-c20f-4830-8756-2464ff9dd4ae">
         <sDescription>allocate table in SDRAM memory, -128..127</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>table.axh</helpPatch>
         <inlets>
            <int32 name="cntArp"/>
            <int32 name="maxArp"/>
            <int32 name="cntBase"/>
            <int32 name="maxBase"/>
            <int32 name="cntNxt"/>
            <int32 name="maxNxt"/>
            <bool32 name="rnd"/>
            <int32 name="key"/>
            <frac32 name="mod"/>
         </inlets>
         <outlets>
            <frac32 name="note"/>
            <int32 name="base"/>
            <int32 name="cur"/>
            <bool32 name="trg"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="maxA">
               <MinValue i="1"/>
               <MaxValue i="35"/>
            </int32>
            <int32 name="minA">
               <MinValue i="-24"/>
               <MaxValue i="0"/>
            </int32>
            <frac32.u.map.gain name="arpChanges"/>
            <frac32.u.map.gain name="aStepChange"/>
            <frac32.u.map.gain name="baseChanges"/>
            <frac32.u.map.gain name="bStepChange"/>
            <int32 name="maxB">
               <MinValue i="1"/>
               <MaxValue i="24"/>
            </int32>
            <int32 name="minB">
               <MinValue i="-24"/>
               <MaxValue i="0"/>
            </int32>
            <int32.hradio name="end">
               <MaxValue i="8"/>
            </int32.hradio>
            <bool32.tgl name="pre"/>
            <bool32.tgl name="pendulum"/>
            <bool32.tgl name="octaver"/>
            <bool32.tgl name="limit"/>
            <bool32.tgl name="first0"/>
            <int32 name="range">
               <MinValue i="1"/>
               <MaxValue i="4"/>
            </int32>
         </params>
         <attribs>
            <combo name="size">
               <MenuEntries>
                  <string>2</string>
                  <string>4</string>
                  <string>8</string>
                  <string>16</string>
                  <string>32</string>
                  <string>64</string>
                  <string>128</string>
                  <string>256</string>
                  <string>512</string>
                  <string>1024</string>
                  <string>2048</string>
                  <string>4096</string>
                  <string>8192</string>
                  <string>16384</string>
                  <string>32768</string>
                  <string>65536</string>
                  <string>131072</string>
                  <string>262144</string>
                  <string>524288</string>
                  <string>1048576</string>
                  <string>2097152</string>
                  <string>4194304</string>
               </MenuEntries>
               <CEntries>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>4</string>
                  <string>5</string>
                  <string>6</string>
                  <string>7</string>
                  <string>8</string>
                  <string>9</string>
                  <string>10</string>
                  <string>11</string>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
                  <string>16</string>
                  <string>17</string>
                  <string>18</string>
                  <string>19</string>
                  <string>20</string>
                  <string>21</string>
                  <string>22</string>
               </CEntries>
            </combo>
            <objref name="scale"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
static const uint32_t BITS = 8;
static const uint32_t GAIN = 20;
int8_t *array;
int rnd,DO=1,t1;
int note[7]={0,1,3,4,7,8,11};]]></code.declaration>
         <code.init><![CDATA[static int8_t _array[LENGTH<<1] __attribute__ ((section (".sdram")));
array = &_array[0];]]></code.init>
         <code.krate><![CDATA[if((inlet_rnd||DO)&&!rnd)
{
	rnd=1;
	DO=0;
	array[0]=0;
	int32_t tmp=0;
	int ptmp1=0;
	int force=0;
	int oct=0;
	for(int i=1;i<LENGTH;i++)
	{

		ptmp1=tmp;
		if(((GenerateRandomNumber()>>1)>=param_arpChanges)&&(!force))
		{
			tmp=0;
			oct=0;
		}
		else
		{
			if(((GenerateRandomNumber()>>1)<param_aStepChange)||force||(tmp==0))
			{
				tmp=((int32_t)(GenerateRandomNumber()%8));
				tmp=tmp+(tmp==4?1:0)-4<<1;
				force=0;
				oct=(((int32_t)(GenerateRandomNumber())%3)-1)*7;//octaving
			}
		}
		if(i&1)
		{
			if((tmp>0)&&(ptmp1==0))
			{
				force=1;
			}
			
		}
		/*int trp=array[i-1]+tmp;
		if(param_limit)
		{
			int rng=param_range*7;
			int os=rng<<1;
			trp=((trp+os)%((os<<1)+1))-os;
			trp=trp>rng?os-trp:trp;
			trp=trp<-rng?-os-trp:trp;
		}*/
		array[i]=array[i-1]+tmp+oct*param_octaver;
	}
	array[LENGTH]=0;
	
	tmp=0;
	oct=0;
	for(int i=1;i<LENGTH;i++)
	{
		int k=i+LENGTH;
		
		
		if((GenerateRandomNumber()>>1)>=param_baseChanges)
		{
			tmp=0;
			oct=0;
		}
		else
		{
			if(((GenerateRandomNumber()>>1)<param_bStepChange)||(tmp==0))
			{
				tmp=((int32_t)(GenerateRandomNumber())&3);
				tmp=tmp+(tmp==2?1:0)-2<<1;
				//tmp+=((int32_t)(GenerateRandomNumber())%2)*7;//octaving
				oct=(((int32_t)(GenerateRandomNumber())%3)-1)*7;//octaving
			}
		}
		array[k]=array[k-1]+tmp+oct*param_octaver;
		
		/*int trp=array[k-1]+tmp;
		if(param_limit)
		{
			int rng=param_range*7;
			int os=rng<<1;
			trp=((trp+os)%((os<<1)+1))-os;
			trp=trp>rng?os-trp:trp;
			trp=trp<-rng?-os-trp:trp;
		}*/
		//array[k]=array[k-1]+tmp+oct*param_octaver;
		
	}
}
else if(!inlet_rnd){rnd=0;}

int cntArp=inlet_maxArp-1-inlet_cntArp;
int cntBase=inlet_maxBase-1-inlet_cntBase;

int nt=array[cntArp];

if((inlet_cntArp==0)&&(param_first0))
{
	nt=0;
}

int trp=nt;
if(param_limit)
{
	int rng=param_range*7;
	int os=rng<<1;
	trp+=os;

	trp=((trp)%((os<<1)+1));
	trp=(trp<0?trp+((os<<1)+1):trp)-os;
	trp=trp>rng?os-trp:trp;
	trp=trp<-rng?-os-trp:trp;
}
nt=trp;

if(param_pendulum)
{
	nt=nt>inlet_cntNxt?inlet_cntNxt:nt;
	nt=nt<-inlet_cntNxt?-inlet_cntNxt:nt;
}

int cur=array[cntBase+LENGTH];
if((inlet_cntBase==0)&&(param_first0))
{
	cur=0;
}
trp=cur;
if(param_limit)
{
	int rng=param_range*7;
	int os=rng<<1;
	trp+=os;

	trp=((trp)%((os<<1)+1));
	trp=(trp<0?trp+((os<<1)+1):trp)-os;
	trp=trp>rng?os-trp:trp;
	trp=trp<-rng?-os-trp:trp;
}
cur=trp;

if(param_pendulum)
{
	int Base=inlet_cntBase<<1;
	cur=cur>Base?Base:cur;
	cur=cur<-Base?-Base:cur;
}
int nxt=cntBase-1;
nxt=nxt<0?inlet_maxBase+nxt:nxt;
nxt=array[nxt+LENGTH];
cur=cur+(((nxt-cur)*__USAT(inlet_cntNxt-(param_end>0?(param_end>1?(inlet_maxNxt*3>>2):(inlet_maxNxt>>1)):0)<<param_end,27))/inlet_maxNxt);
if(param_pre)
{
	nt+=cur;
}
int dif=param_maxA-param_minA<<1;
nt=((nt-(param_minA<<1)+dif*1000)%dif)+param_minA;
nt=(nt>0?nt:-nt)+param_minA;
nt=nt>=param_maxA?(param_maxA<<1)-nt:nt;





	dif=param_maxB-param_minB<<1;
	cur=((cur-(param_minB<<1)+dif*1000)%dif)+param_minB;
	cur=(cur>0?cur:-cur)+param_minB;
	cur=cur>=param_maxB?(param_maxB<<1)-cur:cur;
	if(!param_pre)
	{
	nt+=cur;
	}



int32_t mod=__SSAT(inlet_mod,27);
int32_t a1,a2;
a1=(int64_t)a1*14>>27;
a2=a1+1;
mod=((uint32_t)mod*14<<5)>>1;
a1=(attr_scale.note[(nt+a1+700)%7]+((nt+a1+700)/7-100)*12+inlet_key<<21);
a2=(attr_scale.note[(nt+a2+700)%7]+((nt+a2+700)/7-100)*12+inlet_key<<21);
outlet_note=a1+___SMMUL(a2-a1<<1,mod);

outlet_base=attr_scale.note[(cur+700)%7]+((cur+700)/7-100)*12+inlet_key;

outlet_cur=cur;

if(!(t1==(nt+inlet_key)))
{
	outlet_trg=1;
}
else
{
	outlet_trg=0;
}
t1=nt+inlet_key;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="1f2a7619-bcad-46a8-8278-d0e574bcdadf" name="ad_5" x="462" y="1176">
      <params>
         <frac32.s.map name="a" value="-64.0"/>
         <frac32.s.map name="d" value="39.0"/>
         <frac32.u.map name="rndA" value="0.0"/>
         <frac32.u.map name="rndD" value="36.5"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="1f2a7619-bcad-46a8-8278-d0e574bcdadf">
         <sDescription>Attack/decay envelope, linear attack, exponential decay</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>env.axh</helpPatch>
         <inlets>
            <frac32 name="trig"/>
         </inlets>
         <outlets>
            <frac32.positive name="env" description="envelope output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.klineartime.exp name="a"/>
            <frac32.s.map.klineartime.exp name="d"/>
            <frac32.u.map.gain name="rndA"/>
            <frac32.u.map.gain name="rndD"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int8_t stage;
int ntrig;
int32_t val;
int32_t lvl,A,D;]]></code.declaration>
         <code.init><![CDATA[ntrig = 0;
val = 0;]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig>0) && !ntrig) {
   ntrig = 1;
   stage = 1;
   lvl=val+(___SMMUL((1<<27)-val,inlet_trig)<<5);
   A=(int32_t)(GenerateRandomNumber())>>4;
   D=(int32_t)(GenerateRandomNumber())>>4;
} else if (!(inlet_trig>0)) {
   ntrig = 0;
}
if (stage == 0){
	int32_t d;
	MTOF(-param_d+___SMMUL(param_rndD,D+param_d<<1),d)
   val -= ___SMMUL(val,d)>>2;
} else {
   int32_t t;
   MTOF(-param_a+___SMMUL(param_rndA,A+param_a<<1),t);
   val = val + (t>>3);
   if ((val<0)||(val>lvl)){
      val =lvl;
      stage = 0;
   }
}
outlet_env = val;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="837d1ace-671b-41d5-af1f-9496b695b2a4" name="tremelo_2" x="560" y="1176">
      <params>
         <frac32.s.map name="d" value="36.0"/>
         <int32 name="maxhrm" value="8"/>
         <frac32.u.map name="chance" value="11.5"/>
         <int32 name="maxwidth" value="8"/>
         <bool32.tgl name="hanningORsine" value="1"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="837d1ace-671b-41d5-af1f-9496b695b2a4">
         <sDescription>decay envelope, linear ramp</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>env.axh</helpPatch>
         <inlets>
            <frac32 name="trig"/>
            <frac32 name="rate"/>
         </inlets>
         <outlets>
            <frac32.positive name="env" description="envelope output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.klineartime.exp name="d" noLabel="true"/>
            <int32 name="maxhrm">
               <MinValue i="1"/>
               <MaxValue i="16"/>
            </int32>
            <frac32.u.map.gain name="chance"/>
            <int32 name="maxwidth">
               <MinValue i="1"/>
               <MaxValue i="14"/>
            </int32>
            <bool32.tgl name="hanningORsine"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t val;
int ntrig;
int hrm,size,mod;]]></code.declaration>
         <code.init><![CDATA[val = 0;
ntrig = 0;
hrm=1;
size=1;
mod=0;]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig > 0)&&(val==0) && !ntrig)
{
	if((GenerateRandomNumber()>>1)<param_chance)
	{
  		val = 1 << 27;
  		hrm=(GenerateRandomNumber()%param_maxhrm)+1;
  		size=(GenerateRandomNumber()%param_maxwidth)+1;
  		mod=(GenerateRandomNumber()%15);
	}
  ntrig = 1;
}
else {
  if (!(inlet_trig > 0))
    ntrig = 0;
  int32_t t;
  MTOF(-param_d+inlet_rate,t);
  val -= t>>6;
  if (val < 0)
    val = 0;
}
int32_t r;
uint64_t phs=val;
if(mod>4)
{
if(mod>9)
{
	phs=(1<<27)-1-phs;
}
phs=__USAT(___SMMUL(phs<<3,phs<<2),27);

if(mod>9)
{
	phs=(1<<27)-1-phs;
}
}
phs*=hrm;
int hm=phs>>27;
if(!param_hanningORsine)
{
	HANNING2TINTERP((uint32_t)phs<<5,r)
	HANNING2TINTERP(r,r)
}
else
{
	SINE2TINTERP((uint32_t)phs<<5,r)
	SINE2TINTERP(r>>1,r)
}
int sz=size;
//hm=sz>hm?hm:sz;
switch(mod%5)
{
	case 1:sz=hm;break;
	case 2:sz=hrm-hm-1;break;
	case 3:sz=hm-(hrm-1>>1);sz=sz>0?sz:1-sz;break;
	case 4:sz=hm-(hrm-1>>1);sz=(hrm>>1)-(sz>0?sz:1-sz);break;
}
outlet_env = (r/14>>4)*sz;]]></code.krate>
      </object>
   </patchobj>
   <obj type="mix/mix 3 g" uuid="120ea4967d52e3d5c98fd51fb38c424809d34f3b" name="mix_1" x="658" y="1176">
      <params>
         <frac32.u.map name="gain1" value="13.5"/>
         <frac32.u.map name="gain2" value="20.5"/>
         <frac32.u.map name="gain3" value="11.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="1f2a7619-bcad-46a8-8278-d0e574bcdadf" name="ad_2" x="756" y="1176">
      <params>
         <frac32.s.map name="a" value="-44.0"/>
         <frac32.s.map name="d" value="14.0"/>
         <frac32.u.map name="rndA" value="52.5"/>
         <frac32.u.map name="rndD" value="44.5"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="1f2a7619-bcad-46a8-8278-d0e574bcdadf">
         <sDescription>Attack/decay envelope, linear attack, exponential decay</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>env.axh</helpPatch>
         <inlets>
            <frac32 name="trig"/>
         </inlets>
         <outlets>
            <frac32.positive name="env" description="envelope output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.klineartime.exp name="a"/>
            <frac32.s.map.klineartime.exp name="d"/>
            <frac32.u.map.gain name="rndA"/>
            <frac32.u.map.gain name="rndD"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int8_t stage;
int ntrig;
int32_t val;
int32_t lvl,A,D;]]></code.declaration>
         <code.init><![CDATA[ntrig = 0;
val = 0;]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig>0) && !ntrig) {
   ntrig = 1;
   stage = 1;
   lvl=val+(___SMMUL((1<<27)-val,inlet_trig)<<5);
   A=(int32_t)(GenerateRandomNumber())>>4;
   D=(int32_t)(GenerateRandomNumber())>>4;
} else if (!(inlet_trig>0)) {
   ntrig = 0;
}
if (stage == 0){
	int32_t d;
	MTOF(-param_d+___SMMUL(param_rndD,D+param_d<<1),d)
   val -= ___SMMUL(val,d)>>2;
} else {
   int32_t t;
   MTOF(-param_a+___SMMUL(param_rndA,A+param_a<<1),t);
   val = val + (t>>3);
   if ((val<0)||(val>lvl)){
      val =lvl;
      stage = 0;
   }
}
outlet_env = val;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="837d1ace-671b-41d5-af1f-9496b695b2a4" name="tremelo_3" x="854" y="1176">
      <params>
         <frac32.s.map name="d" value="36.0"/>
         <int32 name="maxhrm" value="8"/>
         <frac32.u.map name="chance" value="15.0"/>
         <int32 name="maxwidth" value="14"/>
         <bool32.tgl name="hanningORsine" value="1"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="837d1ace-671b-41d5-af1f-9496b695b2a4">
         <sDescription>decay envelope, linear ramp</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>env.axh</helpPatch>
         <inlets>
            <frac32 name="trig"/>
            <frac32 name="rate"/>
         </inlets>
         <outlets>
            <frac32.positive name="env" description="envelope output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.klineartime.exp name="d" noLabel="true"/>
            <int32 name="maxhrm">
               <MinValue i="1"/>
               <MaxValue i="16"/>
            </int32>
            <frac32.u.map.gain name="chance"/>
            <int32 name="maxwidth">
               <MinValue i="1"/>
               <MaxValue i="14"/>
            </int32>
            <bool32.tgl name="hanningORsine"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t val;
int ntrig;
int hrm,size,mod;
int lim=0;]]></code.declaration>
         <code.init><![CDATA[val = 0;
ntrig = 0;
hrm=1;
size=1;
mod=0;]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig > 0)&&(val==0) && !ntrig)
{
	if((GenerateRandomNumber()>>1)<param_chance)
	{
  		val = 1 << 27;
  		hrm=(GenerateRandomNumber()%param_maxhrm)+1;
  		size=(GenerateRandomNumber()%param_maxwidth)+1;
  		mod=(GenerateRandomNumber()%15);
  		lim=GenerateRandomNumber()&1;
	}
  ntrig = 1;
}
else {
  if (!(inlet_trig > 0))
    ntrig = 0;
  int32_t t;
  MTOF(-param_d+inlet_rate,t);
  val -= t>>6;
  if (val < 0)
    val = 0;
}
int32_t r;
uint64_t phs=val;
if(lim)
{
	phs=phs>(1<<26)?(1<<26):phs;
}
if(mod>4)
{
if(mod>9)
{
	phs=(1<<27)-1-phs;
}
phs=__USAT(___SMMUL(phs<<3,phs<<2),27);

if(mod>9)
{
	phs=(1<<27)-1-phs;
}
}
phs*=hrm;
int hm=phs>>27;
hm=hm*size/hrm;
if(!param_hanningORsine)
{
	HANNING2TINTERP((uint32_t)phs<<5,r)
	//HANNING2TINTERP(r,r)
}
else
{
	SINE2TINTERP((uint32_t)phs<<5,r)
	//SINE2TINTERP(r>>1,r)
}
int sz=size;
//hm=sz>hm?hm:sz;
switch(mod%5)
{
	case 1:sz=hm;break;
	case 2:sz=hrm-hm-1;break;
	case 3:sz=hm-(hrm-1>>1);sz=sz>0?sz:1-sz;break;
	case 4:sz=hm-(hrm-1>>1);sz=(hrm>>1)-(sz>0?sz:1-sz);break;
}
sz=sz>size?size:sz;
outlet_env = (r/14>>4)*sz;]]></code.krate>
      </object>
   </patchobj>
   <obj type="mix/mix 2 g" uuid="a68d65dda222bc916b36b283cc06d2edd719bf3b" name="mix_3" x="952" y="1176">
      <params>
         <frac32.u.map name="gain1" value="49.5"/>
         <frac32.u.map name="gain2" value="46.5"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="1f2a7619-bcad-46a8-8278-d0e574bcdadf" name="ad_3" x="1050" y="1176">
      <params>
         <frac32.s.map name="a" value="-43.0"/>
         <frac32.s.map name="d" value="10.0"/>
         <frac32.u.map name="rndA" value="58.0"/>
         <frac32.u.map name="rndD" value="48.5"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="1f2a7619-bcad-46a8-8278-d0e574bcdadf">
         <sDescription>Attack/decay envelope, linear attack, exponential decay</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>env.axh</helpPatch>
         <inlets>
            <frac32 name="trig"/>
         </inlets>
         <outlets>
            <frac32.positive name="env" description="envelope output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.klineartime.exp name="a"/>
            <frac32.s.map.klineartime.exp name="d"/>
            <frac32.u.map.gain name="rndA"/>
            <frac32.u.map.gain name="rndD"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int8_t stage;
int ntrig;
int32_t val;
int32_t lvl,A,D;]]></code.declaration>
         <code.init><![CDATA[ntrig = 0;
val = 0;]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig>0) && !ntrig) {
   ntrig = 1;
   stage = 1;
   lvl=val+(___SMMUL((1<<27)-val,inlet_trig)<<5);
   A=(int32_t)(GenerateRandomNumber())>>4;
   D=(int32_t)(GenerateRandomNumber())>>4;
} else if (!(inlet_trig>0)) {
   ntrig = 0;
}
if (stage == 0){
	int32_t d;
	MTOF(-param_d+___SMMUL(param_rndD,D+param_d<<1),d)
   val -= ___SMMUL(val,d)>>2;
} else {
   int32_t t;
   MTOF(-param_a+___SMMUL(param_rndA,A+param_a<<1),t);
   val = val + (t>>3);
   if ((val<0)||(val>lvl)){
      val =lvl;
      stage = 0;
   }
}
outlet_env = val;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="837d1ace-671b-41d5-af1f-9496b695b2a4" name="tremelo_4" x="1148" y="1176">
      <params>
         <frac32.s.map name="d" value="36.0"/>
         <int32 name="maxhrm" value="8"/>
         <frac32.u.map name="chance" value="16.5"/>
         <int32 name="maxwidth" value="14"/>
         <bool32.tgl name="hanningORsine" value="1"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="837d1ace-671b-41d5-af1f-9496b695b2a4">
         <sDescription>decay envelope, linear ramp</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>env.axh</helpPatch>
         <inlets>
            <frac32 name="trig"/>
            <frac32 name="rate"/>
         </inlets>
         <outlets>
            <frac32.positive name="env" description="envelope output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.klineartime.exp name="d" noLabel="true"/>
            <int32 name="maxhrm">
               <MinValue i="1"/>
               <MaxValue i="16"/>
            </int32>
            <frac32.u.map.gain name="chance"/>
            <int32 name="maxwidth">
               <MinValue i="1"/>
               <MaxValue i="14"/>
            </int32>
            <bool32.tgl name="hanningORsine"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t val;
int ntrig;
int hrm,size,mod;
int lim=0;]]></code.declaration>
         <code.init><![CDATA[val = 0;
ntrig = 0;
hrm=1;
size=1;
mod=0;]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig > 0)&&(val==0) && !ntrig)
{
	if((GenerateRandomNumber()>>1)<param_chance)
	{
  		val = 1 << 27;
  		hrm=(GenerateRandomNumber()%param_maxhrm)+1;
  		size=(GenerateRandomNumber()%param_maxwidth)+1;
  		mod=(GenerateRandomNumber()%15);
  		lim=GenerateRandomNumber()&1;
	}
  ntrig = 1;
}
else {
  if (!(inlet_trig > 0))
    ntrig = 0;
  int32_t t;
  MTOF(-param_d+inlet_rate,t);
  val -= t>>6;
  if (val < 0)
    val = 0;
}
int32_t r;
uint64_t phs=val;
if(lim)
{
	phs=phs>(1<<26)?(1<<26):phs;
}
if(mod>4)
{
if(mod>9)
{
	phs=(1<<27)-1-phs;
}
phs=__USAT(___SMMUL(phs<<3,phs<<2),27);

if(mod>9)
{
	phs=(1<<27)-1-phs;
}
}
phs*=hrm;
int hm=phs>>27;
hm=hm*size/hrm;
if(!param_hanningORsine)
{
	HANNING2TINTERP((uint32_t)phs<<5,r)
	//HANNING2TINTERP(r,r)
}
else
{
	SINE2TINTERP((uint32_t)phs<<5,r)
	//SINE2TINTERP(r>>1,r)
}
int sz=size;
//hm=sz>hm?hm:sz;
switch(mod%5)
{
	case 1:sz=hm;break;
	case 2:sz=hrm-hm-1;break;
	case 3:sz=hm-(hrm-1>>1);sz=sz>0?sz:1-sz;break;
	case 4:sz=hm-(hrm-1>>1);sz=(hrm>>1)-(sz>0?sz:1-sz);break;
}
sz=sz>size?size:sz;
outlet_env = (r/14>>4)*sz;]]></code.krate>
      </object>
   </patchobj>
   <obj type="mix/mix 2 g" uuid="a68d65dda222bc916b36b283cc06d2edd719bf3b" name="mix_4" x="1246" y="1176">
      <params>
         <frac32.u.map name="gain1" value="49.5"/>
         <frac32.u.map name="gain2" value="46.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="1f2a7619-bcad-46a8-8278-d0e574bcdadf" name="ad_4" x="1344" y="1176">
      <params>
         <frac32.s.map name="a" value="-45.0"/>
         <frac32.s.map name="d" value="10.0"/>
         <frac32.u.map name="rndA" value="53.0"/>
         <frac32.u.map name="rndD" value="50.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="1f2a7619-bcad-46a8-8278-d0e574bcdadf">
         <sDescription>Attack/decay envelope, linear attack, exponential decay</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>env.axh</helpPatch>
         <inlets>
            <frac32 name="trig"/>
         </inlets>
         <outlets>
            <frac32.positive name="env" description="envelope output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.klineartime.exp name="a"/>
            <frac32.s.map.klineartime.exp name="d"/>
            <frac32.u.map.gain name="rndA"/>
            <frac32.u.map.gain name="rndD"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int8_t stage;
int ntrig;
int32_t val;
int32_t lvl,A,D;]]></code.declaration>
         <code.init><![CDATA[ntrig = 0;
val = 0;]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig>0) && !ntrig) {
   ntrig = 1;
   stage = 1;
   lvl=val+(___SMMUL((1<<27)-val,inlet_trig)<<5);
   A=(int32_t)(GenerateRandomNumber())>>4;
   D=(int32_t)(GenerateRandomNumber())>>4;
} else if (!(inlet_trig>0)) {
   ntrig = 0;
}
if (stage == 0){
	int32_t d;
	MTOF(-param_d+___SMMUL(param_rndD,D+param_d<<1),d)
   val -= ___SMMUL(val,d)>>2;
} else {
   int32_t t;
   MTOF(-param_a+___SMMUL(param_rndA,A+param_a<<1),t);
   val = val + (t>>3);
   if ((val<0)||(val>lvl)){
      val =lvl;
      stage = 0;
   }
}
outlet_env = val;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="837d1ace-671b-41d5-af1f-9496b695b2a4" name="tremelo_5" x="1442" y="1176">
      <params>
         <frac32.s.map name="d" value="36.0"/>
         <int32 name="maxhrm" value="8"/>
         <frac32.u.map name="chance" value="13.5"/>
         <int32 name="maxwidth" value="14"/>
         <bool32.tgl name="hanningORsine" value="1"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="837d1ace-671b-41d5-af1f-9496b695b2a4">
         <sDescription>decay envelope, linear ramp</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>env.axh</helpPatch>
         <inlets>
            <frac32 name="trig"/>
            <frac32 name="rate"/>
         </inlets>
         <outlets>
            <frac32.positive name="env" description="envelope output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.klineartime.exp name="d" noLabel="true"/>
            <int32 name="maxhrm">
               <MinValue i="1"/>
               <MaxValue i="16"/>
            </int32>
            <frac32.u.map.gain name="chance"/>
            <int32 name="maxwidth">
               <MinValue i="1"/>
               <MaxValue i="14"/>
            </int32>
            <bool32.tgl name="hanningORsine"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t val;
int ntrig;
int hrm,size,mod;
int lim=0;]]></code.declaration>
         <code.init><![CDATA[val = 0;
ntrig = 0;
hrm=1;
size=1;
mod=0;]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig > 0)&&(val==0) && !ntrig)
{
	if((GenerateRandomNumber()>>1)<param_chance)
	{
  		val = 1 << 27;
  		hrm=(GenerateRandomNumber()%param_maxhrm)+1;
  		size=(GenerateRandomNumber()%param_maxwidth)+1;
  		mod=(GenerateRandomNumber()%15);
  		lim=GenerateRandomNumber()&1;
	}
  ntrig = 1;
}
else {
  if (!(inlet_trig > 0))
    ntrig = 0;
  int32_t t;
  MTOF(-param_d+inlet_rate,t);
  val -= t>>6;
  if (val < 0)
    val = 0;
}
int32_t r;
uint64_t phs=val;
if(lim)
{
	phs=phs>(1<<26)?(1<<26):phs;
}
if(mod>4)
{
if(mod>9)
{
	phs=(1<<27)-1-phs;
}
phs=__USAT(___SMMUL(phs<<3,phs<<2),27);

if(mod>9)
{
	phs=(1<<27)-1-phs;
}
}
phs*=hrm;
int hm=phs>>27;
hm=hm*size/hrm;
if(!param_hanningORsine)
{
	HANNING2TINTERP((uint32_t)phs<<5,r)
	//HANNING2TINTERP(r,r)
}
else
{
	SINE2TINTERP((uint32_t)phs<<5,r)
	//SINE2TINTERP(r>>1,r)
}
int sz=size;
//hm=sz>hm?hm:sz;
switch(mod%5)
{
	case 1:sz=hm;break;
	case 2:sz=hrm-hm-1;break;
	case 3:sz=hm-(hrm-1>>1);sz=sz>0?sz:1-sz;break;
	case 4:sz=hm-(hrm-1>>1);sz=(hrm>>1)-(sz>0?sz:1-sz);break;
}
sz=sz>size?size:sz;
outlet_env = (r/14>>4)*sz;]]></code.krate>
      </object>
   </patchobj>
   <obj type="mix/mix 2 g" uuid="a68d65dda222bc916b36b283cc06d2edd719bf3b" name="mix_5" x="1540" y="1176">
      <params>
         <frac32.u.map name="gain1" value="49.5"/>
         <frac32.u.map name="gain2" value="46.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="conv/interp" uuid="d68c1a8709d8b55e3de8715d727ec0a2d8569d9a" name="interp_5" x="868" y="1484">
      <params/>
      <attribs/>
   </obj>
   <obj type="conv/interp" uuid="d68c1a8709d8b55e3de8715d727ec0a2d8569d9a" name="interp_1" x="938" y="1484">
      <params/>
      <attribs/>
   </obj>
   <obj type="conv/interp" uuid="d68c1a8709d8b55e3de8715d727ec0a2d8569d9a" name="interp_2" x="1008" y="1484">
      <params/>
      <attribs/>
   </obj>
   <obj type="conv/interp" uuid="d68c1a8709d8b55e3de8715d727ec0a2d8569d9a" name="interp_3" x="1078" y="1484">
      <params/>
      <attribs/>
   </obj>
   <obj type="conv/interp" uuid="d68c1a8709d8b55e3de8715d727ec0a2d8569d9a" name="interp_4" x="1148" y="1484">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="2eb24eb4-fe36-4003-af2b-e00c450952ad" name="phasor_1" x="1218" y="1484">
      <params>
         <frac32.s.map name="pitch" value="0.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="2eb24eb4-fe36-4003-af2b-e00c450952ad">
         <sDescription>phasor
saw wave like oscillator</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>phasor.axh</helpPatch>
         <inlets>
            <frac32 name="pitch" description="pitch"/>
            <frac32buffer name="phase"/>
         </inlets>
         <outlets>
            <frac32buffer.positive name="phasor" description="phasor wave"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.pitch name="pitch" noLabel="true"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[uint32_t Phase;]]></code.declaration>
         <code.init><![CDATA[Phase = 0;]]></code.init>
         <code.krate><![CDATA[uint32_t freq;
   MTOFEXTENDED(param_pitch + inlet_pitch,freq);]]></code.krate>
         <code.srate><![CDATA[Phase += (freq>>10) ;
   outlet_phasor = (Phase>>5)+inlet_phase;]]></code.srate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="bb278f62-ddf2-4bed-8745-f220a4dede13" name="tripple morphing PM osc" x="1316" y="1484">
      <params>
         <frac32.s.map name="pitch" value="-12.0"/>
         <int32.hradio name="oct" value="2"/>
         <frac32.u.map name="h1" value="0.0"/>
         <frac32.s.map name="g1" value="41.0"/>
         <frac32.u.map name="h2" value="0.0"/>
         <frac32.s.map name="g2" value="-45.0"/>
         <frac32.u.map name="h3" value="0.0"/>
         <frac32.s.map name="g3" value="50.0"/>
         <int32 name="max" value="32"/>
         <int32 name="min" value="8"/>
         <int32 name="steps" value="16"/>
         <frac32.s.map name="rate" value="-9.0"/>
         <bool32.mom name="rnd" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="bb278f62-ddf2-4bed-8745-f220a4dede13">
         <sDescription>sine wave oscillator</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>osc.axh</helpPatch>
         <inlets>
            <frac32.bipolar name="pitch" description="pitch"/>
            <frac32buffer name="mix"/>
            <bool32 name="rnd"/>
            <frac32buffer name="modGain1"/>
            <frac32buffer name="modGain2"/>
            <frac32buffer name="modGain3"/>
         </inlets>
         <outlets>
            <frac32buffer.bipolar name="wave" description="sine wave"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.pitch name="pitch" noLabel="true"/>
            <int32.hradio name="oct">
               <MaxValue i="4"/>
            </int32.hradio>
            <frac32.u.map name="h1"/>
            <frac32.s.map name="g1"/>
            <frac32.u.map name="h2"/>
            <frac32.s.map name="g2"/>
            <frac32.u.map name="h3"/>
            <frac32.s.map name="g3"/>
            <int32 name="max">
               <MinValue i="1"/>
               <MaxValue i="128"/>
            </int32>
            <int32 name="min">
               <MinValue i="1"/>
               <MaxValue i="128"/>
            </int32>
            <int32 name="steps">
               <MinValue i="1"/>
               <MaxValue i="16"/>
            </int32>
            <frac32.s.map.lfopitch name="rate"/>
            <bool32.mom name="rnd"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[uint32_t Phase,morph;
int32_t array[3][16];
int max[3],min[3],steps[3];
int rnd;]]></code.declaration>
         <code.init><![CDATA[Phase = 0;

for(int i=0;i<3;i++)
{
	for(int j=0;j<16;j++)
	{
		array[i][j]=(GenerateRandomNumber()>>1);
	}
	
}
for(int i=0;i<3;i++)
	{
		max[i]=(GenerateRandomNumber()&63)+1;
		min[i]=(GenerateRandomNumber()&63)+1;
		steps[i]=(GenerateRandomNumber()&15)+1;
	}
int32_t tmp[3];
   for(int i=0;i<3;i++)
   {
   	if(!(max[i]>=min[i]))
   	{
   		tmp[i]=max[i];
   		max[i]=min[i];
   		min[i]=tmp[i];
   		max[i]-=min[i];
   	}
   	else if(max[i]==min[i])
   	{
   		max[i]+=1;
   	}
   }]]></code.init>
         <code.krate><![CDATA[int RND=inlet_rnd||param_rnd;
if(RND&&!rnd)
   {
   	rnd=1;
   	for(int i=0;i<3;i++)
	{
		for(int j=0;j<16;j++)
		{
			array[i][j]=(GenerateRandomNumber()>>1);
		}
	}
	for(int i=0;i<3;i++)
	{
		max[i]=(GenerateRandomNumber()%param_max)+1;
		min[i]=(GenerateRandomNumber()%(63-param_min))+param_min;
		steps[i]=(GenerateRandomNumber()%param_steps)+1;
	}
int32_t tmp[3];
   for(int i=0;i<3;i++)
   {
   	if(!(max[i]>=min[i]))
   	{
   		tmp[i]=max[i];
   		max[i]=min[i];
   		min[i]=tmp[i];
   		max[i]-=min[i];
   	}
   	else if(max[i]==min[i])
   	{
   		max[i]+=1;
   	}
   }
   }
   else if(!RND){rnd=0;}
   
   int32_t freq;
   MTOFEXTENDED(param_pitch + inlet_pitch,freq);
   int32_t rate;
   MTOFEXTENDED(param_rate,rate);
   freq>>=param_oct;

   int32_t s1[3],s2[3],mix[3],a1,a2;
   int32_t H[3]={param_h1,param_h2,param_h3};

   int32_t G[3]={param_g1,param_g2,param_g3};
   //int32_t steps[3]={param_steps1,param_steps2,param_steps3};
   //int32_t max[3]={param_max1,param_max2,param_max3};
   //int32_t min[3]={param_min1,param_min2,param_min3};


   int32_t tmp[3];
   for(int i=0;i<3;i++)
   {
   	if(!(max[i]>=min[i]))
   	{
   		tmp[i]=max[i];
   		max[i]=min[i];
   		min[i]=tmp[i];
   		max[i]-=min[i];
   	}
   	else if(max[i]==min[i])
   	{
   		max[i]+=1;
   	}
   }]]></code.krate>
         <code.srate><![CDATA[Phase += freq;
morph+=rate>>10;
int32_t r1,r2;
uint32_t pA,pB,p2;
int32_t sum=0;
int32_t mg[3]={inlet_modGain1,inlet_modGain2,inlet_modGain3};
for(int i=0;i<3;i++)
   {
   	   int32_t hm=H[i]+inlet_mix;
	   int32_t mx=(hm)&((1<<27)-1);
	   a1=((uint64_t)mx*steps[i]>>27);
	   a2=((a1+1))%(steps[i]);
	   a1=(a1)%(steps[i]);
	   a1=array[i][a1]%max[i];
	   a2=array[i][a2]%max[i];
	   mx=((uint32_t)mx*steps[i]<<5)>>1;
	   s1[i]=a1+min[i];
	   s2[i]=a2+min[i];
	   mix[i]=mx;
   }

for(int i=0;i<3;i++)
{
	uint32_t phs=Phase+morph*(2+i);
	pA=phs*s1[i];
	pB=phs*s2[i];

	SINE2TINTERP(pA,r1)
	SINE2TINTERP(pB,r2)
	r1=r1>>4;
	r2=r2>>4;
	r1+=___SMMUL(r2-r1<<1,mix[i]);
	sum+=___SMMUL(___SMMUL(G[i],r1)<<7,mg[i])<<5;
}

uint32_t p1 = (Phase<<param_oct)+sum;
SINE2TINTERP(p1,r1)
r1=r1>>5;
outlet_wave= r1;]]></code.srate>
      </object>
   </patchobj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_1" x="1456" y="1484">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="0c207e28-cc92-42d3-9acc-a441f9edc44e" name="counter_11" x="126" y="1820">
      <params>
         <int32 name="maximum" value="16"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="0c207e28-cc92-42d3-9acc-a441f9edc44e">
         <sDescription>cyclic up counter</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>counter.axh</helpPatch>
         <inlets>
            <bool32.rising name="trig" description="trigger"/>
         </inlets>
         <outlets>
            <int32 name="o" description="output"/>
            <int32 name="max"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="maximum" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="65536"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
   int rtrig;
   int count;]]></code.declaration>
         <code.init><![CDATA[count=0;
   ntrig = 0;
   rtrig = 0;]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig>0) && !ntrig) {
   count += 1; if (count>=param_maximum) {count = 0;}
   ntrig=1;
}
else if (!(inlet_trig>0)) ntrig=0;

outlet_o= count;
outlet_max=param_maximum;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="0c207e28-cc92-42d3-9acc-a441f9edc44e" name="counter_15" x="196" y="1820">
      <params>
         <int32 name="maximum" value="16"/>
         <int32 name="recount" value="6"/>
         <bool32.tgl name="direction" value="0"/>
         <bool32.tgl name="swap" value="1"/>
         <int32 name="ofs" value="0"/>
         <frac32.u.map name="chance" value="7.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="0c207e28-cc92-42d3-9acc-a441f9edc44e">
         <sDescription>cyclic up counter</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>counter.axh</helpPatch>
         <inlets>
            <bool32.rising name="trig" description="trigger"/>
            <bool32.rising name="r" description="reset"/>
         </inlets>
         <outlets>
            <int32 name="o" description="output"/>
            <bool32.pulse name="c" description="carry pulse"/>
            <bool32 name="0"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="maximum" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="65536"/>
            </int32>
            <int32 name="recount">
               <MinValue i="2"/>
               <MaxValue i="512"/>
            </int32>
            <bool32.tgl name="direction"/>
            <bool32.tgl name="swap"/>
            <int32 name="ofs">
               <MinValue i="0"/>
               <MaxValue i="8"/>
            </int32>
            <frac32.u.map.gain name="chance"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
   int rtrig;
   int count;
   int cnt,CNT;]]></code.declaration>
         <code.init><![CDATA[count=-1;
   ntrig = 0;
   rtrig = 0;
   cnt=0;]]></code.init>
         <code.krate><![CDATA[outlet_c=0;
if ((inlet_trig>0) && !ntrig) {
   count += 1; if (count>=param_maximum) {count = 0; outlet_c = 1;}
   //ntrig=1;
}
else if (!(inlet_trig>0)) ntrig=0;
if ((inlet_r>0) && !rtrig) {count=0; rtrig = 1;outlet_c=1;}
else if (!(inlet_r>0)) rtrig=0;
outlet_0=0;
if(inlet_trig&&!ntrig)
{
ntrig=1;
cnt=count%param_recount;
int max=param_maximum/param_recount;
cnt+=count>max?1:0;
if(param_direction)
{
	cnt=(param_recount-1-cnt);
}
if(param_swap)
{
	cnt=cnt>0?param_recount-cnt:cnt;
}
if(param_ofs>0)
{
	cnt-=1;
	if(cnt>=0)
	{cnt=(cnt+param_ofs)%(param_recount-1);}
	cnt+=1;
}
if(((GenerateRandomNumber()>>1)<param_chance)||(cnt==0))
{
	CNT=cnt;
}
outlet_0=cnt==0;
}
outlet_o= CNT<<1;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="87e6d53c-c20f-4830-8756-2464ff9dd4ae" name="alloc_4" x="294" y="1820">
      <params>
         <int32 name="maxA" value="7"/>
         <int32 name="minA" value="0"/>
         <frac32.u.map name="arpChanges" value="11.0"/>
         <frac32.u.map name="aStepChange" value="25.5"/>
         <int32 name="maxB" value="7"/>
         <int32 name="minB" value="0"/>
         <bool32.tgl name="pre" value="0"/>
         <bool32.tgl name="first0" value="1"/>
      </params>
      <attribs>
         <combo attributeName="size" selection="64"/>
         <objref attributeName="scale" obj="scale"/>
      </attribs>
      <object id="patch/object" uuid="87e6d53c-c20f-4830-8756-2464ff9dd4ae">
         <sDescription>allocate table in SDRAM memory, -128..127</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>table.axh</helpPatch>
         <inlets>
            <int32 name="cntArp"/>
            <int32 name="maxArp"/>
            <int32 name="baseOffset"/>
            <bool32 name="rnd"/>
            <int32 name="key"/>
            <int32 name="ofs"/>
         </inlets>
         <outlets>
            <int32 name="note"/>
            <int32 name="base"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="maxA">
               <MinValue i="1"/>
               <MaxValue i="24"/>
            </int32>
            <int32 name="minA">
               <MinValue i="-24"/>
               <MaxValue i="0"/>
            </int32>
            <frac32.u.map.gain name="arpChanges"/>
            <frac32.u.map.gain name="aStepChange"/>
            <int32 name="maxB">
               <MinValue i="1"/>
               <MaxValue i="24"/>
            </int32>
            <int32 name="minB">
               <MinValue i="-24"/>
               <MaxValue i="0"/>
            </int32>
            <bool32.tgl name="pre"/>
            <bool32.tgl name="first0"/>
         </params>
         <attribs>
            <combo name="size">
               <MenuEntries>
                  <string>2</string>
                  <string>4</string>
                  <string>8</string>
                  <string>16</string>
                  <string>32</string>
                  <string>64</string>
                  <string>128</string>
                  <string>256</string>
                  <string>512</string>
                  <string>1024</string>
                  <string>2048</string>
                  <string>4096</string>
                  <string>8192</string>
                  <string>16384</string>
                  <string>32768</string>
                  <string>65536</string>
                  <string>131072</string>
                  <string>262144</string>
                  <string>524288</string>
                  <string>1048576</string>
                  <string>2097152</string>
                  <string>4194304</string>
               </MenuEntries>
               <CEntries>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>4</string>
                  <string>5</string>
                  <string>6</string>
                  <string>7</string>
                  <string>8</string>
                  <string>9</string>
                  <string>10</string>
                  <string>11</string>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
                  <string>16</string>
                  <string>17</string>
                  <string>18</string>
                  <string>19</string>
                  <string>20</string>
                  <string>21</string>
                  <string>22</string>
               </CEntries>
            </combo>
            <objref name="scale"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
static const uint32_t BITS = 8;
static const uint32_t GAIN = 20;
int8_t *array;
int rnd,DO=1;

int note[7]={0,1,3,4,7,8,11};]]></code.declaration>
         <code.init><![CDATA[static int8_t _array[LENGTH] __attribute__ ((section (".sdram")));
array = &_array[0];]]></code.init>
         <code.krate><![CDATA[if((inlet_rnd||DO)&&!rnd)
{
	rnd=1;
	DO=0;
	array[0]=0;
	int32_t tmp=0;
	int ptmp1=0;
	int force=0;
	int oct=0;
	for(int i=1;i<LENGTH;i++)
	{

		ptmp1=tmp;
		if(((GenerateRandomNumber()>>1)>=param_arpChanges)&&(!force))
		{
			tmp=0;
			oct=0;
		}
		else
		{
			if(((GenerateRandomNumber()>>1)<param_aStepChange)||force||(tmp==0))
			{
				tmp=((int32_t)(GenerateRandomNumber()%8));
				tmp=tmp+(tmp==4?1:0)-4<<1;
				force=0;
				oct=(((int32_t)(GenerateRandomNumber())%3)-1)*7;//octaving
			}
		}
		if(i&1)
		{
			if((tmp>0)&&(ptmp1==0))
			{
				force=1;
			}
			
		}
		array[i]=array[i-1]+tmp+oct;
	}
	array[LENGTH]=0;
	
	
}
else if(!inlet_rnd){rnd=0;}

int cntArp=inlet_maxArp-1-inlet_cntArp;


int nt=array[cntArp];
if((inlet_cntArp==0)&&(param_first0))
{
	nt=0;
}
int cur=inlet_baseOffset-inlet_key;
if(param_pre)
{
	nt+=cur;
}
int dif=param_maxA-param_minA<<1;
nt=((nt-(param_minA<<1)+dif*1000)%dif)+param_minA;
nt=(nt>0?nt:-nt)+param_minA;
nt=nt>=param_maxA?(param_maxA<<1)-nt:nt;





	dif=param_maxB-param_minB<<1;
	cur=((cur-(param_minB<<1)+dif*1000)%dif)+param_minB;
	cur=(cur>0?cur:-cur)+param_minB;
	cur=cur>=param_maxB?(param_maxB<<1)-cur:cur;
	if(!param_pre)
	{
	nt+=cur;
	}
	nt+=inlet_ofs;


outlet_base=attr_scale.note[(cur+700)%7]+((cur+700)/7-100)*12+inlet_key;
outlet_note=attr_scale.note[(nt+700)%7]+((nt+700)/7-100)*12+inlet_key;]]></code.krate>
      </object>
   </patchobj>
   <obj type="logic/change" uuid="96e39ae624c3f3c952cec4a95e1986ee0104f718" name="change_1" x="420" y="1820">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/or 2" uuid="3805d3c84d30032a44fbdbe42d9a2988a1790a3e" name="or_3" x="504" y="1820">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="837d1ace-671b-41d5-af1f-9496b695b2a4" name="tremelo_6" x="574" y="1820">
      <params>
         <frac32.s.map name="d" value="12.0"/>
         <int32 name="maxhrm" value="4"/>
         <frac32.u.map name="chance" value="16.5"/>
         <int32 name="maxwidth" value="9"/>
         <bool32.tgl name="hanningORsine" value="1"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="837d1ace-671b-41d5-af1f-9496b695b2a4">
         <sDescription>decay envelope, linear ramp</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>env.axh</helpPatch>
         <inlets>
            <frac32 name="trig"/>
            <frac32 name="rate"/>
         </inlets>
         <outlets>
            <frac32.positive name="env" description="envelope output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.klineartime.exp name="d" noLabel="true"/>
            <int32 name="maxhrm">
               <MinValue i="1"/>
               <MaxValue i="16"/>
            </int32>
            <frac32.u.map.gain name="chance"/>
            <int32 name="maxwidth">
               <MinValue i="1"/>
               <MaxValue i="14"/>
            </int32>
            <bool32.tgl name="hanningORsine"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t val;
int ntrig;
int hrm,size,mod;]]></code.declaration>
         <code.init><![CDATA[val = 0;
ntrig = 0;
hrm=1;
size=1;
mod=0;]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig > 0)&&(val==0) && !ntrig)
{
	if((GenerateRandomNumber()>>1)<param_chance)
	{
  		val = 1 << 27;
  		hrm=(GenerateRandomNumber()%param_maxhrm)+1;
  		size=(GenerateRandomNumber()%param_maxwidth)+1;
  		mod=(GenerateRandomNumber()%15);
	}
  ntrig = 1;
}
else {
  if (!(inlet_trig > 0))
    ntrig = 0;
  int32_t t;
  MTOF(-param_d+inlet_rate,t);
  val -= t>>6;
  if (val < 0)
    val = 0;
}
int32_t r;
uint64_t phs=val;
if(mod>4)
{
if(mod>9)
{
	phs=(1<<27)-1-phs;
}
phs=__USAT(___SMMUL(phs<<3,phs<<2),27);

if(mod>9)
{
	phs=(1<<27)-1-phs;
}
}
phs*=hrm;
int hm=phs>>27;
if(!param_hanningORsine)
{
	HANNING2TINTERP((uint32_t)phs<<5,r)
	HANNING2TINTERP(r,r)
}
else
{
	SINE2TINTERP((uint32_t)phs<<5,r)
	SINE2TINTERP(r>>1,r)
}
int sz=size;
//hm=sz>hm?hm:sz;
switch(mod%5)
{
	case 1:sz=hm;break;
	case 2:sz=hrm-hm-1;break;
	case 3:sz=hm-(hrm-1>>1);sz=sz>0?sz:1-sz;break;
	case 4:sz=hm-(hrm-1>>1);sz=(hrm>>1)-(sz>0?sz:1-sz);break;
}
outlet_env = (r/14>>4)*sz;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="1f2a7619-bcad-46a8-8278-d0e574bcdadf" name="ad_6" x="672" y="1820">
      <params>
         <frac32.s.map name="a" value="-64.0"/>
         <frac32.s.map name="d" value="0.0"/>
         <frac32.u.map name="rndA" value="0.0"/>
         <frac32.u.map name="rndD" value="26.5"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="1f2a7619-bcad-46a8-8278-d0e574bcdadf">
         <sDescription>Attack/decay envelope, linear attack, exponential decay</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>env.axh</helpPatch>
         <inlets>
            <frac32 name="trig"/>
         </inlets>
         <outlets>
            <frac32.positive name="env" description="envelope output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.klineartime.exp name="a"/>
            <frac32.s.map.klineartime.exp name="d"/>
            <frac32.u.map.gain name="rndA"/>
            <frac32.u.map.gain name="rndD"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int8_t stage;
int ntrig;
int32_t val;
int32_t lvl,A,D;]]></code.declaration>
         <code.init><![CDATA[ntrig = 0;
val = 0;]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig>0) && !ntrig) {
   ntrig = 1;
   stage = 1;
   lvl=val+(___SMMUL((1<<27)-val,inlet_trig)<<5);
   A=(int32_t)(GenerateRandomNumber())>>4;
   D=(int32_t)(GenerateRandomNumber())>>4;
} else if (!(inlet_trig>0)) {
   ntrig = 0;
}
if (stage == 0){
	int32_t d;
	MTOF(-param_d+___SMMUL(param_rndD,D+param_d<<1),d)
   val -= ___SMMUL(val,d)>>2;
} else {
   int32_t t;
   MTOF(-param_a+___SMMUL(param_rndA,A+param_a<<1),t);
   val = val + (t>>3);
   if ((val<0)||(val>lvl)){
      val =lvl;
      stage = 0;
   }
}
outlet_env = val;]]></code.krate>
      </object>
   </patchobj>
   <obj type="osc/saw" uuid="739ecc36017ef3249479b8f01716b8bbfba9abc1" name="saw_1" x="770" y="1820">
      <params>
         <frac32.s.map name="pitch" value="-24.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="7b46fb7c-1079-4d6f-a1fc-3346fa810137" name="lp_SVF_1" x="868" y="1820">
      <params>
         <frac32.s.map name="pitch" value="-45.0"/>
         <frac32.u.map name="reso" value="28.5"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="7b46fb7c-1079-4d6f-a1fc-3346fa810137">
         <sDescription>Bandpass filter, state-variable type, modulation inputs</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>filter.axh</helpPatch>
         <inlets>
            <frac32buffer name="in" description="filter input"/>
            <frac32 name="pitch" description="pitch"/>
            <frac32 name="reso" description="resonance"/>
         </inlets>
         <outlets>
            <frac32buffer name="out" description="filter output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.pitch name="pitch"/>
            <frac32.u.map.filterq name="reso"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t low;
int32_t band;
]]></code.declaration>
         <code.init><![CDATA[low = 0;
band = 0;
]]></code.init>
         <code.krate><![CDATA[int32_t damp = (0x80<<24) - (__USAT(inlet_reso + param_reso,27)<<4);
damp = ___SMMUL(damp,damp);
int32_t alpha;
int32_t freq;
MTOFEXTENDED(param_pitch + inlet_pitch,alpha);
SINE2TINTERP(alpha,freq);
]]></code.krate>
         <code.srate><![CDATA[int32_t in1 = inlet_in;
int32_t notch = inlet_in - (___SMMUL(damp,band)<<1);
low = low + (___SMMUL(freq,band)<<1);
int32_t high  = notch - low;
band = (___SMMUL(freq,high)<<1) + band;// - drive*band*band*band;
int32_t out1 = low;
outlet_out = out1;]]></code.srate>
      </object>
   </patchobj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_2" x="966" y="1820">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="0c207e28-cc92-42d3-9acc-a441f9edc44e" name="counter_12" x="42" y="2310">
      <params>
         <int32 name="maximum" value="32"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="0c207e28-cc92-42d3-9acc-a441f9edc44e">
         <sDescription>cyclic up counter</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>counter.axh</helpPatch>
         <inlets>
            <bool32.rising name="trig" description="trigger"/>
         </inlets>
         <outlets>
            <int32 name="o" description="output"/>
            <int32 name="max"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="maximum" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="65536"/>
            </int32>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
   int rtrig;
   int count;]]></code.declaration>
         <code.init><![CDATA[count=0;
   ntrig = 0;
   rtrig = 0;]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig>0) && !ntrig) {
   count += 1; if (count>=param_maximum) {count = 0;}
   ntrig=1;
}
else if (!(inlet_trig>0)) ntrig=0;

outlet_o= count;
outlet_max=param_maximum;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="0c207e28-cc92-42d3-9acc-a441f9edc44e" name="counter_20" x="112" y="2310">
      <params>
         <int32 name="maximum" value="16"/>
         <int32 name="recount" value="6"/>
         <bool32.tgl name="direction" value="0"/>
         <bool32.tgl name="swap" value="1"/>
         <int32 name="ofs" value="0"/>
         <frac32.u.map name="chance" value="9.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="0c207e28-cc92-42d3-9acc-a441f9edc44e">
         <sDescription>cyclic up counter</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>counter.axh</helpPatch>
         <inlets>
            <bool32.rising name="trig" description="trigger"/>
            <bool32.rising name="r" description="reset"/>
         </inlets>
         <outlets>
            <int32 name="o" description="output"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="maximum" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="65536"/>
            </int32>
            <int32 name="recount">
               <MinValue i="2"/>
               <MaxValue i="512"/>
            </int32>
            <bool32.tgl name="direction"/>
            <bool32.tgl name="swap"/>
            <int32 name="ofs">
               <MinValue i="0"/>
               <MaxValue i="8"/>
            </int32>
            <frac32.u.map.gain name="chance"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
   int rtrig;
   int count;
   int cnt,CNT;]]></code.declaration>
         <code.init><![CDATA[count=-1;
   ntrig = 0;
   rtrig = 0;
   cnt=0;]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig>0) && !ntrig) {
   count += 1; if (count>=param_maximum) {count = 0; }
   //ntrig=1;
}
else if (!(inlet_trig>0)) ntrig=0;
if ((inlet_r>0) && !rtrig) {count=0; rtrig = 1;}
else if (!(inlet_r>0)) rtrig=0;

if(inlet_trig&&!ntrig)
{
ntrig=1;
cnt=count%param_recount;
int max=param_maximum/param_recount;
cnt+=count>max?1:0;
if(param_direction)
{
	cnt=(param_recount-1-cnt);
}
if(param_swap)
{
	cnt=cnt>0?param_recount-cnt:cnt;
}
if(param_ofs>0)
{
	cnt-=1;
	if(cnt>=0)
	{cnt=(cnt+param_ofs)%(param_recount-1);}
	cnt+=1;
}
if(((GenerateRandomNumber()>>1)<param_chance)||(cnt==0))
{
	CNT=cnt;
}

}
outlet_o= CNT<<1;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="0c207e28-cc92-42d3-9acc-a441f9edc44e" name="counter_21" x="210" y="2310">
      <params>
         <int32 name="maximum" value="16"/>
         <int32 name="recount" value="10"/>
         <bool32.tgl name="direction" value="1"/>
         <bool32.tgl name="swap" value="0"/>
         <int32 name="ofs" value="0"/>
         <frac32.u.map name="chance" value="11.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="0c207e28-cc92-42d3-9acc-a441f9edc44e">
         <sDescription>cyclic up counter</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>counter.axh</helpPatch>
         <inlets>
            <bool32.rising name="trig" description="trigger"/>
            <bool32.rising name="r" description="reset"/>
         </inlets>
         <outlets>
            <int32 name="o" description="output"/>
            <bool32.pulse name="c" description="carry pulse"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="maximum" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="65536"/>
            </int32>
            <int32 name="recount">
               <MinValue i="2"/>
               <MaxValue i="512"/>
            </int32>
            <bool32.tgl name="direction"/>
            <bool32.tgl name="swap"/>
            <int32 name="ofs">
               <MinValue i="0"/>
               <MaxValue i="8"/>
            </int32>
            <frac32.u.map.gain name="chance"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
   int rtrig;
   int count;
   int cnt,CNT;]]></code.declaration>
         <code.init><![CDATA[count=-1;
   ntrig = 0;
   rtrig = 0;
   cnt=0;]]></code.init>
         <code.krate><![CDATA[outlet_c=0;
if ((inlet_trig>0) && !ntrig) {
   count += 1; if (count>=param_maximum) {count = 0; outlet_c = 1;}
   //ntrig=1;
}
else if (!(inlet_trig>0)) ntrig=0;
if ((inlet_r>0) && !rtrig) {count=0; rtrig = 1;outlet_c=1;}
else if (!(inlet_r>0)) rtrig=0;

if(inlet_trig&&!ntrig)
{
ntrig=1;
cnt=count%param_recount;
int max=param_maximum/param_recount;
cnt+=count>max?1:0;
if(param_direction)
{
	cnt=(param_recount-1-cnt);
}
if(param_swap)
{
	cnt=cnt>0?param_recount-cnt:cnt;
}
if(param_ofs>0)
{
	cnt-=1;
	if(cnt>=0)
	{cnt=(cnt+param_ofs)%(param_recount-1);}
	cnt+=1;
}
if(((GenerateRandomNumber()>>1)<param_chance)||(cnt==0))
{
	CNT=cnt;
}

}
outlet_o= CNT<<1;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="87e6d53c-c20f-4830-8756-2464ff9dd4ae" name="alloc_5" x="308" y="2310">
      <params>
         <int32 name="maxA" value="7"/>
         <int32 name="minA" value="0"/>
         <frac32.u.map name="arpChanges" value="13.0"/>
         <frac32.u.map name="aStepChange" value="23.5"/>
         <int32 name="maxB" value="7"/>
         <int32 name="minB" value="0"/>
         <bool32.tgl name="pre" value="0"/>
         <bool32.tgl name="first0" value="1"/>
      </params>
      <attribs>
         <combo attributeName="size" selection="64"/>
         <objref attributeName="scale" obj="scale"/>
      </attribs>
      <object id="patch/object" uuid="87e6d53c-c20f-4830-8756-2464ff9dd4ae">
         <sDescription>allocate table in SDRAM memory, -128..127</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>table.axh</helpPatch>
         <inlets>
            <int32 name="cntArp"/>
            <int32 name="maxArp"/>
            <int32 name="baseOffset"/>
            <bool32 name="rnd"/>
            <int32 name="key"/>
            <int32 name="ofs"/>
         </inlets>
         <outlets>
            <int32 name="note"/>
            <int32 name="base"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="maxA">
               <MinValue i="1"/>
               <MaxValue i="24"/>
            </int32>
            <int32 name="minA">
               <MinValue i="-24"/>
               <MaxValue i="0"/>
            </int32>
            <frac32.u.map.gain name="arpChanges"/>
            <frac32.u.map.gain name="aStepChange"/>
            <int32 name="maxB">
               <MinValue i="1"/>
               <MaxValue i="24"/>
            </int32>
            <int32 name="minB">
               <MinValue i="-24"/>
               <MaxValue i="0"/>
            </int32>
            <bool32.tgl name="pre"/>
            <bool32.tgl name="first0"/>
         </params>
         <attribs>
            <combo name="size">
               <MenuEntries>
                  <string>2</string>
                  <string>4</string>
                  <string>8</string>
                  <string>16</string>
                  <string>32</string>
                  <string>64</string>
                  <string>128</string>
                  <string>256</string>
                  <string>512</string>
                  <string>1024</string>
                  <string>2048</string>
                  <string>4096</string>
                  <string>8192</string>
                  <string>16384</string>
                  <string>32768</string>
                  <string>65536</string>
                  <string>131072</string>
                  <string>262144</string>
                  <string>524288</string>
                  <string>1048576</string>
                  <string>2097152</string>
                  <string>4194304</string>
               </MenuEntries>
               <CEntries>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>4</string>
                  <string>5</string>
                  <string>6</string>
                  <string>7</string>
                  <string>8</string>
                  <string>9</string>
                  <string>10</string>
                  <string>11</string>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
                  <string>16</string>
                  <string>17</string>
                  <string>18</string>
                  <string>19</string>
                  <string>20</string>
                  <string>21</string>
                  <string>22</string>
               </CEntries>
            </combo>
            <objref name="scale"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
static const uint32_t BITS = 8;
static const uint32_t GAIN = 20;
int8_t *array;
int rnd,DO=1;

int note[7]={0,1,3,4,7,8,11};]]></code.declaration>
         <code.init><![CDATA[static int8_t _array[LENGTH] __attribute__ ((section (".sdram")));
array = &_array[0];]]></code.init>
         <code.krate><![CDATA[if((inlet_rnd||DO)&&!rnd)
{
	rnd=1;
	DO=0;
	array[0]=0;
	int32_t tmp=0;
	int ptmp1=0;
	int force=0;
	int oct=0;
	for(int i=1;i<LENGTH;i++)
	{

		ptmp1=tmp;
		if(((GenerateRandomNumber()>>1)>=param_arpChanges)&&(!force))
		{
			tmp=0;
			oct=0;
		}
		else
		{
			if(((GenerateRandomNumber()>>1)<param_aStepChange)||force||(tmp==0))
			{
				tmp=((int32_t)(GenerateRandomNumber()%8));
				tmp=tmp+(tmp==4?1:0)-4<<1;
				force=0;
				oct=(((int32_t)(GenerateRandomNumber())%3)-1)*7;//octaving
			}
		}
		if(i&1)
		{
			if((tmp>0)&&(ptmp1==0))
			{
				force=1;
			}
			
		}
		array[i]=array[i-1]+tmp+oct;
	}
	array[LENGTH]=0;
	
	
}
else if(!inlet_rnd){rnd=0;}

int cntArp=inlet_maxArp-1-inlet_cntArp;


int nt=array[cntArp];
if((inlet_cntArp==0)&&(param_first0))
{
	nt=0;
}
int cur=inlet_baseOffset-inlet_key;
if(param_pre)
{
	nt+=cur;
}
int dif=param_maxA-param_minA<<1;
nt=((nt-(param_minA<<1)+dif*1000)%dif)+param_minA;
nt=(nt>0?nt:-nt)+param_minA;
nt=nt>=param_maxA?(param_maxA<<1)-nt:nt;





	dif=param_maxB-param_minB<<1;
	cur=((cur-(param_minB<<1)+dif*1000)%dif)+param_minB;
	cur=(cur>0?cur:-cur)+param_minB;
	cur=cur>=param_maxB?(param_maxB<<1)-cur:cur;
	if(!param_pre)
	{
	nt+=cur;
	}
	nt+=inlet_ofs;


outlet_base=attr_scale.note[(cur+700)%7]+((cur+700)/7-100)*12+inlet_key;
outlet_note=attr_scale.note[(nt+700)%7]+((nt+700)/7-100)*12+inlet_key;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="87e6d53c-c20f-4830-8756-2464ff9dd4ae" name="alloc_6" x="434" y="2310">
      <params>
         <int32 name="maxA" value="7"/>
         <int32 name="minA" value="0"/>
         <frac32.u.map name="arpChanges" value="13.0"/>
         <frac32.u.map name="aStepChange" value="23.5"/>
         <int32 name="maxB" value="7"/>
         <int32 name="minB" value="0"/>
         <bool32.tgl name="pre" value="0"/>
         <bool32.tgl name="first0" value="1"/>
      </params>
      <attribs>
         <combo attributeName="size" selection="64"/>
         <objref attributeName="scale" obj="scale"/>
      </attribs>
      <object id="patch/object" uuid="87e6d53c-c20f-4830-8756-2464ff9dd4ae">
         <sDescription>allocate table in SDRAM memory, -128..127</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>table.axh</helpPatch>
         <inlets>
            <int32 name="cntArp"/>
            <int32 name="maxArp"/>
            <int32 name="baseOffset"/>
            <bool32 name="rnd"/>
            <int32 name="key"/>
            <int32 name="ofs"/>
         </inlets>
         <outlets>
            <int32 name="note"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="maxA">
               <MinValue i="1"/>
               <MaxValue i="24"/>
            </int32>
            <int32 name="minA">
               <MinValue i="-24"/>
               <MaxValue i="0"/>
            </int32>
            <frac32.u.map.gain name="arpChanges"/>
            <frac32.u.map.gain name="aStepChange"/>
            <int32 name="maxB">
               <MinValue i="1"/>
               <MaxValue i="24"/>
            </int32>
            <int32 name="minB">
               <MinValue i="-24"/>
               <MaxValue i="0"/>
            </int32>
            <bool32.tgl name="pre"/>
            <bool32.tgl name="first0"/>
         </params>
         <attribs>
            <combo name="size">
               <MenuEntries>
                  <string>2</string>
                  <string>4</string>
                  <string>8</string>
                  <string>16</string>
                  <string>32</string>
                  <string>64</string>
                  <string>128</string>
                  <string>256</string>
                  <string>512</string>
                  <string>1024</string>
                  <string>2048</string>
                  <string>4096</string>
                  <string>8192</string>
                  <string>16384</string>
                  <string>32768</string>
                  <string>65536</string>
                  <string>131072</string>
                  <string>262144</string>
                  <string>524288</string>
                  <string>1048576</string>
                  <string>2097152</string>
                  <string>4194304</string>
               </MenuEntries>
               <CEntries>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>4</string>
                  <string>5</string>
                  <string>6</string>
                  <string>7</string>
                  <string>8</string>
                  <string>9</string>
                  <string>10</string>
                  <string>11</string>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
                  <string>16</string>
                  <string>17</string>
                  <string>18</string>
                  <string>19</string>
                  <string>20</string>
                  <string>21</string>
                  <string>22</string>
               </CEntries>
            </combo>
            <objref name="scale"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
static const uint32_t BITS = 8;
static const uint32_t GAIN = 20;
int8_t *array;
int rnd,DO=1;

int note[7]={0,1,3,4,7,8,11};]]></code.declaration>
         <code.init><![CDATA[static int8_t _array[LENGTH] __attribute__ ((section (".sdram")));
array = &_array[0];]]></code.init>
         <code.krate><![CDATA[if((inlet_rnd||DO)&&!rnd)
{
	rnd=1;
	DO=0;
	array[0]=0;
	int32_t tmp=0;
	int ptmp1=0;
	int force=0;
	int oct=0;
	for(int i=1;i<LENGTH;i++)
	{

		ptmp1=tmp;
		if(((GenerateRandomNumber()>>1)>=param_arpChanges)&&(!force))
		{
			tmp=0;
			oct=0;
		}
		else
		{
			if(((GenerateRandomNumber()>>1)<param_aStepChange)||force||(tmp==0))
			{
				tmp=((int32_t)(GenerateRandomNumber()%8));
				tmp=tmp+(tmp==4?1:0)-4<<1;
				force=0;
				oct=(((int32_t)(GenerateRandomNumber())%3)-1)*7;//octaving
			}
		}
		if(i&1)
		{
			if((tmp>0)&&(ptmp1==0))
			{
				force=1;
			}
			
		}
		array[i]=array[i-1]+tmp+oct;
	}
	array[LENGTH]=0;
	
	
}
else if(!inlet_rnd){rnd=0;}

int cntArp=inlet_maxArp-1-inlet_cntArp;


int nt=array[cntArp];
if((inlet_cntArp==0)&&(param_first0))
{
	nt=0;
}
int cur=inlet_baseOffset-inlet_key;
if(param_pre)
{
	nt+=cur;
}
int dif=param_maxA-param_minA<<1;
nt=((nt-(param_minA<<1)+dif*1000)%dif)+param_minA;
nt=(nt>0?nt:-nt)+param_minA;
nt=nt>=param_maxA?(param_maxA<<1)-nt:nt;





	dif=param_maxB-param_minB<<1;
	cur=((cur-(param_minB<<1)+dif*1000)%dif)+param_minB;
	cur=(cur>0?cur:-cur)+param_minB;
	cur=cur>=param_maxB?(param_maxB<<1)-cur:cur;
	if(!param_pre)
	{
	nt+=cur;
	}
	nt+=inlet_ofs;

outlet_note=attr_scale.note[(nt+700)%7]+((nt+700)/7-100)*12+inlet_key;]]></code.krate>
      </object>
   </patchobj>
   <obj type="logic/change" uuid="96e39ae624c3f3c952cec4a95e1986ee0104f718" name="change_4" x="560" y="2310">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/change" uuid="96e39ae624c3f3c952cec4a95e1986ee0104f718" name="change_2" x="644" y="2310">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/change" uuid="96e39ae624c3f3c952cec4a95e1986ee0104f718" name="change_3" x="728" y="2310">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="1f2a7619-bcad-46a8-8278-d0e574bcdadf" name="ad_9" x="812" y="2310">
      <params>
         <frac32.s.map name="a" value="-1.0"/>
         <frac32.s.map name="d" value="44.0"/>
         <frac32.u.map name="rndA" value="39.5"/>
         <frac32.u.map name="rndD" value="29.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="1f2a7619-bcad-46a8-8278-d0e574bcdadf">
         <sDescription>Attack/decay envelope, linear attack, exponential decay</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>env.axh</helpPatch>
         <inlets>
            <frac32 name="trig"/>
         </inlets>
         <outlets>
            <frac32.positive name="env" description="envelope output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.klineartime.exp name="a"/>
            <frac32.s.map.klineartime.exp name="d"/>
            <frac32.u.map.gain name="rndA"/>
            <frac32.u.map.gain name="rndD"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int8_t stage;
int ntrig;
int32_t val;
int32_t lvl,A,D;]]></code.declaration>
         <code.init><![CDATA[ntrig = 0;
val = 0;]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig>0) && !ntrig) {
   ntrig = 1;
   stage = 1;
   lvl=val+(___SMMUL((1<<27)-val,inlet_trig)<<5);
   A=(int32_t)(GenerateRandomNumber())>>4;
   D=(int32_t)(GenerateRandomNumber())>>4;
} else if (!(inlet_trig>0)) {
   ntrig = 0;
}
if (stage == 0){
	int32_t d;
	MTOF(-param_d+___SMMUL(param_rndD,D+param_d<<1),d)
   val -= ___SMMUL(val,d)>>2;
} else {
   int32_t t;
   MTOF(-param_a+___SMMUL(param_rndA,A+param_a<<1),t);
   val = val + (t>>3);
   if ((val<0)||(val>lvl)){
      val =lvl;
      stage = 0;
   }
}
outlet_env = val;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="1f2a7619-bcad-46a8-8278-d0e574bcdadf" name="ad_7" x="910" y="2310">
      <params>
         <frac32.s.map name="a" value="13.0"/>
         <frac32.s.map name="d" value="17.0"/>
         <frac32.u.map name="rndA" value="46.5"/>
         <frac32.u.map name="rndD" value="40.5"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="1f2a7619-bcad-46a8-8278-d0e574bcdadf">
         <sDescription>Attack/decay envelope, linear attack, exponential decay</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>env.axh</helpPatch>
         <inlets>
            <frac32 name="trig"/>
         </inlets>
         <outlets>
            <frac32.positive name="env" description="envelope output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.klineartime.exp name="a"/>
            <frac32.s.map.klineartime.exp name="d"/>
            <frac32.u.map.gain name="rndA"/>
            <frac32.u.map.gain name="rndD"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int8_t stage;
int ntrig;
int32_t val;
int32_t lvl,A,D;]]></code.declaration>
         <code.init><![CDATA[ntrig = 0;
val = 0;]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig>0) && !ntrig) {
   ntrig = 1;
   stage = 1;
   lvl=val+(___SMMUL((1<<27)-val,inlet_trig)<<5);
   A=(int32_t)(GenerateRandomNumber())>>4;
   D=(int32_t)(GenerateRandomNumber())>>4;
} else if (!(inlet_trig>0)) {
   ntrig = 0;
}
if (stage == 0){
	int32_t d;
	MTOF(-param_d+___SMMUL(param_rndD,D+param_d<<1),d)
   val -= ___SMMUL(val,d)>>2;
} else {
   int32_t t;
   MTOF(-param_a+___SMMUL(param_rndA,A+param_a<<1),t);
   val = val + (t>>3);
   if ((val<0)||(val>lvl)){
      val =lvl;
      stage = 0;
   }
}
outlet_env = val;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="1f2a7619-bcad-46a8-8278-d0e574bcdadf" name="ad_8" x="1008" y="2310">
      <params>
         <frac32.s.map name="a" value="7.0"/>
         <frac32.s.map name="d" value="17.0"/>
         <frac32.u.map name="rndA" value="44.5"/>
         <frac32.u.map name="rndD" value="30.5"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="1f2a7619-bcad-46a8-8278-d0e574bcdadf">
         <sDescription>Attack/decay envelope, linear attack, exponential decay</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>env.axh</helpPatch>
         <inlets>
            <frac32 name="trig"/>
         </inlets>
         <outlets>
            <frac32.positive name="env" description="envelope output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.klineartime.exp name="a"/>
            <frac32.s.map.klineartime.exp name="d"/>
            <frac32.u.map.gain name="rndA"/>
            <frac32.u.map.gain name="rndD"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int8_t stage;
int ntrig;
int32_t val;
int32_t lvl,A,D;]]></code.declaration>
         <code.init><![CDATA[ntrig = 0;
val = 0;]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig>0) && !ntrig) {
   ntrig = 1;
   stage = 1;
   lvl=val+(___SMMUL((1<<27)-val,inlet_trig)<<5);
   A=(int32_t)(GenerateRandomNumber())>>4;
   D=(int32_t)(GenerateRandomNumber())>>4;
} else if (!(inlet_trig>0)) {
   ntrig = 0;
}
if (stage == 0){
	int32_t d;
	MTOF(-param_d+___SMMUL(param_rndD,D+param_d<<1),d)
   val -= ___SMMUL(val,d)>>2;
} else {
   int32_t t;
   MTOF(-param_a+___SMMUL(param_rndA,A+param_a<<1),t);
   val = val + (t>>3);
   if ((val<0)||(val>lvl)){
      val =lvl;
      stage = 0;
   }
}
outlet_env = val;]]></code.krate>
      </object>
   </patchobj>
   <obj type="osc/tri" uuid="905879afa8256b0ca207557d656949e476ca6f16" name="tri_1" x="1106" y="2310">
      <params>
         <frac32.s.map name="pitch" value="-12.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="osc/tri" uuid="905879afa8256b0ca207557d656949e476ca6f16" name="tri_2" x="1204" y="2310">
      <params>
         <frac32.s.map name="pitch" value="-12.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="osc/tri" uuid="905879afa8256b0ca207557d656949e476ca6f16" name="tri_3" x="1302" y="2310">
      <params>
         <frac32.s.map name="pitch" value="-12.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_3" x="1400" y="2310">
      <params/>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_4" x="1456" y="2310">
      <params/>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_5" x="1512" y="2310">
      <params/>
      <attribs/>
   </obj>
   <obj type="mix/mix 3 g" uuid="efc0bdb8ca0ec2184330951eff5203ff487e35a9" name="mix_6" x="1568" y="2310">
      <params>
         <frac32.u.map name="gain1" value="43.0"/>
         <frac32.u.map name="gain2" value="43.0"/>
         <frac32.u.map name="gain3" value="43.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="sel/sel b 16 4t pulse" uuid="888c8955ae75a9e7e3ed641fa9084d6b52e9fee9" name="sel_1" x="0" y="2772">
      <params>
         <bin16 name="p1" value="17553"/>
         <bin16 name="p2" value="4112"/>
         <bin16 name="p3" value="35397"/>
         <bin16 name="p4" value="0"/>
      </params>
      <attribs/>
   </obj>
   <patcher type="patch/patcher" uuid="9d29c67b-63d7-46bd-82cd-909f3ff08874" name="obj_1" x="252" y="2772">
      <params>
         <frac32.s.map name="d1:d" value="-7.0"/>
         <frac32.u.map name="d1:tres" value="6.0"/>
         <frac32.s.map name="d2" value="7.0"/>
         <frac32.u.map name="amt" value="34.0"/>
         <frac32.s.map name="sineSnc_1" value="-40.0"/>
      </params>
      <attribs/>
      <subpatch appVersion="1.0.12">
         <obj type="patch/inlet b" uuid="3b0d3eacb5bb978cb05d1372aa2714d5a4790844" name="trig" x="14" y="14">
            <params/>
            <attribs/>
         </obj>
         <patchobj type="patch/object" uuid="57d7d45b-13d4-4eaf-94a3-c23d37527fe1" name="d1" x="126" y="42">
            <params>
               <frac32.s.map name="d" onParent="true" value="-16.0"/>
               <frac32.u.map name="tres" onParent="true" value="0.0"/>
            </params>
            <attribs/>
            <object id="patch/object" uuid="57d7d45b-13d4-4eaf-94a3-c23d37527fe1">
               <sDescription>decay envelope</sDescription>
               <author>Johannes Taelman</author>
               <license>BSD</license>
               <helpPatch>env.axh</helpPatch>
               <inlets>
                  <bool32.rising name="trig" description="trigger"/>
               </inlets>
               <outlets>
                  <frac32.positive name="env" description="envelope output"/>
               </outlets>
               <displays/>
               <params>
                  <frac32.s.map.kdecaytime.exp name="d" noLabel="true"/>
                  <frac32.u.map name="tres"/>
               </params>
               <attribs/>
               <includes/>
               <code.declaration><![CDATA[int32_t val;
int ntrig;]]></code.declaration>
               <code.init><![CDATA[val = 0;
ntrig = 0;]]></code.init>
               <code.krate><![CDATA[if ((inlet_trig>0) && !ntrig) { val =1<<27; ntrig=1;}
   else { if (!(inlet_trig>0)) ntrig=0; val = ___SMMUL(val, param_d)<<1;}
   outlet_env = val>param_tres?val:0;]]></code.krate>
            </object>
         </patchobj>
         <obj type="env/d lin m" uuid="e9d9a5152981b17626748fd93e7e6a39c0afe3aa" name="d2" x="126" y="224">
            <params>
               <frac32.s.map name="d" onParent="true" value="-12.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="amt" x="224" y="224">
            <params>
               <frac32.u.map name="amp" onParent="true" value="63.5"/>
            </params>
            <attribs/>
         </obj>
         <obj type="sss/osc/sineSnc" uuid="10e26e84-6c62-4a3c-896e-8a115e47d0a1" name="sineSnc_1" x="322" y="224">
            <params>
               <frac32.s.map name="pitch" onParent="true" value="-44.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_1" x="490" y="294">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/outlet a" uuid="abd8c5fd3b0524a6630f65cad6dc27f6c58e2a3e" name="out" x="574" y="294">
            <params/>
            <attribs/>
         </obj>
         <nets>
            <net>
               <source obj="sineSnc_1" outlet="wave"/>
               <dest obj="vca_1" inlet="a"/>
            </net>
            <net>
               <source obj="amt" outlet="out"/>
               <dest obj="sineSnc_1" inlet="pitch"/>
            </net>
            <net>
               <source obj="trig" outlet="inlet"/>
               <dest obj="d2" inlet="trig"/>
               <dest obj="sineSnc_1" inlet="sync"/>
               <dest obj="d1" inlet="trig"/>
            </net>
            <net>
               <source obj="d1" outlet="env"/>
               <dest obj="amt" inlet="in"/>
            </net>
            <net>
               <source obj="d2" outlet="env"/>
               <dest obj="vca_1" inlet="v"/>
            </net>
            <net>
               <source obj="vca_1" outlet="o"/>
               <dest obj="out" inlet="outlet"/>
            </net>
         </nets>
         <settings>
            <subpatchmode>no</subpatchmode>
         </settings>
         <notes><![CDATA[]]></notes>
         <windowPos>
            <x>370</x>
            <y>302</y>
            <width>1072</width>
            <height>661</height>
         </windowPos>
      </subpatch>
   </patcher>
   <obj type="edrum/bd1" uuid="61df2ad6-29f9-4c23-8f39-905383865a91" name="obj_2" x="350" y="2772">
      <params>
         <frac32.s.map name="d1" value="-16.0"/>
         <frac32.s.map name="lp1" value="64.0"/>
         <frac32.s.map name="d2" value="-5.0"/>
         <frac32.u.map name="amt" value="0.0"/>
         <frac32.s.map name="sine_1" value="-4.0"/>
      </params>
      <attribs/>
   </obj>
   <patcher type="patch/patcher" uuid="c86a6421-4d62-40e6-b8c0-e8a404824a05" name="obj_3" x="504" y="2772">
      <params>
         <frac32.s.map name="ad_9:a" value="-64.0"/>
         <frac32.s.map name="ad_9:d" value="-29.0"/>
         <frac32.u.map name="ad_9:rndA" value="29.5"/>
         <frac32.u.map name="ad_9:rndD" value="19.0"/>
         <frac32.s.map name="bpf:pitch" value="64.0"/>
         <frac32.u.map name="bpf:reso" value="13.0"/>
      </params>
      <attribs/>
      <subpatch appVersion="1.0.12">
         <obj type="noise/uniform" uuid="a3926ef22ae9ac217cd09933d90101848796eb78" name="noise.uniform_1" x="98" y="14">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/inlet b" uuid="3b0d3eacb5bb978cb05d1372aa2714d5a4790844" name="trig" x="14" y="56">
            <params/>
            <attribs/>
         </obj>
         <patchobj type="patch/object" uuid="1f2a7619-bcad-46a8-8278-d0e574bcdadf" name="ad_9" x="98" y="56">
            <params>
               <frac32.s.map name="a" onParent="true" value="-64.0"/>
               <frac32.s.map name="d" onParent="true" value="-18.0"/>
               <frac32.u.map name="rndA" onParent="true" value="36.0"/>
               <frac32.u.map name="rndD" onParent="true" value="36.0"/>
            </params>
            <attribs/>
            <object id="patch/object" uuid="1f2a7619-bcad-46a8-8278-d0e574bcdadf">
               <sDescription>Attack/decay envelope, linear attack, exponential decay</sDescription>
               <author>Johannes Taelman</author>
               <license>BSD</license>
               <helpPatch>env.axh</helpPatch>
               <inlets>
                  <frac32 name="trig"/>
               </inlets>
               <outlets>
                  <frac32.positive name="env" description="envelope output"/>
               </outlets>
               <displays/>
               <params>
                  <frac32.s.map.klineartime.exp name="a"/>
                  <frac32.s.map.klineartime.exp name="d"/>
                  <frac32.u.map.gain name="rndA"/>
                  <frac32.u.map.gain name="rndD"/>
               </params>
               <attribs/>
               <includes/>
               <code.declaration><![CDATA[int8_t stage;
int ntrig;
int32_t val;
int32_t lvl,A,D;]]></code.declaration>
               <code.init><![CDATA[ntrig = 0;
val = 0;]]></code.init>
               <code.krate><![CDATA[if ((inlet_trig>0) && !ntrig) {
   ntrig = 1;
   stage = 1;
   lvl=val+(___SMMUL((1<<27)-val,inlet_trig)<<5);
   A=(int32_t)(GenerateRandomNumber())>>4;
   D=(int32_t)(GenerateRandomNumber())>>4;
} else if (!(inlet_trig>0)) {
   ntrig = 0;
}
if (stage == 0){
	int32_t d;
	MTOF(-param_d+___SMMUL(param_rndD,D+param_d<<1),d)
   val -= ___SMMUL(val,d);
} else {
   int32_t t;
   MTOF(-param_a+___SMMUL(param_rndA,A+param_a<<1),t);
   val = val + (t>>3);
   if ((val<0)||(val>lvl)){
      val =lvl;
      stage = 0;
   }
}
outlet_env = val;]]></code.krate>
            </object>
         </patchobj>
         <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="gain.vca~_1" x="196" y="56">
            <params/>
            <attribs/>
         </obj>
         <obj type="filter/bp svf" uuid="451629d3f559049e7f516d5014f3d5fa818827c7" name="bpf" x="266" y="56">
            <params>
               <frac32.s.map name="pitch" onParent="true" value="41.0"/>
               <frac32.u.map name="reso" onParent="true" value="0.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="patch/outlet a" uuid="abd8c5fd3b0524a6630f65cad6dc27f6c58e2a3e" name="out" x="364" y="56">
            <params/>
            <attribs/>
         </obj>
         <nets>
            <net>
               <source obj="noise.uniform_1" outlet="wave"/>
               <dest obj="gain.vca~_1" inlet="a"/>
            </net>
            <net>
               <source obj="gain.vca~_1" outlet="o"/>
               <dest obj="bpf" inlet="in"/>
            </net>
            <net>
               <source obj="trig" outlet="inlet"/>
               <dest obj="ad_9" inlet="trig"/>
            </net>
            <net>
               <source obj="bpf" outlet="out"/>
               <dest obj="out" inlet="outlet"/>
            </net>
            <net>
               <source obj="ad_9" outlet="env"/>
               <dest obj="gain.vca~_1" inlet="v"/>
            </net>
         </nets>
         <settings>
            <subpatchmode>no</subpatchmode>
         </settings>
         <notes><![CDATA[]]></notes>
         <windowPos>
            <x>0</x>
            <y>2</y>
            <width>674</width>
            <height>400</height>
         </windowPos>
      </subpatch>
   </patcher>
   <obj type="mix/mix 3 g" uuid="efc0bdb8ca0ec2184330951eff5203ff487e35a9" name="mix_7" x="616" y="2772">
      <params>
         <frac32.u.map name="gain1" value="45.0"/>
         <frac32.u.map name="gain2" value="53.0"/>
         <frac32.u.map name="gain3" value="12.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="2174d571-aa56-4c76-8f5c-c5c205baf6d1" name="mix_2" x="742" y="2772">
      <params>
         <frac32.u.map name="gain1" value="38.5"/>
         <frac32.u.map name="gain2" value="37.5"/>
         <frac32.u.map name="gain3" value="37.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="2174d571-aa56-4c76-8f5c-c5c205baf6d1">
         <sDescription>3 input s-rate mixer, shows gain units</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <inlets>
            <frac32buffer name="bus_in" description="input with unity gain"/>
            <frac32buffer name="in1" description="input 1"/>
            <frac32buffer name="in2" description="input 2"/>
            <frac32buffer name="in3" description="input 3"/>
         </inlets>
         <outlets>
            <frac32buffer name="out" description="mix out"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map.gain name="gain1">
               <DefaultValue v="32.0"/>
            </frac32.u.map.gain>
            <frac32.u.map.gain name="gain2">
               <DefaultValue v="32.0"/>
            </frac32.u.map.gain>
            <frac32.u.map.gain name="gain3">
               <DefaultValue v="32.0"/>
            </frac32.u.map.gain>
         </params>
         <attribs/>
         <includes/>
         <code.srate><![CDATA[int32_t accum = ___SMMUL(inlet_in1,param_gain1);
   accum = ___SMMLA(inlet_in2,param_gain2,accum);
;   accum = ___SMMLA(inlet_in3,param_gain3,accum);
;   outlet_out=  __SSAT((inlet_bus__in>>2) + (accum<<1),28);]]></code.srate>
      </object>
   </patchobj>
   <obj type="math/*c" uuid="7a66f52a9594e7e9eb31328ea725cb3641a80b55" name="*c_1" x="854" y="2772">
      <params>
         <frac32.u.map name="amp" value="41.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="4cffc94b-e7c9-4046-99dd-febe078d6f3d" name="allpass reverb" x="952" y="2772">
      <params>
         <bool32.mom name="rnd" value="0"/>
         <frac32.u.map name="dampTail" value="42.5"/>
         <frac32.u.map name="roomsize" value="56.0"/>
         <frac32.u.map name="vicinity" value="30.5"/>
         <frac32.u.map name="brighten" value="5.0"/>
         <frac32.u.map name="darken" value="3.5"/>
         <frac32.u.map name="wet" value="30.0"/>
      </params>
      <attribs>
         <combo attributeName="asize" selection="16384 (341ms)"/>
      </attribs>
      <object id="patch/object" uuid="4cffc94b-e7c9-4046-99dd-febe078d6f3d">
         <inlets>
            <frac32buffer name="l"/>
            <frac32buffer name="r"/>
            <bool32 name="rnd"/>
         </inlets>
         <outlets>
            <frac32buffer name="l"/>
            <frac32buffer name="r"/>
         </outlets>
         <displays/>
         <params>
            <bool32.mom name="rnd"/>
            <frac32.u.map.squaregain name="dampTail"/>
            <frac32.u.map name="roomsize"/>
            <frac32.u.map name="vicinity"/>
            <frac32.u.map name="brighten"/>
            <frac32.u.map name="darken"/>
            <frac32.u.map.gain name="wet"/>
         </params>
         <attribs>
            <combo name="asize">
               <MenuEntries>
                  <string>256 (5.33ms)</string>
                  <string>512 (10.66ms)</string>
                  <string>1024 (21.33ms)</string>
                  <string>2048 (42.66ms)</string>
                  <string>4096 (85.33ms)</string>
                  <string>8192 (170ms)</string>
                  <string>16384 (341ms)</string>
                  <string>32768 (682ms)</string>
                  <string>65536 (1.36s)</string>
                  <string>131072 (2.73s)</string>
                  <string>262144 (5.46s)</string>
                  <string>524288 (10.9s)</string>
                  <string>1048576 (21.8s)</string>
                  <string>2097152 (43.7s)</string>
               </MenuEntries>
               <CEntries>
                  <string>8</string>
                  <string>9</string>
                  <string>10</string>
                  <string>11</string>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
                  <string>16</string>
                  <string>17</string>
                  <string>18</string>
                  <string>19</string>
                  <string>20</string>
                  <string>21</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[static const uint32_t LENGTH=1<<attr_asize;
static const uint32_t LENGTHPOW=attr_asize;
static const uint32_t LENGTHMASK=(1<<attr_asize)-1;
int32_t val[2];
int32_t IN;
int32_t vol[8];
int32_t Frq[8];
int32_t *buf;
uint32_t wp[9];
int LNG[8],rnd;
int32_t ALLPASS(int32_t in,int32_t f,int lng,int i){
int k=i<<LENGTHPOW;
wp[i]=(wp[i]+1)%lng;
int32_t tmp=buf[(wp[i]+k)];
in+=___SMMUL(tmp,-f)<<2;
buf[(wp[i]+k)]=in;
int32_t out=(___SMMUL(in,f)<<2)+tmp;
return out;
}]]></code.declaration>
         <code.init><![CDATA[static int32_t _buf[9<<attr_asize]  __attribute__ ((section (".sdram")));
buf = &_buf[0];
   int i;

   for(i=0;i<LENGTH*9;i++) buf[i] = 0;


for(int i=0;i<8;i++){
	wp[i]=0;
	LNG[i]=(GenerateRandomNumber()%((LENGTH>>4)*15))+((LENGTHMASK>>4));
	Frq[i]=GenerateRandomNumber()>>1;
	vol[i]=(1<<29);
}
wp[8]=0;
LNG[8]=(GenerateRandomNumber()%((LENGTH>>4)))+((LENGTHMASK>>4)*15);]]></code.init>
         <code.krate><![CDATA[int RND=param_rnd||inlet_rnd;
if(RND&&!rnd){
rnd=1;
for(int i=0;i<8;i++){
Frq[i]=GenerateRandomNumber()>>1;

LNG[i]=(GenerateRandomNumber()%((LENGTH>>4)*15))+((LENGTHMASK>>4));

}
LNG[8]=(GenerateRandomNumber()%((LENGTH>>4)))+((LENGTHMASK>>4)*15);
for(int i=0;i<LENGTH*9;i++) buf[i] = 0;
}
if(!RND){rnd=0;}

int32_t frq[8];

int32_t LG[9];
for(int i=0;i<8;i++){
	LG[i]=___SMMUL(LNG[i]-1<<5,param_vicinity)+1;
	SINE2TINTERP(Frq[i]+(GenerateRandomNumber()>>12),frq[i])
	frq[i]=frq[i]>>1;
}
LG[8]=___SMMUL(param_roomsize<<4,LNG[8]<<1);
//LG[8]=param_roomsize>>27-LENGTHPOW;
int32_t decay=param_dampTail;]]></code.krate>
         <code.srate><![CDATA[//decay=decay>param_decay?decay:param_decay;
wp[8]=(wp[8]+1);
wp[8]=wp[8]>=LG[8]?0:wp[8];

outlet_l=inlet_l;
outlet_r=inlet_r;

int32_t tp=buf[(wp[8]+(LENGTH<<3))];
IN=__SSAT(inlet_l+tp,28);
int32_t suml=0;
int32_t sumr=0;
for(int i=0;i<8;i++){
	if(i==1){IN+=inlet_r;}
	IN=ALLPASS(IN,frq[i],LG[i],i);
	if((i&1)>0)
	{
		suml+=___SMMUL(IN,vol[i]);
		sumr+=___SMMUL(IN,vol[i])>>1;
	}
	else
	{
		suml+=___SMMUL(IN,vol[i])>>1;
		sumr+=___SMMUL(IN,vol[i]);
	}
}
outlet_l+=___SMMUL(suml,param_wet)<<2;
outlet_r+=___SMMUL(sumr,param_wet)<<2;
IN-=___SMMUL(decay,IN)<<1;

val[0]+=IN-val[0]>>6;
IN-=___SMMUL(param_brighten,val[0])<<3;
int32_t hp;
val[1]+=IN-val[1]>>5;
hp=IN-val[1];
IN-=___SMMUL(param_darken,hp)<<3;

buf[(wp[8]+(LENGTH<<3))]=IN;]]></code.srate>
      </object>
   </patchobj>
   <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_2" x="1064" y="2772">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_3" x="1134" y="2772">
      <params/>
      <attribs/>
   </obj>
   <obj type="sss/audio/StOutVol" uuid="0ca9cf1e-1ce3-469c-80da-a4a885c21246" name="StOutVol_1" x="1218" y="2772">
      <params>
         <frac32.u.map name="volume" value="32.0"/>
      </params>
      <attribs/>
   </obj>
   <nets>
      <net>
         <source obj="phasor_1" outlet="phasor"/>
         <dest obj="tripple morphing PM osc" inlet="mix"/>
      </net>
      <net>
         <source obj="square_3" outlet="wave"/>
         <dest obj="tremelo_2" inlet="trig"/>
         <dest obj="counter_11" inlet="trig"/>
         <dest obj="tremelo_1" inlet="trig"/>
         <dest obj="counter_12" inlet="trig"/>
         <dest obj="counter_19" inlet="trig"/>
         <dest obj="counter_16" inlet="trig"/>
         <dest obj="counter_15" inlet="trig"/>
         <dest obj="counter_13" inlet="trig"/>
         <dest obj="counter_20" inlet="trig"/>
         <dest obj="counter_21" inlet="trig"/>
      </net>
      <net>
         <source obj="square_3" outlet="rate"/>
         <dest obj="tremelo_2" inlet="rate"/>
         <dest obj="tremelo_3" inlet="rate"/>
         <dest obj="tremelo_4" inlet="rate"/>
         <dest obj="tremelo_5" inlet="rate"/>
         <dest obj="tremelo_1" inlet="rate"/>
         <dest obj="tremelo_6" inlet="rate"/>
         <dest obj="phasor_1" inlet="pitch"/>
      </net>
      <net>
         <source obj="counter_14" outlet="o"/>
         <dest obj="alloc_3" inlet="cntBase"/>
      </net>
      <net>
         <source obj="counter_14" outlet="max"/>
         <dest obj="alloc_3" inlet="maxBase"/>
      </net>
      <net>
         <source obj="counter_13" outlet="c"/>
         <dest obj="counter_14" inlet="trig"/>
      </net>
      <net>
         <source obj="counter_13" outlet="o"/>
         <dest obj="alloc_3" inlet="cntNxt"/>
      </net>
      <net>
         <source obj="counter_13" outlet="max"/>
         <dest obj="alloc_3" inlet="maxNxt"/>
      </net>
      <net>
         <source obj="counter_16" outlet="o"/>
         <dest obj="alloc_2" inlet="cntArp"/>
         <dest obj="alloc_2" inlet="cntNxt"/>
      </net>
      <net>
         <source obj="counter_16" outlet="c"/>
         <dest obj="counter_17" inlet="trig"/>
      </net>
      <net>
         <source obj="counter_17" outlet="o"/>
         <dest obj="alloc_2" inlet="cntBase"/>
      </net>
      <net>
         <source obj="counter_17" outlet="max"/>
         <dest obj="alloc_2" inlet="maxBase"/>
      </net>
      <net>
         <source obj="counter_16" outlet="max"/>
         <dest obj="alloc_2" inlet="maxArp"/>
         <dest obj="alloc_2" inlet="maxNxt"/>
      </net>
      <net>
         <source obj="alloc_2" outlet="note"/>
         <dest obj="alloc_4" inlet="key"/>
         <dest obj="alloc_5" inlet="key"/>
         <dest obj="alloc_3" inlet="key"/>
         <dest obj="alloc_6" inlet="key"/>
      </net>
      <net>
         <source obj="counter_11" outlet="o"/>
         <dest obj="alloc_4" inlet="cntArp"/>
      </net>
      <net>
         <source obj="alloc_3" outlet="cur"/>
         <dest obj="alloc_4" inlet="baseOffset"/>
         <dest obj="alloc_5" inlet="baseOffset"/>
         <dest obj="alloc_6" inlet="baseOffset"/>
      </net>
      <net>
         <source obj="counter_11" outlet="max"/>
         <dest obj="alloc_4" inlet="maxArp"/>
      </net>
      <net>
         <source obj="alloc_3" outlet="note"/>
         <dest obj="interp_5" inlet="i"/>
      </net>
      <net>
         <source obj="counter_17" outlet="c"/>
         <dest obj="alloc_4" inlet="rnd"/>
         <dest obj="tripple morphing PM osc" inlet="rnd"/>
         <dest obj="alloc_5" inlet="rnd"/>
         <dest obj="alloc_3" inlet="rnd"/>
         <dest obj="counter_18" inlet="trig"/>
         <dest obj="alloc_6" inlet="rnd"/>
         <dest obj="allpass reverb" inlet="rnd"/>
      </net>
      <net>
         <source obj="tripple morphing PM osc" outlet="wave"/>
         <dest obj="vca_1" inlet="a"/>
      </net>
      <net>
         <source obj="ad_2" outlet="env"/>
         <dest obj="mix_3" inlet="in1"/>
      </net>
      <net>
         <source obj="ad_3" outlet="env"/>
         <dest obj="mix_4" inlet="in1"/>
      </net>
      <net>
         <source obj="ad_4" outlet="env"/>
         <dest obj="mix_5" inlet="in1"/>
      </net>
      <net>
         <source obj="interp_1" outlet="o"/>
         <dest obj="tripple morphing PM osc" inlet="modGain1"/>
      </net>
      <net>
         <source obj="interp_2" outlet="o"/>
         <dest obj="tripple morphing PM osc" inlet="modGain2"/>
      </net>
      <net>
         <source obj="interp_3" outlet="o"/>
         <dest obj="tripple morphing PM osc" inlet="modGain3"/>
      </net>
      <net>
         <source obj="alloc_3" outlet="trg"/>
         <dest obj="ad_3" inlet="trig"/>
         <dest obj="ad_4" inlet="trig"/>
         <dest obj="ad_5" inlet="trig"/>
         <dest obj="ad_2" inlet="trig"/>
         <dest obj="tremelo_3" inlet="trig"/>
         <dest obj="tremelo_4" inlet="trig"/>
         <dest obj="tremelo_5" inlet="trig"/>
      </net>
      <net>
         <source obj="ad_5" outlet="env"/>
         <dest obj="vca_1" inlet="v"/>
         <dest obj="mix_1" inlet="in1"/>
      </net>
      <net>
         <source obj="vca_1" outlet="o"/>
         <dest obj="mix_2" inlet="in1"/>
      </net>
      <net>
         <source obj="tremelo_1" outlet="env"/>
         <dest obj="mix_1" inlet="in3"/>
         <dest obj="alloc_3" inlet="mod"/>
      </net>
      <net>
         <source obj="mix_1" outlet="out"/>
         <dest obj="interp_4" inlet="i"/>
      </net>
      <net>
         <source obj="interp_4" outlet="o"/>
         <dest obj="phasor_1" inlet="phase"/>
      </net>
      <net>
         <source obj="interp_5" outlet="o"/>
         <dest obj="tripple morphing PM osc" inlet="pitch"/>
      </net>
      <net>
         <source obj="tremelo_2" outlet="env"/>
         <dest obj="mix_1" inlet="in2"/>
      </net>
      <net>
         <source obj="alloc_4" outlet="note"/>
         <dest obj="saw_1" inlet="pitch"/>
         <dest obj="change_1" inlet="in"/>
      </net>
      <net>
         <source obj="saw_1" outlet="wave"/>
         <dest obj="lp_SVF_1" inlet="in"/>
      </net>
      <net>
         <source obj="lp_SVF_1" outlet="out"/>
         <dest obj="vca_2" inlet="a"/>
      </net>
      <net>
         <source obj="vca_2" outlet="o"/>
         <dest obj="mix_2" inlet="in2"/>
      </net>
      <net>
         <source obj="ad_6" outlet="env"/>
         <dest obj="vca_2" inlet="v"/>
         <dest obj="lp_SVF_1" inlet="pitch"/>
      </net>
      <net>
         <source obj="counter_15" outlet="o"/>
         <dest obj="alloc_4" inlet="ofs"/>
      </net>
      <net>
         <source obj="tremelo_6" outlet="env"/>
         <dest obj="lp_SVF_1" inlet="reso"/>
      </net>
      <net>
         <source obj="or_3" outlet="o"/>
         <dest obj="ad_6" inlet="trig"/>
         <dest obj="tremelo_6" inlet="trig"/>
      </net>
      <net>
         <source obj="counter_18" outlet="c"/>
         <dest obj="alloc_2" inlet="rnd"/>
      </net>
      <net>
         <source obj="counter_19" outlet="o"/>
         <dest obj="sel_1" inlet="in"/>
         <dest obj="alloc_3" inlet="cntArp"/>
      </net>
      <net>
         <source obj="counter_19" outlet="max"/>
         <dest obj="alloc_3" inlet="maxArp"/>
      </net>
      <net>
         <source obj="counter_15" outlet="0"/>
         <dest obj="or_3" inlet="i1"/>
      </net>
      <net>
         <source obj="change_1" outlet="trig"/>
         <dest obj="or_3" inlet="i2"/>
      </net>
      <net>
         <source obj="tremelo_3" outlet="env"/>
         <dest obj="mix_3" inlet="in2"/>
      </net>
      <net>
         <source obj="mix_3" outlet="out"/>
         <dest obj="interp_1" inlet="i"/>
      </net>
      <net>
         <source obj="tremelo_4" outlet="env"/>
         <dest obj="mix_4" inlet="in2"/>
      </net>
      <net>
         <source obj="tremelo_5" outlet="env"/>
         <dest obj="mix_5" inlet="in2"/>
      </net>
      <net>
         <source obj="mix_4" outlet="out"/>
         <dest obj="interp_2" inlet="i"/>
      </net>
      <net>
         <source obj="mix_5" outlet="out"/>
         <dest obj="interp_3" inlet="i"/>
      </net>
      <net>
         <source obj="alloc_5" outlet="note"/>
         <dest obj="tri_2" inlet="pitch"/>
         <dest obj="change_2" inlet="in"/>
      </net>
      <net>
         <source obj="counter_20" outlet="o"/>
         <dest obj="alloc_5" inlet="ofs"/>
      </net>
      <net>
         <source obj="counter_12" outlet="o"/>
         <dest obj="alloc_5" inlet="cntArp"/>
         <dest obj="alloc_6" inlet="cntArp"/>
      </net>
      <net>
         <source obj="counter_12" outlet="max"/>
         <dest obj="alloc_5" inlet="maxArp"/>
         <dest obj="alloc_6" inlet="maxArp"/>
      </net>
      <net>
         <source obj="alloc_5" outlet="base"/>
         <dest obj="tri_1" inlet="pitch"/>
         <dest obj="change_4" inlet="in"/>
      </net>
      <net>
         <source obj="mix_6" outlet="out"/>
         <dest obj="mix_2" inlet="in3"/>
      </net>
      <net>
         <source obj="tri_2" outlet="wave"/>
         <dest obj="vca_4" inlet="a"/>
      </net>
      <net>
         <source obj="alloc_6" outlet="note"/>
         <dest obj="tri_3" inlet="pitch"/>
         <dest obj="change_3" inlet="in"/>
      </net>
      <net>
         <source obj="tri_3" outlet="wave"/>
         <dest obj="vca_5" inlet="a"/>
      </net>
      <net>
         <source obj="counter_21" outlet="o"/>
         <dest obj="alloc_6" inlet="ofs"/>
      </net>
      <net>
         <source obj="change_2" outlet="trig"/>
         <dest obj="ad_7" inlet="trig"/>
      </net>
      <net>
         <source obj="change_3" outlet="trig"/>
         <dest obj="ad_8" inlet="trig"/>
      </net>
      <net>
         <source obj="change_4" outlet="trig"/>
         <dest obj="ad_9" inlet="trig"/>
      </net>
      <net>
         <source obj="vca_4" outlet="o"/>
         <dest obj="mix_6" inlet="in2"/>
      </net>
      <net>
         <source obj="vca_5" outlet="o"/>
         <dest obj="mix_6" inlet="in3"/>
      </net>
      <net>
         <source obj="ad_9" outlet="env"/>
         <dest obj="vca_3" inlet="v"/>
      </net>
      <net>
         <source obj="ad_7" outlet="env"/>
         <dest obj="vca_4" inlet="v"/>
      </net>
      <net>
         <source obj="ad_8" outlet="env"/>
         <dest obj="vca_5" inlet="v"/>
      </net>
      <net>
         <source obj="vca_3" outlet="o"/>
         <dest obj="mix_6" inlet="in1"/>
      </net>
      <net>
         <source obj="*c_1" outlet="out"/>
         <dest obj="allpass reverb" inlet="l"/>
         <dest obj="allpass reverb" inlet="r"/>
      </net>
      <net>
         <source obj="allpass reverb" outlet="l"/>
         <dest obj="+_2" inlet="in1"/>
      </net>
      <net>
         <source obj="allpass reverb" outlet="r"/>
         <dest obj="+_3" inlet="in1"/>
      </net>
      <net>
         <source obj="mix_2" outlet="out"/>
         <dest obj="*c_1" inlet="in"/>
      </net>
      <net>
         <source obj="tri_1" outlet="wave"/>
         <dest obj="vca_3" inlet="a"/>
      </net>
      <net>
         <source obj="sel_1" outlet="o1"/>
         <dest obj="obj_1" inlet="trig"/>
      </net>
      <net>
         <source obj="mix_7" outlet="out"/>
         <dest obj="+_2" inlet="in2"/>
         <dest obj="+_3" inlet="in2"/>
      </net>
      <net>
         <source obj="obj_1" outlet="out"/>
         <dest obj="mix_7" inlet="in1"/>
      </net>
      <net>
         <source obj="sel_1" outlet="o2"/>
         <dest obj="obj_2" inlet="trig"/>
      </net>
      <net>
         <source obj="obj_2" outlet="out"/>
         <dest obj="mix_7" inlet="in2"/>
      </net>
      <net>
         <source obj="sel_1" outlet="o3"/>
         <dest obj="obj_3" inlet="trig"/>
      </net>
      <net>
         <source obj="+_2" outlet="out"/>
         <dest obj="StOutVol_1" inlet="left"/>
      </net>
      <net>
         <source obj="+_3" outlet="out"/>
         <dest obj="StOutVol_1" inlet="right"/>
      </net>
      <net>
         <source obj="obj_3" outlet="out"/>
         <dest obj="mix_7" inlet="in3"/>
         <dest obj="mix_2" inlet="bus_in"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
      <MidiChannel>1</MidiChannel>
      <NPresets>0</NPresets>
      <NPresetEntries>0</NPresetEntries>
      <NModulationSources>0</NModulationSources>
      <NModulationTargetsPerSource>0</NModulationTargetsPerSource>
      <Author></Author>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>-8</x>
      <y>-8</y>
      <width>1874</width>
      <height>1096</height>
   </windowPos>
</patch-1.0>