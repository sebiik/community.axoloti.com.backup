<patch-1.0 appVersion="1.0.12">
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="trigger" x="574" y="126">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="randomise settings" x="742" y="182">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="364" y="224" text="first setup the envelope for all stages (gateStages+releaseStages)"/>
   <comment type="patch/comment" x="378" y="238" text="use the &quot;stage&quot; selector to select which stage you want to edit"/>
   <comment type="patch/comment" x="672" y="238" text="or just press this handy &quot;random&quot; button above ;)"/>
   <comment type="patch/comment" x="238" y="252" text="when you change between stages, parameters are updated to the values of the selected stage"/>
   <comment type="patch/comment" x="406" y="266" text="then press &quot;save&quot; to have at least one envelope set up"/>
   <patchobj type="patch/object" uuid="325b31c0-0868-40e5-a0a5-d9df40a09752" name="adsr_2" x="672" y="308">
      <params>
         <int32 name="gateStages" value="8"/>
         <int32.hradio name="sustainLoop" value="1"/>
         <int32 name="loopStartStage" value="6"/>
         <int32 name="loops" value="-13"/>
         <int32 name="releaseStages" value="7"/>
         <bool32.tgl name="releaseScaling" value="0"/>
         <frac32.s.map name="time" value="-6.10546875"/>
         <frac32.s.map name="fixed2lin2exp" value="-25.439453125"/>
         <frac32.s.map name="goal" value="37.962890625"/>
         <int32 name="stage" value="0"/>
         <frac32.s.map name="mainTiming" value="-38.0"/>
      </params>
      <attribs>
         <spinner attributeName="maxStages" value="16"/>
         <combo attributeName="init" selection="reset"/>
      </attribs>
      <object id="patch/object" uuid="325b31c0-0868-40e5-a0a5-d9df40a09752">
         <sDescription>Attack/decay/sustain/release envelope</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>adsr.axh</helpPatch>
         <inlets>
            <bool32.risingfalling name="gate" description="gate input"/>
            <bool32 name="update" description="when loading a table from SD-card this updates the parameters to the new table values. Make sure it first loads the table and then update the parameters DIRECTLY AFTER that."/>
            <bool32 name="rnd"/>
         </inlets>
         <outlets>
            <frac32.positive name="env" description="envelope output"/>
            <int32 name="stage" description="stage output"/>
            <bool32 name="looping"/>
            <int32 name="loop"/>
            <bool32 name="ended"/>
         </outlets>
         <displays>
            <bool32 name="releaseStage" description="lightens up when editing release stages"/>
         </displays>
         <params>
            <int32 name="gateStages" description="sets the amount of stages for the &quot;gate-high&quot; part. Also sets last stage (sustain/end loop) for as long as gate-in is high if sustain/loop is used">
               <MinValue i="1"/>
               <MaxValue i="64"/>
            </int32>
            <int32.hradio name="sustainLoop" description="sets sustain/loop mode: 0=no sustain or loop but auto-release, 1=last gateStage is sustained, 2=loop back to loopStartStage after last gateStage">
               <MaxValue i="3"/>
            </int32.hradio>
            <int32 name="loopStartStage" description="sets loop start stage: loop-stages-range is &quot;gateStages-loopStartStage&quot;">
               <MinValue i="0"/>
               <MaxValue i="64"/>
            </int32>
            <int32 name="loops" description="0=infinite looping while gate is high. Above 0, sets the amount of repeats of the looping stages, after which it sustains the last gateStage. Below 0, will force to release stage after finishing the amount of -loops.">
               <MinValue i="-64"/>
               <MaxValue i="64"/>
            </int32>
            <int32 name="releaseStages" description="sets amount of stages for the release part">
               <MinValue i="1"/>
               <MaxValue i="64"/>
            </int32>
            <bool32.tgl name="releaseScaling" description="when on, the release &quot;goal&quot; values are scaled to the last envelope value when gate was still high, so they can&apos;t go over the level of the gate-high part. In this case, &quot;goal&quot; sets the amount of this final value as a ratio"/>
            <frac32.s.map.klineartime.exp name="time" description="sets the time duration of the selected stage"/>
            <frac32.s.map name="fixed2lin2exp" description="crossfades the timing-rate by mode of the selected stage (averaging of change-rates of 2 modes) : negative=linear/fixed time, center=linear/fixed rate, positive=exponential/difference dependent rate"/>
            <frac32.s.map name="goal" description="sets the target value of the selected stage"/>
            <int32 name="stage" description="select which stage to edit (see display below to check whether you&apos;re editing the gate high or release stage)">
               <MinValue i="0"/>
               <MaxValue i="63"/>
            </int32>
            <frac32.s.map name="mainTiming"/>
         </params>
         <attribs>
            <spinner name="maxStages" MinValue="1" MaxValue="64" DefaultValue="4"/>
            <combo name="init">
               <MenuEntries>
                  <string>keep</string>
                  <string>reset</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[static const uint32_t PARAMS=3;
static const uint32_t PRE=6;
static const uint32_t LENGTH=PRE+attr_maxStages*PARAMS;
int8_t stage;
int16_t *array;
int ntrig,sSel,ldtrig,loopcnt,upd,rnd;
int32_t val,ldif;
int32_t scaling=0;]]></code.declaration>
         <code.init><![CDATA[stage = attr_maxStages-1;
ntrig = 0;
val = 0;
loopcnt=0;

static int16_t _array[LENGTH] __attribute__ ((section (".sdram")));
array = &_array[0];
if(attr_init)
{ 
  int i;
  for(i=0;i<LENGTH;i++)
  {
  	array[i]=0;
  }
}]]></code.init>
         <code.krate><![CDATA[int UPD=inlet_update;

if(inlet_rnd&&!rnd)
{
	rnd=1;
	int tmax=(GenerateRandomNumber()%(attr_maxStages-1))+2;
	int gmax=(GenerateRandomNumber()%tmax)+1;
	int rmax=tmax-gmax;//(GenerateRandomNumber()%(tmax-gmax))+1;
	array[0]=gmax;
	array[1]=(GenerateRandomNumber()%3);
	array[2]=(GenerateRandomNumber()%gmax);
	array[3]=(int32_t)(GenerateRandomNumber())%16;
	array[4]=rmax;
	array[5]=(GenerateRandomNumber()&1);
	UPD=1;
	for(int i=0;i<tmax;i++)
	{
		int k=i*PARAMS+PRE;
		array[k]=((int32_t)(GenerateRandomNumber())>>6)>>12;
		array[k+1]=((int32_t)(GenerateRandomNumber())>>5)>>12;
		array[k+2]=((int32_t)(GenerateRandomNumber()>>5))>>12;
	}
	
}
else if(!inlet_rnd)
{
	rnd=0;
}

if(UPD&&!upd)
{
	for(int i=0;i<PRE;i++)
	{
		PExParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_gateStages+i],(int32_t)array[i],0xFFFD);
	}
}
else if(!UPD)
{
	upd=0;
	array[0]=param_gateStages;
	array[1]=param_sustainLoop;
	array[2]=param_loopStartStage;
	array[3]=param_loops;
	array[4]=param_releaseStages;
	array[5]=param_releaseScaling;
}



int ssel=param_stage;
int smax=attr_maxStages;
int gmax=param_gateStages;
int rmax=param_releaseStages;
int lss=param_loopStartStage;
int lmax=param_loops>0?param_loops:-param_loops;
int susloop=param_sustainLoop;

int tmax;
if((gmax+rmax)>smax)
{	
	while((gmax+rmax)>smax)
	{
		if(gmax>rmax)
		{
			gmax-=1;
		}
		else
		{
			rmax-=1;
		}
	}
	PExParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_gateStages],gmax,0xFFFD);
	PExParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_releaseStages],rmax,0xFFFD);
}
tmax=rmax+gmax;
if(lss>=gmax)
{
	while(lss>=gmax)
	{
		lss-=1;
	}
	PExParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_loopStartStage],lss,0xFFFD);
}

if((gmax==1)&&(susloop>1))
{
	susloop=1;
	PExParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_sustainLoop],1,0xFFFD);
}

if(ssel>(gmax+rmax-1))
{
	while(ssel>(gmax+rmax-1))
	{
		ssel-=1;
	}
	PExParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_stage],ssel,0xFFFD);
}

if(ssel>=gmax)
{
	disp_releaseStage=1;
}
else
{
	disp_releaseStage=0;
}


if(UPD&&!upd)
{
	
	upd=1;
	stage=array[0]+array[4]+1;
	tmax=array[0]+array[4];

	//loopcnt=param_loops;
	for(int i=0;i<PARAMS;i++)
	{
		PExParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_time+i],array[6+ssel*PARAMS+i]<<12,0xFFFD);
	}
}



if(!(sSel==ssel))
{
	
	sSel=ssel;
	int ofs=PRE+PARAMS*ssel;
	for(int i=0;i<3;i++)
	{
		PExParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_time+i],(int32_t)array[ofs+i]<<12,0xFFFD);
	}
}
else
{
	int ofs=PRE+PARAMS*ssel;
	array[ofs]=param_time>>12;
	array[ofs+1]=param_fixed2lin2exp>>12;
	array[ofs+2]=param_goal>>12;
}




if ((inlet_gate>0) && !ntrig) {
   ntrig = 1;
   stage=0;
   ldtrig=1;
   loopcnt=0;
}
if (!(inlet_gate>0) && ntrig) {
	if((susloop>0)&&(stage<gmax))
   	{
   		stage = gmax;
   	}
   	ldtrig=1;
   ntrig=0;
   loopcnt=0;
}

if(stage<tmax)
{
	int ofs=PRE+PARAMS*stage;
	int32_t lr,er,fr,rate=array[ofs]<<12;
	int32_t curve=__SSAT(array[ofs+1]<<12,28)<<4;
	curve-=curve>>17;
	int32_t goal=array[ofs+2]<<12;
	
	if(stage==(tmax-1))
	{
		goal=0;
	}
	else if((stage>=gmax)&&param_releaseScaling)
	{
		goal=___SMMUL(scaling,goal)<<5;
	}

	if(ldtrig)
	{
		ldtrig=0;
		ldif=goal-val;
	}
	
	MTOF(-rate-param_mainTiming,rate)
	lr=rate>>10;
	er=rate>>2;
	fr=___SMMUL(rate,ldif)>>1;
	int32_t dif=goal-val;
	
	if(dif>0)
	{
		
			dif=lr+(___SMMUL((curve>=0?___SMMUL(er,dif):fr)-lr,curve>0?curve:-curve)<<1);
		
		dif=dif>0?dif:8;
		val+=dif;

		if(val>goal)
		{
			val=goal;
			stage+=1;
			ldtrig=1;
		}
	}
	else if(dif<0)
	{
		dif=-lr+(___SMMUL((curve>=0?___SMMUL(er,dif):fr)+lr,curve>0?curve:-curve)<<1);
		dif=dif<0?dif:-8;
		val+=dif;

		if(val<goal)
		{
			val=goal;
			stage+=1;
			ldtrig=1;
		}
	}
	else if(dif==0)
	{
		stage+=1;
		ldtrig=1;
	}
	int usm=loopcnt-lmax+(lmax>0?2:0);
	int ls=1+(param_loops<0?1:0);
	usm=usm>1?ls:0;
	susloop=__USAT(susloop-usm,3);

	if(stage<gmax)
	{
		outlet_looping=1;
	}
	else
	{
		outlet_looping=0;
	}

	
	if(susloop>0)
	{
		if(inlet_gate&&(stage>=gmax))
		{
			if(susloop<2)
			{
				stage=gmax-1;
				ldtrig=1;
			}
			else
			{
				stage=lss;
				ldtrig=1;
				if(lmax>0)
				{
					loopcnt+=1;
				}
			}
		}
	}
	if(inlet_gate)
	{
		scaling=val;
	}
	
}
else
{
	outlet_looping=0;
	stage=stage>tmax?tmax:stage;
}


outlet_env=val;
outlet_stage=stage;
outlet_loop=loopcnt;
outlet_ended=stage>=tmax;]]></code.krate>
      </object>
   </patchobj>
   <obj type="disp/chart b" uuid="d2bdf496f96ee521628490a038411210fbe29b15" name="envelope output" x="798" y="308">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/i" uuid="5e35fd0c62d81e70017289250cf28edd26e19e4a" name="current stage" x="882" y="308">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="currently looping" x="952" y="308">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1148" y="308" text="make sure the table-load module is triggered BEFORE the envelope update input!"/>
   <comment type="patch/comment" x="1148" y="322" text="you can also put this entire row before the envelope module, but you CAN NOT put the envelope module in between the load button and the load module!"/>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="load" x="1148" y="336">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/i" uuid="a3786816db6ea5bc6ac4193a5cccdb2c83b83496" name="preset" x="1218" y="336">
      <params>
         <int32 name="value" value="3"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="save" x="1274" y="336">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="string/indexed" uuid="a28740deef67c39ffc65bd0f341a47c9b196f46" name="indexed_1" x="1344" y="336">
      <params/>
      <attribs>
         <table attributeName="prefix" table="../msenv"/>
         <table attributeName="suffix" table=".tab"/>
      </attribs>
   </obj>
   <obj type="table/load" uuid="600cc22c6734d23a82620da1a14e78782a7e168e" name="load_1" x="1512" y="336">
      <params/>
      <attribs>
         <objref attributeName="table" obj="adsr_2"/>
      </attribs>
   </obj>
   <obj type="table/save" uuid="3e4108b607d56d9e1cd10abb898b58eea11e53b2" name="save_1" x="1638" y="336">
      <params/>
      <attribs>
         <objref attributeName="table" obj="adsr_2"/>
      </attribs>
   </obj>
   <obj type="disp/i" uuid="5e35fd0c62d81e70017289250cf28edd26e19e4a" name="current loop number" x="938" y="364">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="420" y="406" text="set maximally allowed total amount of stages here"/>
   <comment type="patch/comment" x="56" y="420" text="set startup-mode. usable if you go (un)live multiple times. &quot;keep&quot; doesn&apos;t reset the internal table when going unlive and live again"/>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="envelope has ended (returned to zero at last stage)" x="798" y="420">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="420" y="434" text="set up the amount of multi-stages while gate is high"/>
   <comment type="patch/comment" x="406" y="448" text="set sustain mode: 0=auto-release,1=sustain, 2=loop"/>
   <comment type="patch/comment" x="518" y="462" text="sets a start stage when looping"/>
   <comment type="patch/comment" x="308" y="476" text="amount of loops allow (&quot;negative&quot; amount of loops for auto-release function)"/>
   <comment type="patch/comment" x="126" y="490" text="set up the amount of multi-stages for release part. Last stage will always go to zero, no matter the goal-value set up"/>
   <comment type="patch/comment" x="84" y="504" text="when on, scales the maximum release goal to the last value of the envelope, preventing it from going higher during release"/>
   <comment type="patch/comment" x="434" y="532" text="sets the time/rate of the currently selected stage"/>
   <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="*c_3" x="980" y="546">
      <params>
         <frac32.u.map name="amp" value="16.5"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="406" y="560" text="sets the time/rate mode of the currently selected stage"/>
   <comment type="patch/comment" x="336" y="574" text="this cross-fades between linear time,linear rate and exponential rate"/>
   <comment type="patch/comment" x="476" y="602" text="sets the goal-value of the current stage"/>
   <comment type="patch/comment" x="350" y="616" text="when scaled, 64 is the last value of the envelope during gate-high"/>
   <comment type="patch/comment" x="546" y="630" text="select the stage to edit"/>
   <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="*c_1" x="966" y="630">
      <params>
         <frac32.u.map name="amp" value="28.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="*c_2" x="1064" y="630">
      <params>
         <frac32.u.map name="amp" value="21.5"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="56aba314-974a-4bdc-a056-d0093749ee50" name="sinet sine self FM_1" x="1162" y="630">
      <params>
         <frac32.s.map name="pitch" value="-24.0"/>
         <frac32.s.map name="track" value="27.0"/>
         <frac32.s.map name="bass" value="-37.08999967575073"/>
         <bool32.tgl name="fifth" value="1"/>
         <bool32.tgl name="sub" value="1"/>
         <bool32.tgl name="Ftrack" value="1"/>
         <frac32.u.map name="amp" value="53.5"/>
         <frac32.s.map name="fm" value="0.0"/>
         <frac32.s.map name="abs" value="-41.0"/>
         <bool32.tgl name="hp" value="1"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="56aba314-974a-4bdc-a056-d0093749ee50">
         <sDescription>&quot;stay in range&quot; sine wave oscillator</sDescription>
         <author>Remco van der Most</author>
         <license>BSD</license>
         <helpPatch>osc.axh</helpPatch>
         <inlets>
            <frac32.bipolar name="pitch" description="pitch"/>
            <frac32.bipolar name="bass"/>
            <frac32 name="fm"/>
         </inlets>
         <outlets>
            <frac32buffer.bipolar name="wave" description="sine wave"/>
            <frac32 name="bass"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.pitch name="pitch" noLabel="true"/>
            <frac32.s.map.ratio name="track"/>
            <frac32.s.map.pitch name="bass"/>
            <bool32.tgl name="fifth"/>
            <bool32.tgl name="sub"/>
            <bool32.tgl name="Ftrack"/>
            <frac32.u.map.gain name="amp"/>
            <frac32.s.map name="fm"/>
            <frac32.s.map name="abs"/>
            <bool32.tgl name="hp"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[uint32_t P1,P2,P3,ppitch;
int32_t FRQ,hp,wave,lp;]]></code.declaration>
         <code.init><![CDATA[P1 = 0;
P2 = 0;
P3 = 0;]]></code.init>
         <code.krate><![CDATA[int32_t froot;
int32_t pitch=param_pitch+inlet_pitch;
int32_t bass=inlet_bass+param_bass+___SMMUL(pitch<<1,param_track<<4);
outlet_bass=bass;

MTOFEXTENDED(pitch,froot);
int32_t Fbass;

pitch-=bass;
uint64_t pqnt=(uint64_t)pitch+((uint64_t)12<<28);
pqnt=pqnt/12>>21;
int dif=pqnt-ppitch;
dif=dif>=0?dif:-dif;
if(pqnt<ppitch)
{
	P1=(uint64_t)P1<<dif;
}
else if(pqnt>ppitch)
{
	P1=P1>>dif;
}

pitch-=(pqnt-128)*12<<21;

if(pitch<0)
{while(pitch<0){pitch+=(12<<21);}}
else if(pitch>=(12<<21))
{while(pitch>=(12<<21)){pitch-=(12<<21);}}

uint32_t mix=((uint64_t)pitch<<8)/3;
int32_t fbass;
MTOFEXTENDED(pitch+bass,fbass)
fbass=fbass>>2;
ppitch=pqnt;

int32_t fm=___SMMUL(fbass,param_fm+inlet_fm)<<5;
int ft=2+param_fifth;
if(param_Ftrack)
{
	Fbass=froot>>2;
}
else
{
	Fbass=fbass;
}
int32_t Fm=___SMMUL(Fbass,param_fm+inlet_fm)<<5;
int ahp=param_hp*9;
int dhp=(param_hp)*7;]]></code.krate>
         <code.srate><![CDATA[P1 += fbass+(___SMMUL(fm,wave)<<4+dhp);

int32_t r1,r2,r3;
r1=sinet[((uint32_t)P1<<2)>>22]<<11;
r2=sinet[((uint32_t)P1<<3)>>22]<<11;
r3=sinet[((uint32_t)P1<<4)>>22]<<11;
r3+=___SMMUL(r1-r3,mix)<<1;
wave= r3+r2;
if(param_fifth||param_sub)
{
if(param_Ftrack)
{
	P2 += Fbass+(___SMMUL(Fm,wave)<<9);
}
else
{
	P2=P1;
}

r2=sinet[((uint32_t)P2*ft<<2-param_sub)>>22]<<12;
if(!param_Ftrack)
{
	r1=sinet[((uint32_t)P2*ft<<1-param_sub)>>22]<<12;
	r3=sinet[((uint32_t)P2*ft<<3-param_sub)>>22]<<12;
	r3+=___SMMUL(r1-r3,mix)<<1;
}
else
{
	r3=0;
}
wave+= ___SMMUL(r3+r2,param_amp);
}

outlet_wave=wave>>1;
wave=wave>0?wave:___SMMUL(wave,param_abs)<<5;
lp+=wave-lp>>1;
wave=lp;
hp+=wave-hp>>10-ahp;
wave-=hp;]]></code.srate>
      </object>
   </patchobj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_1" x="1260" y="630">
      <params/>
      <attribs/>
   </obj>
   <obj type="sss/audio/StOutVol" uuid="0ca9cf1e-1ce3-469c-80da-a4a885c21246" name="StOutVol_1" x="1316" y="630">
      <params>
         <frac32.u.map name="volume" value="27.0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="532" y="658" text="main scaling for all times"/>
   <comment type="patch/comment" x="378" y="686" text="shows whether you&apos;re editting a gate-stage or a release-stage"/>
   <comment type="patch/comment" x="70" y="714" text="some controls are being limited in certain cases:"/>
   <comment type="patch/comment" x="70" y="728" text="when sum of gate and release stages exceeds the maximum amount of stages (attribute setting), the biggest one is being shortened so the sum never exceeds the max stages"/>
   <comment type="patch/comment" x="70" y="742" text="when gate-stages is set to 1, the module can&apos;t go into loop mode. Either it goes attack-sustain-decay or goes attack-release (depending on sustainLoop setting)"/>
   <comment type="patch/comment" x="70" y="756" text="you can&apos;t select a stage that exceeds the amount of gate+release stages"/>
   <comment type="patch/comment" x="1266" y="864" text="a very nice oscillator ;)"/>
   <nets>
      <net>
         <source obj="adsr_2" outlet="env"/>
         <dest obj="*c_1" inlet="in"/>
         <dest obj="*c_2" inlet="in"/>
         <dest obj="vca_1" inlet="v"/>
         <dest obj="envelope output" inlet="in"/>
         <dest obj="*c_3" inlet="in"/>
      </net>
      <net>
         <source obj="trigger" outlet="o"/>
         <dest obj="adsr_2" inlet="gate"/>
      </net>
      <net>
         <source obj="indexed_1" outlet="out"/>
         <dest obj="save_1" inlet="filename"/>
         <dest obj="load_1" inlet="filename"/>
      </net>
      <net>
         <source obj="save" outlet="o"/>
         <dest obj="save_1" inlet="trig"/>
      </net>
      <net>
         <source obj="load" outlet="o"/>
         <dest obj="load_1" inlet="trig"/>
         <dest obj="adsr_2" inlet="update"/>
      </net>
      <net>
         <source obj="preset" outlet="out"/>
         <dest obj="indexed_1" inlet="index"/>
      </net>
      <net>
         <source obj="sinet sine self FM_1" outlet="wave"/>
         <dest obj="vca_1" inlet="a"/>
      </net>
      <net>
         <source obj="*c_1" outlet="out"/>
         <dest obj="sinet sine self FM_1" inlet="fm"/>
      </net>
      <net>
         <source obj="*c_2" outlet="out"/>
         <dest obj="sinet sine self FM_1" inlet="bass"/>
      </net>
      <net>
         <source obj="vca_1" outlet="o"/>
         <dest obj="StOutVol_1" inlet="left"/>
         <dest obj="StOutVol_1" inlet="right"/>
      </net>
      <net>
         <source obj="adsr_2" outlet="stage"/>
         <dest obj="current stage" inlet="in"/>
      </net>
      <net>
         <source obj="adsr_2" outlet="looping"/>
         <dest obj="currently looping" inlet="in"/>
      </net>
      <net>
         <source obj="adsr_2" outlet="loop"/>
         <dest obj="current loop number" inlet="in"/>
      </net>
      <net>
         <source obj="adsr_2" outlet="ended"/>
         <dest obj="envelope has ended (returned to zero at last stage)" inlet="in"/>
      </net>
      <net>
         <source obj="*c_3" outlet="out"/>
         <dest obj="sinet sine self FM_1" inlet="pitch"/>
      </net>
      <net>
         <source obj="randomise settings" outlet="o"/>
         <dest obj="adsr_2" inlet="rnd"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>-8</x>
      <y>-8</y>
      <width>1874</width>
      <height>1096</height>
   </windowPos>
</patch-1.0>