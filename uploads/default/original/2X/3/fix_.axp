<patch-1.0 appVersion="1.0.12">
   <patchobj type="patch/object" uuid="03e5395f-2ff9-461b-ab81-da4007e13ffe" name="in_1" x="126" y="56">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="03e5395f-2ff9-461b-ab81-da4007e13ffe">
         <sDescription>provides in-patcher information about incoming midi-data

rbrt/midi/in/monitor</sDescription>
         <author>robert schirmer</author>
         <license>BSD</license>
         <inlets/>
         <outlets/>
         <displays>
            <int32.label name="note "/>
            <int32.label name="vel "/>
            <bool32 name="gate "/>
            <int32.label name="cc "/>
            <int32.label name="value "/>
         </displays>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[uint8_t gate;
uint8_t note;
uint8_t velo;
uint8_t cc;
uint8_t ccindex;]]></code.declaration>
         <code.krate><![CDATA[disp_note = note;
disp_vel = velo;
disp_gate = gate;
disp_cc = ccindex;
disp_value = cc;]]></code.krate>
         <code.midihandler><![CDATA[if ((status == MIDI_NOTE_ON + attr_midichannel) && (data2)) 
{gate= 1;velo= data2;note = data1;}
if (((status == MIDI_NOTE_ON + attr_midichannel) && (!data2))||(status == MIDI_NOTE_OFF + attr_midichannel))
gate= 0;

if (status == attr_midichannel + MIDI_CONTROL_CHANGE) {cc = data2;ccindex = data1;}]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="75543b26-e4c5-40d8-a39c-e92fd17d6ec2" name="sel_1" x="210" y="56">
      <params>
         <bin16 name="b16" value="2218"/>
      </params>
      <attribs>
         <spinner attributeName="cc" value="33"/>
      </attribs>
      <object id="patch/object" uuid="75543b26-e4c5-40d8-a39c-e92fd17d6ec2">
         <sDescription>select one out of 16 booleans, chainable</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <inlets>
            <int32 name="in" description="in"/>
            <bool32 name="def" description="default value"/>
         </inlets>
         <outlets>
            <int32 name="chain" description="chain out (in-16)"/>
            <bool32 name="o" description="output"/>
         </outlets>
         <displays>
            <int32.bar16 name="v" noLabel="true"/>
         </displays>
         <params>
            <bin16 name="b16" noLabel="true"/>
         </params>
         <attribs>
            <spinner name="cc" MinValue="0" MaxValue="128" DefaultValue="0"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[uint8_t cc [128];
uint8_t MidiCC;
int32_t P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P15,P16;

bool init = 0;
int prev;// Not sure, but suggested by sirsickksik and it works //]]></code.declaration>
         <code.krate><![CDATA[MidiCC = (attr_cc);

// Midi in send to each step of the sequencer, step 1 is adressed with (1<<0), step 2 (1<<2), etc......
P1 	= (cc[MidiCC +0]) ? (1<<0) : 0;
P2 	= (cc[MidiCC +1]) ? (1<<1) : 0;
P3 	= (cc[MidiCC +2]) ? (1<<2) : 0;
P4 	= (cc[MidiCC +3]) ? (1<<3) : 0;
P5 	= (cc[MidiCC +4]) ? (1<<4) : 0;
P6 	= (cc[MidiCC +5]) ? (1<<5) : 0;
P7 	= (cc[MidiCC +6]) ? (1<<6) : 0;
P8 	= (cc[MidiCC +7]) ? (1<<7) : 0;
P9 	= (cc[MidiCC +8]) ? (1<<8) : 0;
P10 	= (cc[MidiCC +9]) ? (1<<9) : 0;
P11	= (cc[MidiCC +10]) ? (1<<10) : 0;
P12 	= (cc[MidiCC +11]) ? (1<<11) : 0;
P13 	= (cc[MidiCC +12]) ? (1<<12) : 0;
P14 	= (cc[MidiCC +13]) ? (1<<13) : 0;
P15 	= (cc[MidiCC +14]) ? (1<<14) : 0;
P16 	= (cc[MidiCC +15]) ? (1<<15) : 0;

// Send all midi cc controller values to the squencer to control each step
int32_t CollectAllControls = P1+P2+P3+P4+P5+P6+P7+P8+P9+P10+P11+P12+P13+P14+P15+P16;
if (!init) {
	prev = CollectAllControls;
	init = 1;
}
if(!(CollectAllControls==prev)){
PExParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_b16],CollectAllControls,0xFFFD);
}
prev=CollectAllControls;







/*
 * Sequencer.
 */
if ((inlet_in>=0)&&(inlet_in<16))   outlet_o=param_b16&(1<<inlet_in);
else outlet_o = inlet_def;


outlet_chain = inlet_in-16;

disp_v=inlet_in;]]></code.krate>
         <code.midihandler><![CDATA[if (status == attr_midichannel + MIDI_CONTROL_CHANGE) cc[data1] = data2;]]></code.midihandler>
      </object>
   </patchobj>
   <nets/>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>169</x>
      <y>83</y>
      <width>524</width>
      <height>561</height>
   </windowPos>
</patch-1.0>