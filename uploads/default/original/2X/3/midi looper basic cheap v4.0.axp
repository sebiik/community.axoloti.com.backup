<patch-1.0 appVersion="1.0.12">
   <comment type="patch/comment" x="28" y="14" text="NOTES"/>
   <obj type="table/alloc 16b sdram load" uuid="e6b85dad3ab43565cda93ea4c43c73b668b1cd43" name="midiloop" x="1330" y="14">
      <params/>
      <attribs>
         <combo attributeName="size" selection="2048"/>
         <file attributeName="filename" file="/midiloopfc"/>
      </attribs>
   </obj>
   <comment type="patch/comment" x="28" y="28" text="DSP load - this fluctuates a bit.Not a lot, but be careful if your patch is maxed out"/>
   <comment type="patch/comment" x="742" y="28" text="CURRENT SETUP"/>
   <comment type="patch/comment" x="742" y="42" text="resolution = 192ppq "/>
   <comment type="patch/comment" x="28" y="56" text="POLYPHONY - Note recording : there is actually a player and recorder for each midi note"/>
   <comment type="patch/comment" x="742" y="56" text="note range: all (127)"/>
   <comment type="patch/comment" x="98" y="70" text="In theory it can play a chord (all notes at same start point) of 32 notes at once. Possibly more..."/>
   <comment type="patch/comment" x="742" y="70" text=" 7 available clipslots, each with a max of 8 bars"/>
   <comment type="patch/comment" x="98" y="84" text="It is capable of playing back and recording more notes than this, and can probably play more than "/>
   <comment type="patch/comment" x="742" y="84" text="input =DIN, "/>
   <comment type="patch/comment" x="126" y="98" text="32(!) at once if they have different start points."/>
   <comment type="patch/comment" x="742" y="98" text="output = internal, port1 (for the test synth)"/>
   <comment type="patch/comment" x="98" y="112" text="You can limit the range of notes it will record/play, which will reduce the dsp load"/>
   <comment type="patch/comment" x="742" y="112" text="channel = 8"/>
   <comment type="patch/comment" x="98" y="126" text="It won&apos;t record notes outside the limits set on the object"/>
   <comment type="patch/comment" x="742" y="140" text="CONTROLS"/>
   <comment type="patch/comment" x="28" y="154" text="OBJECTS - midi sync, plus 5 different objects to record different types of messages - notes, pitchbend, cc, poly touch and mono touch"/>
   <comment type="patch/comment" x="742" y="168" text="0. select clipslot"/>
   <comment type="patch/comment" x="28" y="182" text="RESOLUTION - Highest resolution is 192ppq, lowest is 24ppq. you can set the resolution for each type of midi message in the objects"/>
   <comment type="patch/comment" x="742" y="182" text="1. Trigger an empty clipslot and it starts recording at next bar. If you trigger it again (or if it reaches the maxbar length)  playback will start at beginning of the next bar "/>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="bool_6" x="1624" y="182">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="756" y="196" text="Trigger a full clipslot and it will start playing at next bar. if already playing, it will restart"/>
   <comment type="patch/comment" x="28" y="210" text=" TABLE SIZE/DATA - Lowering the resolution on the note object  not affect table size needed"/>
   <comment type="patch/comment" x="742" y="210" text="2. click stop to stop at next bar"/>
   <comment type="patch/comment" x="126" y="224" text="Lowering the resolution on the cc/bend/touch recorders will greatly reduce the table size needed"/>
   <comment type="patch/comment" x="742" y="224" text="3. overdub toggles overdub on/off - I don&apos;t think it currently let&apos;s you overdub into an empty slot"/>
   <comment type="patch/comment" x="126" y="238" text="Lowering the amount of clipslots will reduce the table size needed"/>
   <comment type="patch/comment" x="742" y="238" text="4. record button forces record at beginning of next bar, even if slot is full/playing"/>
   <comment type="patch/comment" x="126" y="252" text="Using a smaller table size for the note object (set on the object) will reduce the max number of notes a slot can contain"/>
   <comment type="patch/comment" x="742" y="252" text="5. clear selected clipslot - you can clear a clipslot while another is playing"/>
   <comment type="patch/comment" x="742" y="266" text="6. quantize toggles on /off quantize. quantize amount can be set in the object. so far you can do 1/4, 1/8, 1/16, 1/32. planning to add triplets at some point"/>
   <comment type="patch/comment" x="28" y="280" text="INPUT/OUTPUT DEVICES/CHANNELS - you can set the inputs and outputs and channels in the objects. It will ignore the patch channel settings"/>
   <comment type="patch/comment" x="742" y="280" text="7. Quantization 0-5. if not triplets: 1bar, 1/2bar, 1/4, 1/8th, 1/16th, 1/32nd.    if triplets: 1bar, 1/3,1/6th, etc"/>
   <comment type="patch/comment" x="742" y="294" text="8. set quantize to triplets"/>
   <comment type="patch/comment" x="28" y="308" text="INTERNAL MIDI BUS ROUTING - if you want to record from AND play back from the internal midi bus, use different ports for input and output. "/>
   <comment type="patch/comment" x="742" y="308" text="9. erase shift - if on and you hold a note, any recorded notes that are played (and are the same note) will delete instead of playing"/>
   <comment type="patch/comment" x="168" y="322" text="Otherwise when you overdub it&apos;s going to keep recording it&apos;s own playback. (don&apos;t set input to omni!)"/>
   <comment type="patch/comment" x="742" y="322" text="10. Undo - deletes the last note recorded"/>
   <comment type="patch/comment" x="742" y="336" text="11. save all loops to SD card (interupts playback, and clock will probably need restarting))"/>
   <comment type="patch/comment" x="28" y="350" text="SETTINGS: If you change amount of clipslots or max bar length parameters make sure they match in all recorder objects"/>
   <comment type="patch/comment" x="742" y="350" text="12. Set maximum barlength -  (if 0, or greater than the  maxbar attribute on the  object it will be set to the attribute value)"/>
   <comment type="patch/comment" x="364" y="392" text=" start/stop transport"/>
   <comment type="patch/comment" x="322" y="406" text="(if using external midi clock leave off)"/>
   <comment type="patch/comment" x="532" y="406" text="metronom vol"/>
   <comment type="patch/comment" x="686" y="406" text="slot empty/full"/>
   <comment type="patch/comment" x="784" y="406" text="0. clipslot"/>
   <comment type="patch/comment" x="868" y="406" text="1. trigger"/>
   <comment type="patch/comment" x="966" y="406" text="2. stop"/>
   <comment type="patch/comment" x="1120" y="406" text="3. overdub"/>
   <comment type="patch/comment" x="1218" y="406" text="4. record"/>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_1" x="378" y="420">
      <params>
         <bool32.tgl name="b" value="1"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_1" x="532" y="420">
      <params>
         <frac32.u.map name="value" value="18.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="bool_5" x="700" y="420">
      <params/>
      <attribs/>
   </obj>
   <obj type="ctrl/i" uuid="a3786816db6ea5bc6ac4193a5cccdb2c83b83496" name="i_6" x="784" y="420">
      <params>
         <int32 name="value" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_7" x="868" y="420">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_2" x="966" y="420">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_4" x="1120" y="420">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_5" x="1218" y="420">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="98" y="434" text="internal clock"/>
   <obj type="midi/intern/clock" uuid="7f6f35e92d2c29e950af2b3af5cebb2e9e3b778c" name="clock_3" x="70" y="448">
      <params>
         <frac32.u.map name="bpm" value="16.0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="532" y="518" text="12.bar length"/>
   <comment type="patch/comment" x="686" y="518" text="5. clear"/>
   <comment type="patch/comment" x="770" y="518" text="6. quantize"/>
   <comment type="patch/comment" x="854" y="518" text="7.quantization"/>
   <comment type="patch/comment" x="952" y="518" text="8. triplets"/>
   <comment type="patch/comment" x="1120" y="518" text="9. erase shift"/>
   <comment type="patch/comment" x="1218" y="518" text="10. undo "/>
   <comment type="patch/comment" x="1344" y="518" text="11. save loops to SDcard (axo table files, not midi files)"/>
   <obj type="ctrl/i" uuid="a3786816db6ea5bc6ac4193a5cccdb2c83b83496" name="i_8" x="532" y="532">
      <params>
         <int32 name="value" value="8"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_8" x="686" y="532">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_2" x="770" y="532">
      <params>
         <bool32.tgl name="b" value="1"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/i" uuid="a3786816db6ea5bc6ac4193a5cccdb2c83b83496" name="i_7" x="854" y="532">
      <params>
         <int32 name="value" value="4"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_4" x="952" y="532">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_3" x="1120" y="532">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_3" x="1218" y="532">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_1" x="1344" y="532">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="0" y="588" text="measures length of a midi sync pulse in K cycles "/>
   <comment type="patch/comment" x="0" y="602" text="and puts out average length of a beat. "/>
   <obj type="string/c" uuid="4aa90a90c435a742ddfa152d232883fc5b2f1b3" name="c_1" x="1624" y="602">
      <params/>
      <attribs>
         <table attributeName="str" table="/midiloopffc"/>
      </attribs>
   </obj>
   <patchobj type="patch/object" uuid="e81f1377-63d3-49e7-977f-086c36299208" name="3_1" x="0" y="616">
      <params/>
      <attribs>
         <combo attributeName="clockin" selection="omni"/>
         <combo attributeName="send" selection="off"/>
         <combo attributeName="output" selection="din"/>
         <spinner attributeName="CCa" value="80"/>
         <spinner attributeName="CCb" value="81"/>
         <spinner attributeName="channel" value="15"/>
      </attribs>
      <object id="patch/object" uuid="e81f1377-63d3-49e7-977f-086c36299208">
         <sDescription>Midi clock slave</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>midi_in.axh</helpPatch>
         <inlets/>
         <outlets>
            <bool32 name="active" description="Song is playing"/>
            <int32 name="kbeat" description="average length of a beat at k rate"/>
            <int32 name="kbeatAVG" description="same as kbeat but updates once per bar"/>
            <bool32.pulse name="start" description="start trigger"/>
            <bool32.pulse name="stop" description="stop trigger"/>
            <bool32.pulse name="1ppq" description="beat trigger, 1ppq"/>
            <int32 name="bpm" description="rough bpm"/>
            <bool32 name="bartrig" description="triggers every bar"/>
            <int32 name="step"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <combo name="clockin">
               <MenuEntries>
                  <string>omni</string>
                  <string>din</string>
                  <string>usb host port 1</string>
                  <string>usb host port 2</string>
                  <string>usb host port 3</string>
                  <string>usb host port 4</string>
                  <string>internal port 1</string>
                  <string>internal port 2</string>
                  <string>usb device port 1</string>
               </MenuEntries>
               <CEntries>
                  <string>true</string>
                  <string>dev == MIDI_DEVICE_DIN &amp;&amp; port == 1</string>
                  <string>dev == MIDI_DEVICE_USB_HOST &amp;&amp; port == 1</string>
                  <string>dev == MIDI_DEVICE_USB_HOST &amp;&amp; port == 2</string>
                  <string>dev == MIDI_DEVICE_USB_HOST &amp;&amp; port == 3</string>
                  <string>dev == MIDI_DEVICE_USB_HOST &amp;&amp; port == 4</string>
                  <string>dev == MIDI_DEVICE_INTERNAL &amp;&amp; port == 1</string>
                  <string>dev == MIDI_DEVICE_INTERNAL &amp;&amp; port == 2</string>
                  <string>dev == MIDI_DEVICE_USB_DEVICE &amp;&amp; port == 1</string>
               </CEntries>
            </combo>
            <combo name="send">
               <MenuEntries>
                  <string>off</string>
                  <string>on</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
               </CEntries>
            </combo>
            <combo name="output">
               <MenuEntries>
                  <string>din</string>
                  <string>usb host port 1</string>
                  <string>usb host port 2</string>
                  <string>usb host port 3</string>
                  <string>usb host port 4</string>
                  <string>internal port 1</string>
                  <string>internal port 2</string>
                  <string>usb device port 1</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_DIN, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 2</string>
                  <string>MIDI_DEVICE_USB_HOST, 3</string>
                  <string>MIDI_DEVICE_USB_HOST, 4</string>
                  <string>MIDI_DEVICE_INTERNAL, 1</string>
                  <string>MIDI_DEVICE_INTERNAL, 2</string>
                  <string>MIDI_DEVICE_USB_DEVICE, 1</string>
               </CEntries>
            </combo>
            <spinner name="CCa" MinValue="0" MaxValue="127" DefaultValue="0"/>
            <spinner name="CCb" MinValue="0" MaxValue="127" DefaultValue="0"/>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="0"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int32_t _active;
int32_t _pos;
int32_t prevpos;
int tap;
int prevtap;
int tapped;
int tapV[24];
int start;
int stop;
int t;
//int pos1ppq;
int firsttap;
int secondtap;
int taptotal;
int tapdiv;
int beattotal;
int beatdiv;
int beatavg;
int beatV[4];
int avg;
int pavg;
int beat;
int prevbeat;
int beattrig;
int avgH;
int beatcount;
int step;
int stepos;
int send1;
int send2;
int prevposbar;
int bartrig;
int posbar;
int outpos;
int poutpos;]]></code.declaration>
         <code.init><![CDATA[_active = 0;
_pos = -1;
t=-1;
firsttap=0;
beat=-1;
stepos=-1;
prevposbar=-1;
posbar=-1;
step=-1;
outpos=-1;]]></code.init>
         <code.krate><![CDATA[outlet_active = _active;
outlet_start=start;


if (stepos>=0){

step=(stepos/6)-  (((stepos/6)>>4)<<4);
posbar=stepos/96;
outpos=(stepos/24) - (((stepos/24)>>2)<<2);
}
else if (stepos<0){
posbar=-1;
step=-1;
outpos=-1;
poutpos=-1;
}

if (t>=0){
t+=1;
}
if (start){
	tap=-1;
	}
	

if ((_pos!=prevpos)&&(_pos!=(-1))){
	prevpos=_pos;
	if ((t>0)&&(tap>=0)){
		tapV[tap]=t-1;
		if ((tap>=1)&&!firsttap){
			taptotal=tapV[tap]+tapV[prevtap];
			tapdiv=tap+1;
			avg=(taptotal/tapdiv)*24;
			beatavg=avg<<2;
		}
	}
	prevtap=tap;
	tap+=1;
	if (tap>=24){
	if (!firsttap){
		beat=0;
	}
	firsttap=1;
	tapdiv=24;
	taptotal=tapV[0]+tapV[1]+tapV[2]+tapV[3]+tapV[4]+tapV[5]+tapV[6]+tapV[7]+tapV[8]+tapV[9]+tapV[10]+tapV[11]+tapV[12]+tapV[13]+tapV[14]+tapV[15]+tapV[16]+tapV[17]+tapV[18]+tapV[19]+tapV[20]+tapV[21]+tapV[22]+tapV[23];
	avg=((taptotal*24)/tapdiv);
	
	tap=0;
	tapped=1;	
	
	}
	t=0;
}
if (tapped){
	beatV[beat]=avg;
	if ((beat>=1)&&!secondtap){
			beattotal=beatV[beat]+beatV[prevbeat];
			beatdiv=beat+1;
			beatavg=(beattotal/beatdiv);
			
		}
	
	prevbeat=beat;
	beat+=1;
	if (beat>=4){
		secondtap=1;
		
		beatcount=0;
		beat=0;
		beattotal=beatV[0]+beatV[1]+beatV[2]+beatV[3];
		beatdiv=4;
		beatavg=beattotal/beatdiv;
	}
}

if (start){
	outpos=0;
	beattrig=1;
	beatcount=0;
}

if ((posbar!=prevposbar)&&(posbar>=0)){
	prevposbar=posbar;
	bartrig=1;
}

//outlet_pos1ppq=pos1ppq;
outlet_stop=stop;
outlet_1ppq=tapped;
outlet_kbeat=avg;
outlet_kbeatAVG=beatavg;
outlet_bartrig=bartrig;
outlet_bpm=180000/avg;
outlet_step=step;
if (attr_send){
	if (avg!=pavg){
		pavg=avg;
		send1=pavg>>6;
		send2=pavg-((pavg>>6)<<6);
		MidiSend3((midi_device_t) attr_output, MIDI_CONTROL_CHANGE + (attr_channel-1),attr_CCa,send1);
		MidiSend3((midi_device_t) attr_output, MIDI_CONTROL_CHANGE + (attr_channel-1),attr_CCb,send2);

		MidiSend3((midi_device_t) MIDI_DEVICE_USB_HOST, 1, MIDI_CONTROL_CHANGE + (attr_channel-1),attr_CCa,send1);
		MidiSend3((midi_device_t) MIDI_DEVICE_USB_HOST, 1, MIDI_CONTROL_CHANGE + (attr_channel-1),attr_CCb,send2);
		
	}
	if ((outpos!=poutpos)&&(outpos>=0)){
		poutpos=outpos;
		MidiSend3((midi_device_t) attr_output, MIDI_SONG_POSITION,outpos,0);
		MidiSend3((midi_device_t) MIDI_DEVICE_USB_HOST, 1, MIDI_CONTROL_CHANGE + (attr_channel-1),(attr_CCb+1),outpos);
	}
	if (start){
		MidiSend1((midi_device_t) attr_output, MIDI_START);
		MidiSend1((midi_device_t) MIDI_DEVICE_USB_HOST, 1, MIDI_START);
	}
	if (stop){
		MidiSend1((midi_device_t) attr_output, MIDI_STOP);
		MidiSend1((midi_device_t) MIDI_DEVICE_USB_HOST, 1, MIDI_STOP);
	}
	

	
	
}



tapped=0;
beattrig=0;
start=0;

stop=0;
bartrig=0;]]></code.krate>
         <code.midihandler><![CDATA[if (attr_clockin){
	if (status == MIDI_TIMING_CLOCK) {
		if ((_pos==0)&&_active){
	  	start=1;
	  	
	  }
	  _pos++;
	  stepos++;
	  
	  
	} else if (status == MIDI_START) {
	  _active = 1;
	  _pos = 0;
	  stepos=-1;
	  
	} else if (status == MIDI_STOP) {
	  _active = 0;
	  stop=1;
	  _pos = -1;
	  tap=-1;
	  stepos=-1;
	
	  
	}
}]]></code.midihandler>
      </object>
   </patchobj>
   <comment type="patch/comment" x="378" y="616" text="note recording/playback and clock"/>
   <patchobj type="patch/object" uuid="11a0e5d7-3063-4461-98a0-bf58eb23ca49" name="1_1" x="378" y="630">
      <params>
         <bool32.tgl name="quantize" value="0"/>
         <int32.hradio name="quantization" value="0"/>
         <bool32.tgl name="triplets" value="0"/>
      </params>
      <attribs>
         <combo attributeName="input" selection="din"/>
         <combo attributeName="output" selection="internal port 1"/>
         <spinner attributeName="channel" value="7"/>
         <objref attributeName="table" obj="midiloop"/>
         <combo attributeName="size" selection="1024"/>
         <spinner attributeName="maxbar" value="4"/>
         <spinner attributeName="maxslots" value="1"/>
         <spinner attributeName="startnote" value="0"/>
         <spinner attributeName="endnote" value="127"/>
         <combo attributeName="resolution" selection="192ppq"/>
      </attribs>
      <object id="patch/object" uuid="11a0e5d7-3063-4461-98a0-bf58eb23ca49">
         <sDescription>writes and outputs 4 values to a table.</sDescription>
         <author>robert schirmer</author>
         <license>who cares</license>
         <inlets>
            <int32 name="kbeat" description="k rate time of one beat"/>
            <int32 name="offset" description="sets an offset for writing to the table"/>
            <bool32.rising name="restart" description="restart/reset clock"/>
            <bool32.rising name="1ppq" description="clock for transport quantize - 4 trigs=1bar"/>
            <bool32 name="quantize" description="turn on quantize (turn off parameter if using inlet)"/>
            <int32 name="quantization"/>
            <bool32.risingfalling name="triplets" description="quantize in triplets (quantize needs to be turned on also"/>
            <int32 name="slot" description="select slot"/>
            <bool32.rising name="trigger" description="trigger slot. if empty, slot starts recording at beginning of next bar. if slot is full, slot starts playing at next bar. if already playing, it will restart."/>
            <bool32.rising name="stop" description="stops at next bar"/>
            <bool32.rising name="overdub" description="trigger to toggle overdub on/off"/>
            <bool32.rising name="record" description="forces record at next bar, even if slot is full"/>
            <bool32.rising name="clearslot" description="clear selected slot"/>
            <bool32.rising name="clearplay" description="clear all playvoices - tops playback immediately"/>
            <bool32.risingfalling name="erase" description="erase shift - if this input is high and you hold a note, any instances of that note that play will be deleted"/>
            <bool32.rising name="undo" description="undo (delete) last note recorded"/>
            <int32 name="maxbar"/>
         </inlets>
         <outlets>
            <bool32.pulse name="bartrig" description="simply sends a trigger every bar"/>
            <int32 name="offset" description="size on table+ offset inlet"/>
            <int32 name="currentslot" description="slot that is currently playing"/>
            <bool32 name="record" description="feedback output for record"/>
            <bool32 name="play" description="feedback output for play"/>
            <bool32 name="overdub" description="feedback output for overdub"/>
            <int32 name="maxnotes" description="maximum amount of notes for each slot - depends on &quot;size&quot; and &quot;maxslots&quot; attributes"/>
            <int32 name="slotnotes" description="amount of notes recorded in current slot"/>
            <bool32 name="full" description="feedback outlet - high if clip already present"/>
            <bool32 name="wait" description="feedback outlet - high if waiting to play/stop/record"/>
            <int32 name="playstate" description="playstate - 0=stopped, 1=play, 2=record, 3=waiting"/>
            <int32 name="synclock" description="sequencer clock running at 192ppq, following the loop"/>
         </outlets>
         <displays/>
         <params>
            <bool32.tgl name="quantize"/>
            <int32.hradio name="quantization" description="if not triplets: 1bar, 1/2bar, 1/4, 1/8th, 1/16th, 1/32nd. if triplets: 1bar, 1/3,1/6th, etc">
               <MaxValue i="6"/>
            </int32.hradio>
            <bool32.tgl name="triplets"/>
         </params>
         <attribs>
            <combo name="input">
               <MenuEntries>
                  <string>omni</string>
                  <string>din</string>
                  <string>usb host port 1</string>
                  <string>usb host port 2</string>
                  <string>usb host port 3</string>
                  <string>usb host port 4</string>
                  <string>internal port 1</string>
                  <string>internal port 2</string>
                  <string>usb device port 1</string>
               </MenuEntries>
               <CEntries>
                  <string>true</string>
                  <string>dev == MIDI_DEVICE_DIN &amp;&amp; port == 1</string>
                  <string>dev == MIDI_DEVICE_USB_HOST &amp;&amp; port == 1</string>
                  <string>dev == MIDI_DEVICE_USB_HOST &amp;&amp; port == 2</string>
                  <string>dev == MIDI_DEVICE_USB_HOST &amp;&amp; port == 3</string>
                  <string>dev == MIDI_DEVICE_USB_HOST &amp;&amp; port == 4</string>
                  <string>dev == MIDI_DEVICE_INTERNAL &amp;&amp; port == 1</string>
                  <string>dev == MIDI_DEVICE_INTERNAL &amp;&amp; port == 2</string>
                  <string>dev == MIDI_DEVICE_USB_DEVICE &amp;&amp; port == 1</string>
               </CEntries>
            </combo>
            <combo name="output">
               <MenuEntries>
                  <string>din</string>
                  <string>usb host port 1</string>
                  <string>usb host port 2</string>
                  <string>usb host port 3</string>
                  <string>usb host port 4</string>
                  <string>internal port 1</string>
                  <string>internal port 2</string>
                  <string>usb device port 1</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_DIN, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 2</string>
                  <string>MIDI_DEVICE_USB_HOST, 3</string>
                  <string>MIDI_DEVICE_USB_HOST, 4</string>
                  <string>MIDI_DEVICE_INTERNAL, 1</string>
                  <string>MIDI_DEVICE_INTERNAL, 2</string>
                  <string>MIDI_DEVICE_USB_DEVICE, 1</string>
               </CEntries>
            </combo>
            <spinner name="channel" description="midi channel" MinValue="1" MaxValue="16" DefaultValue="1"/>
            <objref name="table" description="table must be same size or greater than attribute size"/>
            <combo name="size" description="total size on table">
               <MenuEntries>
                  <string>2</string>
                  <string>4</string>
                  <string>8</string>
                  <string>16</string>
                  <string>32</string>
                  <string>64</string>
                  <string>128</string>
                  <string>256</string>
                  <string>512</string>
                  <string>1024</string>
                  <string>2048</string>
                  <string>4096</string>
                  <string>8192</string>
                  <string>16384</string>
                  <string>32768</string>
                  <string>65536</string>
                  <string>131072</string>
                  <string>262144</string>
                  <string>524288</string>
                  <string>1048576</string>
                  <string>2097152</string>
                  <string>4194304</string>
               </MenuEntries>
               <CEntries>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>4</string>
                  <string>5</string>
                  <string>6</string>
                  <string>7</string>
                  <string>8</string>
                  <string>9</string>
                  <string>10</string>
                  <string>11</string>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
                  <string>16</string>
                  <string>17</string>
                  <string>18</string>
                  <string>19</string>
                  <string>20</string>
                  <string>21</string>
                  <string>22</string>
               </CEntries>
            </combo>
            <spinner name="maxbar" description="maximum amount of bars per slot" MinValue="1" MaxValue="30000" DefaultValue="1"/>
            <spinner name="maxslots" description="maximum amount of slots" MinValue="1" MaxValue="32" DefaultValue="1"/>
            <spinner name="startnote" MinValue="0" MaxValue="127" DefaultValue="0"/>
            <spinner name="endnote" MinValue="0" MaxValue="127" DefaultValue="127"/>
            <combo name="resolution">
               <MenuEntries>
                  <string>192ppq</string>
                  <string>96ppq</string>
                  <string>48ppq</string>
                  <string>24ppq</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int voices=attr_endnote-attr_startnote+1;
int noteon[127];
int gate[127];
int vel[127];
int outgateB[127];
//int outend[127];
//int lastP[127];
int gtrig[127];
int goffset[127];
int gvel[127];
int gnote[127];
int gstart[127];
int gend[127];
int gon[127];
int Pmax[127];
//int Phold[127];
int Plength[127];
int Pstart[127];
int Pend[127];
int Pnote[127];
int Pvel[127];
int outnote[127];
int outvel[127];
int outgate[127];
int offnote[127];
//int outstart[127];
//int outindex[127];
//int poly[127];
int prevoutgate[127];
int mute[127];
//int Cindex[127];
//int Vplayer[127];
int Page[127];
int Oage[127];
//int Played[127];
int Quant[14];
int px;
int ppqo;
int prevppqo;
//int og;
//int ig;
//int g;
int closegates;
int PSC;
int p;
//int o;
//int pC;
//int ignition;
//int Cpoly;
int tempA;
//int playing;
int countoffset;
int age;
int prevage;
int Cage;
int controloffset;
int size;
int synclocko;
int cltrig;
int init;
int prevslot;
int offsethold;
//int prevCstart;
int Cvel;
int Cnote;
int Cstart;
int Cend;
int barcount;
int offset;
//int kcount;
int prevkcount;
int restart;
int kbeat;
int prevPcount;

 

int recstart;
int clear;

int barhold;
int prevmaxbar;


int kbar;

int play;
int synclock;
int prevsynclock;
int kquantclock;
int quantclock;
int quantize;
int quantizeon;
int recording;
int stophold;

int playhold;
int rechold;
int barrecord;
//int inout;
//int io;
int Rnotecount;
//int playscan;
//int prevplayscan;
//int inscan;
int rec;
int halfsync;
int Pindex;
int assigned;
int early;
int trigr;

int beatsync;
int prevPindex;
int tempR;
int tempO;
int etrig;
int erase;
int paused;
int holdscan;
int startclear;
//int busy;
int currentslot;
int wait;
int dialclock;
int ppq;
int started;
int cptrig;
int trigtrig;
int full;
int clearoffset;
int prevppq;
int currentbar;
int maxbar;
int maxppq;
int untrig;
int lastnote;
int quantization;
int undo;
int loopend;
int Pin;
int dex;
int listshift;
int Pshift;
int indexmax;
int generation;
int pgen;
int tempG;
int Cgen;
int lastgen;
int ultrig;
int unloop;
int lock;
int maximum;
int wlight;
//int eee;
//int lastscan;
//int overflow;
int prevbsync;
int scan;
int scanmax;
int prevscan;
//int tempstart;
//int Vcount;
//int done;
//int temptrigint prestart;
//int playingscan;
//int Cindexx;
//int prevCnote;
int tempS;
int tempE;
int tempV;
int tempN;
//int test;
int overdub;
int maxnotes;
int prevRnote;
int dubtrig;
int clearmax;
int playreset;
int prebarC;
int prebartrig;
int prebarmax;
int reclight;
int recend;
//int Sindex;
int slotsize;

int playstate;
bool bartrig;
bool strig;
bool sttrig;
bool ctrig;]]></code.declaration>
         <code.init><![CDATA[barcount=-1;
Plength[1]=-1;
clear=-1;
prevPcount=-1;


assigned=1;
Quant[0]=1;
Quant[1]=2;
Quant[2]=4;
Quant[3]=8;
Quant[4]=16;
Quant[5]=32;
Quant[6]=1;
Quant[7]=3;
Quant[8]=6;
Quant[9]=12;
Quant[10]=24;
Quant[11]=48;


init=1;]]></code.init>
         <code.krate><![CDATA[//space for 8 globals per slot - 3 used (note count, bar length and note age)
controloffset=8;
//voices=attr_voices;
size=(1<<attr_size);
slotsize= (((1<<attr_size)-32)/attr_maxslots);
outlet_offset=size+inlet_offset;

//per slot
maxnotes=((slotsize-8)>>3)-2;
if ((inlet_maxbar<=attr_maxbar)&&(inlet_maxbar>0)){
maximum=inlet_maxbar;
}
else {maximum=attr_maxbar;}
Rnotecount=attr_table.array[countoffset];
maxbar=attr_table.array[countoffset +1];
age=attr_table.array[countoffset +2];
generation=attr_table.array[countoffset +3];
if (inlet_undo&&!untrig){
	
	if (age>1){
	lastnote=age;
	undo=1;
	untrig=1;
	}
	if (age==1){
	startclear=1;
	}
	
}
if (!inlet_undo&&!undo){
	untrig=0;
}

 
if (init){
		currentslot=inlet_slot;
		offset=inlet_offset+32+((controloffset+slotsize)*inlet_slot) +controloffset;
		countoffset=inlet_offset+32+((controloffset+slotsize)*inlet_slot);
		init=0;
		}

erase=inlet_erase;
if (inlet_erase&&!etrig){
	etrig=1;
	tempR=recording;
	tempO=overdub;
	recording=0;
	overdub=0;
}
if (!inlet_erase&&etrig){
	etrig=0;
	recording=tempR;
	overdub=tempO;
}

if (inlet_overdub&&!dubtrig){
	dubtrig=1;
	overdub=!overdub;
	if (overdub){
		recording=1;
	}
	if (!overdub){
		recording=0;
	}
}
if (!inlet_overdub){
	dubtrig=0;
}

if (inlet_clearslot&&!cltrig){
	cltrig=1;
	startclear=1;  
	}

if (!inlet_clearslot){
	cltrig=0;
}


if (startclear){
	startclear=0;
	clearoffset=inlet_offset+32+((controloffset+slotsize)*inlet_slot);
  	clearmax=attr_table.array[clearoffset]+controloffset;
  	attr_table.array[clearoffset]=0;
  	attr_table.array[clearoffset + 1]=0;
  	attr_table.array[clearoffset + 2]=0;
	clear=0;
	if (inlet_slot==currentslot){
		play=0;
		if (!overdub){
		recording=0;
		}
		
		reclight=0;
	}
}

if (inlet_clearplay&&!cptrig){
	cptrig=1;
	playreset=1;
	play=0;
	recording=0;
	closegates=1;
	}
if (!inlet_clearplay){
	cptrig=0;
}
quantizeon=param_quantize+inlet_quantize;
maxppq=maxbar*(768>>attr_resolution);
kbar=(inlet_kbeat)<<2;
kbeat=inlet_kbeat;
prebarmax=kbar-kbar/32;  //starts recording 1/32nd before bar starts to catch early notes
if ((param_quantization+inlet_quantization)<=5){
quantization=param_quantization+inlet_quantization;
}
else {quantization=5;} 
if ((!param_triplets)&&(!inlet_triplets)){
	quantize=Quant[quantization];
	}
else if (param_triplets || inlet_triplets){
	quantize=Quant[quantization+6];
}



// clock for sync - goes from 0 to 0x07FFFFFF every beat, 1ppq
if (dialclock<0x07FFFFFF){
dialclock+=(0x07FFFFFF/(kbeat));
}
if (inlet_slot!=prevslot){
	prevslot=inlet_slot;
	offsethold=1;
	if (reclight){
		attr_table.array[countoffset+1]=currentbar+1;
	}
}
	

//clock trigger 1ppq inlet - for bar counting, button logic and resync for tempo changes
if (inlet_1ppq&&!ctrig){
	loopend=0;
	barcount+=1;
	dialclock=0;
	beatsync+=1;
	if ((barcount==3)){
		if (started){
			started=0;
			prebarC=(kbar>>1)+(kbar>>2);
			}
		if ((currentbar==(maximum-1)) && (barrecord)){
			wlight=1;
		}
	}
	if (barcount>=4){
		wlight=0;
		prebarC=0;
		barcount=0;
		bartrig=1;
		if (stophold){
			play=0;
			playreset=1;
			recording=0;
			stophold=0;
		}
		if (playhold){
			restart=1;
			play=1;
			playhold=0;
			if (overdub){
				recording=1;
			}
		}
		if (rechold){
			rec=1;
			reclight=1;
			if (!play){
				play=1;
			}
			restart=1;
			rechold=0;
		}
		if (barhold){
			reclight=0;
			barhold=0;
			barrecord=0;
			maxbar=currentbar+1;
			restart=1;
			if (!overdub){
				recording=0;currentbar=0;
			}
		}
		
		currentbar+=1;
		if (currentbar>=maxbar){
			if (barrecord&&(maxbar==maximum)){
				barhold=0;
				reclight=0;
				barrecord=0;
				maxbar=currentbar;
				restart=1;
				if (!overdub){
					recording=0;currentbar=0;
				}
			}
			currentbar=0;
			restart=1;
		}
	}
	ctrig=1;
	}
if (!inlet_1ppq){
	ctrig=0;
}

if ((prebarC<prebarmax)&&(prebarC>=0)){
prebarC+=1;

if (prebarC>=prebarmax){
	if ((offsethold) &&(rechold || playhold || barhold))
	{	//set offset when different clip triggered
		offsethold=0;
		offset=inlet_offset+32+((controloffset+slotsize)*inlet_slot) +controloffset;
		countoffset=inlet_offset+32+((controloffset+slotsize)*inlet_slot);
		 Rnotecount=attr_table.array[countoffset];
		 currentslot=inlet_slot;

		
	}
	if (((currentbar+1)>=maxbar) || playhold || rechold || barhold){
	prebartrig=1;	
	playreset=1;
	loopend=1;
		
			generation+=1;
			
		
	
	if ((barhold) || (barrecord&&(maxbar==(maximum-1)))){
		playreset=1;
		recend=1;
		// need to close gates? revisit
		closegates=1;
		//generation=0;
	}
	if (rechold){
		//clear and start recording
		recstart=1;
		clearmax=Rnotecount+controloffset;
		clearoffset=offset-controloffset;
		clear=0;
		Rnotecount=0;
		recording=1;
		
		}
	}
	prebarC=-1;
}

}

//clip present?
full=attr_table.array[inlet_offset+inlet_slot];

if (inlet_restart&&!strig){
	started=1;
	playreset=1;
	restart=1;
	strig=1;
	bartrig=1;
	barcount=0;
	prebarC=0;
	currentbar=0;
	}
if (!inlet_restart){
	strig=0;
}


if (inlet_trigger&&!trigtrig){
	trigtrig=1;
	if (!full){
		rechold=1;
		}
	else if (full){
		if (barrecord){
			barhold=1;
			}
		if (!barrecord){
			playhold=1;
			}
		}
	}

	
if (!inlet_trigger){
	trigtrig=0;
}

if (inlet_stop&&!sttrig){
		stophold=1;
	if (playhold){
		playhold=0;
	}
	sttrig=1;
}
if (!inlet_stop){
	sttrig=0;
}

//192ppq - goes from 0-191 every beat - shifted by resolution
ppq=dialclock/(0X07FFFFFF/(192>>attr_resolution));
if (ppq>=(192>>attr_resolution)){
	ppq=(192>>attr_resolution)-1;
}
ppqo=dialclock/(0X07FFFFFF/192);
if (ppqo>=(192)){
	ppqo=(192)-1;
}
if (ppqo!=prevppqo){
	synclocko+=1;
///	synclock+=1;
	prevppqo=ppqo;
}

if (ppq!=prevppq){
	//synclocko+=1;
	synclock+=1;
	prevppq=ppq;
}

//re sync clock for tempo changes (using 1ppq input)
if (beatsync!=prevbsync){
	prevbsync=beatsync;
	synclocko=beatsync*(192);
	synclock=beatsync*(192>>attr_resolution);
}

if (restart){
synclocko=0;
	//kcount=0;
	restart=0;
	synclock=0;
quantclock=0;
kquantclock=0;
currentbar=0;
prevbsync=0;
beatsync=0;


}
//synclock=synclocko>>attr_resolution;
//synclock=synclocko;
//clock info for quantize
quantclock=synclock/((768>>attr_resolution)/quantize);
halfsync=((768>>attr_resolution)/quantize)>>1;
kquantclock=quantclock*((768>>attr_resolution)/quantize);
// early or late?
if (synclock<(kquantclock+halfsync)){
	early=0;
}
if (synclock>=(kquantclock+halfsync)){
	early=1;
}

if (inlet_record&&!trigr){
	trigr=1;
	if (!barrecord){
		rechold=1;
	}
	else if (barrecord){
		barhold=1;
	}
	
}
if (!inlet_record){
	trigr=0;
}

if (rec){
	rec=0;
	currentbar=0;
	barrecord=1;
	maxbar=maximum;
	attr_table.array[currentslot+inlet_offset]=1;
	Rnotecount=0;
	recstart=0;
	}
	
//clear note data
if (clear>=0){
	if (clear<=clearmax){
			attr_table.array[clearoffset+(clear<<3) +0]=0;
			attr_table.array[clearoffset+(clear<<3) +1]=0;
			attr_table.array[clearoffset+(clear<<3) +2]=0;
			attr_table.array[clearoffset+(clear<<3) +3]=0;
			attr_table.array[clearoffset+(clear<<3) +4]=0;
			attr_table.array[clearoffset+(clear<<3) +5]=0;
			if (clearoffset==(offset-controloffset)){
				closegates=1;
			}
			
			
			clear+=1;
		
			if (clear>=clearmax){
				attr_table.array[inlet_slot+inlet_offset]=0;
				clear=-1;
				if (clearoffset==(offset-controloffset)){
					playreset=1;
				}
				}
		}
}



	//playback  ===========================================================================	
if (loopend){
	listshift=0;
	PSC=listshift;
}

if (synclock==prevsynclock){
	
	//assign notes from list - mute if notes clash with incoming note, delete if overdubbing
	for (Pindex = 0;Pindex<32;Pindex++){
		if ((Pindex+PSC)<maxnotes) {
				
				Cstart=attr_table.array[offset+((Pindex+PSC)<<3) +0];
				Cend=attr_table.array[offset+((Pindex+PSC)<<3) +1];
				Cnote=attr_table.array[offset+((Pindex+PSC)<<3) +2];
				Cvel=attr_table.array[offset+((Pindex+PSC)<<3) +3];
				Cage=attr_table.array[offset+((Pindex+PSC)<<3) +4];
				Cgen=attr_table.array[offset+((Pindex+PSC)<<3) +5];
				//clash?
				

					if (synclock!=Pshift){
						if ((Pindex==0)&&(Cstart<(synclock+1)) && (Cstart>0) &&!loopend && (synclock>0)){
							//listshift+=1;
							lock+=1;
							
						}
						
					
						//if note start is reached	
						if   (( ( (((Cstart-1)==(synclock+1))&&!loopend) || ( ((Cstart-1)==0) && loopend))   && (Cstart>0) )  && (Cgen!=generation)){
							
								
							if (Cage>=Page[Cnote]){
								if (gate[Cnote]){
									mute[Cnote]=1;
									}
								listshift+=1;
								if (!mute[Cnote]){	
									
									Pstart[Cnote]=Cstart;
									Pend[Cnote]=Cend;
									Pnote[Cnote]=Cnote;
									Pvel[Cnote]=Cvel;
									Page[Cnote]=Cage;
									}
								else if (mute[Cnote]){
									if (((overdub&&!reclight)||(erase))  &&  (attr_table.array[offset+((Pindex+PSC)<<3) +0]>0)){
										attr_table.array[offset+((Pindex+PSC)<<3) +0]=0;
										attr_table.array[offset+((Pindex+PSC)<<3) +1]=0;
										attr_table.array[offset+((Pindex+PSC)<<3) +2]=0;
										attr_table.array[offset+((Pindex+PSC)<<3) +3]=0;
										attr_table.array[offset+((Pindex+PSC)<<3) +4]=0;
										attr_table.array[offset+((Pindex+PSC)<<3) +5]=0;
										Rnotecount-=1;
										}
									
								}
								}
							}
						
					}
				}
			}
if (lock==0){
Pshift=synclock;
}
if (lock>0){
	lock=0;
}
PSC=listshift;
//if (attr_table.array[offset+((PSC)<<3) +0]<synclock){
	//PSC+=1;
//}
}
if (playreset){
	lock=0;
}



	
for (px = 0;px<voices;px++){




	
p=px+attr_startnote;


if (!gate[p]) {
		mute[p]=0;
		}






//reset players && midi output
if (playreset){
	Pstart[p]=0;
	Plength[p]=-1;
	outgate[p]=0;
	Page[p]=0;
	}
//reset midi input
if (closegates){
		gate[p]=0;
		}

//  recording  **************************************************************
//set quantize at note on
	if (gate[p]&&!gtrig[p]){
	
		gtrig[p]=1;
		if (quantizeon){
			if (early){
				goffset[p]= ( halfsync - (synclock-(kquantclock+halfsync)));
			}
			if (!early){
				goffset[p]=-(synclock-kquantclock);
			}
		}
		else if (!quantizeon){
			goffset[p]=0;
		}
		if ((synclock+goffset[p])<maxppq){
			gstart[p]=synclock+goffset[p];
			}
		else if ((synclock+goffset[p])>=maxppq){
				gstart[p]=0;
			}
		if (recstart){
				gstart[p]=0;
		}
		gnote[p]=noteon[p];
		gvel[p]=vel[p];
		if (recording){
			gon[p]=1;
			attr_table.array[offset+(Rnotecount<<3) +5]=generation;
			
		}
		
		
	}
	//stamp note data at note off
	if (!gate[p]&&gtrig[p]){
		gtrig[p]=0;
		if (gon[p]){
			gon[p]=0;
			gend[p]=synclock+goffset[p];
			if (recstart){
				gend[p]=halfsync;
		}
			//stamp note
			if (Rnotecount<maxnotes){
				attr_table.array[offset+(Rnotecount<<3) +0]=gstart[p]+1;
				attr_table.array[offset+(Rnotecount<<3) +1]=gend[p]+1;
				attr_table.array[offset+(Rnotecount<<3) +2]=gnote[p];
				attr_table.array[offset+(Rnotecount<<3) +3]=gvel[p];
				
				age+=1;
				attr_table.array[offset+(Rnotecount<<3) +4]=age;
				
				
				
				Rnotecount+=1;
				}
			}
		}
		
		///////////////////////////////////play

	
	if (synclock!=prevsynclock){
		if (play){
			// play  **********************************************
			//length - note off at end
			if (Plength[p]>=0){
				Plength[p]+=1;
				if (Plength[p]>=Pmax[p]){
					Plength[p]=-1;
					outgate[p]=0;
					Oage[p]=0;
				
				}
			}
			//trigger note on
			if (((synclock)==(Pstart[p]-1))&&(Pstart[p]>0)){
					if (!mute[p]){
						Plength[p]=0;
						if (Pend[p]>Pstart[p]){
							Pmax[p]=Pend[p]-Pstart[p];
						}
						else if (Pend[p]<=Pstart[p]){
							Pmax[p]=(maxppq+Pend[p])-Pstart[p];
						}
						outnote[p]=Pnote[p];
						outvel[p]=Pvel[p];
						Oage[p]=Page[p];
						outgate[p]=1;
						outgateB[p]=0;
						Pstart[p]=0;
						Pend[p]=0;
						Page[p]=0;
						}
					}
			}
			}
//triggermidi  ===========================================
if (outgateB[p]!=prevoutgate[p]){
	if (outgateB[p]){
		MidiSend3((midi_device_t) attr_output, MIDI_NOTE_ON + (attr_channel-1),outnote[p],outvel[p]);
		offnote[p]=outnote[p];  
	}
	else if (!outgateB[p]){
		MidiSend3((midi_device_t) attr_output, MIDI_NOTE_OFF + (attr_channel-1),offnote[p],outvel[p]);
	}
	
	prevoutgate[p]=outgateB[p];
}

outgateB[p]=outgate[p];
//// end loop
}
/////////////////////////
//keep outside loop	
prevsynclock=synclock;
playreset=0;
closegates=0;



// reorder notes for overdubbing
if (scan!=prevscan){
	
	if (((scan!=(Rnotecount+2))&& (( synclock==prevsynclock) && (synclock==Pshift)))){
			//scan counting down from last note! 

		//undo
		if ((undo)&& (attr_table.array[offset+(scan<<3) +4]==lastnote)){
				
				attr_table.array[offset+(scan<<3) +0]=0;
				attr_table.array[offset+(scan<<3) +1]=0;
				attr_table.array[offset+(scan<<3) +2]=0;
				attr_table.array[offset+(scan<<3) +3]=0;
				attr_table.array[offset+(scan<<3) +4]=0;
				attr_table.array[offset+(scan<<3) +5]=0;
				age-=1;
				Rnotecount-=1;
				undo=0;
			
		}

				//if two notes at same position and same note, delete old note
		if (((attr_table.array[offset+(scan<<3) +0])==(attr_table.array[offset+(prevscan<<3) +0]))
			&& ((attr_table.array[offset+(scan<<3) +2])==(attr_table.array[offset+(prevscan<<3) +2]))
			&&
			((attr_table.array[offset+(scan<<3) +0]) !=0 )
			&&
			((attr_table.array[offset+(prevscan<<3) +0]) !=0 ) )
				{
				attr_table.array[offset+(scan<<3) +0]=0;
				attr_table.array[offset+(scan<<3) +1]=0;
				attr_table.array[offset+(scan<<3) +2]=0;
				attr_table.array[offset+(scan<<3) +3]=0;
				attr_table.array[offset+(scan<<3) +4]=0;
				attr_table.array[offset+(scan<<3) +5]=0;
				Rnotecount-=1;
			
				}
	
		//swap backwards, earlier earlier - notes in ascending order.
		
		if ( (  ((attr_table.array[offset+(scan<<3) +0])>(attr_table.array[offset+(prevscan<<3) +0]))
			|| ( ((attr_table.array[offset+(scan<<3) +0])==(attr_table.array[offset+(prevscan<<3) +0])) && ((attr_table.array[offset+(scan<<3) +2])<(attr_table.array[offset+(prevscan<<3) +2])) ) )
			&&
			((attr_table.array[offset+(scan<<3) +0]) !=0 )
			&&
			((attr_table.array[offset+(prevscan<<3) +0]) !=0 ) )
			{
				tempS=attr_table.array[offset+(prevscan<<3) +0];
				tempE=attr_table.array[offset+(prevscan<<3) +1];
				tempN=attr_table.array[offset+(prevscan<<3) +2];
				tempV=attr_table.array[offset+(prevscan<<3) +3];
				tempA=attr_table.array[offset+(prevscan<<3) +4];
				tempG=attr_table.array[offset+(prevscan<<3) +5];
	
				attr_table.array[offset+(prevscan<<3) +0] = attr_table.array[offset+(scan<<3) +0];
				attr_table.array[offset+(prevscan<<3) +1] = attr_table.array[offset+(scan<<3) +1];
				attr_table.array[offset+(prevscan<<3) +2] = attr_table.array[offset+(scan<<3) +2];
				attr_table.array[offset+(prevscan<<3) +3] = attr_table.array[offset+(scan<<3) +3];
				attr_table.array[offset+(prevscan<<3) +4] = attr_table.array[offset+(scan<<3) +4];
				attr_table.array[offset+(prevscan<<3) +5] = attr_table.array[offset+(scan<<3) +5];
	
				attr_table.array[offset+(scan<<3) +0]=tempS;
				attr_table.array[offset+(scan<<3) +1]=tempE;
				attr_table.array[offset+(scan<<3) +2]=tempN;
				attr_table.array[offset+(scan<<3) +3]=tempV;
				attr_table.array[offset+(scan<<3) +4]=tempA;
				attr_table.array[offset+(scan<<3) +5]=tempG;
				
			}
				//swap 0 values other way to move deleted notes out of list
		if ( ((attr_table.array[offset+(scan<<3) +0]) ==0 ) && ((attr_table.array[offset+(prevscan<<3) +0]) !=0 ) ){
				attr_table.array[offset+(scan<<3) +0] = attr_table.array[offset+(prevscan<<3) +0];
				attr_table.array[offset+(scan<<3) +1] = attr_table.array[offset+(prevscan<<3) +1];
				attr_table.array[offset+(scan<<3) +2] = attr_table.array[offset+(prevscan<<3) +2];
				attr_table.array[offset+(scan<<3) +3] = attr_table.array[offset+(prevscan<<3) +3];
				attr_table.array[offset+(scan<<3) +4] = attr_table.array[offset+(prevscan<<3) +4];
				attr_table.array[offset+(scan<<3) +5] = attr_table.array[offset+(prevscan<<3) +5];
				attr_table.array[offset+(prevscan<<3) +0]=0;
				attr_table.array[offset+(prevscan<<3) +1]=0;
				attr_table.array[offset+(prevscan<<3) +2]=0;
				attr_table.array[offset+(prevscan<<3) +3]=0;
				attr_table.array[offset+(prevscan<<3) +4]=0;
				attr_table.array[offset+(prevscan<<3) +5]=0;
			
					}
	}
	prevscan=scan;
	
}

scan-=1;
scanmax=Rnotecount;
if (scan<0){
	scan=Rnotecount;
	prevscan=Rnotecount+1;
}

outlet_bartrig=bartrig;
//wait output for light feedback
if (stophold||playhold||rechold||barhold||wlight){
	wait=1;
}
if (!stophold&&!playhold&&!rechold&&!barhold&&!wlight){
	wait=0;
	
}

//write note count, bar length and last note age
if (Rnotecount!=prevRnote){
	prevRnote=Rnotecount;
 attr_table.array[countoffset]=Rnotecount;
}
if (maxbar!=prevmaxbar){
	prevmaxbar=maxbar;
 attr_table.array[countoffset+1]=maxbar;
}
if (age!=prevage){
	prevage=age;
	attr_table.array[countoffset+2]=age;
}
if (generation!=pgen){
	pgen=generation;
	attr_table.array[countoffset+3]=generation;
}

if (!reclight){
outlet_overdub=overdub;
}
if (reclight){
outlet_overdub=0;
}
outlet_record=reclight;
outlet_play=play;
outlet_maxnotes=maxnotes;
outlet_slotnotes=Rnotecount;
outlet_currentslot=currentslot;
outlet_full=full;
outlet_wait=wait;
if (play){
	outlet_synclock=synclocko;
	
}
else {outlet_synclock=-1;}

//outlet_synclock=synclocko;
if (!wait&&!play&&!reclight){
	playstate=0;
	}
else if (play&&!reclight&&!wait) {
	playstate=1;
}
else if (play&&reclight&&!wait){
	playstate=2;
}
if (wait){
	playstate=3;
}
outlet_playstate=playstate;

prebartrig=0;
bartrig=0;
recend=0;]]></code.krate>
         <code.midihandler><![CDATA[if (attr_input){
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1>=attr_startnote) && (data1<=attr_endnote)) {

gate[data1]=1;
vel[data1]=data2;
noteon[data1]=data1;

//if note clashes with already playing note, cut it short and mute ntoe off
if (outgate[data1]){
	Plength[data1]=-1;
	outgate[data1]=0;
	outgateB[data1]=0;
	Oage[data1]=0;
	prevoutgate[data1]=outgateB[data1];
	
	}

	
} else if (((status == MIDI_NOTE_ON + (attr_channel-1)) && (!data2))||
          (status == MIDI_NOTE_OFF + (attr_channel-1))) {
      if ((data1>=attr_startnote) && (data1<=attr_endnote)){
          gate[data1]=0;
      }
          	
          	
          	
          	
          	
			
          }

          	

}]]></code.midihandler>
      </object>
   </patchobj>
   <comment type="patch/comment" x="700" y="630" text="rough bpm"/>
   <comment type="patch/comment" x="910" y="630" text="waiting"/>
   <comment type="patch/comment" x="1008" y="630" text="overdub"/>
   <comment type="patch/comment" x="1106" y="630" text="record"/>
   <comment type="patch/comment" x="1204" y="630" text="play"/>
   <comment type="patch/comment" x="1274" y="630" text="playing slot"/>
   <obj type="disp/i" uuid="5e35fd0c62d81e70017289250cf28edd26e19e4a" name="i_2" x="700" y="644">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="bool_27" x="910" y="644">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="bool_3" x="1008" y="644">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="bool_4" x="1106" y="644">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="bool_26" x="1204" y="644">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/i" uuid="5e35fd0c62d81e70017289250cf28edd26e19e4a" name="i_1" x="1288" y="644">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="700" y="714" text="max notes per slot"/>
   <comment type="patch/comment" x="826" y="714" text="amount of notesrecorded in slot"/>
   <comment type="patch/comment" x="1008" y="714" text="192ppq clock that follows the clip"/>
   <comment type="patch/comment" x="1218" y="714" text="playstate - 0=stopped, 1=play, 2= record, 3= waiting"/>
   <obj type="disp/i" uuid="5e35fd0c62d81e70017289250cf28edd26e19e4a" name="i_16" x="700" y="728">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/i" uuid="5e35fd0c62d81e70017289250cf28edd26e19e4a" name="i_9" x="840" y="728">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/i" uuid="5e35fd0c62d81e70017289250cf28edd26e19e4a" name="i_10" x="1050" y="728">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/i" uuid="5e35fd0c62d81e70017289250cf28edd26e19e4a" name="i_3" x="1218" y="728">
      <params/>
      <attribs/>
   </obj>
   <obj type="table/save" uuid="3e4108b607d56d9e1cd10abb898b58eea11e53b2" name="save_1" x="1610" y="728">
      <params/>
      <attribs>
         <objref attributeName="table" obj="midiloop"/>
      </attribs>
   </obj>
   <comment type="patch/comment" x="126" y="798" text="&lt;-all attributes apart from clockin "/>
   <comment type="patch/comment" x="126" y="812" text="are particular to my setup - will clean up."/>
   <comment type="patch/comment" x="574" y="812" text="pitch bend recorder"/>
   <comment type="patch/comment" x="756" y="812" text="total size on table"/>
   <patchobj type="patch/object" uuid="16d73047-6c6f-4799-aca2-f26ae67c5ffa" name="bend" x="574" y="826">
      <params/>
      <attribs>
         <combo attributeName="input" selection="din"/>
         <combo attributeName="output" selection="internal port 1"/>
         <spinner attributeName="channel" value="7"/>
         <objref attributeName="table" obj="midiloop"/>
         <spinner attributeName="maxbar" value="4"/>
         <spinner attributeName="maxslots" value="1"/>
         <combo attributeName="resolution" selection="24ppq"/>
      </attribs>
      <object id="patch/object" uuid="16d73047-6c6f-4799-aca2-f26ae67c5ffa">
         <sDescription>object that records pitch bend, after touch and midi CCs.
for use with the midi looper objects.
could be used standalone, inlet stepunQCC expects a clock running at 96ppq</sDescription>
         <author>Mattilyn Mattroe</author>
         <license>if you use the object to play a wedding in september you have to come round and fix the dodgy extractor fan in my bathroom. otherwise, do as you will</license>
         <helpPatch>midi looper help.axh</helpPatch>
         <inlets>
            <int32 name="offset"/>
            <int32 name="slot"/>
            <int32 name="synclock"/>
            <bool32 name="rec"/>
            <bool32 name="play"/>
            <bool32 name="reset"/>
            <bool32 name="overdub"/>
            <bool32 name="clear"/>
            <int32 name="cslot"/>
         </inlets>
         <outlets>
            <int32 name="offset"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <combo name="input">
               <MenuEntries>
                  <string>omni</string>
                  <string>din</string>
                  <string>usb host port 1</string>
                  <string>usb host port 2</string>
                  <string>usb host port 3</string>
                  <string>usb host port 4</string>
                  <string>internal port 1</string>
                  <string>internal port 2</string>
                  <string>usb device port 1</string>
               </MenuEntries>
               <CEntries>
                  <string>true</string>
                  <string>dev == MIDI_DEVICE_DIN &amp;&amp; port == 1</string>
                  <string>dev == MIDI_DEVICE_USB_HOST &amp;&amp; port == 1</string>
                  <string>dev == MIDI_DEVICE_USB_HOST &amp;&amp; port == 2</string>
                  <string>dev == MIDI_DEVICE_USB_HOST &amp;&amp; port == 3</string>
                  <string>dev == MIDI_DEVICE_USB_HOST &amp;&amp; port == 4</string>
                  <string>dev == MIDI_DEVICE_INTERNAL &amp;&amp; port == 1</string>
                  <string>dev == MIDI_DEVICE_INTERNAL &amp;&amp; port == 2</string>
                  <string>dev == MIDI_DEVICE_USB_DEVICE &amp;&amp; port == 1</string>
               </CEntries>
            </combo>
            <combo name="output">
               <MenuEntries>
                  <string>din</string>
                  <string>usb host port 1</string>
                  <string>usb host port 2</string>
                  <string>usb host port 3</string>
                  <string>usb host port 4</string>
                  <string>internal port 1</string>
                  <string>internal port 2</string>
                  <string>usb device port 1</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_DIN, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 2</string>
                  <string>MIDI_DEVICE_USB_HOST, 3</string>
                  <string>MIDI_DEVICE_USB_HOST, 4</string>
                  <string>MIDI_DEVICE_INTERNAL, 1</string>
                  <string>MIDI_DEVICE_INTERNAL, 2</string>
                  <string>MIDI_DEVICE_USB_DEVICE, 1</string>
               </CEntries>
            </combo>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="1"/>
            <objref name="table"/>
            <spinner name="maxbar" MinValue="1" MaxValue="32" DefaultValue="0"/>
            <spinner name="maxslots" MinValue="1" MaxValue="32" DefaultValue="1"/>
            <combo name="resolution">
               <MenuEntries>
                  <string>192ppq</string>
                  <string>96ppq</string>
                  <string>48ppq</string>
                  <string>24ppq</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int bendA;
int bendB;




int synclock;
int ObendA;
int ObendB;

int prevstep;
int voice;
int slotsize;

int offset;
int clear;
int ctrig;


int resetrig;]]></code.declaration>
         <code.init><![CDATA[voice=(768*attr_maxbar)>>attr_resolution;
slotsize=(voice*2);
clear=-1;]]></code.init>
         <code.krate><![CDATA[offset=inlet_offset + (slotsize*inlet_slot);
outlet_offset=inlet_offset + (slotsize*attr_maxslots);
if (inlet_synclock>=0){
	synclock=inlet_synclock>>attr_resolution;
	}
else {synclock=-1;}

ObendA=attr_table.array[synclock+offset];
ObendB=attr_table.array[synclock+offset+voice];

if (inlet_clear&&!ctrig){
	clear=0;
	ctrig=1;
}
if (!inlet_clear){
	ctrig=0;
}
if ((clear>=0)&& (clear<slotsize)){
	attr_table.array[clear+inlet_offset + (slotsize*inlet_cslot)]= 0;
	attr_table.array[clear+inlet_offset + (slotsize*inlet_cslot)+voice]= 0;
	
	
	
	clear+=1;
	if (clear>=slotsize){
		clear=-1;
	}
}
if (synclock!=prevstep){
//play
	if (inlet_play){
	
		
		if ((ObendA>0)||(ObendB>0)){
			MidiSend3((midi_device_t) attr_output, MIDI_PITCH_BEND + (attr_channel-1),(ObendA-1),(ObendB-1));
			}
	}

//record
	if (inlet_rec){
			attr_table.array[synclock+offset]= 0;
			attr_table.array[synclock+offset+voice]= 0;
		
			
		}
	if ((inlet_rec || inlet_overdub) && (inlet_play)){
		
		
			if ((bendA>0)||(bendB>0)){
					attr_table.array[synclock+offset]= bendA;
					attr_table.array[synclock+offset+voice]= bendB;
				}
			
			
		}


	bendA=0;
	bendB=0;

	prevstep=synclock;
	}


//reset bend & touch
	if ((inlet_reset || (synclock<1))&&!resetrig){
		MidiSend3((midi_device_t) attr_output, MIDI_PITCH_BEND+ (attr_channel-1),0,64);
		
		resetrig=1;
		
		}

if (!inlet_reset && (synclock>0)){
	resetrig=0;
	}]]></code.krate>
         <code.midihandler><![CDATA[if(attr_input) {
       


if (status == MIDI_PITCH_BEND +(attr_channel-1)){
	bendA=data1+1;
	bendB=data2+1;

	
	}

	
}]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="f286242b-4a12-46f8-995e-6eeb6ad540dd" name="i_4" x="756" y="826">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="f286242b-4a12-46f8-995e-6eeb6ad540dd">
         <sDescription>display integer</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>disp.axh</helpPatch>
         <inlets>
            <int32 name="in" description="input"/>
         </inlets>
         <outlets/>
         <displays>
            <int32.label name="v" noLabel="true"/>
         </displays>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[disp_v=inlet_in;
]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="139" y="829" text="don&apos;t put send on unless "/>
   <comment type="patch/comment" x="140" y="840" text="you want weird clock messages!"/>
   <comment type="patch/comment" x="1428" y="882" text="simple test synth"/>
   <patcher type="patch/patcher" uuid="c67580dc-aa13-4792-b471-cbad319e242d" name="patcher_1" x="1428" y="896">
      <params>
         <frac32.s.map name="filter:pitch" value="16.0"/>
         <frac32.u.map name="filter:reso" value="11.5"/>
         <frac32.s.map name="adsr:a" value="-52.0"/>
         <frac32.s.map name="adsr:d" value="-4.0"/>
         <frac32.u.map name="adsr:s" value="14.0"/>
         <frac32.s.map name="adsr:r" value="-10.0"/>
         <frac32.u.map name="vol" value="31.0"/>
      </params>
      <attribs>
         <combo attributeName="poly" selection="16"/>
         <combo attributeName="midichannel" selection="7"/>
         <combo attributeName="mididevice" selection="omni"/>
         <combo attributeName="midiport" selection="omni"/>
      </attribs>
      <subpatch appVersion="1.0.12">
         <obj type="midi/in/keyb touch" uuid="edfcb4cfd5b2064e95f5a7ee644bca56252ec11f" name="keyb_1" x="280" y="126">
            <params/>
            <attribs/>
         </obj>
         <obj type="midi/in/bend" uuid="7bd8cace52a8c26ed61d80f65e238408d5d621f4" name="bend_1" x="434" y="126">
            <params/>
            <attribs/>
         </obj>
         <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="*c_2" x="532" y="126">
            <params>
               <frac32.u.map name="amp" value="12.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="math/+" uuid="44553fdc8628c67ab535845ed1be304ad6c9553b" name="+_1" x="700" y="154">
            <params/>
            <attribs/>
         </obj>
         <obj type="osc/square cheap" uuid="58dc60ffca7e6c5029f12ec68787945c669b7a8f" name="square_1" x="826" y="210">
            <params>
               <frac32.s.map name="pitch" value="0.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="filter/lp m" uuid="1aa1bc51da479ed92429af700591f9d7b9f45f22" name="filter" x="1008" y="210">
            <params>
               <frac32.s.map name="pitch" onParent="true" value="0.0"/>
               <frac32.u.map name="reso" onParent="true" value="0.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="env/adsr" uuid="d1dbcc5fa6f87b98a6a91c87fd44acee5e690bac" name="adsr" x="1148" y="210">
            <params>
               <frac32.s.map name="a" onParent="true" value="-64.0"/>
               <frac32.s.map name="d" onParent="true" value="-34.0"/>
               <frac32.u.map name="s" onParent="true" value="23.5"/>
               <frac32.s.map name="r" onParent="true" value="-10.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_6" x="1246" y="210">
            <params/>
            <attribs/>
         </obj>
         <obj type="math/*c" uuid="7a66f52a9594e7e9eb31328ea725cb3641a80b55" name="vol" x="1316" y="210">
            <params>
               <frac32.u.map name="amp" onParent="true" value="36.5"/>
            </params>
            <attribs/>
         </obj>
         <obj type="audio/out left" uuid="b11a3c09b2fdd575ea8212f2ce7743d5269253b1" name="out_4" x="1428" y="210">
            <params/>
            <attribs/>
         </obj>
         <nets>
            <net>
               <source obj="vca_6" outlet="o"/>
               <dest obj="vol" inlet="in"/>
            </net>
            <net>
               <source obj="vol" outlet="out"/>
               <dest obj="out_4" inlet="wave"/>
            </net>
            <net>
               <source obj="square_1" outlet="wave"/>
               <dest obj="filter" inlet="in"/>
            </net>
            <net>
               <source obj="adsr" outlet="env"/>
               <dest obj="vca_6" inlet="v"/>
            </net>
            <net>
               <source obj="keyb_1" outlet="gate"/>
               <dest obj="adsr" inlet="gate"/>
            </net>
            <net>
               <source obj="keyb_1" outlet="note"/>
               <dest obj="+_1" inlet="in1"/>
            </net>
            <net>
               <source obj="+_1" outlet="out"/>
               <dest obj="square_1" inlet="pitch"/>
            </net>
            <net>
               <source obj="*c_2" outlet="out"/>
               <dest obj="+_1" inlet="in2"/>
            </net>
            <net>
               <source obj="filter" outlet="out"/>
               <dest obj="vca_6" inlet="a"/>
            </net>
            <net>
               <source obj="bend_1" outlet="bend"/>
               <dest obj="*c_2" inlet="in"/>
            </net>
            <net>
               <source obj="keyb_1" outlet="touch"/>
               <dest obj="filter" inlet="pitch"/>
            </net>
         </nets>
         <settings>
            <subpatchmode>polyphonic</subpatchmode>
            <MidiChannel>7</MidiChannel>
            <HasMidiChannelSelector>true</HasMidiChannelSelector>
            <NPresets>8</NPresets>
            <NPresetEntries>32</NPresetEntries>
            <NModulationSources>8</NModulationSources>
            <NModulationTargetsPerSource>8</NModulationTargetsPerSource>
         </settings>
         <notes><![CDATA[]]></notes>
         <windowPos>
            <x>-8</x>
            <y>-8</y>
            <width>1616</width>
            <height>876</height>
         </windowPos>
      </subpatch>
   </patcher>
   <comment type="patch/comment" x="280" y="1358" text="metronom"/>
   <obj type="noise/pink" uuid="72c03a2468ee865f248733fcf9b12d4cf42b5a61" name="pink_1" x="182" y="1372">
      <params/>
      <attribs/>
   </obj>
   <obj type="env/d" uuid="190ae648e41832b41adbedb465317c18a010aefe" name="d_1" x="280" y="1372">
      <params>
         <frac32.s.map name="d" value="-46.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_2" x="406" y="1372">
      <params/>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_4" x="476" y="1372">
      <params/>
      <attribs/>
   </obj>
   <obj type="audio/out left" uuid="b11a3c09b2fdd575ea8212f2ce7743d5269253b1" name="out_2" x="574" y="1372">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="280" y="1456" text="bar pulse"/>
   <obj type="env/d" uuid="190ae648e41832b41adbedb465317c18a010aefe" name="d_2" x="280" y="1470">
      <params>
         <frac32.s.map name="d" value="-23.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_1" x="392" y="1470">
      <params/>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_5" x="462" y="1470">
      <params/>
      <attribs/>
   </obj>
   <obj type="audio/out left" uuid="b11a3c09b2fdd575ea8212f2ce7743d5269253b1" name="out_3" x="574" y="1470">
      <params/>
      <attribs/>
   </obj>
   <nets>
      <net>
         <source obj="pink_1" outlet="out"/>
         <dest obj="vca_4" inlet="a"/>
         <dest obj="vca_5" inlet="a"/>
      </net>
      <net>
         <source obj="d_1" outlet="env"/>
         <dest obj="*_2" inlet="a"/>
      </net>
      <net>
         <source obj="d_2" outlet="env"/>
         <dest obj="*_1" inlet="a"/>
      </net>
      <net>
         <source obj="button_5" outlet="o"/>
         <dest obj="1_1" inlet="record"/>
      </net>
      <net>
         <source obj="button_2" outlet="o"/>
         <dest obj="1_1" inlet="stop"/>
      </net>
      <net>
         <source obj="button_4" outlet="o"/>
         <dest obj="1_1" inlet="overdub"/>
      </net>
      <net>
         <source obj="1_1" outlet="maxnotes"/>
         <dest obj="i_16" inlet="in"/>
      </net>
      <net>
         <source obj="1_1" outlet="slotnotes"/>
         <dest obj="i_9" inlet="in"/>
      </net>
      <net>
         <source obj="i_6" outlet="out"/>
         <dest obj="bend" inlet="cslot"/>
         <dest obj="1_1" inlet="slot"/>
      </net>
      <net>
         <source obj="button_8" outlet="o"/>
         <dest obj="bend" inlet="clear"/>
         <dest obj="1_1" inlet="clearslot"/>
      </net>
      <net>
         <source obj="button_7" outlet="o"/>
         <dest obj="1_1" inlet="trigger"/>
      </net>
      <net>
         <source obj="3_1" outlet="kbeat"/>
         <dest obj="1_1" inlet="kbeat"/>
      </net>
      <net>
         <source obj="1_1" outlet="bartrig"/>
         <dest obj="d_2" inlet="trig"/>
      </net>
      <net>
         <source obj="toggle_1" outlet="o"/>
         <dest obj="clock_3" inlet="run"/>
         <dest obj="clock_3" inlet="rst"/>
      </net>
      <net>
         <source obj="3_1" outlet="1ppq"/>
         <dest obj="d_1" inlet="trig"/>
         <dest obj="1_1" inlet="1ppq"/>
      </net>
      <net>
         <source obj="toggle_2" outlet="o"/>
         <dest obj="1_1" inlet="quantize"/>
      </net>
      <net>
         <source obj="dial_1" outlet="out"/>
         <dest obj="*_2" inlet="b"/>
         <dest obj="*_1" inlet="b"/>
      </net>
      <net>
         <source obj="1_1" outlet="full"/>
         <dest obj="bool_5" inlet="in"/>
      </net>
      <net>
         <source obj="1_1" outlet="wait"/>
         <dest obj="bool_27" inlet="in"/>
      </net>
      <net>
         <source obj="1_1" outlet="playstate"/>
         <dest obj="i_3" inlet="in"/>
      </net>
      <net>
         <source obj="c_1" outlet="out"/>
         <dest obj="save_1" inlet="filename"/>
      </net>
      <net>
         <source obj="button_1" outlet="o"/>
         <dest obj="save_1" inlet="trig"/>
      </net>
      <net>
         <source obj="toggle_3" outlet="o"/>
         <dest obj="1_1" inlet="erase"/>
      </net>
      <net>
         <source obj="3_1" outlet="stop"/>
         <dest obj="1_1" inlet="clearplay"/>
      </net>
      <net>
         <source obj="3_1" outlet="bpm"/>
         <dest obj="i_2" inlet="in"/>
      </net>
      <net>
         <source obj="button_3" outlet="o"/>
         <dest obj="1_1" inlet="undo"/>
      </net>
      <net>
         <source obj="*_1" outlet="result"/>
         <dest obj="vca_5" inlet="v"/>
      </net>
      <net>
         <source obj="vca_4" outlet="o"/>
         <dest obj="out_2" inlet="wave"/>
      </net>
      <net>
         <source obj="vca_5" outlet="o"/>
         <dest obj="out_3" inlet="wave"/>
      </net>
      <net>
         <source obj="*_2" outlet="result"/>
         <dest obj="vca_4" inlet="v"/>
      </net>
      <net>
         <source obj="i_7" outlet="out"/>
         <dest obj="1_1" inlet="quantization"/>
      </net>
      <net>
         <source obj="toggle_4" outlet="o"/>
         <dest obj="1_1" inlet="triplets"/>
      </net>
      <net>
         <source obj="1_1" outlet="overdub"/>
         <dest obj="bool_3" inlet="in"/>
         <dest obj="bend" inlet="overdub"/>
      </net>
      <net>
         <source obj="1_1" outlet="record"/>
         <dest obj="bool_4" inlet="in"/>
         <dest obj="bend" inlet="rec"/>
      </net>
      <net>
         <source obj="1_1" outlet="play"/>
         <dest obj="bool_26" inlet="in"/>
         <dest obj="bend" inlet="play"/>
      </net>
      <net>
         <source obj="3_1" outlet="start"/>
         <dest obj="bend" inlet="reset"/>
         <dest obj="1_1" inlet="restart"/>
      </net>
      <net>
         <source obj="1_1" outlet="synclock"/>
         <dest obj="i_10" inlet="in"/>
         <dest obj="bend" inlet="synclock"/>
      </net>
      <net>
         <source obj="1_1" outlet="currentslot"/>
         <dest obj="i_1" inlet="in"/>
         <dest obj="bend" inlet="slot"/>
      </net>
      <net>
         <source obj="i_8" outlet="out"/>
         <dest obj="1_1" inlet="maxbar"/>
      </net>
      <net>
         <source obj="1_1" outlet="offset"/>
         <dest obj="bend" inlet="offset"/>
      </net>
      <net>
         <source obj="bend" outlet="offset"/>
         <dest obj="i_4" inlet="in"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
      <MidiChannel>1</MidiChannel>
      <NPresets>8</NPresets>
      <NPresetEntries>32</NPresetEntries>
      <NModulationSources>8</NModulationSources>
      <NModulationTargetsPerSource>8</NModulationTargetsPerSource>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>-8</x>
      <y>-8</y>
      <width>1616</width>
      <height>876</height>
   </windowPos>
</patch-1.0>