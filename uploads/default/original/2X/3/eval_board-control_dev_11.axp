<patch-1.0 appVersion="1.0.12">
   <obj type="gpio/spi/config" uuid="d3e75d8a02e2ccabbbc2af3bc2fcdb8ea65a6133" name="config_1" x="14" y="14">
      <params/>
      <attribs>
         <combo attributeName="clock_polarity" selection="CPOL=1"/>
         <combo attributeName="clock_phase" selection="CPHA=1"/>
         <combo attributeName="baudrate" selection="FPCLK/4"/>
         <combo attributeName="format" selection="MSB first"/>
      </attribs>
   </obj>
   <comment type="patch/comment" x="140" y="14" text="CONNECTION (MCP4x22)"/>
   <comment type="patch/comment" x="140" y="42" text="PA4 = NSS/CS (MCP4x22: Pin2)"/>
   <comment type="patch/comment" x="140" y="56" text="PA5 = SCK (MCP4x22: Pin3)"/>
   <comment type="patch/comment" x="140" y="70" text="PA7 = MOSI (MCP4x22: Pin4)"/>
   <comment type="patch/comment" x="140" y="84" text="MCP4x22 LDAC = GND"/>
   <obj type="disp/hex" uuid="87617898f70d90033f8add921438bf0d11721fdd" name="hex_1" x="406" y="126">
      <params/>
      <attribs/>
   </obj>
   <obj type="midi/in/cc any" uuid="eca13eae3f7625f3ca80cadd19a90de033698aa" name="cc_2" x="56" y="154">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="06729976-b7fd-49a2-a00c-9ecbb8ae89c3" name="object_1" x="308" y="168">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="06729976-b7fd-49a2-a00c-9ecbb8ae89c3">
         <inlets>
            <frac32.positive name="i1"/>
            <frac32.positive name="i2"/>
         </inlets>
         <outlets/>
         <displays>
            <int32.label name="d1"/>
         </displays>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[uint8_t *txbuf;
uint8_t *rxbuf;

const uint8_t RESET = 0;
const uint8_t CLR = 2;
const uint8_t BUSY = 1;
const uint8_t LDAC = 3;
const uint8_t SYNC = 4;

// SPI 
const uint8_t CLK = 5;
const uint8_t MOSI = 7;

enum { X, M, C };

void updateDAC(void) {
	// Pulse LDAC to update outputs
	palWritePad(GPIOA,LDAC,0);
	palWritePad(GPIOA,LDAC,1);
}
void setDAC(uint8_t output, uint8_t reg,  uint16_t value) {
	
	txbuf[2] = 0x00; // compose 24bit word out of three bytes
	
	// output 0 - 39
	//group = output >> 3; // divide by 8
	//channel = output % 8;
	 
	// Dev
	// Set output 0 to FFFF
	// mode 	adress 	dac value	
	// 00 	001000 	1111 1111 1111 111
	if (reg == X) { // X Register -> M1,M0 = 11
		txbuf[0] = 0b11000000 | (((output % 8) << 3) & (output >> 3));
	} else if (reg == M) { // M register -> M1,M0 = 01
		txbuf[0] = 0b01000000 | (((output % 8) << 3) & (output >> 3));
	} else if (reg == C) { // C register -> M1,M0 = 10
		txbuf[0] = 0b10000000 | (((output % 8) << 3) & (output >> 3));
	}
	//txbuf[0] = 0b11001000;
	txbuf[1] = value >> 8; 
	txbuf[2] = value;

	// Write Sequence
	spiSelect(&SPID1); 
	spiSend(&SPID1,3,txbuf);        
	spiUnselect(&SPID1);
	
	//palWritePad(GPIOA,LDAC,0);
	//palWritePad(GPIOA,LDAC,1);
	
	/* Bit banging 
	palWritePad(GPIOA, CLK, 0); 

	palWritePad(GPIOA,SYNC,1); 
	palWritePad(GPIOA,SYNC,0);
	
	// Generate 24 falling clock edges	
	for(int i=0; i<24; i++) { // MSB First
		// set Data - MSB First 
		if (i<8) { 			
			if (txbuf[0] & (1 << (7-i))) {
				palWritePad(GPIOA, MOSI, 1);
			} else {
				palWritePad(GPIOA, MOSI, 0);
			}
		} else if(i < 16) {
			if (txbuf[1] & (1 << (7-(i-8)))) {
				palWritePad(GPIOA, MOSI, 1);
			} else {
				palWritePad(GPIOA, MOSI, 0);
			}
		} else {
			if (txbuf[2] & (1 << (7-(i-16)))) {
				palWritePad(GPIOA, MOSI, 1);
			} else {
				palWritePad(GPIOA, MOSI, 0);
			}
		}
		
		palWritePad(GPIOA, CLK, 1);
		palWritePad(GPIOA, CLK, 0); 	 
	}
	
	palWritePad(GPIOA,SYNC,1); 
	palWritePad(GPIOA,SYNC,0);
	
	palWritePad(GPIOA,LDAC,0);
	palWritePad(GPIOA,LDAC,1);	
	*/
}
void setDACOffset(uint8_t number, uint16_t value) {
	palWritePad(GPIOA,CLR,0); // disconnect outputs while setting Offset to avoid glitches
	txbuf[2] = 0x00; // compose 24bit word out of three bytes
	if (number == 0) { // Set DAC Offset for Group 0 only (OFS0)
		txbuf[0] = 0b00000010;
	} else { // set DAC Offset for Group 1-4 (OFS1)
		txbuf[0] = 0b00000011;
	}
	txbuf[1] = value >> 8; 
	txbuf[2] = value;
	
	// Write Sequence
	spiSelect(&SPID1); 
	spiSend(&SPID1,3,txbuf);       
	spiUnselect(&SPID1);

	palWritePad(GPIOA,CLR,1); // reconnect outputs after setting Offset
	
	palWritePad(GPIOA,LDAC,1);
	palWritePad(GPIOA,LDAC,0);
	chThdSleepMilliseconds(1);
}]]></code.declaration>
         <code.init><![CDATA[static uint8_t _txbuf[3] __attribute__ ((section (".sram2")));
static uint8_t _rxbuf[3] __attribute__ ((section (".sram2")));

txbuf = _txbuf;
rxbuf = _rxbuf;

/* DA5370 - Axoloti Connection 
DIN   -  PA7
SCLK  -  PA5
SYNC  -  PA4
LDAC  -  PA3
CLR   -  PA2
BUSY  -  PA1 
RESET -  PA0
*/

// Axolit Pin setup 
/* PAL MODES:
PAL_MODE_RESET
PAL_MODE_UNCONNECTED
PAL_MODE_INPUT
PAL_MODE_INPUT_PULLUP
PAL_MODE_INPUT_PULLDOWN
PAL_MODE_INPUT_ANALOG,
PAL_MODE_OUTPUT_PUSHPULL
PAL_MODE_OUTPUT_OPENDRAIN
*/

// x=palReadPad(GPIOA,1) // Read the Pad

/* Pin setup
--------------------------------------------------------------------- */
palSetPadMode(GPIOA,RESET,PAL_MODE_OUTPUT_PUSHPULL);
palSetPadMode(GPIOA,CLR,PAL_MODE_OUTPUT_PUSHPULL);
palSetPadMode(GPIOA,BUSY,PAL_MODE_INPUT);
palSetPadMode(GPIOA,LDAC,PAL_MODE_OUTPUT_PUSHPULL);


/* Initialisiation steps
--------------------------------------------------------------------- */
// set RESET Pin to HIGH (rising Edge triggered) to load Defaults
palWritePad(GPIOA,RESET,1);
// Set CLR to HIGH // to enable Outputs
palWritePad(GPIOA,CLR,1);
// Set SYNC to HIGH. On falling Edge it will start the write operation.
palWritePad(GPIOA,SYNC,1);
// Set LDAC to HIGH because it is falling Edge triggered
palWritePad(GPIOA,LDAC,0);

chThdSleepMilliseconds(1);



/* Calibration init values for registers M and C 
--------------------------------------------------------------------- */
 // M(multiplier) is always 6A9F => range of 5.0V, ‭D53E‬ => range of 10.0V
 // C(offset) is individually measured per channel 
 // The individual Values for the zero offset error are measured calculated 
 // using the methods described on page 18 in the AD5370 datasheet
int16_t zeroOffset[40] = {
	0x805D,0x805F,0x8065, 0x8042,0x804B,0x8067,0x8083,0x8080, // Group 0
	0x8047,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // Group 1
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // Group 2
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // Group 3
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // Group 4
};
setDACOffset(0, 0x18);
setDACOffset(1, 0x18);
for (uint8_t i = 0; i < 40; i++) {
	setDAC(i, M, 0x6A9F);
	palWritePad(GPIOA,LDAC,1);
	palWritePad(GPIOA,LDAC,0);
	chThdSleepMilliseconds(1);
	
	setDAC(i, C, 0x805D);
	//setDAC(i, C, zeroOffset[i]);
	palWritePad(GPIOA,LDAC,1);
	palWritePad(GPIOA,LDAC,0);
	chThdSleepMilliseconds(1);
}]]></code.init>
         <code.dispose><![CDATA[palSetPadMode(GPIOA, RESET, PAL_MODE_INPUT_ANALOG);
palSetPadMode(GPIOA, CLR, PAL_MODE_INPUT_ANALOG);
palSetPadMode(GPIOA, BUSY, PAL_MODE_INPUT_ANALOG);
palSetPadMode(GPIOA, LDAC, PAL_MODE_INPUT_ANALOG);
palSetPadMode(GPIOA, SYNC, PAL_MODE_INPUT_ANALOG);

palSetPadMode(GPIOA, CLK, PAL_MODE_INPUT_ANALOG);
palSetPadMode(GPIOA, MOSI, PAL_MODE_INPUT_ANALOG);]]></code.dispose>
         <code.krate><![CDATA[disp_d1 = inlet_i1 >> 11; 

setDAC(0, X, ((inlet_i1+1) >> 11)+1);
//setDAC(0, C, (inlet_i2 >> 11));]]></code.krate>
      </object>
   </patchobj>
   <obj type="disp/chart p" uuid="58f42040a894006a5f73ed8cb8d0bd45481b28cd" name="chart_1" x="630" y="238">
      <params/>
      <attribs/>
   </obj>
   <obj type="midi/in/cc any" uuid="eca13eae3f7625f3ca80cadd19a90de033698aa" name="cc_1" x="434" y="252">
      <params/>
      <attribs/>
   </obj>
   <obj type="lfo/sine" uuid="75f7330c26a13953215dccc3b7b9008545c9daa9" name="sine_1" x="28" y="280">
      <params>
         <frac32.s.map name="pitch" value="13.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="disp/dial b" uuid="9ffed04e6a3052d9001eda83bae7024cb6d17037" name="dial_1" x="238" y="350">
      <params/>
      <attribs/>
   </obj>
   <obj type="lfo/sine" uuid="75f7330c26a13953215dccc3b7b9008545c9daa9" name="sine_2" x="28" y="392">
      <params>
         <frac32.s.map name="pitch" value="-15.0"/>
      </params>
      <attribs/>
   </obj>
   <nets>
      <net>
         <source obj="cc_1" outlet="value"/>
         <dest obj="chart_1" inlet="in"/>
      </net>
      <net>
         <source obj="cc_2" outlet="value"/>
         <dest obj="object_1" inlet="i1"/>
         <dest obj="hex_1" inlet="in"/>
      </net>
      <net>
         <source obj="sine_1" outlet="wave"/>
         <dest obj="dial_1" inlet="in"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>-161</x>
      <y>258</y>
      <width>1936</width>
      <height>657</height>
   </windowPos>
</patch-1.0>