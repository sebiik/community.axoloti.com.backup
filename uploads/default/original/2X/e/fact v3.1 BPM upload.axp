<patch-1.0 appVersion="1.0.12">
   <comment type="patch/comment" x="658" y="28" text="looper"/>
   <comment type="patch/comment" x="126" y="42" text="input/loop"/>
   <comment type="patch/comment" x="210" y="42" text="volume"/>
   <comment type="patch/comment" x="364" y="42" text="record"/>
   <comment type="patch/comment" x="476" y="42" text="overdub"/>
   <comment type="patch/comment" x="574" y="42" text="replace"/>
   <comment type="patch/comment" x="658" y="42" text="feedback"/>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_10" x="126" y="56">
      <params>
         <frac32.u.map name="value" value="32.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_11" x="210" y="56">
      <params>
         <frac32.u.map name="value" value="64.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_4" x="364" y="56">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_5____tmp" x="476" y="56">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_6" x="574" y="56">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_5" x="658" y="56">
      <params>
         <frac32.u.map name="value" value="64.0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="770" y="126" text="sample bpm"/>
   <comment type="patch/comment" x="854" y="126" text="new bpm"/>
   <comment type="patch/comment" x="938" y="126" text="pitch"/>
   <comment type="patch/comment" x="1036" y="126" text="stretch"/>
   <comment type="patch/comment" x="1134" y="126" text="rate"/>
   <obj type="ctrl/i" uuid="a3786816db6ea5bc6ac4193a5cccdb2c83b83496" name="i_1" x="770" y="140">
      <params>
         <int32 name="value" value="90"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/i" uuid="a3786816db6ea5bc6ac4193a5cccdb2c83b83496" name="i_2" x="854" y="140">
      <params>
         <int32 name="value" value="90"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_1" x="938" y="140">
      <params>
         <frac32.s.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_2" x="1036" y="140">
      <params>
         <frac32.s.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_3" x="1134" y="140">
      <params>
         <frac32.s.map name="value" value="64.0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="364" y="154" text="stop"/>
   <comment type="patch/comment" x="448" y="154" text="play"/>
   <comment type="patch/comment" x="532" y="154" text="restart"/>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_4" x="364" y="168">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_1" x="448" y="168">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_5" x="532" y="168">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="770" y="210" text="repitch"/>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_3" x="770" y="224">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="924" y="294" text="save"/>
   <comment type="patch/comment" x="1036" y="294" text="load"/>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_2" x="924" y="308">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_3" x="1036" y="308">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="140" y="322" text="fact recorder v3.1"/>
   <obj type="audio/in left" uuid="d40e60b7641fe75af4d7c91b45bb038aacafc52e" name="in_1" x="42" y="336">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="606a6741-0221-4345-b0a3-98164d2d4de7" name="3_1" x="140" y="336">
      <params>
         <int32 name="fade" value="3"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="data"/>
         <combo attributeName="dubtrig" selection="internal"/>
      </attribs>
      <object id="patch/object" uuid="606a6741-0221-4345-b0a3-98164d2d4de7">
         <sDescription>Difficult to name. Pitchshifter, time-stretcher, play-rate adjuster (stretch+pitchshift), sampler, delay, granulizer...

See inputs/controls for their functions (hoover above them)</sDescription>
         <author>Remco van der most</author>
         <license>BSD</license>
         <helpPatch>delay.axh</helpPatch>
         <inlets>
            <frac32buffer name="in" description="audio input"/>
            <bool32.risingfalling name="rec"/>
            <bool32.rising name="restart"/>
            <bool32.rising name="play"/>
            <bool32.rising name="stop"/>
            <bool32.risingfalling name="overdub"/>
            <bool32.risingfalling name="replace"/>
            <frac32.positive name="feedback"/>
            <bool32.risingfalling name="delaymode"/>
            <frac32.positive name="delay"/>
         </inlets>
         <outlets>
            <bool32.pulse name="start"/>
            <bool32.pulse name="xtrig"/>
            <int32 name="length"/>
            <frac32.positive name="phase"/>
            <bool32.pulse name="stop"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="fade" noLabel="true">
               <MinValue i="1"/>
               <MaxValue i="30000000"/>
            </int32>
         </params>
         <attribs>
            <objref name="table"/>
            <combo name="dubtrig">
               <MenuEntries>
                  <string>internal</string>
                  <string>external</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int32_t ovrfade;
int32_t ovrenv;
int32_t env[2];
int32_t Oenv[2];
int32_t Ienv[2];
int32_t Ostep[2];
int32_t Oprev[2];
int32_t ovrrate;
int32_t ovrcnt;
int32_t prevO;
int32_t stepO;
int32_t rfade;
int32_t renv;
int32_t rate;
int32_t phase;
int32_t mcnt;
int32_t mute;
int32_t rfadeO;
int32_t feeback;
int32_t delay;
int32_t prevd;
int32_t prevR;
int32_t stepR;
int32_t feedback;
uint32_t x;
uint32_t writepos;
uint32_t dubpos[2];
uint32_t dubclock;
uint32_t deck;
uint32_t length;
uint32_t buffer;
uint32_t bsize;
uint32_t in;
uint32_t dcount;
bool play;
bool stop;
bool prevp;
bool Prep;
bool rec;
bool dt;
//bool overdub;
bool delaymode;
bool dubtrig;
bool ovrin;
bool repin;
bool Pinovr;
bool dubbing;
bool recording;
bool start;
bool strig;
bool ptrig;
bool xtrig;
bool rtrig;
bool ott;
bool hold;

bool dhold;
bool det;
bool mtrigger;]]></code.declaration>
         <code.krate><![CDATA[bsize=2048;

length=(attr_table.array[0+bsize]<<15)+attr_table.array[1+bsize];
rate=(1<<31)/(length<<4);

if (inlet_delaymode!=prevd){
	prevd=inlet_delaymode;
	
	ovrcnt=(bsize>>4);
	dhold=1;
	
}
if (inlet_overdub!=Pinovr){
	ovrcnt=(bsize>>4);
	Pinovr=inlet_overdub;
}
if (inlet_replace!=Prep){
	ovrcnt=(bsize>>4);
	Prep=inlet_replace;
}
if (ovrcnt>0){
	ovrcnt-=1;
	if (ovrcnt<=0){
		if (!dhold){
			if (inlet_overdub){
				//overdub=1;
				ovrin=1;
			}
			else {
				ovrin=0;
			}
			if (inlet_replace){
				//overdub=1;
				repin=1;
				ovrin=1;
			}
			else {
				repin=0;
			}
		}
		else if (dhold){
			ovrin=0;
			ott=0;

			
		}
	}
}

ovrrate=0x07FFFFFF/param_fade;
if (ovrin){
	if (ovrfade<0x07FFFFFF){
		ovrfade+=ovrrate;
		if (ovrfade>=0x07FFFFFF){
			ovrfade=0x07FFFFFF;
		}
	}
}
else {
	if (ovrfade>0){
		ovrfade-=ovrrate;
		
		
	}
	if (ovrfade<=0){

			ovrfade=0;
			if (!ott){
				ott=1;
			if (inlet_delaymode){
				ovrin=1;
				delaymode=1;
				
			}
			else if (!inlet_delaymode){
				
				dhold=0;
				delaymode=0;
				if (inlet_overdub){
					ovrin=1;
				}
			}
			}
			
		}
}
if (delaymode){
	delay=___SMMUL(length<<3,inlet_delay<<2);
	}
else {
	delay=0;
}


if (!repin){
	if (rfade<0x07FFFFFF){
		rfade+=ovrrate;
		if (rfade>=0x07FFFFFF){
			rfade=0x07FFFFFF;
		}
	}
}
else {
	if (rfade>0){
		rfade-=ovrrate;
		if (rfade<=0){
			rfade=0;
			
		}
	}
}

rfadeO= ___SMMUL(rfade<<3,inlet_feedback<<2);

if (rfadeO>=0x07FFFFFE){
	rfadeO=1<<27;
}

   stepR = (rfadeO - prevR)>>4;
   int32_t renv = prevR;
   prevR = rfadeO;
if((inlet_rec>0)&&!rec){
	rec=1;
	recording=1;
	writepos=0;
	length=0;
	attr_table.array[0+bsize]=0;
	attr_table.array[1+bsize]=0;
	play=0;
	deck=2;
	
}

else if((inlet_rec==0)&&rec&&(writepos>=(bsize))){
	start=1;
	rec=0;
	attr_table.array[0+bsize]=((writepos)/(1<<15));
	attr_table.array[1+bsize]=writepos-(((writepos)/(1<<15))<<15);
	length=writepos;
	dubclock=0;
	play=1;
	//deck=2;
	dubtrig=1;
	dubpos[0]=length+(bsize<<4);
	dubpos[1]=length+(bsize<<4);
	}


if ((writepos>=(length+(bsize<<3)))  && (length>0)){
	recording=0;
}

if (length>0){
	dubclock+=(1<<4);
}
if ((dubclock>=length) && (length>0)){
	dubclock=0;
	if (!attr_dubtrig){
		dubtrig=1;
		}
	if (delaymode){
		dubtrig=1;
		}
	
}

if (inlet_restart&&!rtrig){

	if  (!delaymode){
	dubtrig=1;
	dubclock=0;
	}
	
	rtrig=1;
}
else if (!inlet_restart){
	rtrig=0;
}
if (inlet_stop&&!strig){
	strig=1;
	play=0;
}
else if (!inlet_stop){
	strig=0;
}
if (inlet_play&&!ptrig){
	play=1;
	ptrig=1;
}
else if (!inlet_play){
	ptrig=0;
}

if (play!=prevp){
	if (play){
		if (!ovrin&&inlet_overdub){
			ovrin=1;
		}
		start=1;
		dubtrig=1;
		dubclock=0;
	}
	else {
		if (ovrin){
			ovrin=0;
		}
		stop=1;
		dubpos[0]=length+(bsize<<4);
		dubpos[1]=length+(bsize<<4);
	}
	prevp=play;
}



if (mute>0){
	if (mcnt>0){
		mcnt-=1;
		}
	if ((mcnt<=0)&&!mtrigger){
		mtrigger=1;
		mcnt=0;
	}
	if (mtrigger){
		env[mute-1]-=ovrrate;
//		dubpos[mute-1]=length+(bsize<<4);
		if (env[mute-1]<=0){
			env[mute-1]=0;
			mute=0;
			mtrigger=0;
		}
	}
}
for (x = 0;x<2;x++){
	
	Ienv[x]=___SMMUL(ovrfade<<3,env[x]<<2);
	Ostep[x]= (Ienv[x]- Oprev[x])>>4;
   	Oenv[x]= Oprev[x];
   	Oprev[x] = Ienv[x];
}

if (play){
	phase=dubpos[deck]*rate;
	}
else {
	phase=0;
}
if (dubtrig){
	
	if (((phase)<(60<<21)) && (deck<2)){
		mute=1+deck;
		mcnt=bsize>>4;
	}
	else {mute=0;}
	
	if ((deck==2)||(deck==1)){
		deck=0;
	}
	else {
		deck=1;
	}
	
	dubpos[deck]=0;
	env[deck]=0x07FFFFFF;
	phase=0;
	if (!start){
		xtrig=1;
		}
}


//disp_d5= 1031>>1<<1;
outlet_phase=phase;
outlet_length=length;
outlet_start=start;
outlet_stop=stop;
outlet_xtrig=xtrig;
start=0;
stop=0;
dubtrig=0;
xtrig=0;]]></code.krate>
         <code.srate><![CDATA[if(recording>0) {
	attr_table.array[writepos+32+bsize] =attr_table.array[buffer];
	writepos = (writepos + 1)&attr_table.LENGTHMASK;
	}

	for (x = 0;x<2;x++){
		
		if (dubpos[x]<(length+(bsize<<3))){
			uint32_t xpos=dubpos[x];
			
			attr_table.array[xpos+32+bsize+delay] = (___SMMUL(attr_table.array[xpos+32+bsize]<<3,renv<<2) + ___SMMUL(attr_table.array[buffer]<<3,Oenv[x]<<2));
			if (delaymode && ((xpos)>=(length-delay)) && ((xpos)<(length+bsize+bsize))     ){
				attr_table.array[xpos+32+bsize-(length-delay)] =(___SMMUL(attr_table.array[xpos+32+bsize]<<3,renv<<2) + ___SMMUL(attr_table.array[buffer]<<3,Oenv[x]<<2));
			}
			Oenv[x]+=Ostep[x];			
			dubpos[x] = (dubpos[x]+ 1)&attr_table.LENGTHMASK;
		}
	
	}
	
	renv+=stepR;







in=__SSAT(inlet_in>>14,16);
attr_table.array[buffer]=in;
buffer+=1;
if (buffer>=bsize){
	buffer=0;
}]]></code.srate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="546" y="336" text="magic box that compares two times "/>
   <comment type="patch/comment" x="546" y="350" text="and puts out the stretch difference"/>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_2" x="490" y="364">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="dd8dcc27-a26e-4659-bd16-d045b2834bcb" name="factsyncer" x="560" y="364">
      <params/>
      <attribs>
         <combo attributeName="mode" selection="bpm"/>
      </attribs>
      <object id="patch/object" uuid="dd8dcc27-a26e-4659-bd16-d045b2834bcb">
         <helpPatch>logic.axh</helpPatch>
         <inlets>
            <int32 name="base"/>
            <int32 name="new"/>
            <bool32.risingfalling name="repitch"/>
            <frac32.bipolar name="stretch"/>
            <frac32.bipolar name="pitch"/>
            <bool32.risingfalling name="q"/>
         </inlets>
         <outlets>
            <frac32.bipolar name="stretch"/>
            <frac32.bipolar name="pitch"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <combo name="mode">
               <MenuEntries>
                  <string>time</string>
                  <string>bpm</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int32_t stretch;
int32_t pitch;
int32_t dif;

int32_t n;
int32_t b;
int32_t c;

int32_t LOG(int32_t in){
	Float_t f;
f.f = in;
int32_t r1 = ((f.parts.exponent&0x7F)-18) << 24;
int32_t r3 = logt[f.parts.mantissa>>15]<<10;
r1 += r3;
return r1;

}


int32_t FTOM(int32_t freq){
	int32_t ptch;
	int32_t mid;
MTOFEXTENDED(0,mid);
mid=LOG(mid);

int32_t to;
to=LOG(freq<<2);
return ptch=(to-mid>>1)*3;
};]]></code.declaration>
         <code.krate><![CDATA[//use the averaged countlength and calculate the timings for lfo's and delays
n=inlet_new;
if (n<1){
	n=inlet_base;
}
b=inlet_base;
if (b<1){
	b=inlet_new;
}

c=b-n;
if ((c>5)||(c<(-5))){
	int32_t freqB=((uint64_t)1<<32)/n;
	int32_t freqA=((uint64_t)1<<32)/b;
	if (!attr_mode){
		dif=FTOM(freqB) - FTOM(freqA);
	}
	else {
		dif=FTOM(freqA) - FTOM(freqB);
		}
	}
else {
	dif=0;
}
stretch=dif + inlet_stretch;

if (inlet_repitch){
	pitch=inlet_pitch+dif;
}
else {
	pitch=inlet_pitch;
}

if (!inlet_q){
	outlet_stretch=stretch;
	outlet_pitch=pitch;
	}
else {
	outlet_stretch=stretch>>21<<21;
	outlet_pitch=pitch>>21<<21;
}]]></code.krate>
      </object>
   </patchobj>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="bool_2" x="924" y="364">
      <params/>
      <attribs/>
   </obj>
   <obj type="table/alloc 32b sdram" uuid="1a4546b7b52747ea765093ac97444601c44721e8" name="data" x="1596" y="420">
      <params/>
      <attribs>
         <combo attributeName="size" selection="1048576"/>
         <text attributeName="init">
            <sText><![CDATA[]]></sText>
         </text>
      </attribs>
   </obj>
   <patchobj type="patch/object" uuid="b9d39eb1-e1c5-45d9-a32d-e690a0e06a27" name="crossfade_1" x="910" y="462">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="b9d39eb1-e1c5-45d9-a32d-e690a0e06a27">
         <sDescription>Left shift. Doubles the value &quot;shift&quot; times, with overflow. If overflow is not desireable, use &quot;muls&quot;.</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>math.axh</helpPatch>
         <inlets>
            <frac32 name="drywet" description="a"/>
            <frac32 name="volume"/>
         </inlets>
         <outlets>
            <frac32 name="dry"/>
            <frac32 name="wet" description="a amplified in 6dB steps"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_dry=  ___SMMUL((__SSAT((0x07FFFFFF-inlet_drywet)<<1,28))<<3,inlet_volume<<2);
outlet_wet= ___SMMUL( (__SSAT((inlet_drywet<<1),28))<<3,inlet_volume<<2);]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="518" y="532" text="oneshot"/>
   <comment type="patch/comment" x="602" y="532" text="window"/>
   <comment type="patch/comment" x="756" y="532" text="fact player v3"/>
   <comment type="patch/comment" x="1106" y="532" text="input + sampler"/>
   <obj type="logic/or 2" uuid="3805d3c84d30032a44fbdbe42d9a2988a1790a3e" name="or_1" x="420" y="546">
      <params/>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_1" x="518" y="546">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_8" x="602" y="546">
      <params>
         <frac32.u.map name="value" value="64.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="2b342cb7-4706-487f-8d28-9f87dcf8c821" name="1_2" x="756" y="546">
      <params>
         <int32 name="fadein" value="256"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="data"/>
         <combo attributeName="xfade" selection="auto"/>
      </attribs>
      <object id="patch/object" uuid="2b342cb7-4706-487f-8d28-9f87dcf8c821">
         <sDescription>Difficult to name. Pitchshifter, time-stretcher, play-rate adjuster (stretch+pitchshift), sampler, delay, granulizer...

See inputs/controls for their functions (hoover above them)</sDescription>
         <author>Remco van der most</author>
         <license>BSD</license>
         <helpPatch>delay.axh</helpPatch>
         <inlets>
            <bool32 name="trigger" description="when high, restarts at &quot;phase-position&quot;  of phase input+parameter"/>
            <bool32 name="stop"/>
            <frac32.bipolar name="pitchshift" description="ONLY pitchshifts the signal without stretching it. normal semitone response."/>
            <frac32.bipolar name="stretch" description="ONLY stretches the signal without pitchshifting it. normal semitone response."/>
            <frac32.bipolar name="rate"/>
            <bool32.risingfalling name="oneshot"/>
            <frac32.positive name="start"/>
            <frac32.positive name="end"/>
            <frac32.positive name="window"/>
         </inlets>
         <outlets>
            <frac32buffer name="out"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="fadein" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="30000"/>
            </int32>
         </params>
         <attribs>
            <objref name="table"/>
            <combo name="xfade">
               <MenuEntries>
                  <string>auto</string>
                  <string>parameter</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int32_t phase[2];
int32_t phs[2];
int32_t P1[2];
int32_t P2[2];
int32_t tmp1[2];
int32_t tmp2[2];
int32_t out[2];
int32_t mp[2];
int32_t prevv[2];
int32_t FRQ[2];
int32_t FRQQ[2];
int32_t FR;
int32_t FRR;
int32_t i[2];
int32_t prestep[2];
int32_t step[2];

int32_t Xphase;
int32_t start;
int32_t end;
int32_t x;
int32_t rate;
int32_t bsize;
int32_t length;
int32_t xlength;
int32_t xoffset;
int32_t total;
float32_t ratio;
int32_t fBase;
int32_t fRate;
int32_t LNG;
int32_t window;
int32_t playpos;
int32_t Lpoint;
int32_t Lp;
int32_t Pp;
int32_t Xo;
int32_t RATEPRE;
int32_t player;
int32_t dir;

int32_t READ(int T,uint32_t R,uint32_t L,uint32_t P){
      int32_t tmp_di = T/R;
      int32_t tmp_w1 = (T-tmp_di*R)*R>>2;
      int32_t tmp_diX=tmp_di+32+start+bsize;
      int32_t tmp_a1 = attr_table.array[tmp_diX];
      tmp_a1 = (tmp_a1<<14)+___SMMUL(attr_table.array[tmp_diX+1]-tmp_a1<<16,tmp_w1);
      return out[P]= tmp_a1;
}

bool fadein;
bool fading;
bool play;
bool prevplay;
bool snc;
bool oneshot;
bool ztrig;
bool ptt;
bool stop;]]></code.declaration>
         <code.init><![CDATA[player=2;
bsize=2048;]]></code.init>
         <code.krate><![CDATA[total=(attr_table.array[0+bsize]<<15)+attr_table.array[1+bsize];
oneshot=inlet_oneshot;



if((inlet_trigger>0)&&!snc){
	fadein=1;
	ztrig=1;
	snc=1;
}

else if(inlet_trigger==0){
	snc=0;
	}


if (inlet_stop && !stop){
	stop=1;
	play=0;
}
else if (!inlet_stop){
	stop=0;
}

xlength=total;
length=total+(1024<<4);

MTOFEXTENDED(0,fBase);
MTOFEXTENDED(inlet_stretch,fRate)
ratio=(float32_t)fRate/fBase;

LNG=___SMMUL(length,(0x7FFFFFF0))<<1;
rate=((uint64_t)1<<32)/LNG;
int32_t RATE=rate*ratio;
RATEPRE=rate;
int32_t prate;
MTOFEXTENDED(inlet_pitchshift-inlet_stretch,prate)
float32_t pratio=(float32_t)prate/fBase;
window=((uint64_t)inlet_window<<16)/length;

float32_t wratio=(float32_t)(1<<30)/(window>>1);
prate=(int64_t)((int64_t)RATE*pratio-RATE)*wratio;
FR=___SMMUL(prate<<2,inlet_rate<<3);
FRR=___SMMUL(RATE<<2,inlet_rate<<3);


if (play!=prevplay){
	if (!play){
		player=2;
	}
	prevplay=play;
}
xoffset=(((1024<<4))*rate);
if (inlet_start==0x07FFFFFF){
		playpos=0;
	}
	else{
		//playpos=((inlet_start<<3)/((1<<30)/(xlength)))*rate;
		playpos=((inlet_start)/((1<<27)/(xlength)))*rate;
		}
	if (inlet_end==0){
		Lpoint=((0x07FFFFFF)/((1<<27)/(xlength)))*rate;
	}
	else{
		Lpoint=((inlet_end)/((1<<27)/(xlength)))*rate;
		}
if (ztrig){
	
	if (fading){
		Lp=0;
		Pp=0;
		Xo=0-xoffset;
		
	}
	else {
		Lp=Lpoint;
		Pp=playpos;
		Xo=0;
	}
	ztrig=0;
	play=1;
	if ((player==1) || (player==2)){
		player=0;
		phs[0]=0;
		if (inlet_rate>=0){	
			phase[0]=0+Pp;
			}
		else if (inlet_rate<0){
			phase[0]=Xo+Lp;
			}
		prevv[0]=phase[0];
	}
	else if (player==0){
		player=1;
		phs[1]=0;
		if (inlet_rate>=0){	
			phase[1]=0+Pp;
			}
		else if (inlet_rate<0){
			phase[1]=Xo+Lp;
			}
		prevv[1]=phase[1];
	
	}
	
	fading=0;
	
}
if (inlet_rate>0){
	dir=1;
	Xphase=(window/___SMMUL(RATE<<2,inlet_rate<<3))>>4;
}
else if (inlet_rate<0) {
	dir=0;
	Xphase=(window/___SMMUL(RATE<<2,-inlet_rate<<3))>>4;
}

if (Xphase<48){
	Xphase=48;
}
if(Xphase>=4096){
	Xphase=4096;
}

for (x = 0;x<2;x++){
	if (player==x){
		FRQ[x]=FR;
		FRQQ[x]=FRR;
		if (dir){
			if ((phase[x]>=(0-xoffset))  && (prevv[x]<(0-xoffset)))  {
					if (((inlet_end==0x07FFFFFF)||(inlet_end==0))){
						if (oneshot){
						play=0;
						}
						else {
						ztrig=1;
						//fading=1;	
						}
					}
					else if (play){
						ztrig=1;
						fading=1;
					}
					}
			if ((phase[x]>=(Lpoint))  && (prevv[x]<(Lpoint)))  {
					if (oneshot){
						play=0;
					}
					else if (play){
						ztrig=1;
						fading=0;
					}
					}
			}

		else if (!dir){
			if   ((!(phase[x]>(0)))&&((prevv[x])>(0)))  {
					if (((inlet_start==0)||(inlet_start==0x07FFFFFF))){
						if (oneshot){
						play=0;
						}
						else {
						ztrig=1;
						//fading=1;	
						}
					}
					else if (play){
						ztrig=1;
						fading=1;
					}
				}
			if   ((!(phase[x]>(playpos)))&&((prevv[x])>(playpos)))  {
					if (oneshot){
						play=0;
					}
					else if (play){
						ztrig=1;
						fading=0;
					}
				}
		}
	
	}
	//if (fadein || attr_xfade){
	if (attr_xfade){
		step[x]=0x07FFFFFF/param_fadein;
		}
	else {
		step[x]=0x07FFFFFF/(Xphase-1);
		}
}


prevv[0]=phase[0];
prevv[1]=phase[1];]]></code.krate>
         <code.srate><![CDATA[x=0;
for (x = 0;x<2;x++){
	phase[x]+=FRQQ[x];
	phs[x]+=FRQ[x];
	P1[x]=((uint32_t)phs[x])>>1;
	P2[x]=((uint32_t)phs[x]+(1<<31))>>1;
	
	tmp1[x]=READ(phase[x]+(___SMMUL(P1[x],window)<<2),rate,LNG,x);
	tmp2[x]=READ(phase[x]+(___SMMUL(P2[x],window)<<2),rate,LNG,x);
	
	
	SINE2TINTERP(phs[x]-(1<<30),mp[x])
	mp[x]=(mp[x]>>2)+(1<<29);
	
	out[x]=tmp2[x]+(___SMMUL(tmp1[x]-tmp2[x],mp[x])<<2);
	
	out[x] =  ___SMMUL(out[x],i[x])<<5;
	if (player==x){
		i[x] += step[x];
		if (i[x]>0x07FFFFFF){
			i[x]=0x07FFFFFF;
			fadein=0;
		}
		}
	else {
		i[x] -= step[x];
		if (i[x]<0){
			i[x]=0;
		}
		}
	
}
outlet_out=out[0]+out[1];]]></code.srate>
      </object>
   </patchobj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_2" x="910" y="546">
      <params/>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_3" x="980" y="546">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_1" x="1106" y="546">
      <params/>
      <attribs/>
   </obj>
   <obj type="audio/out left" uuid="b11a3c09b2fdd575ea8212f2ce7743d5269253b1" name="out_2" x="1204" y="546">
      <params/>
      <attribs/>
   </obj>
   <obj type="string/c" uuid="4aa90a90c435a742ddfa152d232883fc5b2f1b3" name="c_1" x="1008" y="644">
      <params/>
      <attribs>
         <table attributeName="str" table="/operationivy"/>
      </attribs>
   </obj>
   <obj type="table/save" uuid="3e4108b607d56d9e1cd10abb898b58eea11e53b2" name="save_1" x="1176" y="644">
      <params/>
      <attribs>
         <objref attributeName="table" obj="data"/>
      </attribs>
   </obj>
   <obj type="table/load" uuid="600cc22c6734d23a82620da1a14e78782a7e168e" name="load_1" x="1316" y="644">
      <params/>
      <attribs>
         <objref attributeName="table" obj="data"/>
      </attribs>
   </obj>
   <nets>
      <net>
         <source obj="c_1" outlet="out"/>
         <dest obj="load_1" inlet="filename"/>
         <dest obj="save_1" inlet="filename"/>
      </net>
      <net>
         <source obj="button_3" outlet="o"/>
         <dest obj="load_1" inlet="trig"/>
      </net>
      <net>
         <source obj="button_2" outlet="o"/>
         <dest obj="save_1" inlet="trig"/>
         <dest obj="bool_2" inlet="in"/>
      </net>
      <net>
         <source obj="toggle_5____tmp" outlet="o"/>
         <dest obj="3_1" inlet="overdub"/>
      </net>
      <net>
         <source obj="dial_5" outlet="out"/>
         <dest obj="3_1" inlet="feedback"/>
      </net>
      <net>
         <source obj="button_6" outlet="o"/>
         <dest obj="3_1" inlet="replace"/>
      </net>
      <net>
         <source obj="+_1" outlet="out"/>
         <dest obj="out_2" inlet="wave"/>
      </net>
      <net>
         <source obj="dial_8" outlet="out"/>
         <dest obj="1_2" inlet="window"/>
      </net>
      <net>
         <source obj="in_1" outlet="wave"/>
         <dest obj="vca_3" inlet="a"/>
         <dest obj="3_1" inlet="in"/>
      </net>
      <net>
         <source obj="vca_2" outlet="o"/>
         <dest obj="+_1" inlet="in2"/>
      </net>
      <net>
         <source obj="vca_3" outlet="o"/>
         <dest obj="+_1" inlet="in1"/>
      </net>
      <net>
         <source obj="dial_10" outlet="out"/>
         <dest obj="crossfade_1" inlet="drywet"/>
      </net>
      <net>
         <source obj="crossfade_1" outlet="dry"/>
         <dest obj="vca_3" inlet="v"/>
      </net>
      <net>
         <source obj="crossfade_1" outlet="wet"/>
         <dest obj="vca_2" inlet="v"/>
      </net>
      <net>
         <source obj="dial_11" outlet="out"/>
         <dest obj="crossfade_1" inlet="volume"/>
      </net>
      <net>
         <source obj="dial_3" outlet="out"/>
         <dest obj="1_2" inlet="rate"/>
      </net>
      <net>
         <source obj="toggle_4" outlet="o"/>
         <dest obj="3_1" inlet="rec"/>
      </net>
      <net>
         <source obj="toggle_3" outlet="o"/>
         <dest obj="factsyncer" inlet="repitch"/>
      </net>
      <net>
         <source obj="dial_1" outlet="out"/>
         <dest obj="factsyncer" inlet="pitch"/>
      </net>
      <net>
         <source obj="3_1" outlet="stop"/>
         <dest obj="1_2" inlet="stop"/>
      </net>
      <net>
         <source obj="dial_2" outlet="out"/>
         <dest obj="factsyncer" inlet="stretch"/>
      </net>
      <net>
         <source obj="toggle_1" outlet="o"/>
         <dest obj="1_2" inlet="oneshot"/>
      </net>
      <net>
         <source obj="1_2" outlet="out"/>
         <dest obj="vca_2" inlet="a"/>
      </net>
      <net>
         <source obj="toggle_2" outlet="o"/>
         <dest obj="factsyncer" inlet="q"/>
      </net>
      <net>
         <source obj="button_4" outlet="o"/>
         <dest obj="3_1" inlet="stop"/>
      </net>
      <net>
         <source obj="button_1" outlet="o"/>
         <dest obj="3_1" inlet="play"/>
      </net>
      <net>
         <source obj="3_1" outlet="start"/>
         <dest obj="or_1" inlet="i1"/>
      </net>
      <net>
         <source obj="button_5" outlet="o"/>
         <dest obj="or_1" inlet="i2"/>
         <dest obj="3_1" inlet="restart"/>
      </net>
      <net>
         <source obj="or_1" outlet="o"/>
         <dest obj="1_2" inlet="trigger"/>
      </net>
      <net>
         <source obj="factsyncer" outlet="stretch"/>
         <dest obj="1_2" inlet="stretch"/>
      </net>
      <net>
         <source obj="factsyncer" outlet="pitch"/>
         <dest obj="1_2" inlet="pitchshift"/>
      </net>
      <net>
         <source obj="i_1" outlet="out"/>
         <dest obj="factsyncer" inlet="base"/>
      </net>
      <net>
         <source obj="i_2" outlet="out"/>
         <dest obj="factsyncer" inlet="new"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>-8</x>
      <y>-8</y>
      <width>1616</width>
      <height>876</height>
   </windowPos>
</patch-1.0>