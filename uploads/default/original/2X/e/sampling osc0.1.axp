<patch-1.0 appVersion="1.0.12">
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="generate sequence" x="364" y="0">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="462" y="14" text="generates a new sequence for the length parameters"/>
   <comment type="patch/comment" x="462" y="28" text="functions as an harmonic overtone sequencer"/>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="random settings" x="364" y="56">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="462" y="70" text="randomises internal offsets of parameters. Amount of randomness can be controlled with the &quot;random&quot; parameter"/>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="generate wavetable" x="364" y="112">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="462" y="126" text="generates a new wavetable from stacked randomly modulated sines"/>
   <comment type="patch/comment" x="462" y="140" text="use &quot;stack&quot; to control the density of stacked sines"/>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="record wavetable" x="378" y="168">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="462" y="182" text="directly records the incoming audio to the wavetable. when clicked, fills entire table from start to end."/>
   <comment type="patch/comment" x="462" y="196" text="when recording the audio from the oscillator (feedback loop) and recording results in too many high partials, try lowerering pitch and/or a smaller length while recording."/>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="record momentary" x="364" y="224">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="462" y="238" text="momentarily records the incoming audio to the wavetable to a random position. when released or reaching the end of the table, stops recording"/>
   <comment type="patch/comment" x="462" y="252" text="very nice to add some spikey waves here and there in a fresh wavetable"/>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="pulsed" x="392" y="280">
      <params>
         <bool32.tgl name="b" value="1"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="462" y="294" text="set to pulse to also randomly set the pulse-length of momentary record to create really short pulses in the recording"/>
   <patchobj type="patch/object" uuid="419f8e65-8adc-4b8d-bd27-8b7e9c2bb086" name="uniform_4" x="392" y="336">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="419f8e65-8adc-4b8d-bd27-8b7e9c2bb086">
         <sDescription>uniform distributed (white) noise, triggered generation. Range -64..64</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <inlets>
            <bool32.rising name="trig" description="trigger"/>
         </inlets>
         <outlets>
            <frac32.bipolar name="rand" description="random number"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t val;
int ntrig;
]]></code.declaration>
         <code.init><![CDATA[val = (int32_t)(GenerateRandomNumber())>>4;
ntrig = 0;
]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig>0) && !ntrig) { val = (int32_t)(GenerateRandomNumber()>>7); ntrig=1;}
   else if (!(inlet_trig>0)) ntrig=0;
   outlet_rand= val;]]></code.krate>
      </object>
   </patchobj>
   <obj type="timer/pulselengthm" uuid="62560cedc7cebe84778bc1bb4fc6c2122074a4ab" name="pulselengthm_1" x="462" y="336">
      <params>
         <frac32.s.map name="delay" value="-64.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="mux/mux 2" uuid="e1c92bc92f4d191bfadf0efeae4503b458a4e440" name="mux_2" x="574" y="336">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/or 2" uuid="3805d3c84d30032a44fbdbe42d9a2988a1790a3e" name="or_1" x="658" y="364">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/inv" uuid="2bd44b865d3b63ff9b80862242bf5be779e3ad5" name="inv_1" x="728" y="364">
      <params/>
      <attribs/>
   </obj>
   <obj type="timer/pulselength" uuid="ca68725237d8ba8407773340801660a9fd9b0dba" name="pulselength_1" x="784" y="364">
      <params>
         <frac32.s.map name="delay" value="-37.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="419f8e65-8adc-4b8d-bd27-8b7e9c2bb086" name="uniform_3" x="882" y="364">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="419f8e65-8adc-4b8d-bd27-8b7e9c2bb086">
         <sDescription>uniform distributed (white) noise, triggered generation. Range -64..64</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <inlets>
            <bool32.rising name="trig" description="trigger"/>
         </inlets>
         <outlets>
            <frac32.bipolar name="rand" description="random number"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t val;
int ntrig;
]]></code.declaration>
         <code.init><![CDATA[val = (int32_t)(GenerateRandomNumber())>>4;
ntrig = 0;
]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig>0) && !ntrig) { val = (int32_t)(GenerateRandomNumber()>>5); ntrig=1;}
   else if (!(inlet_trig>0)) ntrig=0;
   outlet_rand= val;]]></code.krate>
      </object>
   </patchobj>
   <obj type="mux/mux 2" uuid="3bcb8a666381ed18b8962eda50b1aa679136f618" name="mux_1" x="952" y="364">
      <params/>
      <attribs/>
   </obj>
   <obj type="lfo/square" uuid="de6909eb64db13af5b43f979a4c130024b3a4793" name="square_1" x="56" y="434">
      <params>
         <frac32.s.map name="pitch" value="-20.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="audio/in stereo" uuid="99848ad6d90a8e615e83b2e619cfc806f28e7281" name="in_1" x="378" y="434">
      <params/>
      <attribs/>
   </obj>
   <obj type="sss/dyn/compander" uuid="4a709004-666d-401a-b174-0201aee45a0b" name="compander_1" x="462" y="434">
      <params>
         <frac32.u.map name="gainIn" value="6.0"/>
         <frac32.u.map name="tresh" value="34.0"/>
         <frac32.u.map name="ratio" value="64.0"/>
         <frac32.u.map name="expand" value="64.0"/>
         <frac32.u.map name="slope" value="0.0"/>
         <frac32.s.map name="release" value="-34.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="ddde5e2f-4100-4527-83c2-029805383ac1" name="record_1" x="616" y="434">
      <params/>
      <attribs>
         <objref attributeName="table" obj="sampling oscillator"/>
      </attribs>
      <object id="patch/object" uuid="ddde5e2f-4100-4527-83c2-029805383ac1">
         <sDescription>record audio into table, starting from position</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>table.axh</helpPatch>
         <inlets>
            <frac32buffer name="wave" description="wave"/>
            <frac32.positive name="pos" description="start position in table"/>
            <bool32.rising name="start" description="start playback"/>
            <bool32.rising name="stop" description="stop playback"/>
         </inlets>
         <outlets>
            <bool32 name="rec"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <objref name="table"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int pstart;
   int pstop;
   int pos;]]></code.declaration>
         <code.init><![CDATA[pos = 0;
pstart = 0;
pstop = 1;]]></code.init>
         <code.krate><![CDATA[if ((inlet_start>0) && !pstart) {
      pstart = 1;
      pstop = 0;
      uint32_t asat = __USAT(inlet_pos,27);
      pos = asat>>(27-attr_table.LENGTHPOW);
  } else if (!(inlet_start>0)) {
      pstart = 0;
  }
  if ((inlet_stop>0) && !pstop) {
      pstop = 1;
      pstart = 0;
  }
  if(pos<attr_table.LENGTHMASK)
  {
  	outlet_rec=1;
  }
  else
  {
  	outlet_rec=0;
  }]]></code.krate>
         <code.srate><![CDATA[if (!pstop)  {
       if (pos< attr_table.LENGTH)
              attr_table.array[pos++] = __SSAT(inlet_wave,28);
   }]]></code.srate>
      </object>
   </patchobj>
   <obj type="logic/counter" uuid="7a141ba82230e54e5f5cd12da5dbe5a74ba854a5" name="counter_1" x="224" y="448">
      <params>
         <int32 name="maximum" value="64"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="742" y="518" text="records audio to the wavetable of the oscillator"/>
   <patchobj type="patch/object" uuid="0c207e28-cc92-42d3-9acc-a441f9edc44e" name="counter_22" x="168" y="560">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="0c207e28-cc92-42d3-9acc-a441f9edc44e">
         <sDescription>cyclic up counter</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>counter.axh</helpPatch>
         <inlets>
            <bool32.rising name="trig" description="trigger"/>
            <bool32.rising name="r" description="reset"/>
            <bool32 name="gen"/>
         </inlets>
         <outlets>
            <int32 name="o" description="output"/>
            <bool32.pulse name="c" description="carry pulse"/>
            <bool32 name="0"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
   int rtrig;
   int count;
   int cnt,CNT,gen;
   int maximum,recount,direction,swap,ofs,chance,range;]]></code.declaration>
         <code.init><![CDATA[count=-1;
   ntrig = 0;
   rtrig = 0;
   cnt=0;

   maximum=(GenerateRandomNumber()%29)+4;
   recount=(GenerateRandomNumber()%maximum)+1;
   direction=(GenerateRandomNumber()&1);
   swap=(GenerateRandomNumber()&1);
   ofs=(GenerateRandomNumber()%maximum);
   chance=(GenerateRandomNumber()>>1);
   range=(GenerateRandomNumber()&3)+1;]]></code.init>
         <code.krate><![CDATA[outlet_c=0;

if(inlet_gen&&!gen)
{
	gen=1;
	maximum=(GenerateRandomNumber()%61)+4;
   recount=(GenerateRandomNumber()%maximum)+1;
   direction=(GenerateRandomNumber()&1);
   swap=(GenerateRandomNumber()&1);
   ofs=(GenerateRandomNumber()%maximum);
   chance=(GenerateRandomNumber()>>1);
   range=(GenerateRandomNumber()&31)+1;
}
else if(!inlet_gen){gen=0;}
if ((inlet_trig>0) && !ntrig) {
   count += 1; if (count>=maximum) {count = 0; outlet_c = 1;}
   //ntrig=1;
}
else if (!(inlet_trig>0)) ntrig=0;
if ((inlet_r>0) && !rtrig) {count=0; rtrig = 1;outlet_c=1;}
else if (!(inlet_r>0)) rtrig=0;
outlet_0=0;
if(inlet_trig&&!ntrig)
{
ntrig=1;
cnt=count%recount;
int max=maximum/recount;
cnt+=count>max?1:0;
if(direction)
{
	cnt=(recount-1-cnt);
}
if(swap)
{
	cnt=cnt>0?recount-cnt:cnt;
}
if(ofs>0)
{
	cnt-=1;
	if(cnt>=0)
	{cnt=(cnt+ofs)%(recount-1);}
	cnt+=1;
}
if(((GenerateRandomNumber()>>1)<chance)||(cnt==0))
{
	CNT=cnt;
}
outlet_0=cnt==0;
}
outlet_o= (CNT%range)+1;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="0c207e28-cc92-42d3-9acc-a441f9edc44e" name="counter_23" x="252" y="560">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="0c207e28-cc92-42d3-9acc-a441f9edc44e">
         <sDescription>cyclic up counter</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>counter.axh</helpPatch>
         <inlets>
            <bool32.rising name="trig" description="trigger"/>
            <bool32.rising name="r" description="reset"/>
            <bool32 name="gen"/>
         </inlets>
         <outlets>
            <int32 name="o" description="output"/>
            <bool32.pulse name="c" description="carry pulse"/>
            <bool32 name="0"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
   int rtrig;
   int count;
   int cnt,CNT,gen;
   int maximum,recount,direction,swap,ofs,chance,range;]]></code.declaration>
         <code.init><![CDATA[count=-1;
   ntrig = 0;
   rtrig = 0;
   cnt=0;

   maximum=(GenerateRandomNumber()%29)+4;
   recount=(GenerateRandomNumber()%maximum)+1;
   direction=(GenerateRandomNumber()&1);
   swap=(GenerateRandomNumber()&1);
   ofs=(GenerateRandomNumber()%maximum);
   chance=(GenerateRandomNumber()>>1);
   range=(GenerateRandomNumber()&3)+1;]]></code.init>
         <code.krate><![CDATA[outlet_c=0;

if(inlet_gen&&!gen)
{
	gen=1;
	maximum=(GenerateRandomNumber()%61)+4;
   recount=(GenerateRandomNumber()%maximum)+1;
   direction=(GenerateRandomNumber()&1);
   swap=(GenerateRandomNumber()&1);
   ofs=(GenerateRandomNumber()%maximum);
   chance=(GenerateRandomNumber()>>1);
   range=(GenerateRandomNumber()&31)+1;
}
else if(!inlet_gen){gen=0;}
if ((inlet_trig>0) && !ntrig) {
   count += 1; if (count>=maximum) {count = 0; outlet_c = 1;}
   //ntrig=1;
}
else if (!(inlet_trig>0)) ntrig=0;
if ((inlet_r>0) && !rtrig) {count=0; rtrig = 1;outlet_c=1;}
else if (!(inlet_r>0)) rtrig=0;
outlet_0=0;
if(inlet_trig&&!ntrig)
{
ntrig=1;
cnt=count%recount;
int max=maximum/recount;
cnt+=count>max?1:0;
if(direction)
{
	cnt=(recount-1-cnt);
}
if(swap)
{
	cnt=cnt>0?recount-cnt:cnt;
}
if(ofs>0)
{
	cnt-=1;
	if(cnt>=0)
	{cnt=(cnt+ofs)%(recount-1);}
	cnt+=1;
}
if(((GenerateRandomNumber()>>1)<chance)||(cnt==0))
{
	CNT=cnt;
}
outlet_0=cnt==0;
}
outlet_o= (CNT%range)+1;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="1850deee-880f-47f4-99a4-8907bd6acdeb" name="saw_2" x="658" y="602">
      <params>
         <frac32.s.map name="pitch" value="-35.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="1850deee-880f-47f4-99a4-8907bd6acdeb">
         <sDescription>saw wave LFO, rising slope, pitch input, phase reset</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>lfo.axh</helpPatch>
         <inlets>
            <frac32.bipolar name="pitch" description="pitch"/>
            <bool32.rising name="reset" description="reset phase"/>
         </inlets>
         <outlets>
            <frac32buffer name="wave"/>
            <frac32 name="freq"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.lfopitch name="pitch" noLabel="true"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[uint32_t Phase;

uint32_t r;]]></code.declaration>
         <code.init><![CDATA[Phase = 0;

   r = 1;]]></code.init>
         <code.krate><![CDATA[if (inlet_reset && r) {
         Phase = 0;
         r = 0;
      } else {
         if (!inlet_reset) r = 1;}
         int32_t freq;
         MTOFEXTENDED(param_pitch + inlet_pitch,freq);



   outlet_freq=freq>>14;]]></code.krate>
         <code.srate><![CDATA[Phase -= freq>>10;
      outlet_wave= (Phase>>5);]]></code.srate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="0c207e28-cc92-42d3-9acc-a441f9edc44e" name="counter_24" x="168" y="658">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="0c207e28-cc92-42d3-9acc-a441f9edc44e">
         <sDescription>cyclic up counter</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>counter.axh</helpPatch>
         <inlets>
            <bool32.rising name="trig" description="trigger"/>
            <bool32.rising name="r" description="reset"/>
            <bool32 name="gen"/>
         </inlets>
         <outlets>
            <int32 name="o" description="output"/>
            <bool32.pulse name="c" description="carry pulse"/>
            <bool32 name="0"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
   int rtrig;
   int count;
   int cnt,CNT,gen;
   int maximum,recount,direction,swap,ofs,chance,range;]]></code.declaration>
         <code.init><![CDATA[count=-1;
   ntrig = 0;
   rtrig = 0;
   cnt=0;

   maximum=(GenerateRandomNumber()%29)+4;
   recount=(GenerateRandomNumber()%maximum)+1;
   direction=(GenerateRandomNumber()&1);
   swap=(GenerateRandomNumber()&1);
   ofs=(GenerateRandomNumber()%maximum);
   chance=(GenerateRandomNumber()>>1);
   range=(GenerateRandomNumber()&3)+1;]]></code.init>
         <code.krate><![CDATA[outlet_c=0;

if(inlet_gen&&!gen)
{
	gen=1;
	maximum=(GenerateRandomNumber()%61)+4;
   recount=(GenerateRandomNumber()%maximum)+1;
   direction=(GenerateRandomNumber()&1);
   swap=(GenerateRandomNumber()&1);
   ofs=(GenerateRandomNumber()%maximum);
   chance=(GenerateRandomNumber()>>1);
   range=(GenerateRandomNumber()&63)+1;
}
else if(!inlet_gen){gen=0;}
if ((inlet_trig>0) && !ntrig) {
   count += 1; if (count>=maximum) {count = 0; outlet_c = 1;}
   //ntrig=1;
}
else if (!(inlet_trig>0)) ntrig=0;
if ((inlet_r>0) && !rtrig) {count=0; rtrig = 1;outlet_c=1;}
else if (!(inlet_r>0)) rtrig=0;
outlet_0=0;
if(inlet_trig&&!ntrig)
{
ntrig=1;
cnt=count%recount;
int max=maximum/recount;
cnt+=count>max?1:0;
if(direction)
{
	cnt=(recount-1-cnt);
}
if(swap)
{
	cnt=cnt>0?recount-cnt:cnt;
}
if(ofs>0)
{
	cnt-=1;
	if(cnt>=0)
	{cnt=(cnt+ofs)%(recount-1);}
	cnt+=1;
}
if(((GenerateRandomNumber()>>1)<chance)||(cnt==0))
{
	CNT=cnt;
}
outlet_0=cnt==0;
}
outlet_o= (CNT%range)+1;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="0c207e28-cc92-42d3-9acc-a441f9edc44e" name="counter_25" x="252" y="658">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="0c207e28-cc92-42d3-9acc-a441f9edc44e">
         <sDescription>cyclic up counter</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>counter.axh</helpPatch>
         <inlets>
            <bool32.rising name="trig" description="trigger"/>
            <bool32.rising name="r" description="reset"/>
            <bool32 name="gen"/>
         </inlets>
         <outlets>
            <int32 name="o" description="output"/>
            <bool32.pulse name="c" description="carry pulse"/>
            <bool32 name="0"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
   int rtrig;
   int count;
   int cnt,CNT,gen;
   int maximum,recount,direction,swap,ofs,chance,range;]]></code.declaration>
         <code.init><![CDATA[count=-1;
   ntrig = 0;
   rtrig = 0;
   cnt=0;

   maximum=(GenerateRandomNumber()%29)+4;
   recount=(GenerateRandomNumber()%maximum)+1;
   direction=(GenerateRandomNumber()&1);
   swap=(GenerateRandomNumber()&1);
   ofs=(GenerateRandomNumber()%maximum);
   chance=(GenerateRandomNumber()>>1);
   range=(GenerateRandomNumber()&3)+1;]]></code.init>
         <code.krate><![CDATA[outlet_c=0;

if(inlet_gen&&!gen)
{
	gen=1;
	maximum=(GenerateRandomNumber()%61)+4;
   recount=(GenerateRandomNumber()%maximum)+1;
   direction=(GenerateRandomNumber()&1);
   swap=(GenerateRandomNumber()&1);
   ofs=(GenerateRandomNumber()%maximum);
   chance=(GenerateRandomNumber()>>1);
   range=(GenerateRandomNumber()&63)+1;
}
else if(!inlet_gen){gen=0;}
if ((inlet_trig>0) && !ntrig) {
   count += 1; if (count>=maximum) {count = 0; outlet_c = 1;}
   //ntrig=1;
}
else if (!(inlet_trig>0)) ntrig=0;
if ((inlet_r>0) && !rtrig) {count=0; rtrig = 1;outlet_c=1;}
else if (!(inlet_r>0)) rtrig=0;
outlet_0=0;
if(inlet_trig&&!ntrig)
{
ntrig=1;
cnt=count%recount;
int max=maximum/recount;
cnt+=count>max?1:0;
if(direction)
{
	cnt=(recount-1-cnt);
}
if(swap)
{
	cnt=cnt>0?recount-cnt:cnt;
}
if(ofs>0)
{
	cnt-=1;
	if(cnt>=0)
	{cnt=(cnt+ofs)%(recount-1);}
	cnt+=1;
}
if(((GenerateRandomNumber()>>1)<chance)||(cnt==0))
{
	CNT=cnt;
}
outlet_0=cnt==0;
}
outlet_o= (CNT%range)+1;]]></code.krate>
      </object>
   </patchobj>
   <obj type="conv/nointerp" uuid="5e7389d61f8cd8945790bb71f1670b3a0904c15b" name="nointerp_1" x="336" y="658">
      <params/>
      <attribs/>
   </obj>
   <obj type="conv/nointerp" uuid="5e7389d61f8cd8945790bb71f1670b3a0904c15b" name="nointerp_2" x="336" y="700">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="f3fc9c6c-265c-409a-b774-c21973ee1183" name="sampling oscillator" x="504" y="728">
      <params>
         <frac32.u.map name="lengthA" value="0.0"/>
         <frac32.u.map name="lengthB" value="0.0"/>
         <frac32.u.map name="posA" value="12.5"/>
         <frac32.u.map name="posB" value="38.0"/>
         <frac32.s.map name="pitch" value="-19.0"/>
         <frac32.u.map name="chance" value="64.0"/>
         <frac32.u.map name="random" value="1.5"/>
         <int32 name="stack" value="8"/>
         <int32 name="train" value="2"/>
         <frac32.u.map name="jump" value="59.5"/>
      </params>
      <attribs>
         <combo attributeName="size" selection="16384"/>
      </attribs>
      <object id="patch/object" uuid="f3fc9c6c-265c-409a-b774-c21973ee1183">
         <sDescription>allocate 32bit table in SDRAM memory</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>table.axh</helpPatch>
         <inlets>
            <bool32 name="rnd"/>
            <frac32 name="pitch"/>
            <bool32 name="gen"/>
            <frac32buffer name="posA"/>
            <frac32buffer name="posB"/>
            <frac32 name="lengthA"/>
            <frac32 name="lengthB"/>
            <frac32 name="freq"/>
         </inlets>
         <outlets>
            <frac32buffer name="out"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="lengthA"/>
            <frac32.u.map name="lengthB"/>
            <frac32.u.map name="posA"/>
            <frac32.u.map name="posB"/>
            <frac32.s.map.pitch name="pitch"/>
            <frac32.u.map.gain name="chance"/>
            <frac32.u.map.gain name="random"/>
            <int32 name="stack">
               <MinValue i="1"/>
               <MaxValue i="16"/>
            </int32>
            <int32 name="train">
               <MinValue i="1"/>
               <MaxValue i="8"/>
            </int32>
            <frac32.u.map.gain name="jump"/>
         </params>
         <attribs>
            <combo name="size">
               <MenuEntries>
                  <string>2</string>
                  <string>4</string>
                  <string>8</string>
                  <string>16</string>
                  <string>32</string>
                  <string>64</string>
                  <string>128</string>
                  <string>256</string>
                  <string>512</string>
                  <string>1024</string>
                  <string>2048</string>
                  <string>4096</string>
                  <string>8192</string>
                  <string>16384</string>
                  <string>32768</string>
                  <string>65536</string>
                  <string>131072</string>
                  <string>262144</string>
                  <string>524288</string>
                  <string>1048576</string>
                  <string>2097152</string>
               </MenuEntries>
               <CEntries>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>4</string>
                  <string>5</string>
                  <string>6</string>
                  <string>7</string>
                  <string>8</string>
                  <string>9</string>
                  <string>10</string>
                  <string>11</string>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
                  <string>16</string>
                  <string>17</string>
                  <string>18</string>
                  <string>19</string>
                  <string>20</string>
                  <string>21</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[static const uint32_t LENGTHPOW = attr_size;
static const uint32_t LENGTH = 1<<attr_size;
static const uint32_t LENGTHMASK = (1<<attr_size)-1;
static const uint32_t BITS = 32;
static const uint32_t GAIN = 0;
int32_t *array;
uint32_t phs;
int rnd;
int lengthA,lngA,lngB;
int lengthB;
int psA;
int psB,oct;
int gen;]]></code.declaration>
         <code.init><![CDATA[static int32_t _array[attr_poly][LENGTH] __attribute__ ((section (".sdram")));
array = &_array[parent->polyIndex][0];
{ 
  int i,j;

int32_t phase;
int32_t freq,pitch,gain,fm,damp;

for(i=0;i<LENGTH;i++)
{
	array[i]=0;
}

for(i=0;i<8;i++)
{
	pitch=(int32_t)(GenerateRandomNumber())>>4;
	gain=(int32_t)(GenerateRandomNumber()>>4);
	fm=(int32_t)(GenerateRandomNumber())>>4;
	damp=(int32_t)(GenerateRandomNumber())>>4;
	for(j=0;j<LENGTH;j++)
	{
		damp+=((int32_t)(GenerateRandomNumber())>>4)+(1<<24)-damp>>3;
		int32_t dmp;
		MTOF(damp,dmp)
		pitch+=___SMMUL(((int32_t)(GenerateRandomNumber())>>4)-pitch<<1,dmp);
		
		gain+=___SMMUL(((int32_t)(GenerateRandomNumber()>>4))-gain<<1,dmp);
		fm+=___SMMUL(((int32_t)(GenerateRandomNumber())>>4)-fm<<1,dmp);
		MTOFEXTENDED(pitch,freq)
		phase+=freq+(___SMMUL(array[j],___SMMUL(fm,freq)<<5)<<9);
		int32_t s;
		SINE2TINTERP(phase,s)
		array[j]+=___SMMUL(gain,s)>>3;
	}
}


lengthA=10<<21;
lengthB=10<<21;
psA=32<<21;
psB=19<<21;
oct=0;
}]]></code.init>
         <code.krate><![CDATA[if(inlet_rnd&&!rnd)
{
	rnd=1;
	if((GenerateRandomNumber()>>1)<param_chance)
	{
		lengthA=(GenerateRandomNumber()>>5);
	}
	if((GenerateRandomNumber()>>1)<param_chance)
	{
		lengthB=(GenerateRandomNumber()>>5);
	}
	if((GenerateRandomNumber()>>1)<param_chance)
	{
		psA=(GenerateRandomNumber()>>5);
	}
	if((GenerateRandomNumber()>>1)<param_chance)
	{
		psB=(GenerateRandomNumber()>>5);
	}
	oct=(GenerateRandomNumber()%4);
}
else if(!inlet_rnd){rnd=0;}

if(inlet_gen&&!gen)
{
	codec_clearbuffer();
	int32_t phase;
int32_t freq,pitch,gain,fm,damp;
	gen=1;
	int i,j;
	for(i=0;i<LENGTH;i++)
{
	array[i]=0;
}

for(i=0;i<param_stack;i++)
{
	pitch=(int32_t)(GenerateRandomNumber())>>4;
	gain=(int32_t)(GenerateRandomNumber()>>4);
	fm=(int32_t)(GenerateRandomNumber())>>4;
	damp=(int32_t)(GenerateRandomNumber())>>4;
	for(j=0;j<LENGTH;j++)
	{
		damp+=((int32_t)(GenerateRandomNumber())>>4)+(1<<24)-damp>>3;
		int32_t dmp;
		MTOF(damp,dmp)dmp=dmp>>3;
		pitch+=___SMMUL(((int32_t)(GenerateRandomNumber())>>4)-pitch<<1,dmp);
		
		gain+=___SMMUL(((int32_t)(GenerateRandomNumber()>>4))-gain<<1,dmp);
		fm+=___SMMUL(((int32_t)(GenerateRandomNumber())>>4)-fm<<1,dmp);
		MTOFEXTENDED(pitch,freq)
		phase+=freq+(___SMMUL(array[j],___SMMUL(fm,freq)<<5)<<9);
		int32_t s;
		SINE2TINTERP(phase,s)
		array[j]+=___SMMUL(gain,s)/param_stack;
	}
}
}
else if(!inlet_gen){gen=0;}

int32_t frq;
MTOFEXTENDED(param_pitch+inlet_pitch,frq)
frq=frq/param_train;
frq<<=oct;
frq-=inlet_freq/param_train;




int LNGA,LNGB;
LNGA=__USAT(param_lengthA+inlet_lengthA,27);
LNGB=__USAT(param_lengthB+inlet_lengthB,27);
LNGA=LNGA+___SMMUL(lengthA-LNGA<<1,param_random);
LNGB=LNGB+___SMMUL(lengthB-LNGB<<1,param_random);
lngA+=LNGA-lngA>>0;
lngB+=LNGB-lngB>>0;
LNGA=lngA>>27-LENGTHPOW;
LNGB=lngB>>27-LENGTHPOW;
LNGA=LNGA>4?LNGA:4;
LNGB=LNGB>4?LNGB:4;]]></code.krate>
         <code.srate><![CDATA[int32_t posA=param_posA;
int32_t posB=param_posB;
posA=((posA+___SMMUL(psA-posA<<1,param_random)+inlet_posA)&((1<<27)-1))>>27-LENGTHPOW;
posB=((posB+___SMMUL(psB-posB<<1,param_random)+inlet_posB)&((1<<27)-1))>>27-LENGTHPOW;

phs+=frq;

uint32_t Phs=phs*param_train;
uint32_t index=((uint32_t)((uint64_t)phs*param_train>>32)*param_jump<<1)>>32-LENGTHPOW;
uint32_t mix,a1,a2,window;
HANNING2TINTERP(Phs,window)
mix=((uint32_t)Phs*LNGA)>>1;
a1=(uint64_t)Phs*LNGA>>32;
a2=(a1+1)%LNGA;
a1+=posA+index;
a2+=posA+index;
int32_t b1,b2;
b1=array[a1&LENGTHMASK];
b2=array[a2&LENGTHMASK];
b1+=___SMMUL(b2-b1,mix)<<1;
b1=___SMMUL(b1<<1,window);


uint32_t PHS=(uint32_t)phs+(1<<31);
Phs=PHS*param_train;
index=((uint32_t)((uint64_t)PHS*param_train>>32)*param_jump<<1)>>32-LENGTHPOW;
HANNING2TINTERP(Phs,window)
mix=((uint32_t)Phs*LNGB)>>1;
a1=(uint64_t)Phs*LNGB>>32;
a2=(a1+1)%LNGB;
a1+=posB+index;
a2+=posB+index;
int32_t c1,c2;
c1=array[a1&LENGTHMASK];
c2=array[a2&LENGTHMASK];
c1+=___SMMUL(c2-c1,mix)<<1;
c1=___SMMUL(c1<<1,window);
outlet_out=b1+c1;]]></code.srate>
      </object>
   </patchobj>
   <obj type="filter/hp1" uuid="abea7276611b289bed35b80345a6bc4efd4d9a4e" name="hp1_1" x="602" y="728">
      <params>
         <frac32.s.map name="freq" value="-43.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="filter/lp1" uuid="1b1fd7085e44d2b7b80b59b8d68796b909c1b2cc" name="lp1_1" x="700" y="728">
      <params>
         <frac32.s.map name="freq" value="29.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="disp/scope 128 b trig" uuid="11747dcd1dc9afe4919f537c861fb18b80b4e4e" name="scope_1" x="910" y="728">
      <params/>
      <attribs/>
   </obj>
   <obj type="sss/audio/StOutVol" uuid="0ca9cf1e-1ce3-469c-80da-a4a885c21246" name="StOutVol_1" x="1246" y="728">
      <params>
         <frac32.u.map name="volume" value="15.0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="602" y="840" text="length of granular readout A and B"/>
   <comment type="patch/comment" x="602" y="924" text="position of granular readout A and B"/>
   <comment type="patch/comment" x="0" y="938" text="this oscillator has two granular readout positions that each loop in their own region, set by pos and length"/>
   <comment type="patch/comment" x="602" y="1008" text="chance sets the chance that individual internal random values are updated when a trigger is received at the rnd input"/>
   <comment type="patch/comment" x="602" y="1050" text="random sets the amount the random values offset the current input and parameter settings"/>
   <comment type="patch/comment" x="602" y="1078" text="amount of randomly modulated sines that get stacked into the wavetable"/>
   <comment type="patch/comment" x="602" y="1092" text="amount of positions the phase will step through, putting several different positions behind each other to create a wave-train"/>
   <comment type="patch/comment" x="602" y="1120" text="jump amount of position between each wave when wave-training"/>
   <nets>
      <net>
         <source obj="hp1_1" outlet="out"/>
         <dest obj="scope_1" inlet="in"/>
         <dest obj="StOutVol_1" inlet="left"/>
         <dest obj="StOutVol_1" inlet="right"/>
         <dest obj="lp1_1" inlet="in"/>
      </net>
      <net>
         <source obj="square_1" outlet="wave"/>
         <dest obj="counter_22" inlet="trig"/>
         <dest obj="counter_23" inlet="trig"/>
         <dest obj="counter_24" inlet="trig"/>
         <dest obj="counter_25" inlet="trig"/>
         <dest obj="counter_1" inlet="trig"/>
      </net>
      <net>
         <source obj="generate wavetable" outlet="o"/>
         <dest obj="sampling oscillator" inlet="gen"/>
      </net>
      <net>
         <source obj="compander_1" outlet="out"/>
         <dest obj="record_1" inlet="wave"/>
      </net>
      <net>
         <source obj="counter_22" outlet="o"/>
         <dest obj="sampling oscillator" inlet="lengthA"/>
      </net>
      <net>
         <source obj="counter_23" outlet="o"/>
         <dest obj="sampling oscillator" inlet="lengthB"/>
      </net>
      <net>
         <source obj="sampling oscillator" outlet="out"/>
         <dest obj="hp1_1" inlet="in"/>
      </net>
      <net>
         <source obj="generate sequence" outlet="o"/>
         <dest obj="counter_22" inlet="gen"/>
         <dest obj="counter_23" inlet="gen"/>
         <dest obj="counter_24" inlet="gen"/>
         <dest obj="counter_25" inlet="gen"/>
      </net>
      <net>
         <source obj="record wavetable" outlet="o"/>
         <dest obj="or_1" inlet="i1"/>
      </net>
      <net>
         <source obj="mux_2" outlet="o"/>
         <dest obj="or_1" inlet="i2"/>
         <dest obj="inv_1" inlet="i"/>
         <dest obj="mux_1" inlet="s"/>
         <dest obj="uniform_3" inlet="trig"/>
      </net>
      <net>
         <source obj="or_1" outlet="o"/>
         <dest obj="record_1" inlet="start"/>
      </net>
      <net>
         <source obj="inv_1" outlet="o"/>
         <dest obj="pulselength_1" inlet="trig"/>
      </net>
      <net>
         <source obj="pulselength_1" outlet="pulse"/>
         <dest obj="record_1" inlet="stop"/>
      </net>
      <net>
         <source obj="mux_1" outlet="o"/>
         <dest obj="record_1" inlet="pos"/>
      </net>
      <net>
         <source obj="uniform_3" outlet="rand"/>
         <dest obj="mux_1" inlet="i2"/>
      </net>
      <net>
         <source obj="record momentary" outlet="o"/>
         <dest obj="mux_2" inlet="i1"/>
         <dest obj="pulselengthm_1" inlet="trig"/>
         <dest obj="uniform_4" inlet="trig"/>
      </net>
      <net>
         <source obj="pulselengthm_1" outlet="pulse"/>
         <dest obj="mux_2" inlet="i2"/>
      </net>
      <net>
         <source obj="uniform_4" outlet="rand"/>
         <dest obj="pulselengthm_1" inlet="delay"/>
      </net>
      <net>
         <source obj="pulsed" outlet="o"/>
         <dest obj="mux_2" inlet="s"/>
      </net>
      <net>
         <source obj="counter_24" outlet="o"/>
         <dest obj="nointerp_1" inlet="i"/>
      </net>
      <net>
         <source obj="counter_25" outlet="o"/>
         <dest obj="nointerp_2" inlet="i"/>
      </net>
      <net>
         <source obj="nointerp_1" outlet="o"/>
         <dest obj="sampling oscillator" inlet="posA"/>
      </net>
      <net>
         <source obj="counter_1" outlet="c"/>
         <dest obj="counter_23" inlet="r"/>
         <dest obj="counter_22" inlet="r"/>
         <dest obj="counter_24" inlet="r"/>
         <dest obj="counter_25" inlet="r"/>
         <dest obj="saw_2" inlet="reset"/>
      </net>
      <net>
         <source obj="random settings" outlet="o"/>
         <dest obj="sampling oscillator" inlet="rnd"/>
      </net>
      <net>
         <source obj="saw_2" outlet="wave"/>
         <dest obj="sampling oscillator" inlet="posB"/>
      </net>
      <net>
         <source obj="lp1_1" outlet="out"/>
         <dest obj="compander_1" inlet="in"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>88</x>
      <y>40</y>
      <width>1432</width>
      <height>875</height>
   </windowPos>
</patch-1.0>