<patch-1.0 appVersion="1.0.12">
   <comment type="patch/comment" x="168" y="14" text="FACT MINI"/>
   <obj type="table/alloc 32b sdram" uuid="1a4546b7b52747ea765093ac97444601c44721e8" name="data" x="798" y="14">
      <params/>
      <attribs>
         <combo attributeName="size" selection="1048576"/>
         <text attributeName="init">
            <sText><![CDATA[]]></sText>
         </text>
      </attribs>
   </obj>
   <comment type="patch/comment" x="924" y="14" text="data stored here"/>
   <comment type="patch/comment" x="168" y="28" text="factotum stripped down to just rate, pitch and stretch"/>
   <comment type="patch/comment" x="924" y="28" text="can use a 16b table, but i think 32b sounds better? "/>
   <comment type="patch/comment" x="168" y="42" text="uses own table, can&apos;t save/load, but doesn&apos;t need external table"/>
   <comment type="patch/comment" x="924" y="42" text="I&apos;m not sure why it would, I may be imagining this!"/>
   <patchobj type="patch/object" uuid="4d86e1a2-7cd5-407f-b76b-38a0bb28e78a" name="Fact_3" x="168" y="56">
      <params/>
      <attribs>
         <combo attributeName="size" selection="524288 (10.9s)"/>
      </attribs>
      <object id="patch/object" uuid="4d86e1a2-7cd5-407f-b76b-38a0bb28e78a">
         <sDescription>Difficult to name. Pitchshifter, time-stretcher, play-rate adjuster (stretch+pitchshift), sampler, delay, granulizer...

See inputs/controls for their functions (hoover above them)</sDescription>
         <author>Remco van der most</author>
         <license>BSD</license>
         <helpPatch>delay.axh</helpPatch>
         <inlets>
            <frac32buffer name="in" description="audio input"/>
            <bool32 name="rec" description="when high, records to buffer"/>
            <bool32 name="sync" description="when high, restarts at &quot;phase-position&quot;  of phase input+parameter"/>
            <frac32.bipolar name="pitchshift" description="ONLY pitchshifts the signal without stretching it. normal semitone response."/>
            <frac32.bipolar name="stretch" description="ONLY stretches the signal without pitchshifting it. normal semitone response."/>
            <frac32.bipolar name="rate"/>
         </inlets>
         <outlets>
            <frac32buffer name="out"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <combo name="size">
               <MenuEntries>
                  <string>256 (5.33ms)</string>
                  <string>512 (10.66ms)</string>
                  <string>1024 (21.33ms)</string>
                  <string>2048 (42.66ms)</string>
                  <string>4096 (85.33ms)</string>
                  <string>8192 (170ms)</string>
                  <string>16384 (341ms)</string>
                  <string>32768 (682ms)</string>
                  <string>65536 (1.36s)</string>
                  <string>131072 (2.73s)</string>
                  <string>262144 (5.46s)</string>
                  <string>524288 (10.9s)</string>
                  <string>1048576 (21.8s)</string>
                  <string>2097152 (43.7s)</string>
               </MenuEntries>
               <CEntries>
                  <string>8</string>
                  <string>9</string>
                  <string>10</string>
                  <string>11</string>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
                  <string>16</string>
                  <string>17</string>
                  <string>18</string>
                  <string>19</string>
                  <string>20</string>
                  <string>21</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
int16_t *array;
uint32_t writepos;
int32_t out;
uint32_t phase;
uint32_t phs;
bool rec;
int32_t rate;
uint32_t length;
int32_t cnt;
int32_t fade;
int32_t fd;
float32_t ratio;
int32_t fBase;
int32_t fRate;
int32_t LNG;
int dir;
int32_t READ(int T,uint32_t R,uint32_t L){
      int32_t tmp_a2;
      uint32_t tmp_di = T/R;
      uint32_t tmp_w1 = (T-tmp_di*R)*R>>2;
      int32_t tmp_a1 = array[tmp_di];
      tmp_a1 = (tmp_a1<<14)+___SMMUL(array[(tmp_di+1)]-tmp_a1<<16,tmp_w1);
      if(tmp_di<fade){
      tmp_a2 = array[tmp_di+L];
      tmp_a2 = (tmp_a2<<14)+___SMMUL(array[(tmp_di+1)+L]-tmp_a2<<16,tmp_w1);
      tmp_a1+=___SMMUL(tmp_a2-tmp_a1,__USAT(fade-tmp_di,30)<<(30-fd))<<2;
      }
     
      
      return out= tmp_a1;
}
uint32_t prv;
bool Dr;


bool snc;]]></code.declaration>
         <code.init><![CDATA[static int16_t _array[attr_poly][1<<attr_size]  __attribute__ ((section (".sdram")));
array = &_array[parent->polyIndex][0];
   int i;
   writepos = 0;
   for(i=0;i<LENGTH;i++) array[i] = 0;
   dir=1;]]></code.init>
         <code.krate><![CDATA[fade=1<<10;
fd=10;






if((inlet_sync>0)&&!snc){
phase=0;
phs=0;
snc=1;
}
else if(inlet_sync==0){snc=0;}

MTOFEXTENDED(0,fBase);
MTOFEXTENDED(inlet_stretch,fRate)
ratio=(float32_t)fRate/fBase;

if((inlet_rec>0)&&!rec){
	rec=1;
	
	writepos=0;
	cnt=0;
}
else if((inlet_rec==0)&&rec){rec=0;length=writepos;cnt=fade;}
LNG=___SMMUL(length,0x7FFFFFF0)<<1;

rate=((uint64_t)1<<32)/LNG;
int32_t RATE=rate*ratio;



int32_t prate;
MTOFEXTENDED(inlet_pitchshift-inlet_stretch,prate)
float32_t pratio=(float32_t)prate/fBase;
int32_t window=((uint64_t)0x7FFFFFF0<<12)/length;


float32_t wratio=(float32_t)(1<<30)/(window>>1);
prate=(int64_t)((int64_t)RATE*pratio-RATE)*wratio;]]></code.krate>
         <code.srate><![CDATA[int32_t FRQ=___SMMUL(prate<<2,inlet_rate<<3);
phase+=___SMMUL(RATE<<2,inlet_rate<<3);
phs+=FRQ;
//uint32_t P3=phs;

if(rec>0){
array[writepos] = __SSAT(inlet_in>>14,16);
}
if(cnt>0){
array[writepos]=__SSAT(inlet_in>>14,16);
cnt-=1;
}
writepos = (writepos + 1)&LENGTHMASK;

uint32_t P1=((uint32_t)phs)>>1;
uint32_t P2=((uint32_t)phs+(1<<31))>>1;
int32_t tmp1=READ(phase+(___SMMUL(P1,window)<<2),rate,LNG);
int32_t tmp2=READ(phase+(___SMMUL(P2,window)<<2),rate,LNG);
int32_t mp;
SINE2TINTERP(phs-(1<<30),mp)
mp=(mp>>2)+(1<<29);
int32_t out=tmp2+(___SMMUL(tmp1-tmp2,mp)<<2);

outlet_out=out;

prv=phs;]]></code.srate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="924" y="56" text="size = &quot;256 (5.33ms)&quot;, &quot;512 (10.66ms)&quot;, &quot;1024 (21.33ms)&quot;, &quot;2048 (42.66ms)&quot;, &quot;4096 (85.33ms)&quot;, &quot;8192 (170ms)&quot;, &quot;16384 (341ms)&quot;, &quot;32768 (682ms)&quot;, &quot;65536 (1.36s)&quot;, &quot;131072 (2.73s)&quot;, &quot;262144 (5.46s)&quot;, &quot;524288 (10.9s)&quot;, &quot;1048576 (21.8s)&quot;, &quot;2097152 (43.7s)&quot;"/>
   <comment type="patch/comment" x="1036" y="98" text="save/load samples like this:"/>
   <obj type="string/c" uuid="4aa90a90c435a742ddfa152d232883fc5b2f1b3" name="c_1" x="966" y="112">
      <params/>
      <attribs>
         <table attributeName="str" table="/mattisSOgreat"/>
      </attribs>
   </obj>
   <obj type="table/save" uuid="3e4108b607d56d9e1cd10abb898b58eea11e53b2" name="save_1" x="1134" y="112">
      <params/>
      <attribs>
         <objref attributeName="table" obj="data"/>
      </attribs>
   </obj>
   <obj type="table/load" uuid="600cc22c6734d23a82620da1a14e78782a7e168e" name="load_1" x="1274" y="112">
      <params/>
      <attribs>
         <objref attributeName="table" obj="data"/>
      </attribs>
   </obj>
   <comment type="patch/comment" x="168" y="252" text="FACT RECORDER"/>
   <comment type="patch/comment" x="588" y="252" text="FACT PLAYERS"/>
   <comment type="patch/comment" x="168" y="266" text="simple recorder that records samples to be played back by objects below."/>
   <comment type="patch/comment" x="588" y="266" text="play back samples recorded with the recorder,"/>
   <comment type="patch/comment" x="168" y="280" text="uses first 32 elements of the table for control data "/>
   <comment type="patch/comment" x="588" y="280" text=" each instance of the player can read the same sample but with individual settings"/>
   <comment type="patch/comment" x="168" y="294" text="(this object only stores the sample length,  and records audio)"/>
   <patchobj type="patch/object" uuid="fb64a9d1-119f-4bb4-a872-d5aaada62780" name="Fact_2" x="168" y="308">
      <params/>
      <attribs>
         <objref attributeName="table" obj="data"/>
      </attribs>
      <object id="patch/object" uuid="fb64a9d1-119f-4bb4-a872-d5aaada62780">
         <sDescription>Difficult to name. Pitchshifter, time-stretcher, play-rate adjuster (stretch+pitchshift), sampler, delay, granulizer...

See inputs/controls for their functions (hoover above them)</sDescription>
         <author>Remco van der most</author>
         <license>BSD</license>
         <helpPatch>delay.axh</helpPatch>
         <inlets>
            <frac32buffer name="in" description="audio input"/>
            <bool32 name="rec" description="when high, records to buffer"/>
         </inlets>
         <outlets/>
         <displays/>
         <params/>
         <attribs>
            <objref name="table"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[//static const uint32_t LENGTHPOW = (attr_size);
//static const uint32_t LENGTH = (1<<attr_size);
//static const uint32_t LENGTHMASK = ((1<<attr_size)-1);

uint32_t writepos;
uint32_t wpos;

bool rec;


int32_t cnt;
int32_t fade;
int32_t fd;]]></code.declaration>
         <code.krate><![CDATA[fade=1<<10;
fd=10;










if((inlet_rec>0)&&!rec){
	rec=1;
	
	writepos=0;
	cnt=0;
}
else if((inlet_rec==0)&&rec){
	wpos=writepos;
	rec=0;
	attr_table.array[0]=((writepos)/(1<<15));

	attr_table.array[1]=writepos-(((writepos)/(1<<15))<<15);

	//attr_table.array[0]=writepos;
	cnt=fade;
	}]]></code.krate>
         <code.srate><![CDATA[if(rec>0){
attr_table.array[writepos+32] = __SSAT(inlet_in>>14,16);
}
if(cnt>0){
attr_table.array[writepos+32]=__SSAT(inlet_in>>14,16);
cnt-=1;
}
writepos = (writepos + 1)&attr_table.LENGTHMASK;]]></code.srate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="588" y="308" text="FACT PLAYER NO SUSTAIN"/>
   <comment type="patch/comment" x="784" y="308" text="FACT PLAYER WITH SUSTAIN POINT"/>
   <patchobj type="patch/object" uuid="0598aca0-a7ee-4c20-b872-ca8e5944a18d" name="1_1" x="588" y="322">
      <params/>
      <attribs>
         <objref attributeName="table" obj="data"/>
      </attribs>
      <object id="patch/object" uuid="0598aca0-a7ee-4c20-b872-ca8e5944a18d">
         <sDescription>Difficult to name. Pitchshifter, time-stretcher, play-rate adjuster (stretch+pitchshift), sampler, delay, granulizer...

See inputs/controls for their functions (hoover above them)</sDescription>
         <author>Remco van der most</author>
         <license>BSD</license>
         <helpPatch>delay.axh</helpPatch>
         <inlets>
            <bool32 name="trigger" description="when high, restarts at &quot;phase-position&quot;  of phase input+parameter"/>
            <frac32.bipolar name="pitchshift" description="ONLY pitchshifts the signal without stretching it. normal semitone response."/>
            <frac32.bipolar name="stretch" description="ONLY stretches the signal without pitchshifting it. normal semitone response."/>
            <frac32.bipolar name="rate"/>
            <bool32.risingfalling name="oneshot"/>
            <frac32.positive name="start"/>
            <frac32.positive name="end"/>
         </inlets>
         <outlets>
            <frac32buffer name="out"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <objref name="table"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int32_t out;
int32_t _Aout;
int32_t phase;
int32_t pshadow;
int32_t Fphase;
int32_t start;
int32_t end;
int32_t phs;
int32_t rate;
int32_t length;
int32_t total;
int32_t cnt;
int32_t fade;
int32_t fd;
float32_t ratio;
int32_t fBase;
int32_t fRate;
int32_t LNG;
int32_t READ(int T,uint32_t R,uint32_t L){
      int32_t tmp_a2;
      int32_t tmp_di = T/R;
      int32_t tmp_w1 = (T-tmp_di*R)*R>>2;
      int32_t tmp_a1 = attr_table.array[tmp_di+32+start];
      tmp_a1 = (tmp_a1<<14)+___SMMUL(attr_table.array[(tmp_di+1)+32+start]-tmp_a1<<16,tmp_w1);
      if(tmp_di<fade){
      tmp_a2 = attr_table.array[tmp_di+L+32+start];
      tmp_a2 = (tmp_a2<<14)+___SMMUL(attr_table.array[(tmp_di+1)+L+32+start]-tmp_a2<<16,tmp_w1);
      tmp_a1+=___SMMUL(tmp_a2-tmp_a1,__USAT(fade-tmp_di,30)<<(30-fd))<<2;
      }
     
      
      return out= tmp_a1;
}
uint32_t prv;
int32_t prevv;
bool play;
bool snc;
bool oneshot;
bool gate;
//bool strig;]]></code.declaration>
         <code.krate><![CDATA[fade=1<<10;
fd=10;
total=(attr_table.array[0]<<15)+attr_table.array[1];
oneshot=inlet_oneshot;

if((inlet_trigger>0)&&!snc){
	if (inlet_rate>=0){	
		phase=0;
		
		}
	else if (inlet_rate<0){
		phase=0-(Fphase<<4);
		}
prevv=phase;
play=1;
phs=0;
snc=1;



}
else if(inlet_trigger==0){
	snc=0;
	
	}

start=((inlet_start<<4)/(0x7FFFFFF0/total));
end=(( (0x07FFFFFF-inlet_end)<<4)/(0x7FFFFFF0/(total-start)));

if (oneshot){
length=total+fade-start-end;
}
else {length=total-start-end;}

Fphase=((0x7FFFFFF0/length)*fade);

if (inlet_rate>=0){
	if (oneshot &&   (((phase>=(-(Fphase<<4)))  && (phase<0))  ||  ((phase>=0)  && (prevv<0)))  ){
			play=0;
		}
	}
else {
		if   ((!(phase>0))&&((prevv)>0))  {
			if (oneshot){
				play=0;
			}
		}
}


MTOFEXTENDED(0,fBase);
MTOFEXTENDED(inlet_stretch,fRate)
ratio=(float32_t)fRate/fBase;


LNG=___SMMUL(length,(0x7FFFFFF0))<<1;
rate=((uint64_t)1<<32)/LNG;
int32_t RATE=rate*ratio;


int32_t prate;
MTOFEXTENDED(inlet_pitchshift-inlet_stretch,prate)
float32_t pratio=(float32_t)prate/fBase;
int32_t window=((uint64_t)0x7FFFFFF0<<12)/length;


float32_t wratio=(float32_t)(1<<30)/(window>>1);
prate=(int64_t)((int64_t)RATE*pratio-RATE)*wratio;


prevv=phase;]]></code.krate>
         <code.srate><![CDATA[int32_t FRQ=___SMMUL(prate<<2,inlet_rate<<3);
int32_t FRQQ=___SMMUL(RATE<<2,inlet_rate<<3);

phase+=FRQQ;
phs+=FRQ;

if (play){
	int32_t P1=((uint32_t)phs)>>1;
	int32_t P2=((uint32_t)phs+(1<<31))>>1;
	int32_t tmp1=READ(phase+(___SMMUL(P1,window)<<2),rate,LNG);
	int32_t tmp2=READ(phase+(___SMMUL(P2,window)<<2),rate,LNG);
	int32_t mp;
	SINE2TINTERP(phs-(1<<30),mp)
	mp=(mp>>2)+(1<<29);
	int32_t out=tmp2+(___SMMUL(tmp1-tmp2,mp)<<2);

	_Aout=out;
	}
	else {
		_Aout=0;
	}

outlet_out=_Aout;

prv=phs;]]></code.srate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="fb64a9d1-119f-4bb4-a872-d5aaada62780" name="Fact_6" x="784" y="322">
      <params/>
      <attribs>
         <objref attributeName="table" obj="data"/>
      </attribs>
      <object id="patch/object" uuid="fb64a9d1-119f-4bb4-a872-d5aaada62780">
         <sDescription>Difficult to name. Pitchshifter, time-stretcher, play-rate adjuster (stretch+pitchshift), sampler, delay, granulizer...

See inputs/controls for their functions (hoover above them)</sDescription>
         <author>Remco van der most</author>
         <license>BSD</license>
         <helpPatch>delay.axh</helpPatch>
         <inlets>
            <bool32 name="trigger" description="when high, restarts at &quot;phase-position&quot;  of phase input+parameter"/>
            <frac32.bipolar name="pitchshift" description="ONLY pitchshifts the signal without stretching it. normal semitone response."/>
            <frac32.bipolar name="stretch" description="ONLY stretches the signal without pitchshifting it. normal semitone response."/>
            <frac32.bipolar name="rate"/>
            <bool32.risingfalling name="oneshot"/>
            <frac32.positive name="start"/>
            <frac32.positive name="end"/>
            <frac32.positive name="sustainpoint"/>
         </inlets>
         <outlets>
            <frac32buffer name="out"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <objref name="table"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int32_t xlength;
int32_t xLNG;
int32_t xenv;
int32_t xenvA;
int32_t xenvB;
int32_t env;


int32_t out;
int32_t _Aout;
int32_t _Bout;

int32_t Lpos;
int32_t phase;
int32_t sphase;

int32_t Fphase;
int32_t start;

int32_t inend;
int32_t Lpoint;
int32_t LpointB;
int32_t end;
int32_t phs;
int32_t sphs;
int32_t total;

int32_t rate;
int32_t xrate;
int32_t ratein;
int32_t length;

int32_t cnt;
int32_t fade;
int32_t fd;
float32_t ratio;
int32_t fBase;
int32_t fRate;
int32_t LNG;

int32_t READ(int T,uint32_t R,uint32_t L){
      int32_t tmp_a2;
      int32_t tmp_di = T/R;
      int32_t tmp_w1 = (T-tmp_di*R)*R>>2;
      int32_t tmp_a1 = attr_table.array[tmp_di+32+start];
      tmp_a1 = (tmp_a1<<14)+___SMMUL(attr_table.array[(tmp_di+1)+32+start]-tmp_a1<<16,tmp_w1);
      if(tmp_di<fade){
      tmp_a2 = attr_table.array[tmp_di+L+32+start];
      tmp_a2 = (tmp_a2<<14)+___SMMUL(attr_table.array[(tmp_di+1)+L+32+start]-tmp_a2<<16,tmp_w1);
      tmp_a1+=___SMMUL(tmp_a2-tmp_a1,__USAT(fade-tmp_di,30)<<(30-fd))<<2;
      }
     
      
      return out= tmp_a1;
}
uint32_t prv;
int32_t prevv;

bool play;
bool snc;

bool oneshot;
bool gate;

bool sustain;]]></code.declaration>
         <code.krate><![CDATA[fade=1<<10;
fd=10;
//reverse=param_p2;
oneshot=inlet_oneshot;
total=(attr_table.array[0]<<15)+attr_table.array[1];
if((inlet_trigger>0)&&!snc){
	if (inlet_rate>=0){	
		phase=0;
		
		}
	else if (inlet_rate<0){
		phase=0-(Fphase<<4);
		}
		
sustain=0;
prevv=phase;
play=1;
phs=0;
snc=1;
sphase=phase;
sphs=phs;

}
else if(inlet_trigger==0){
	snc=0;
	
	}

Lpoint=(inlet_sustainpoint<<5);

ratein=inlet_rate;

start=((inlet_start<<4)/(0x7FFFFFF0/total));
end=(( (0x07FFFFFF-inlet_end)<<4)/(0x7FFFFFF0/(total-start)));
Lpos=(( (inlet_sustainpoint)<<4)/(0x7FFFFFF0/(total-start-end)));


if (oneshot){
length=total+fade-start-end;
}
else {length=total-start-end;}

Fphase=((0x7FFFFFF0/length)*fade);



if (inlet_rate>=0){
	LpointB= ((inlet_sustainpoint+(((1<<27)-inlet_sustainpoint)>>1))<<5);
	xlength=length-Lpos;

	if (oneshot &&   (((phase>=(-(Fphase<<4)))  && (phase<0))  ||  ((phase>=0)  && (prevv<0)))  ){
			play=0;
		}
		if (!oneshot &&   ((phase>=0)  && (prevv<0)))  {

			if ((inlet_sustainpoint>0)){
				phase=Lpoint;
				env=1<<26;
				
			}
			
			}
		if (!oneshot &&   (((phase>=LpointB)  && (prevv<LpointB))  )  ){
			if ((inlet_sustainpoint>0)){
				sustain=1;
				sphase=0;
				env=0;
			}
			
			}
	}
else {
	LpointB= ((inlet_sustainpoint-((inlet_sustainpoint)>>1))<<5);
	xlength=Lpos;
	
		if   ((!(phase>0))&&((prevv)>0))  {
			
			if (!oneshot && ((inlet_sustainpoint>0))){
				phase=Lpoint;
				env=1<<26;
			}
			if (oneshot){
				play=0;
			}
			
		}
		if (!oneshot &&   ((!(phase>LpointB))&&((prevv)>LpointB))  ){
			if ((inlet_sustainpoint>0)){
				sustain=1;
				sphase=Lpoint;
				env=0;	
			}
			
		}
}



if (!sustain){
	xenvA=1<<27;
}
else if (sustain){
       if (env>=0){
       	xenv=env;
       }
       else {xenv=(-env);}
        int32_t xr;
       SINE2TINTERP((xenv<<5)+(1<<30),xr)
       xenvA= (xr>>5)+(1<<26);
	}

	
xenvB=(1<<27)-xenvA;
MTOFEXTENDED(0,fBase);
MTOFEXTENDED(inlet_stretch,fRate)
ratio=(float32_t)fRate/fBase;


LNG=___SMMUL(length,(0x7FFFFFF0))<<1;
xLNG=___SMMUL(xlength,(0x7FFFFFF0))<<1;

rate=((uint64_t)1<<32)/LNG;
xrate=((uint64_t)1<<32)/xLNG;
int32_t RATE=rate*ratio;
int32_t xRATE=xrate*ratio;

int32_t prate;
MTOFEXTENDED(inlet_pitchshift-inlet_stretch,prate)
float32_t pratio=(float32_t)prate/fBase;
int32_t window=((uint64_t)0x7FFFFFF0<<12)/length;


float32_t wratio=(float32_t)(1<<30)/(window>>1);
prate=(int64_t)((int64_t)RATE*pratio-RATE)*wratio;


prevv=phase;]]></code.krate>
         <code.srate><![CDATA[int32_t FRQ=___SMMUL(prate<<2,ratein<<3);
int32_t FRQQ=___SMMUL(RATE<<2,ratein<<3);
int32_t LFRQQ=___SMMUL(xRATE<<2,(ratein)<<3);


phase+=FRQQ;
phs+=FRQ;
env+=(LFRQQ>>5);
if (env>=(1<<27)){
	env=1<<27;
}

sphase+=(-FRQQ);
sphs+=(-FRQ);	

	
if (play){
	int32_t P1=((uint32_t)phs)>>1;
	int32_t P2=((uint32_t)phs+(1<<31))>>1;
	int32_t tmp1=READ(phase+(___SMMUL(P1,window)<<2),rate,LNG);
	int32_t tmp2=READ(phase+(___SMMUL(P2,window)<<2),rate,LNG);
	int32_t mp;
	SINE2TINTERP(phs-(1<<30),mp)
	mp=(mp>>2)+(1<<29);
	int32_t out=tmp2+(___SMMUL(tmp1-tmp2,mp)<<2);

	_Aout=out;
	}
	else {
		_Aout=0;
	}
if (play){
	int32_t P1=((uint32_t)sphs)>>1;
	int32_t P2=((uint32_t)sphs+(1<<31))>>1;
	int32_t tmp1=READ(sphase+(___SMMUL(P1,window)<<2),rate,LNG);
	int32_t tmp2=READ(sphase+(___SMMUL(P2,window)<<2),rate,LNG);
	int32_t mp;
	SINE2TINTERP(sphs-(1<<30),mp)
	mp=(mp>>2)+(1<<29);
	int32_t out=tmp2+(___SMMUL(tmp1-tmp2,mp)<<2);

	_Bout=out;
	}
	else {
		_Bout=0;
	}
outlet_out=(( ___SMMUL((xenvA)<<3,_Aout<<2))+( ___SMMUL((xenvB)<<3,_Bout<<2)));

prv=phs;]]></code.srate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="980" y="336" text="SUSTAIN POINT NOTES"/>
   <comment type="patch/comment" x="980" y="364" text=" this sets a portion of the sample to &quot;sustain&quot;. it has no effect on one shot mode"/>
   <comment type="patch/comment" x="980" y="378" text="What it&apos;s doing is setting a loop point within the sample "/>
   <comment type="patch/comment" x="980" y="392" text="and fading between that and the same thing reversed."/>
   <comment type="patch/comment" x="980" y="420" text="0-64 is scaled from start point to end point. "/>
   <comment type="patch/comment" x="980" y="448" text="0=off"/>
   <comment type="patch/comment" x="980" y="462" text="if rate is going forwards the looped section will be between the end and the sustain point."/>
   <comment type="patch/comment" x="980" y="476" text="if rate is going backwards the looped section will be between the start and the sustain point."/>
   <comment type="patch/comment" x="980" y="504" text="if you don&apos;t need the sustain feature use the player objects without the sustain point as it will be cheaper resources wise"/>
   <comment type="patch/comment" x="196" y="532" text="FACT EDITOR - for use with the voice players"/>
   <comment type="patch/comment" x="588" y="532" text="VOICE PLAYERS"/>
   <comment type="patch/comment" x="196" y="546" text=" writes the oneshot mode and start, end and sustain points for the sample, "/>
   <comment type="patch/comment" x="588" y="546" text="play back sample recorded with the recorder, and use the settings set by the editor"/>
   <comment type="patch/comment" x="196" y="560" text="this stays outside polysubpatch and settings are global points are global"/>
   <comment type="patch/comment" x="588" y="560" text="this can go in poly subpatches"/>
   <comment type="patch/comment" x="196" y="588" text="FACT EDITOR"/>
   <comment type="patch/comment" x="588" y="588" text="FACT VOICE PLAYER NO SUSTAIN"/>
   <comment type="patch/comment" x="784" y="588" text="FACT VOICE PLAYER WITH SUSTAIN POINT"/>
   <patchobj type="patch/object" uuid="fb64a9d1-119f-4bb4-a872-d5aaada62780" name="Fact_7" x="196" y="602">
      <params/>
      <attribs>
         <objref attributeName="table" obj="data"/>
      </attribs>
      <object id="patch/object" uuid="fb64a9d1-119f-4bb4-a872-d5aaada62780">
         <sDescription>Difficult to name. Pitchshifter, time-stretcher, play-rate adjuster (stretch+pitchshift), sampler, delay, granulizer...

See inputs/controls for their functions (hoover above them)</sDescription>
         <author>Remco van der most</author>
         <license>BSD</license>
         <helpPatch>delay.axh</helpPatch>
         <inlets>
            <bool32.risingfalling name="oneshot"/>
            <frac32.positive name="start"/>
            <frac32.positive name="end"/>
            <frac32.positive name="sustainpoint"/>
         </inlets>
         <outlets/>
         <displays/>
         <params/>
         <attribs>
            <objref name="table"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int32_t Lpos;


int32_t Fphase;
int32_t start;


int32_t end;

int32_t total;


int32_t length;


int32_t fade;


bool oneshot;]]></code.declaration>
         <code.krate><![CDATA[fade=1<<10;



oneshot=inlet_oneshot;
total=(attr_table.array[0]<<15)+attr_table.array[1];

start=((inlet_start<<4)/(0x7FFFFFF0/total));
end=(( (0x07FFFFFF-inlet_end)<<4)/(0x7FFFFFF0/(total-start)));
Lpos=(( (inlet_sustainpoint)<<4)/(0x7FFFFFF0/(total-start-end)));

if (oneshot){
length=total+fade-start-end;
}
else {length=total-start-end;}

Fphase=((0x7FFFFFF0/length)*fade);




// length
//Fphase
//start
//inlet_sustainpoint
//oneshot
//xlength

// 0 + 1 = total
//attr_table.array[0]=((writepos)/(1<<15));
//attr_table.array[1]=writepos-(((writepos)/(1<<15))<<15);
// 2 + 3 = length
attr_table.array[2]=((length)/(1<<15));
attr_table.array[3]=length-(((length)/(1<<15))<<15);
// 4 + 5 = start
attr_table.array[4]=((start)/(1<<15));
attr_table.array[5]=start-(((start)/(1<<15))<<15);
// 6 + 7 = inlet sustain point
attr_table.array[6]=((inlet_sustainpoint)/(1<<15));
attr_table.array[7]=inlet_sustainpoint-(((inlet_sustainpoint)/(1<<15))<<15);
// 8 + 9 = Lpos
attr_table.array[8]=((Lpos)/(1<<15));
attr_table.array[9]=Lpos-(((Lpos)/(1<<15))<<15);
//10 = oneshot
attr_table.array[10]=oneshot;
// 11 + 12 = Fphase
attr_table.array[11]=((Fphase)/(1<<15));
attr_table.array[12]=Fphase-(((Fphase)/(1<<15))<<15);]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="fb64a9d1-119f-4bb4-a872-d5aaada62780" name="Fact_10" x="588" y="602">
      <params/>
      <attribs>
         <objref attributeName="table" obj="data"/>
      </attribs>
      <object id="patch/object" uuid="fb64a9d1-119f-4bb4-a872-d5aaada62780">
         <sDescription>Difficult to name. Pitchshifter, time-stretcher, play-rate adjuster (stretch+pitchshift), sampler, delay, granulizer...

See inputs/controls for their functions (hoover above them)</sDescription>
         <author>Remco van der most</author>
         <license>BSD</license>
         <helpPatch>delay.axh</helpPatch>
         <inlets>
            <bool32 name="trigger" description="when high, restarts at &quot;phase-position&quot;  of phase input+parameter"/>
            <frac32.bipolar name="pitchshift" description="ONLY pitchshifts the signal without stretching it. normal semitone response."/>
            <frac32.bipolar name="stretch" description="ONLY stretches the signal without pitchshifting it. normal semitone response."/>
            <frac32.bipolar name="rate"/>
         </inlets>
         <outlets>
            <frac32buffer name="out"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <objref name="table"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int32_t out;
int32_t _Aout;


int32_t phase;


int32_t Fphase;
int32_t start;


//int32_t end;
int32_t phs;

//int32_t total;

int32_t rate;

//int32_t ratein;
int32_t length;

int32_t cnt;
int32_t fade;
int32_t fd;
float32_t ratio;
int32_t fBase;
int32_t fRate;
int32_t LNG;

int32_t READ(int T,uint32_t R,uint32_t L){
      int32_t tmp_a2;
      int32_t tmp_di = T/R;
      int32_t tmp_w1 = (T-tmp_di*R)*R>>2;
      int32_t tmp_a1 = attr_table.array[tmp_di+32+start];
      tmp_a1 = (tmp_a1<<14)+___SMMUL(attr_table.array[(tmp_di+1)+32+start]-tmp_a1<<16,tmp_w1);
      if(tmp_di<fade){
      tmp_a2 = attr_table.array[tmp_di+L+32+start];
      tmp_a2 = (tmp_a2<<14)+___SMMUL(attr_table.array[(tmp_di+1)+L+32+start]-tmp_a2<<16,tmp_w1);
      tmp_a1+=___SMMUL(tmp_a2-tmp_a1,__USAT(fade-tmp_di,30)<<(30-fd))<<2;
      }
     
      
      return out= tmp_a1;
}
uint32_t prv;
int32_t prevv;

bool play;
bool snc;

bool oneshot;
bool gate;]]></code.declaration>
         <code.krate><![CDATA[fade=1<<10;
fd=10;
//reverse=param_p2;
//oneshot=inlet_oneshot;
//total=(attr_table.array[0]<<15)+attr_table.array[1];


// 0 + 1 = total
//attr_table.array[0]=((writepos)/(1<<15));
//attr_table.array[1]=writepos-(((writepos)/(1<<15))<<15);
// 2 + 3 = length
length=(attr_table.array[2]<<15)+attr_table.array[3];

// 4 + 5 = start
start=(attr_table.array[4]<<15)+attr_table.array[5];



//10 = oneshot
oneshot=attr_table.array[10];
// 11 + 12 = Fphase
Fphase=(attr_table.array[11]<<15)+attr_table.array[12];




if((inlet_trigger>0)&&!snc){
	if (inlet_rate>=0){	
		phase=0;
		
		}
	else if (inlet_rate<0){
		phase=0-(Fphase<<4);
		}
		

prevv=phase;
play=1;
phs=0;
snc=1;


}
else if(inlet_trigger==0){
	snc=0;
	
	}




if (inlet_rate>=0){
	

	if (oneshot &&   (((phase>=(-(Fphase<<4)))  && (phase<0))  ||  ((phase>=0)  && (prevv<0)))  ){
			play=0;
		}
		
	}
else {
	
	
		if   ((!(phase>0))&&((prevv)>0))  {
			
			
			if (oneshot){
				play=0;
			}
			
		}
		
}






MTOFEXTENDED(0,fBase);
MTOFEXTENDED(inlet_stretch,fRate)
ratio=(float32_t)fRate/fBase;


LNG=___SMMUL(length,(0x7FFFFFF0))<<1;


rate=((uint64_t)1<<32)/LNG;

int32_t RATE=rate*ratio;


int32_t prate;
MTOFEXTENDED(inlet_pitchshift-inlet_stretch,prate)
float32_t pratio=(float32_t)prate/fBase;
int32_t window=((uint64_t)0x7FFFFFF0<<12)/length;


float32_t wratio=(float32_t)(1<<30)/(window>>1);
prate=(int64_t)((int64_t)RATE*pratio-RATE)*wratio;


prevv=phase;]]></code.krate>
         <code.srate><![CDATA[int32_t FRQ=___SMMUL(prate<<2,inlet_rate<<3);
int32_t FRQQ=___SMMUL(RATE<<2,inlet_rate<<3);



phase+=FRQQ;
phs+=FRQ;





	
if (play){
	int32_t P1=((uint32_t)phs)>>1;
	int32_t P2=((uint32_t)phs+(1<<31))>>1;
	int32_t tmp1=READ(phase+(___SMMUL(P1,window)<<2),rate,LNG);
	int32_t tmp2=READ(phase+(___SMMUL(P2,window)<<2),rate,LNG);
	int32_t mp;
	SINE2TINTERP(phs-(1<<30),mp)
	mp=(mp>>2)+(1<<29);
	int32_t out=tmp2+(___SMMUL(tmp1-tmp2,mp)<<2);

	_Aout=out;
	}
	else {
		_Aout=0;
	}

outlet_out=_Aout;

prv=phs;]]></code.srate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="919093eb-2aa3-40a0-a44e-b7d8d40118a2" name="1_2" x="784" y="602">
      <params/>
      <attribs>
         <objref attributeName="table" obj="data"/>
      </attribs>
      <object id="patch/object" uuid="919093eb-2aa3-40a0-a44e-b7d8d40118a2">
         <sDescription>Difficult to name. Pitchshifter, time-stretcher, play-rate adjuster (stretch+pitchshift), sampler, delay, granulizer...

See inputs/controls for their functions (hoover above them)</sDescription>
         <author>Remco van der most</author>
         <license>BSD</license>
         <helpPatch>delay.axh</helpPatch>
         <inlets>
            <bool32 name="trigger" description="when high, restarts at &quot;phase-position&quot;  of phase input+parameter"/>
            <frac32.bipolar name="pitchshift" description="ONLY pitchshifts the signal without stretching it. normal semitone response."/>
            <frac32.bipolar name="stretch" description="ONLY stretches the signal without pitchshifting it. normal semitone response."/>
            <frac32.bipolar name="rate"/>
         </inlets>
         <outlets>
            <frac32buffer name="out"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <objref name="table"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int32_t xlength;
int32_t xLNG;
int32_t xenv;
int32_t xenvA;
int32_t xenvB;
int32_t env;


int32_t out;
int32_t _Aout;
int32_t _Bout;

int32_t Lpos;
int32_t phase;
int32_t sphase;
int32_t spoint;

int32_t Fphase;
int32_t start;

//int32_t inend;
int32_t Lpoint;
int32_t LpointB;
//int32_t end;
int32_t phs;
int32_t sphs;
//int32_t total;

int32_t rate;
int32_t xrate;
//int32_t ratein;
int32_t length;

int32_t cnt;
int32_t fade;
int32_t fd;
float32_t ratio;
int32_t fBase;
int32_t fRate;
int32_t LNG;

int32_t READ(int T,uint32_t R,uint32_t L){
      int32_t tmp_a2;
      int32_t tmp_di = T/R;
      int32_t tmp_w1 = (T-tmp_di*R)*R>>2;
      int32_t tmp_a1 = attr_table.array[tmp_di+32+start];
      tmp_a1 = (tmp_a1<<14)+___SMMUL(attr_table.array[(tmp_di+1)+32+start]-tmp_a1<<16,tmp_w1);
      if(tmp_di<fade){
      tmp_a2 = attr_table.array[tmp_di+L+32+start];
      tmp_a2 = (tmp_a2<<14)+___SMMUL(attr_table.array[(tmp_di+1)+L+32+start]-tmp_a2<<16,tmp_w1);
      tmp_a1+=___SMMUL(tmp_a2-tmp_a1,__USAT(fade-tmp_di,30)<<(30-fd))<<2;
      }
     
      
      return out= tmp_a1;
}
uint32_t prv;
int32_t prevv;

bool play;
bool snc;

bool oneshot;
bool gate;

bool sustain;]]></code.declaration>
         <code.krate><![CDATA[fade=1<<10;
fd=10;
//reverse=param_p2;
//oneshot=inlet_oneshot;
//total=(attr_table.array[0]<<15)+attr_table.array[1];


// 0 + 1 = total
//attr_table.array[0]=((writepos)/(1<<15));
//attr_table.array[1]=writepos-(((writepos)/(1<<15))<<15);
// 2 + 3 = length
length=(attr_table.array[2]<<15)+attr_table.array[3];

// 4 + 5 = start
start=(attr_table.array[4]<<15)+attr_table.array[5];

// 6 + 7 = inlet sustain point
spoint=(attr_table.array[6]<<15)+attr_table.array[7];

// 8 + 9 = Lpos
Lpos=(attr_table.array[8]<<15)+attr_table.array[9];

//10 = oneshot
oneshot=attr_table.array[10];
// 11 + 12 = Fphase
Fphase=(attr_table.array[11]<<15)+attr_table.array[12];




if((inlet_trigger>0)&&!snc){
	if (inlet_rate>=0){	
		phase=0;
		
		}
	else if (inlet_rate<0){
		phase=0-(Fphase<<4);
		}
		
sustain=0;
prevv=phase;
play=1;
phs=0;
snc=1;
sphase=phase;
sphs=phs;

}
else if(inlet_trigger==0){
	snc=0;
	
	}

Lpoint=(spoint<<5);

//ratein=inlet_rate;

//start=((inlet_start<<4)/(0x7FFFFFF0/total));
//end=(( (0x07FFFFFF-inlet_end)<<4)/(0x7FFFFFF0/(total-start)));
//Lpos=(( (inlet_sustainpoint)<<4)/(0x7FFFFFF0/(total-start-end)));


//if (oneshot){
//length=total+fade-start-end;
//}
//else {length=total-start-end;}

//Fphase=((0x7FFFFFF0/length)*fade);

// length
//Fphase
//start
//inlet_sustainpoint
//oneshot
//xlength

if (inlet_rate>=0){
	LpointB= ((spoint+(((1<<27)-spoint)>>1))<<5);
	xlength=length-Lpos;

	if (oneshot &&   (((phase>=(-(Fphase<<4)))  && (phase<0))  ||  ((phase>=0)  && (prevv<0)))  ){
			play=0;
		}
		if (!oneshot &&   ((phase>=0)  && (prevv<0)))  {

			if ((spoint>0)){
				phase=Lpoint;
				env=1<<26;
				
			}
			
			}
		if (!oneshot &&   (((phase>=LpointB)  && (prevv<LpointB))  )  ){
			if ((spoint>0)){
				sustain=1;
				sphase=0;
				env=0;
			}
			
			}
	}
else {
	LpointB= ((spoint-((spoint)>>1))<<5);
	xlength=Lpos;
	
		if   ((!(phase>0))&&((prevv)>0))  {
			
			if (!oneshot && ((spoint>0))){
				phase=Lpoint;
				env=1<<26;
			}
			if (oneshot){
				play=0;
			}
			
		}
		if (!oneshot &&   ((!(phase>LpointB))&&((prevv)>LpointB))  ){
			if ((spoint>0)){
				sustain=1;
				sphase=Lpoint;
				env=0;	
			}
			
		}
}



if (!sustain){
	xenvA=1<<27;
}
else if (sustain){
       if (env>=0){
       	xenv=env;
       }
       else {xenv=(-env);}
        int32_t xr;
       SINE2TINTERP((xenv<<5)+(1<<30),xr)
       xenvA= (xr>>5)+(1<<26);
	}

	
xenvB=(1<<27)-xenvA;
MTOFEXTENDED(0,fBase);
MTOFEXTENDED(inlet_stretch,fRate)
ratio=(float32_t)fRate/fBase;


LNG=___SMMUL(length,(0x7FFFFFF0))<<1;
xLNG=___SMMUL(xlength,(0x7FFFFFF0))<<1;

rate=((uint64_t)1<<32)/LNG;
xrate=((uint64_t)1<<32)/xLNG;
int32_t RATE=rate*ratio;
int32_t xRATE=xrate*ratio;

int32_t prate;
MTOFEXTENDED(inlet_pitchshift-inlet_stretch,prate)
float32_t pratio=(float32_t)prate/fBase;
int32_t window=((uint64_t)0x7FFFFFF0<<12)/length;


float32_t wratio=(float32_t)(1<<30)/(window>>1);
prate=(int64_t)((int64_t)RATE*pratio-RATE)*wratio;


prevv=phase;]]></code.krate>
         <code.srate><![CDATA[int32_t FRQ=___SMMUL(prate<<2,inlet_rate<<3);
int32_t FRQQ=___SMMUL(RATE<<2,inlet_rate<<3);
int32_t LFRQQ=___SMMUL(xRATE<<2,(inlet_rate)<<3);


phase+=FRQQ;
phs+=FRQ;
env+=(LFRQQ>>5);
if (env>=(1<<27)){
	env=1<<27;
}

sphase+=(-FRQQ);
sphs+=(-FRQ);	

	
if (play){
	int32_t P1=((uint32_t)phs)>>1;
	int32_t P2=((uint32_t)phs+(1<<31))>>1;
	int32_t tmp1=READ(phase+(___SMMUL(P1,window)<<2),rate,LNG);
	int32_t tmp2=READ(phase+(___SMMUL(P2,window)<<2),rate,LNG);
	int32_t mp;
	SINE2TINTERP(phs-(1<<30),mp)
	mp=(mp>>2)+(1<<29);
	int32_t out=tmp2+(___SMMUL(tmp1-tmp2,mp)<<2);

	_Aout=out;
	}
	else {
		_Aout=0;
	}
if (play){
	int32_t P1=((uint32_t)sphs)>>1;
	int32_t P2=((uint32_t)sphs+(1<<31))>>1;
	int32_t tmp1=READ(sphase+(___SMMUL(P1,window)<<2),rate,LNG);
	int32_t tmp2=READ(sphase+(___SMMUL(P2,window)<<2),rate,LNG);
	int32_t mp;
	SINE2TINTERP(sphs-(1<<30),mp)
	mp=(mp>>2)+(1<<29);
	int32_t out=tmp2+(___SMMUL(tmp1-tmp2,mp)<<2);

	_Bout=out;
	}
	else {
		_Bout=0;
	}
outlet_out=(( ___SMMUL((xenvA)<<3,_Aout<<2))+( ___SMMUL((xenvB)<<3,_Bout<<2)));

prv=phs;]]></code.srate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="910" y="686" text="&lt;&lt;-- voice players need the table name to be prefixed if in polysubpatch: &quot; data &quot;  becomes &quot;  ../data   &quot;"/>
   <nets>
      <net>
         <source obj="c_1" outlet="out"/>
         <dest obj="load_1" inlet="filename"/>
         <dest obj="save_1" inlet="filename"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>-8</x>
      <y>-8</y>
      <width>1616</width>
      <height>876</height>
   </windowPos>
</patch-1.0>