<objdefs appVersion="1.0.12">
   <obj.normal id="clds" uuid="04dc4e61-725e-4600-b4fb-6842a70e761a">
      <sDescription>a clouds-like effect, based on open source DSP code from mutable instruments.
any bugs/issues you find are our own, report on the axoloti forum.

Thanks to Olivier Gillet from Mutable Instruments for open sourcing their code.
http://mutable-instruments.com</sDescription>
      <author>Mark Harris</author>
      <license>GPL</license>
      <helpPatch>clds.axh</helpPatch>
      <inlets>
         <frac32buffer name="l"/>
         <frac32buffer name="r"/>
         <bool32 name="freeze"/>
         <bool32.rising name="trig"/>
         <frac32.bipolar name="position"/>
         <frac32.bipolar name="size"/>
         <frac32.bipolar name="pitch"/>
         <frac32.bipolar name="density"/>
         <frac32.bipolar name="texture"/>
         <frac32.bipolar name="mix"/>
         <frac32.bipolar name="spread"/>
         <frac32.bipolar name="feedback"/>
      </inlets>
      <outlets>
         <frac32buffer name="l"/>
         <frac32buffer name="r"/>
      </outlets>
      <displays/>
      <params/>
      <attribs>
         <combo name="large buffer">
            <MenuEntries>
               <string>131072</string>
               <string>262144</string>
               <string>524288</string>
               <string>1048576</string>
               <string>2097152</string>
               <string>4194304</string>
            </MenuEntries>
            <CEntries>
               <string>131072</string>
               <string>262144</string>
               <string>524288</string>
               <string>1048576</string>
               <string>2097152</string>
               <string>4194304</string>
            </CEntries>
         </combo>
         <combo name="small buffer">
            <MenuEntries>
               <string>65536</string>
               <string>131072</string>
               <string>262144</string>
            </MenuEntries>
            <CEntries>
               <string>65536</string>
               <string>131072</string>
               <string>262144</string>
            </CEntries>
         </combo>
      </attribs>
      <includes>
         <include>axoloti_mi.h</include>
      </includes>
      <code.declaration><![CDATA[clouds::GranularProcessor processor;
bool ltrig = false;

inline float constrainQ27(int32_t v, float vMin, float vMax) {
	return std::max<float>(vMin,std::min<float>(vMax, q27_to_float(v)));
}

inline float constrain(float v, float vMin, float vMax) {
	return std::max<float>(vMin,std::min<float>(vMax, v));
}]]></code.declaration>
      <code.init><![CDATA[const int LARGE_BUF = attr_large_space_buffer;
const int SMALL_BUF = attr_small_space_buffer;

uint8_t* large_buff = (uint8_t*) sdram_malloc(LARGE_BUF); 
if(!large_buff) return;
uint8_t* small_buff = (uint8_t*) sdram_malloc(SMALL_BUF); //ccm usually
if(!small_buff) return;

processor.Init(large_buff,LARGE_BUF, small_buff,SMALL_BUF);
ltrig = false;]]></code.init>
      <code.krate><![CDATA[static clouds::ShortFrame input[BUFSIZE];
static clouds::ShortFrame output[BUFSIZE];

int i;

// for now restrict playback mode to working modes (granular and looping) 
// clouds::PlaybackMode mode  = (clouds::PlaybackMode) ((param_playmode + inlet_mode) % 4) );
/*clouds::PlaybackMode mode =  
	(((inlet_mode) % 2) == 0) 
	? clouds::PLAYBACK_MODE_GRANULAR 
	: clouds::PLAYBACK_MODE_LOOPING_DELAY;
*/
clouds::PlaybackMode mode =  clouds::PLAYBACK_MODE_GRANULAR ;
	
processor.set_playback_mode(mode);

processor.mutable_parameters()->position 	= constrainQ27(inlet_position, 	0.0f,1.0f);
processor.mutable_parameters()->size		= constrainQ27(inlet_size,			0.0f,1.0f);
processor.mutable_parameters()->texture 	= constrainQ27(inlet_texture,	0.0f,1.0f);
//processor.mutable_parameters()->dry_wet 	= constrainQ27(inlet_mix, 			0.0f,1.0f);
processor.mutable_parameters()->dry_wet 	= 1.0f; // Force full wet
processor.mutable_parameters()->stereo_spread= constrainQ27(inlet_spread, 		0.0f,1.0f);
processor.mutable_parameters()->feedback 	= constrainQ27(inlet_feedback, 	0.0f,1.0f);
//processor.mutable_parameters()->reverb		= constrainQ27(inlet_reverb, 		0.0f,1.0f);

processor.mutable_parameters()->pitch		= constrain(q27_to_float(inlet_pitch) * 64.0f,-64.0f,64.0f);

// restrict density to .2 to .8 for granular mode, outside this breaks up
float density = q27_to_float(inlet_density); 
//density = (mode == clouds::PLAYBACK_MODE_GRANULAR) ? (density*.6)+0.2 : density;
density = (mode == clouds::PLAYBACK_MODE_GRANULAR) ? (density*.4)+0.3 : density;
processor.mutable_parameters()->density	= constrain(density, 0.0f, 1.0f);

processor.mutable_parameters()->freeze = inlet_freeze;

//note the trig input is really a gate... which then feeds the trig
processor.mutable_parameters()->gate = inlet_trig;

bool trig = false;
if(inlet_trig && !ltrig) {
	ltrig = true;
	trig  = true;
} else if (!inlet_trig) {
	ltrig = false;
}
processor.mutable_parameters()->trigger = trig;

//processor.set_bypass(inlet_bypass);
processor.set_bypass(0);
//processor.set_silence(inlet_silence);
processor.set_silence(0);
//processor.set_num_channels((inlet_mono) ? 1 : 2 );
processor.set_num_channels(2); //force Stereo
//processor.set_low_fidelity(inlet_lofi);
processor.set_low_fidelity(0);

for(i=0;i<BUFSIZE;i++){
   input[i].l = inlet_l[i]>> 17; 
   input[i].r = inlet_r[i] >> 17; 
}


processor.Prepare();
processor.Process(input,output,BUFSIZE);

for(i=0;i<BUFSIZE;i++){
   outlet_l[i] = output[i].l << 17;
   outlet_r[i] = output[i].r << 17;
}]]></code.krate>
   </obj.normal>
</objdefs>