<patch-1.0 appVersion="1.0.12">
   <patchobj type="patch/object" uuid="78077a7d-82ce-49b6-8c0f-9b40677dbbed" name="thru_1" x="588" y="0">
      <params/>
      <attribs>
         <combo attributeName="device" selection="din"/>
         <spinner attributeName="channel" value="9"/>
         <spinner attributeName="newchannel" value="15"/>
      </attribs>
      <object id="patch/object" uuid="78077a7d-82ce-49b6-8c0f-9b40677dbbed">
         <sDescription>single channel midi thru module. note and cc only -</sDescription>
         <author>Remco van der Most</author>
         <license>BSD</license>
         <helpPatch>midi_in.axh</helpPatch>
         <inlets/>
         <outlets/>
         <displays/>
         <params/>
         <attribs>
            <combo name="device">
               <MenuEntries>
                  <string>din</string>
                  <string>usb host port 1</string>
                  <string>usb host port 2</string>
                  <string>usb host port 3</string>
                  <string>usb host port 4</string>
                  <string>internal port 1</string>
                  <string>internal port 2</string>
                  <string>usb device port 1</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_DIN, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 2</string>
                  <string>MIDI_DEVICE_USB_HOST, 3</string>
                  <string>MIDI_DEVICE_USB_HOST, 4</string>
                  <string>MIDI_DEVICE_INTERNAL, 1</string>
                  <string>MIDI_DEVICE_INTERNAL, 2</string>
                  <string>MIDI_DEVICE_USB_DEVICE, 1</string>
               </CEntries>
            </combo>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="1"/>
            <spinner name="newchannel" MinValue="1" MaxValue="16" DefaultValue="1"/>
         </attribs>
         <includes/>
         <code.midihandler><![CDATA[if ((status != MIDI_CONTROL_CHANGE + (attr_channel-1))&&(status != MIDI_NOTE_ON + (attr_newchannel-1))&&(status != MIDI_NOTE_OFF + (attr_newchannel-1))) {
MidiSend3((midi_device_t) attr_device, status,data1,data2);
}]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="ae811a91-e664-452b-bada-3d64542a337a" name="keyb_1" x="728" y="0">
      <params/>
      <attribs>
         <spinner attributeName="note" value="0"/>
      </attribs>
      <object id="patch/object" uuid="ae811a91-e664-452b-bada-3d64542a337a">
         <sDescription>Monophonic MIDI keyboard note input, gate, velocity and release velocity</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>midi_in.axh</helpPatch>
         <inlets/>
         <outlets>
            <bool32 name="gate" description="key pressed?"/>
            <frac32.positive name="velocity" description="note-on velocity"/>
            <frac32.positive name="releaseVelocity" description="note-off velocity"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <spinner name="note" MinValue="0" MaxValue="127" DefaultValue="64"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[uint8_t _gate;
uint8_t _velo;
uint8_t _rvelo;
]]></code.declaration>
         <code.init><![CDATA[_gate = 0;
]]></code.init>
         <code.krate><![CDATA[outlet_gate= _gate<<27;
outlet_velocity= _velo<<20;
outlet_releaseVelocity= _rvelo<<20;
]]></code.krate>
         <code.midihandler><![CDATA[if ((status == MIDI_NOTE_ON + 14) && (data2)) {if (data1 == attr_note) {
   _velo = data2;
   _gate = 1;
}
} else if (((status == MIDI_NOTE_ON + 14) && (!data2))||          (status == MIDI_NOTE_OFF + 14)) {
  if (data1 == attr_note) {
    _rvelo = data2;
    _gate = 0;
  }
} else if ((status == 14 + MIDI_CONTROL_CHANGE)&&(data1 == MIDI_C_ALL_NOTES_OFF)) {
  _gate = 0;
}]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="ae811a91-e664-452b-bada-3d64542a337a" name="keyb_2" x="854" y="0">
      <params/>
      <attribs>
         <spinner attributeName="note" value="1"/>
      </attribs>
      <object id="patch/object" uuid="ae811a91-e664-452b-bada-3d64542a337a">
         <sDescription>Monophonic MIDI keyboard note input, gate, velocity and release velocity</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>midi_in.axh</helpPatch>
         <inlets/>
         <outlets>
            <bool32 name="gate" description="key pressed?"/>
            <frac32.positive name="velocity" description="note-on velocity"/>
            <frac32.positive name="releaseVelocity" description="note-off velocity"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <spinner name="note" MinValue="0" MaxValue="127" DefaultValue="64"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[uint8_t _gate;
uint8_t _velo;
uint8_t _rvelo;
]]></code.declaration>
         <code.init><![CDATA[_gate = 0;
]]></code.init>
         <code.krate><![CDATA[outlet_gate= _gate<<27;
outlet_velocity= _velo<<20;
outlet_releaseVelocity= _rvelo<<20;
]]></code.krate>
         <code.midihandler><![CDATA[if ((status == MIDI_NOTE_ON + 14) && (data2)) {if (data1 == attr_note) {
   _velo = data2;
   _gate = 1;
}
} else if (((status == MIDI_NOTE_ON + 14) && (!data2))||          (status == MIDI_NOTE_OFF + 14)) {
  if (data1 == attr_note) {
    _rvelo = data2;
    _gate = 0;
  }
} else if ((status == 14 + MIDI_CONTROL_CHANGE)&&(data1 == MIDI_C_ALL_NOTES_OFF)) {
  _gate = 0;
}]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="ae811a91-e664-452b-bada-3d64542a337a" name="keyb_3" x="966" y="0">
      <params/>
      <attribs>
         <spinner attributeName="note" value="2"/>
      </attribs>
      <object id="patch/object" uuid="ae811a91-e664-452b-bada-3d64542a337a">
         <sDescription>Monophonic MIDI keyboard note input, gate, velocity and release velocity</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>midi_in.axh</helpPatch>
         <inlets/>
         <outlets>
            <bool32 name="gate" description="key pressed?"/>
            <frac32.positive name="velocity" description="note-on velocity"/>
            <frac32.positive name="releaseVelocity" description="note-off velocity"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <spinner name="note" MinValue="0" MaxValue="127" DefaultValue="64"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[uint8_t _gate;
uint8_t _velo;
uint8_t _rvelo;
]]></code.declaration>
         <code.init><![CDATA[_gate = 0;
]]></code.init>
         <code.krate><![CDATA[outlet_gate= _gate<<27;
outlet_velocity= _velo<<20;
outlet_releaseVelocity= _rvelo<<20;
]]></code.krate>
         <code.midihandler><![CDATA[if ((status == MIDI_NOTE_ON + 14) && (data2)) {if (data1 == attr_note) {
   _velo = data2;
   _gate = 1;
}
} else if (((status == MIDI_NOTE_ON + 14) && (!data2))||          (status == MIDI_NOTE_OFF + 14)) {
  if (data1 == attr_note) {
    _rvelo = data2;
    _gate = 0;
  }
} else if ((status == 14 + MIDI_CONTROL_CHANGE)&&(data1 == MIDI_C_ALL_NOTES_OFF)) {
  _gate = 0;
}]]></code.midihandler>
      </object>
   </patchobj>
   <comment type="patch/comment" x="2184" y="98" text="for reset"/>
   <comment type="patch/comment" x="2436" y="98" text="play"/>
   <comment type="patch/comment" x="182" y="112" text="top button in"/>
   <comment type="patch/comment" x="1988" y="112" text="cnote pulse out for sync"/>
   <obj type="launch control XL/z OLD/launchcontrol top right buttons" uuid="f61151b1-c2e7-4ffb-90c7-414fac81818a" name="launchcontrol_1" x="14" y="126">
      <params/>
      <attribs>
         <spinner attributeName="channel" value="9"/>
      </attribs>
   </obj>
   <obj type="logic/or 2" uuid="3805d3c84d30032a44fbdbe42d9a2988a1790a3e" name="or_6" x="308" y="126">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/toggle" uuid="f42f0d3aab552c17bc78b9e65f85dc24f977503d" name="toggle_1" x="392" y="126">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/toggle" uuid="f42f0d3aab552c17bc78b9e65f85dc24f977503d" name="toggle_2" x="462" y="126">
      <params/>
      <attribs/>
   </obj>
   <obj type="midi/in/clock" uuid="f1aa3a79d6de9bd6d38dc64c9d4bb5c9de4f4198" name="clock_1" x="532" y="126">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/change" uuid="96e39ae624c3f3c952cec4a95e1986ee0104f718" name="change_1" x="616" y="126">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="28016b8b-78a6-4cb1-8f05-fe371f8b131f" name="tap_tempo_1" x="728" y="126">
      <params>
         <int32 name="clockmul" value="16"/>
         <int32 name="clockdiv" value="1"/>
         <bool32.mom name="tap" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="28016b8b-78a6-4cb1-8f05-fe371f8b131f">
         <sDescription>Tap tempo, mul/div as live parameters</sDescription>
         <author>Are Leistad</author>
         <license>BSD</license>
         <inlets>
            <bool32.rising name="tap" description="Tap input"/>
         </inlets>
         <outlets>
            <bool32.pulse name="clock" description="Clock output"/>
            <frac32.positive name="phasor" description="Phasor output"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="clockmul" noLabel="false">
               <MinValue i="1"/>
               <MaxValue i="128"/>
            </int32>
            <int32 name="clockdiv" noLabel="false">
               <MinValue i="1"/>
               <MaxValue i="128"/>
            </int32>
            <bool32.mom name="tap" noLabel="false"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[

      uint32_t  ktimer;
      uint32_t  last_ktime;
      uint32_t  phase;
      float     base_freq;
      uint32_t  old_phase;
      uint32_t  old_inlet_tap;
      uint32_t  old_param_tap;

    ]]></code.declaration>
         <code.init><![CDATA[

      ktimer        = 0;
      last_ktime    = 0;
      phase         = 0;
      base_freq     = 64.0f * (double)(1 << 30) * 1.0f / (SAMPLERATE * 1.0f);
      old_phase     = 0;
      old_inlet_tap = 0;
      old_param_tap = 0;

    ]]></code.init>
         <code.krate><![CDATA[

      if(   (inlet_tap && !old_inlet_tap)
         || (param_tap && !old_param_tap)
        )
        {
          float period = (ktimer - last_ktime);
          if( period < 15000 ) // 5 seconds at most between taps
            {
              period = period * 16;
              if( period < 1.0f )
                {
                  period = 1.0f;
                }
              float f_clock = SAMPLERATE / period;
              base_freq     = 64.0f * (float)(1 << 30) * f_clock / (SAMPLERATE * 1.0f);
              phase         = 0;
            }
          last_ktime  = ktimer;
        }

      float freq  = (base_freq * (float) param_clockmul) / (float) param_clockdiv;
      phase += (uint32_t) freq;

      outlet_clock = 0;
      if( phase < old_phase )
        {
          outlet_clock = 1;
        }

      outlet_phasor = (phase>>5);

      old_phase     = phase;
      old_inlet_tap = inlet_tap;
      old_param_tap = param_tap;

      ktimer++;

    ]]></code.krate>
      </object>
   </patchobj>
   <obj type="logic/counter" uuid="7a141ba82230e54e5f5cd12da5dbe5a74ba854a5" name="counter_3" x="854" y="126">
      <params>
         <int32 name="maximum" value="2"/>
      </params>
      <attribs/>
   </obj>
   <obj type="logic/flipflop" uuid="f9b15363f5ee203152e062c08a8846f0074b0ea5" name="flipflop_2" x="952" y="126">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/and 2" uuid="c67031682f552aa0a80b23377495c51ea28a8c9c" name="and_3" x="1050" y="126">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="0f63f7a6-c029-48c8-8e67-b2247741866b" name="midi clock switch" x="1134" y="126">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="0f63f7a6-c029-48c8-8e67-b2247741866b">
         <sDescription>switch Connects inlet_i1 to outlet when s is false, inlet inlet_i2 outlet o1 when s is true.</sDescription>
         <author>Philoop</author>
         <license>BSD</license>
         <helpPatch>switches.axh</helpPatch>
         <inlets>
            <bool32 name="i1" description="input 1"/>
            <bool32 name="i2" description="input 2"/>
            <bool32 name="trigger"/>
         </inlets>
         <outlets>
            <bool32 name="o" description="output 1"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_o= (inlet_trigger)?inlet_i2:inlet_i1;]]></code.krate>
      </object>
   </patchobj>
   <obj type="logic/and 2" uuid="c67031682f552aa0a80b23377495c51ea28a8c9c" name="tr" x="1218" y="126">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/flipflop" uuid="f9b15363f5ee203152e062c08a8846f0074b0ea5" name="flipflop_1" x="1302" y="126">
      <params/>
      <attribs/>
   </obj>
   <obj type="timer/pulselength" uuid="ca68725237d8ba8407773340801660a9fd9b0dba" name="pulselength_1" x="1400" y="126">
      <params>
         <frac32.s.map name="delay" value="-64.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="logic/or 2" uuid="3805d3c84d30032a44fbdbe42d9a2988a1790a3e" name="or_5" x="1512" y="126">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/counter" uuid="7a141ba82230e54e5f5cd12da5dbe5a74ba854a5" name="counter_1" x="1596" y="126">
      <params>
         <int32 name="maximum" value="64"/>
      </params>
      <attribs/>
   </obj>
   <obj type="logic/inv" uuid="2bd44b865d3b63ff9b80862242bf5be779e3ad5" name="inv_2" x="1680" y="126">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/and 2" uuid="c67031682f552aa0a80b23377495c51ea28a8c9c" name="and_5" x="1750" y="126">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/or 3" uuid="cb66d236-2eb2-4988-ae2c-05edc6f2fe58" name="or_1" x="1820" y="126">
      <params/>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_1" x="1904" y="126">
      <params>
         <frac32.u.map name="value" value="64.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_2" x="1974" y="126">
      <params>
         <frac32.s.map name="value" value="-64.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="midi/out/note" uuid="a76ae870da278cbbce5501a57ce7bd0e0ea4215c" name="note_2" x="2044" y="126">
      <params/>
      <attribs>
         <combo attributeName="device" selection="din"/>
         <spinner attributeName="channel" value="15"/>
      </attribs>
   </obj>
   <obj type="const/i" uuid="e202f44b2df17ae0b3e663b98ea6b14c8ff00408" name="i_2" x="2184" y="126">
      <params/>
      <attribs>
         <spinner attributeName="value" value="-63"/>
      </attribs>
   </obj>
   <obj type="midi/out/note" uuid="a76ae870da278cbbce5501a57ce7bd0e0ea4215c" name="note_7" x="2268" y="126">
      <params/>
      <attribs>
         <combo attributeName="device" selection="din"/>
         <spinner attributeName="channel" value="15"/>
      </attribs>
   </obj>
   <obj type="const/i" uuid="e202f44b2df17ae0b3e663b98ea6b14c8ff00408" name="i_9" x="2436" y="126">
      <params/>
      <attribs>
         <spinner attributeName="value" value="-62"/>
      </attribs>
   </obj>
   <obj type="midi/out/note" uuid="a76ae870da278cbbce5501a57ce7bd0e0ea4215c" name="note_8" x="2520" y="126">
      <params/>
      <attribs>
         <combo attributeName="device" selection="din"/>
         <spinner attributeName="channel" value="15"/>
      </attribs>
   </obj>
   <comment type="patch/comment" x="196" y="238" text="side button in"/>
   <patchobj type="patch/object" uuid="7b556ff8-fa1a-4c70-9a10-8de1e04e3902" name="launch_1" x="196" y="252">
      <params/>
      <attribs>
         <spinner attributeName="channel" value="9"/>
      </attribs>
      <object id="patch/object" uuid="7b556ff8-fa1a-4c70-9a10-8de1e04e3902">
         <sDescription>Monophonic MIDI keyboard note input, gate, velocity and release velocity, only responding to a range of notes</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>midi_in.axh</helpPatch>
         <inlets>
            <bool32 name="active"/>
         </inlets>
         <outlets>
            <frac32.bipolar name="note"/>
            <bool32 name="gate" description="key pressed?"/>
            <bool32 name="snapshot"/>
            <bool32 name="row1and2"/>
            <bool32 name="row3andfader"/>
            <int32 name="matrixoffset"/>
            <int32 name="colouroff"/>
            <int32 name="colouron"/>
            <int32 name="colouron2"/>
            <bool32 name="shift"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="9"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int8_t _note;
uint8_t _gate;
uint8_t shift;
uint8_t snapshoton;
uint8_t row1and2;
uint8_t row3andfader;
int colouron;
int colouron2;
int colouroff;
int matrixoffset;]]></code.declaration>
         <code.init><![CDATA[_gate = 0;
_note = 0;
snapshoton = 1;
matrixoffset = 48;
colouroff=48;]]></code.init>
         <code.krate><![CDATA[outlet_note= _note<<21;
outlet_gate= _gate<<27;
outlet_snapshot= snapshoton<<27;
outlet_row1and2= row1and2<<27;
outlet_row3andfader= row3andfader<<27;
outlet_matrixoffset=matrixoffset;
outlet_colouron=colouron;
outlet_colouron2=colouron2;
outlet_colouroff=colouroff;
outlet_shift=shift;]]></code.krate>
         <code.midihandler><![CDATA[if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 105)) {
    _note = 3;
    _gate = 1;
    snapshoton=0;
    row1and2=1;
    row3andfader=0;
    matrixoffset=0;
    colouroff=0;
    colouron=3;
    colouron2=35;
}
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 106)) {
    _note = 2;
    _gate = 1;
    snapshoton=0;
    row1and2=0;
    row3andfader=1;
    matrixoffset=16;
    colouroff=0;
    colouron=51;
    colouron2=35;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 107)) {
    _note = 1;
    _gate = 1;
    snapshoton=0;
    row1and2=0;
    row3andfader=0;
    matrixoffset=32;
    colouroff=0;
    colouron=0;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 108)) {
    _note = 0;
    _gate = 1;
    snapshoton=1;
    row1and2=0;
    row3andfader=0;
    matrixoffset=48;
    colouroff=48;
    colouron=48;
    shift=1;
} 

else if (((status == MIDI_NOTE_ON + (attr_channel-1)) && (!data2)&&(data1==108))||          (status == MIDI_NOTE_OFF + (attr_channel-1)&&(data1==108))) {
    shift = 0;
    _gate = 0;
  }

else if (((status == MIDI_NOTE_ON + (attr_channel-1)) && (!data2))||          (status == MIDI_NOTE_OFF + (attr_channel-1))) {
    _gate = 0;
  }
 
 else if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == MIDI_C_ALL_NOTES_OFF)) {
   _gate = 0;
}]]></code.midihandler>
      </object>
   </patchobj>
   <comment type="patch/comment" x="438" y="265" text="automation record counter"/>
   <obj type="drj/seq/clk_mul" uuid="1413af5343f97123abeeb627811120af4b3a4793" name="clk_mul_1" x="392" y="280">
      <params>
         <int32 name="clockmul" value="16"/>
      </params>
      <attribs/>
   </obj>
   <obj type="logic/and 2" uuid="c67031682f552aa0a80b23377495c51ea28a8c9c" name="and_2" x="504" y="280">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/counter" uuid="7a141ba82230e54e5f5cd12da5dbe5a74ba854a5" name="counter_2" x="588" y="280">
      <params>
         <int32 name="maximum" value="1024"/>
      </params>
      <attribs/>
   </obj>
   <obj type="disp/i" uuid="5e35fd0c62d81e70017289250cf28edd26e19e4a" name="i_1" x="686" y="280">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1932" y="280" text="loop pedal buttons"/>
   <comment type="patch/comment" x="1960" y="308" text="overdub"/>
   <obj type="midi/note in gate" uuid="b08779f8-6dd0-4d7d-9f55-0d4f15d7fb32" name="note_14" x="1834" y="322">
      <params/>
      <attribs>
         <spinner attributeName="note" value="9"/>
         <spinner attributeName="channel" value="5"/>
      </attribs>
   </obj>
   <obj type="midi/note in gate" uuid="b08779f8-6dd0-4d7d-9f55-0d4f15d7fb32" name="note_15" x="1946" y="322">
      <params/>
      <attribs>
         <spinner attributeName="note" value="8"/>
         <spinner attributeName="channel" value="5"/>
      </attribs>
   </obj>
   <obj type="midi/note in gate" uuid="b08779f8-6dd0-4d7d-9f55-0d4f15d7fb32" name="note_16" x="2058" y="322">
      <params/>
      <attribs>
         <spinner attributeName="note" value="7"/>
         <spinner attributeName="channel" value="5"/>
      </attribs>
   </obj>
   <comment type="patch/comment" x="448" y="378" text="delay sync button"/>
   <obj type="logic/flipflop toggle" uuid="195e489e5fc3d275944b0de56c7a91c8641ea22a" name="flipflop_3" x="350" y="406">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/and 2" uuid="c67031682f552aa0a80b23377495c51ea28a8c9c" name="and_4" x="476" y="406">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="28016b8b-78a6-4cb1-8f05-fe371f8b131f" name="tap_tempo_2" x="560" y="406">
      <params>
         <int32 name="clockmul" value="1"/>
         <int32 name="clockdiv" value="1"/>
         <bool32.mom name="tap" value="0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="28016b8b-78a6-4cb1-8f05-fe371f8b131f">
         <sDescription>Tap tempo, mul/div as live parameters</sDescription>
         <author>Are Leistad</author>
         <license>BSD</license>
         <inlets>
            <bool32.rising name="tap" description="Tap input"/>
         </inlets>
         <outlets>
            <bool32.pulse name="clock" description="Clock output"/>
            <frac32.positive name="phasor" description="Phasor output"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="clockmul" noLabel="false">
               <MinValue i="1"/>
               <MaxValue i="128"/>
            </int32>
            <int32 name="clockdiv" noLabel="false">
               <MinValue i="1"/>
               <MaxValue i="128"/>
            </int32>
            <bool32.mom name="tap" noLabel="false"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[

      uint32_t  ktimer;
      uint32_t  last_ktime;
      uint32_t  phase;
      float     base_freq;
      uint32_t  old_phase;
      uint32_t  old_inlet_tap;
      uint32_t  old_param_tap;

    ]]></code.declaration>
         <code.init><![CDATA[

      ktimer        = 0;
      last_ktime    = 0;
      phase         = 0;
      base_freq     = 64.0f * (double)(1 << 30) * 1.0f / (SAMPLERATE * 1.0f);
      old_phase     = 0;
      old_inlet_tap = 0;
      old_param_tap = 0;

    ]]></code.init>
         <code.krate><![CDATA[

      if(   (inlet_tap && !old_inlet_tap)
         || (param_tap && !old_param_tap)
        )
        {
          float period = (ktimer - last_ktime);
          if( period < 15000 ) // 5 seconds at most between taps
            {
              period = period * 16;
              if( period < 1.0f )
                {
                  period = 1.0f;
                }
              float f_clock = SAMPLERATE / period;
              base_freq     = 64.0f * (float)(1 << 30) * f_clock / (SAMPLERATE * 1.0f);
              phase         = 0;
            }
          last_ktime  = ktimer;
        }

      float freq  = (base_freq * (float) param_clockmul) / (float) param_clockdiv;
      phase += (uint32_t) freq;

      outlet_clock = 0;
      if( phase < old_phase )
        {
          outlet_clock = 1;
        }

      outlet_phasor = (phase>>5);

      old_phase     = phase;
      old_inlet_tap = inlet_tap;
      old_param_tap = param_tap;

      ktimer++;

    ]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="2058" y="420" text="button logic for looper"/>
   <obj type="logic/flipflop" uuid="f9b15363f5ee203152e062c08a8846f0074b0ea5" name="flipflop_10" x="1820" y="434">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/and 2" uuid="c67031682f552aa0a80b23377495c51ea28a8c9c" name="and_20" x="1904" y="434">
      <params/>
      <attribs/>
   </obj>
   <obj type="djrm/logic/counter2_init_start" uuid="d5936f238ab92e53ac93d5927c3b43ceef998dc1" name="counter2_init_start_2" x="1988" y="434">
      <params>
         <int32 name="maximum" value="1"/>
         <int32 name="init" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="logic/flipflop" uuid="f9b15363f5ee203152e062c08a8846f0074b0ea5" name="flipflop_9" x="2156" y="434">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/toggle" uuid="f42f0d3aab552c17bc78b9e65f85dc24f977503d" name="toggle_4" x="2254" y="448">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/xor 2" uuid="7902b0001a2672a9008b3882d3681ec3e33fec74" name="xor_15" x="2338" y="448">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/flipflop" uuid="f9b15363f5ee203152e062c08a8846f0074b0ea5" name="flipflop_11" x="2422" y="448">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/and 2" uuid="c67031682f552aa0a80b23377495c51ea28a8c9c" name="and_21" x="2520" y="448">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/counter" uuid="7a141ba82230e54e5f5cd12da5dbe5a74ba854a5" name="counter_4" x="378" y="490">
      <params>
         <int32 name="maximum" value="3"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1400" y="518" text="row 1 shift"/>
   <comment type="patch/comment" x="1666" y="532" text="row 2 shift"/>
   <patchobj type="patch/object" uuid="13633099-260f-4c22-b3bf-e6e7dd9ac81a" name="table_2" x="1372" y="546">
      <params>
         <int32 name="offset" value="36072"/>
         <bool32.tgl name="active" value="0"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="lcxl2"/>
         <spinner attributeName="startcc" value="13"/>
         <spinner attributeName="length" value="8"/>
      </attribs>
      <object id="patch/object" uuid="13633099-260f-4c22-b3bf-e6e7dd9ac81a">
         <sDescription>writes midi controler data to a table.set the start of the range of the controlers to read out with &apos;startcc&apos;,the length of the range with &apos;length&apos;.
the data is written to the table starting at &apos;offset&apos;.</sDescription>
         <author>robert schirmer</author>
         <license>BSD</license>
         <helpPatch>launchpad.axh</helpPatch>
         <rotatedParams>true</rotatedParams>
         <inlets>
            <int32 name="offset"/>
            <int32 name="startcc"/>
            <bool32.risingfalling name="active"/>
         </inlets>
         <outlets>
            <bool32.pulse name="chtrig" description="pulse if any cc value changes"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="offset">
               <MinValue i="0"/>
               <MaxValue i="1000000"/>
            </int32>
            <bool32.tgl name="active"/>
         </params>
         <attribs>
            <objref name="table"/>
            <spinner name="startcc" MinValue="0" MaxValue="127" DefaultValue="0"/>
            <spinner name="length" MinValue="1" MaxValue="128" DefaultValue="1"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int8_t cc;
int8_t cv;
uint8_t prevcv;
uint8_t prevcc;
uint8_t cvprev;

uint8_t end;
uint8_t start;
uint32_t offset;

bool chtrig;]]></code.declaration>
         <code.init><![CDATA[prevcv=  0;
prevcc = 0;
chtrig = 0;]]></code.init>
         <code.krate><![CDATA[start = attr_startcc + inlet_startcc;
end = start + attr_length;
offset = (inlet_offset + param_offset);
	
if ((inlet_active>0)&&(cv!=cvprev)){
if ((cc >= start) && (cc < end)) {

if ((cv != prevcv)||(cc != prevcc)){
      attr_table.array[(cc - start) + offset]= ((cv << 20) >>attr_table.GAIN);
      prevcv = cv; 
      prevcc = cc;
      chtrig = 1;   
   }  

   outlet_chtrig = chtrig;
  chtrig = 0;
}}
if (!(inlet_active>0)){cvprev=cv;}]]></code.krate>
         <code.midihandler><![CDATA[if (status == attr_midichannel + MIDI_CONTROL_CHANGE) {cc = data1;cv = data2;}]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="bf3086fe-a347-4f96-861a-305096d6e7b2" name="tableread_2" x="1526" y="546">
      <params>
         <int32 name="offset" value="36072"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="lcxl2"/>
      </attribs>
      <object id="patch/object" uuid="bf3086fe-a347-4f96-861a-305096d6e7b2">
         <sDescription>read 8 values from a table,starting from &apos;offset&apos;</sDescription>
         <author>robert schirmer</author>
         <license>who cares</license>
         <inlets>
            <int32 name="offset" description="sets an offset for writing to the table"/>
         </inlets>
         <outlets>
            <frac32 name="v0"/>
            <frac32 name="v1"/>
            <frac32 name="v2"/>
            <frac32 name="v3"/>
            <frac32 name="v4"/>
            <frac32 name="v5"/>
            <frac32 name="v6"/>
            <frac32 name="v7"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="offset" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="1000000"/>
            </int32>
         </params>
         <attribs>
            <objref name="table"/>
         </attribs>
         <includes/>
         <code.krate><![CDATA[outlet_v0= attr_table.array[__USAT(((inlet_offset + param_offset) + 0),attr_table.LENGTHPOW)]<<attr_table.GAIN;
outlet_v1= attr_table.array[__USAT(((inlet_offset + param_offset) + 1),attr_table.LENGTHPOW)]<<attr_table.GAIN;
outlet_v2= attr_table.array[__USAT(((inlet_offset + param_offset) + 2),attr_table.LENGTHPOW)]<<attr_table.GAIN;
outlet_v3= attr_table.array[__USAT(((inlet_offset + param_offset) + 3),attr_table.LENGTHPOW)]<<attr_table.GAIN;
outlet_v4= attr_table.array[__USAT(((inlet_offset + param_offset) + 4),attr_table.LENGTHPOW)]<<attr_table.GAIN;
outlet_v5= attr_table.array[__USAT(((inlet_offset + param_offset) + 5),attr_table.LENGTHPOW)]<<attr_table.GAIN;
outlet_v6= attr_table.array[__USAT(((inlet_offset + param_offset) + 6),attr_table.LENGTHPOW)]<<attr_table.GAIN;
outlet_v7= attr_table.array[__USAT(((inlet_offset + param_offset) + 7),attr_table.LENGTHPOW)]<<attr_table.GAIN;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="13633099-260f-4c22-b3bf-e6e7dd9ac81a" name="table_3" x="1666" y="546">
      <params>
         <int32 name="offset" value="36080"/>
         <bool32.tgl name="active" value="0"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="lcxl2"/>
         <spinner attributeName="startcc" value="29"/>
         <spinner attributeName="length" value="8"/>
      </attribs>
      <object id="patch/object" uuid="13633099-260f-4c22-b3bf-e6e7dd9ac81a">
         <sDescription>writes midi controler data to a table.set the start of the range of the controlers to read out with &apos;startcc&apos;,the length of the range with &apos;length&apos;.
the data is written to the table starting at &apos;offset&apos;.</sDescription>
         <author>robert schirmer</author>
         <license>BSD</license>
         <helpPatch>launchpad.axh</helpPatch>
         <rotatedParams>true</rotatedParams>
         <inlets>
            <int32 name="offset"/>
            <int32 name="startcc"/>
            <bool32.risingfalling name="active"/>
         </inlets>
         <outlets>
            <bool32.pulse name="chtrig" description="pulse if any cc value changes"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="offset">
               <MinValue i="0"/>
               <MaxValue i="1000000"/>
            </int32>
            <bool32.tgl name="active"/>
         </params>
         <attribs>
            <objref name="table"/>
            <spinner name="startcc" MinValue="0" MaxValue="127" DefaultValue="0"/>
            <spinner name="length" MinValue="1" MaxValue="128" DefaultValue="1"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int8_t cc;
int8_t cv;
uint8_t prevcv;
uint8_t prevcc;
uint8_t cvprev;

uint8_t end;
uint8_t start;
uint32_t offset;

bool chtrig;]]></code.declaration>
         <code.init><![CDATA[prevcv=  0;
prevcc = 0;
chtrig = 0;]]></code.init>
         <code.krate><![CDATA[start = attr_startcc + inlet_startcc;
end = start + attr_length;
offset = (inlet_offset + param_offset);
	
if ((inlet_active>0)&&(cv!=cvprev)){
if ((cc >= start) && (cc < end)) {

if ((cv != prevcv)||(cc != prevcc)){
      attr_table.array[(cc - start) + offset]= ((cv << 20) >>attr_table.GAIN);
      prevcv = cv; 
      prevcc = cc;
      chtrig = 1;   
   }  

   outlet_chtrig = chtrig;
  chtrig = 0;
}}
if (!(inlet_active>0)){cvprev=cv;}]]></code.krate>
         <code.midihandler><![CDATA[if (status == attr_midichannel + MIDI_CONTROL_CHANGE) {cc = data1;cv = data2;}]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="bf3086fe-a347-4f96-861a-305096d6e7b2" name="tableread_3" x="1792" y="546">
      <params>
         <int32 name="offset" value="36080"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="lcxl2"/>
      </attribs>
      <object id="patch/object" uuid="bf3086fe-a347-4f96-861a-305096d6e7b2">
         <sDescription>read 8 values from a table,starting from &apos;offset&apos;</sDescription>
         <author>robert schirmer</author>
         <license>who cares</license>
         <inlets>
            <int32 name="offset" description="sets an offset for writing to the table"/>
         </inlets>
         <outlets>
            <frac32 name="v0"/>
            <frac32 name="v1"/>
            <frac32 name="v2"/>
            <frac32 name="v3"/>
            <frac32 name="v4"/>
            <frac32 name="v5"/>
            <frac32 name="v6"/>
            <frac32 name="v7"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="offset" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="1000000"/>
            </int32>
         </params>
         <attribs>
            <objref name="table"/>
         </attribs>
         <includes/>
         <code.krate><![CDATA[outlet_v0= attr_table.array[__USAT(((inlet_offset + param_offset) + 0),attr_table.LENGTHPOW)]<<attr_table.GAIN;
outlet_v1= attr_table.array[__USAT(((inlet_offset + param_offset) + 1),attr_table.LENGTHPOW)]<<attr_table.GAIN;
outlet_v2= attr_table.array[__USAT(((inlet_offset + param_offset) + 2),attr_table.LENGTHPOW)]<<attr_table.GAIN;
outlet_v3= attr_table.array[__USAT(((inlet_offset + param_offset) + 3),attr_table.LENGTHPOW)]<<attr_table.GAIN;
outlet_v4= attr_table.array[__USAT(((inlet_offset + param_offset) + 4),attr_table.LENGTHPOW)]<<attr_table.GAIN;
outlet_v5= attr_table.array[__USAT(((inlet_offset + param_offset) + 5),attr_table.LENGTHPOW)]<<attr_table.GAIN;
outlet_v6= attr_table.array[__USAT(((inlet_offset + param_offset) + 6),attr_table.LENGTHPOW)]<<attr_table.GAIN;
outlet_v7= attr_table.array[__USAT(((inlet_offset + param_offset) + 7),attr_table.LENGTHPOW)]<<attr_table.GAIN;]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="1960" y="588" text="snapshot buttons out to malcolm and trevor"/>
   <comment type="patch/comment" x="2604" y="588" text="snapshot saving"/>
   <patchobj type="patch/object" uuid="0d32ae4e-4655-4099-8dd4-ba7ec518406c" name="launch_2" x="1960" y="602">
      <params/>
      <attribs>
         <spinner attributeName="channel" value="9"/>
      </attribs>
      <object id="patch/object" uuid="0d32ae4e-4655-4099-8dd4-ba7ec518406c">
         <sDescription>Monophonic MIDI keyboard note input, gate, velocity and release velocity, only responding to a range of notes</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>midi_in.axh</helpPatch>
         <inlets>
            <bool32 name="active"/>
         </inlets>
         <outlets>
            <frac32.bipolar name="note"/>
            <bool32 name="gate" description="key pressed?"/>
            <frac32.positive name="velocity" description="note-on velocity"/>
            <frac32.positive name="releaseVelocity" description="note-off velocity"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="9"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int8_t _note;
uint8_t _gate;
uint8_t _velo;
uint8_t _rvelo;]]></code.declaration>
         <code.init><![CDATA[_gate = 0;
_note = 0;]]></code.init>
         <code.krate><![CDATA[if (inlet_active == 0)
{
outlet_note= _note<<21;
outlet_gate= _gate<<27;
outlet_velocity= _velo<<20;
outlet_releaseVelocity= _rvelo<<20;
}
if (inlet_active == 1)
{
outlet_note= 0<<21;
outlet_gate= 0<<27;
outlet_velocity= 0<<20;
outlet_releaseVelocity= 0<<20;
}]]></code.krate>
         <code.midihandler><![CDATA[if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 41)) {
    _velo = data2;
    _note = 0;
    _gate = 1;
}
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 42)) {
    _velo = data2;
    _note = 1;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 43)) {
    _velo = data2;
    _note = 2;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 44)) {
    _velo = data2;
    _note = 3;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 57)) {
    _velo = data2;
    _note = 4;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 58)) {
    _velo = data2;
    _note = 5;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + + (attr_channel-1)) && (data2) && (data1 == 59)) {
    _velo = data2;
    _note = 6;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 60)) {
    _velo = data2;
    _note = 7;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 73)) {
    _velo = data2;
    _note = 8;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 74)) {
    _velo = data2;
    _note = 9;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 75)) {
    _velo = data2;
    _note = 10;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 76)) {
    _velo = data2;
    _note = 11;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 89)) {
    _velo = data2;
    _note = 12;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 90)) {
    _velo = data2;
    _note = 13;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 91)) {
    _velo = data2;
    _note = 14;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 92)) {
    _velo = data2;
    _note = 15;
    _gate = 1;
} 
else if (((status == MIDI_NOTE_ON + (attr_channel-1)) && (!data2))||          (status == MIDI_NOTE_OFF + (attr_channel-1))) {
  
    _rvelo = data2;
    _gate = 0;
  }
 
 else if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == MIDI_C_ALL_NOTES_OFF)) {
   _gate = 0;
}]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="f74d4123-79a0-439c-921e-fdbdc23d9ea4" name="note_4" x="2184" y="602">
      <params/>
      <attribs>
         <combo attributeName="device" selection="din"/>
         <spinner attributeName="channel" value="3"/>
      </attribs>
      <object id="patch/object" uuid="f74d4123-79a0-439c-921e-fdbdc23d9ea4">
         <sDescription>Midi note output</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>midi_out.axh</helpPatch>
         <inlets>
            <frac32.bipolar name="note" description="note (-64..63)"/>
            <frac32.positive name="velo" description="velocity"/>
            <bool32.rising name="trig" description="trigger"/>
            <bool32 name="active"/>
         </inlets>
         <outlets/>
         <displays/>
         <params/>
         <attribs>
            <combo name="device">
               <MenuEntries>
                  <string>din</string>
                  <string>usb host port 1</string>
                  <string>usb host port 2</string>
                  <string>usb host port 3</string>
                  <string>usb host port 4</string>
                  <string>internal port 1</string>
                  <string>internal port 2</string>
                  <string>usb device port 1</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_DIN, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 2</string>
                  <string>MIDI_DEVICE_USB_HOST, 3</string>
                  <string>MIDI_DEVICE_USB_HOST, 4</string>
                  <string>MIDI_DEVICE_INTERNAL, 1</string>
                  <string>MIDI_DEVICE_INTERNAL, 2</string>
                  <string>MIDI_DEVICE_USB_DEVICE, 1</string>
               </CEntries>
            </combo>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="0"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
int lastnote;]]></code.declaration>
         <code.init><![CDATA[ntrig=0;]]></code.init>
         <code.krate><![CDATA[if(inlet_active==1) {
if ((inlet_trig>0) && !ntrig) {
lastnote = (64+(inlet_note>>21))&0x7F;
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (attr_channel-1),lastnote,inlet_velo>>20);  ntrig=1;
}
if (!(inlet_trig>0) && ntrig) {MidiSend3((midi_device_t) attr_device, MIDI_NOTE_OFF + (attr_channel-1),lastnote,__USAT(inlet_velo>>20,7)); ntrig=0;}}]]></code.krate>
      </object>
   </patchobj>
   <obj type="table/alloc 16b sdram load" uuid="e6b85dad3ab43565cda93ea4c43c73b668b1cd43" name="preset" x="2324" y="602">
      <params/>
      <attribs>
         <combo attributeName="size" selection="1048576"/>
         <file attributeName="filename" file="/daughter1"/>
      </attribs>
   </obj>
   <patchobj type="patch/object" uuid="95be973d-88e7-4574-9dc4-fd9124484347" name="launch_9" x="2548" y="602">
      <params/>
      <attribs>
         <spinner attributeName="channel" value="9"/>
      </attribs>
      <object id="patch/object" uuid="95be973d-88e7-4574-9dc4-fd9124484347">
         <sDescription>Monophonic MIDI keyboard note input, gate, velocity and release velocity</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>midi_in.axh</helpPatch>
         <inlets>
            <bool32 name="active"/>
         </inlets>
         <outlets>
            <int32 name="snapshot"/>
            <bool32 name="save"/>
            <bool32 name="button1" description="key pressed?"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <spinner name="channel" MinValue="0" MaxValue="16" DefaultValue="0"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int note;
int snapshot;
int save;
int _gate1;]]></code.declaration>
         <code.krate><![CDATA[outlet_snapshot= snapshot;
outlet_save= save;
if (inlet_active>0){
outlet_button1= _gate1;}
else if (!(inlet_active>0)){
outlet_button1= 0;}]]></code.krate>
         <code.midihandler><![CDATA[if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2)&& (data1==108)) 
{save = 1;}
else if (((status == MIDI_NOTE_ON + (attr_channel-1)) && (!data2))||          (status == MIDI_NOTE_OFF + (attr_channel-1)&& (data1==108) )) 
{save = 0;}

if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2)) 

{	
if (data1 == 41) 
{
	snapshot=0;
   _gate1 = 1;
   note = data1;
}
if (data1 == 42) 
{
	snapshot=1;
   _gate1 = 1;
   note = data1;
}
if (data1 == 43) 
{
	snapshot=2;
   _gate1 = 1;
   note = data1;
}if (data1 == 44) 
{
	snapshot=3;
   _gate1 = 1;
   note = data1;
}

if (data1 == 57) 
{
	snapshot=4;
   _gate1 = 1;
   note = data1;
}
if (data1 == 58) 
{
	snapshot=5;
   _gate1 = 1;
   note = data1;
}
if (data1 == 59) 
{
	snapshot=6;
   _gate1 = 1;
   note = data1;
}if (data1 == 60) 
{
	snapshot=7;
   _gate1 = 1;
   note = data1;
}

if (data1 == 73) 
{
	snapshot=8;
   _gate1 = 1;
   note = data1;
}
if (data1 == 74) 
{
	snapshot=9;
   _gate1 = 1;
   note = data1;
}
if (data1 == 75) 
{
	snapshot=10;
   _gate1 = 1;
   note = data1;
}if (data1 == 76) 
{
	snapshot=11;
   _gate1 = 1;
   note = data1;
}

if (data1 == 89) 
{
	snapshot=12;
   _gate1 = 1;
   note = data1;
}
if (data1 == 90) 
{
	snapshot=13;
   _gate1 = 1;
   note = data1;
}
if (data1 == 91) 
{
	snapshot=14;
   _gate1 = 1;
   note = data1;
}if (data1 == 92) 
{
	snapshot=15;
   _gate1 = 1;
   note = data1;
}
}

else if (((status == MIDI_NOTE_ON + (attr_channel-1)) && (!data2))||          (status == MIDI_NOTE_OFF + (attr_channel-1))) 
	
if (data1 == note) 
{
   _gate1 = 0;
}]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="dcefc491-221f-4521-bad8-87185f5df137" name="tcopy_1" x="2646" y="602">
      <params>
         <int32 name="range" value="36088"/>
         <bool32.tgl name="splat" value="0"/>
         <bool32.tgl name="clear" value="0"/>
      </params>
      <attribs>
         <objref attributeName="preset" obj="preset"/>
         <objref attributeName="play" obj="lcxl2"/>
      </attribs>
      <object id="patch/object" uuid="dcefc491-221f-4521-bad8-87185f5df137">
         <sDescription>copy the elements of a table from table &apos;src&apos; to table &apos;dst&apos;
the length of the area to copy is defined by &apos;range&apos;,
the read offset is defined by inlet&apos;src&apos; and the write offset by &apos;dst&apos;
&apos;speed&apos; sets the copying speed in terms of audio-rate (16 is really fast!)
if &apos;splat&apos; is enabled,tcopy will preserve the original contents of the destination table.
if &apos;clear&apos; is enabled,tcopy will clear the contents of the table.</sDescription>
         <author>Robert Schirmer</author>
         <license>BSD</license>
         <helpPatch>data.axh</helpPatch>
         <inlets>
            <bool32 name="save"/>
            <int32 name="snapshot"/>
            <bool32.rising name="trig" description="start copying"/>
         </inlets>
         <outlets/>
         <displays/>
         <params>
            <int32 name="range">
               <MinValue i="1"/>
               <MaxValue i="2097152"/>
            </int32>
            <bool32.tgl name="splat" description="add to src contents"/>
            <bool32.tgl name="clear" description="clear dst"/>
         </params>
         <attribs>
            <objref name="preset" description="name of the source -table"/>
            <objref name="play" description="name of the destination - table"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[uint32_t i;
uint32_t ii;
int ntrig;
int rtrig;

int speed;
uint32_t src;
uint32_t dst;
uint32_t range;
uint32_t block;]]></code.declaration>
         <code.krate><![CDATA[//load
if (!(inlet_save>0))
{
speed = 16 << 4;
src = (inlet_snapshot*param_range);
dst = 0;
range = param_range;

block  = (range / speed) * speed;

if ((inlet_trig)&& (!ntrig)){ ntrig = 1;i = 0;rtrig = 0;}
if ((i == range) && (!inlet_trig)) {ntrig = 0;;i = 0;}

//copy n chunks of size 'speed'
if (ntrig && (i < block)){ 
	{ 
  for(ii=0;ii<speed;ii++)
  attr_play.array[(i + ii + dst)]= (( attr_preset.array[(i + ii + src)] + (attr_play.array[(i + ii + dst)] * param_splat)) * (!param_clear));
  }
  i += speed;	
}

//copy what's left
if (i == block) rtrig = 1; 

if ((ntrig && rtrig) && (i < (range))){ 
	attr_play.array[(i + dst)]= (( attr_preset.array[(i + src)] + (attr_play.array[(i + dst)] * param_splat)) * (!param_clear));
   i += 1;  
 }
}



//save
else if (inlet_save>0)
{
speed = 16 << 4;
src = 0;
dst = (inlet_snapshot*param_range);
range = param_range;

block  = (range / speed) * speed;

if ((inlet_trig)&& (!ntrig)){ ntrig = 1;i = 0;rtrig = 0;}
if ((i == range) && (!inlet_trig)) {ntrig = 0;i = 0;}

//copy n chunks of size 'speed'
if (ntrig && (i < block)){ 
	{ 
  for(ii=0;ii<speed;ii++)
  attr_preset.array[(i + ii + dst)]= (( attr_play.array[(i + ii + src)] + (attr_preset.array[(i + ii + dst)] * param_splat)) * (!param_clear));
  }
  i += speed;	
}

//copy what's left
if (i == block) rtrig = 1; 

if ((ntrig && rtrig) && (i < (range))){ 
	attr_preset.array[(i + dst)]= (( attr_play.array[(i + src)] + (attr_preset.array[(i + dst)] * param_splat)) * (!param_clear));
   i += 1;  
 }
}]]></code.krate>
      </object>
   </patchobj>
   <obj type="midi/note out gate" uuid="a8b48ecf-79f1-4cb3-8193-aee6983e5198" name="note_12" x="2786" y="602">
      <params/>
      <attribs>
         <combo attributeName="device" selection="din"/>
         <spinner attributeName="channel" value="3"/>
         <spinner attributeName="note" value="20"/>
      </attribs>
   </obj>
   <comment type="patch/comment" x="1400" y="756" text="row 3 shift"/>
   <patchobj type="patch/object" uuid="13633099-260f-4c22-b3bf-e6e7dd9ac81a" name="table_1" x="1358" y="784">
      <params>
         <int32 name="offset" value="36064"/>
         <bool32.tgl name="active" value="0"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="lcxl2"/>
         <spinner attributeName="startcc" value="49"/>
         <spinner attributeName="length" value="8"/>
      </attribs>
      <object id="patch/object" uuid="13633099-260f-4c22-b3bf-e6e7dd9ac81a">
         <sDescription>writes midi controler data to a table.set the start of the range of the controlers to read out with &apos;startcc&apos;,the length of the range with &apos;length&apos;.
the data is written to the table starting at &apos;offset&apos;.</sDescription>
         <author>robert schirmer</author>
         <license>BSD</license>
         <helpPatch>launchpad.axh</helpPatch>
         <rotatedParams>true</rotatedParams>
         <inlets>
            <int32 name="offset"/>
            <int32 name="startcc"/>
            <bool32.risingfalling name="active"/>
         </inlets>
         <outlets>
            <bool32.pulse name="chtrig" description="pulse if any cc value changes"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="offset">
               <MinValue i="0"/>
               <MaxValue i="1000000"/>
            </int32>
            <bool32.tgl name="active"/>
         </params>
         <attribs>
            <objref name="table"/>
            <spinner name="startcc" MinValue="0" MaxValue="127" DefaultValue="0"/>
            <spinner name="length" MinValue="1" MaxValue="128" DefaultValue="1"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int8_t cc;
int8_t cv;
uint8_t prevcv;
uint8_t prevcc;
uint8_t cvprev;

uint8_t end;
uint8_t start;
uint32_t offset;

bool chtrig;]]></code.declaration>
         <code.init><![CDATA[prevcv=  0;
prevcc = 0;
chtrig = 0;]]></code.init>
         <code.krate><![CDATA[start = attr_startcc + inlet_startcc;
end = start + attr_length;
offset = (inlet_offset + param_offset);
	
if ((inlet_active>0)&&(cv!=cvprev)){
if ((cc >= start) && (cc < end)) {

if ((cv != prevcv)||(cc != prevcc)){
      attr_table.array[(cc - start) + offset]= ((cv << 20) >>attr_table.GAIN);
      prevcv = cv; 
      prevcc = cc;
      chtrig = 1;   
   }  

   outlet_chtrig = chtrig;
  chtrig = 0;
}}
if (!(inlet_active>0)){cvprev=cv;}]]></code.krate>
         <code.midihandler><![CDATA[if (status == attr_midichannel + MIDI_CONTROL_CHANGE) {cc = data1;cv = data2;}]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="bf3086fe-a347-4f96-861a-305096d6e7b2" name="tableread_1" x="1498" y="784">
      <params>
         <int32 name="offset" value="36064"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="lcxl2"/>
      </attribs>
      <object id="patch/object" uuid="bf3086fe-a347-4f96-861a-305096d6e7b2">
         <sDescription>read 8 values from a table,starting from &apos;offset&apos;</sDescription>
         <author>robert schirmer</author>
         <license>who cares</license>
         <inlets>
            <int32 name="offset" description="sets an offset for writing to the table"/>
         </inlets>
         <outlets>
            <frac32 name="v0"/>
            <frac32 name="v1"/>
            <frac32 name="v2"/>
            <frac32 name="v3"/>
            <frac32 name="v4"/>
            <frac32 name="v5"/>
            <frac32 name="v6"/>
            <frac32 name="v7"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="offset" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="1000000"/>
            </int32>
         </params>
         <attribs>
            <objref name="table"/>
         </attribs>
         <includes/>
         <code.krate><![CDATA[outlet_v0= attr_table.array[__USAT(((inlet_offset + param_offset) + 0),attr_table.LENGTHPOW)]<<attr_table.GAIN;
outlet_v1= attr_table.array[__USAT(((inlet_offset + param_offset) + 1),attr_table.LENGTHPOW)]<<attr_table.GAIN;
outlet_v2= attr_table.array[__USAT(((inlet_offset + param_offset) + 2),attr_table.LENGTHPOW)]<<attr_table.GAIN;
outlet_v3= attr_table.array[__USAT(((inlet_offset + param_offset) + 3),attr_table.LENGTHPOW)]<<attr_table.GAIN;
outlet_v4= attr_table.array[__USAT(((inlet_offset + param_offset) + 4),attr_table.LENGTHPOW)]<<attr_table.GAIN;
outlet_v5= attr_table.array[__USAT(((inlet_offset + param_offset) + 5),attr_table.LENGTHPOW)]<<attr_table.GAIN;
outlet_v6= attr_table.array[__USAT(((inlet_offset + param_offset) + 6),attr_table.LENGTHPOW)]<<attr_table.GAIN;
outlet_v7= attr_table.array[__USAT(((inlet_offset + param_offset) + 7),attr_table.LENGTHPOW)]<<attr_table.GAIN;]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="2814" y="812" text="bass station"/>
   <patchobj type="patch/object" uuid="e014d977-1616-42c7-8d70-679307220b23" name="cc_11" x="2842" y="854">
      <params>
         <int32 name="startcc" value="16"/>
      </params>
      <attribs>
         <combo attributeName="device" selection="din"/>
         <spinner attributeName="channel" value="7"/>
      </attribs>
      <object id="patch/object" uuid="e014d977-1616-42c7-8d70-679307220b23">
         <sDescription>sends 4 midi control changes,starting from &apos;startcc&apos;</sDescription>
         <author>robert schirmer</author>
         <license>who cares</license>
         <helpPatch>midi_out.axh</helpPatch>
         <inlets>
            <frac32.positive name="v0"/>
            <int32 name="startcc"/>
         </inlets>
         <outlets/>
         <displays/>
         <params>
            <int32 name="startcc" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="127"/>
            </int32>
         </params>
         <attribs>
            <combo name="device">
               <MenuEntries>
                  <string>din</string>
                  <string>usb host port 1</string>
                  <string>usb host port 2</string>
                  <string>usb host port 3</string>
                  <string>usb host port 4</string>
                  <string>internal port 1</string>
                  <string>internal port 2</string>
                  <string>usb device port 1</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_DIN, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 2</string>
                  <string>MIDI_DEVICE_USB_HOST, 3</string>
                  <string>MIDI_DEVICE_USB_HOST, 4</string>
                  <string>MIDI_DEVICE_INTERNAL, 1</string>
                  <string>MIDI_DEVICE_INTERNAL, 2</string>
                  <string>MIDI_DEVICE_USB_DEVICE, 1</string>
               </CEntries>
            </combo>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="0"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[uint32_t prev0;]]></code.declaration>
         <code.krate><![CDATA[if (inlet_v0 != prev0) {	
MidiSend3((midi_device_t) attr_device, MIDI_CONTROL_CHANGE + (attr_channel-1),0 + inlet_startcc + param_startcc,inlet_v0 >>20);prev0 = inlet_v0; 
}]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="e014d977-1616-42c7-8d70-679307220b23" name="cc_8" x="2758" y="980">
      <params>
         <int32 name="startcc" value="7"/>
      </params>
      <attribs>
         <combo attributeName="device" selection="din"/>
         <spinner attributeName="channel" value="7"/>
      </attribs>
      <object id="patch/object" uuid="e014d977-1616-42c7-8d70-679307220b23">
         <sDescription>sends 4 midi control changes,starting from &apos;startcc&apos;</sDescription>
         <author>robert schirmer</author>
         <license>who cares</license>
         <helpPatch>midi_out.axh</helpPatch>
         <inlets>
            <frac32.positive name="v0"/>
            <int32 name="startcc"/>
         </inlets>
         <outlets/>
         <displays/>
         <params>
            <int32 name="startcc" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="127"/>
            </int32>
         </params>
         <attribs>
            <combo name="device">
               <MenuEntries>
                  <string>din</string>
                  <string>usb host port 1</string>
                  <string>usb host port 2</string>
                  <string>usb host port 3</string>
                  <string>usb host port 4</string>
                  <string>internal port 1</string>
                  <string>internal port 2</string>
                  <string>usb device port 1</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_DIN, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 2</string>
                  <string>MIDI_DEVICE_USB_HOST, 3</string>
                  <string>MIDI_DEVICE_USB_HOST, 4</string>
                  <string>MIDI_DEVICE_INTERNAL, 1</string>
                  <string>MIDI_DEVICE_INTERNAL, 2</string>
                  <string>MIDI_DEVICE_USB_DEVICE, 1</string>
               </CEntries>
            </combo>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="0"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[uint32_t prev0;]]></code.declaration>
         <code.krate><![CDATA[if (inlet_v0 != prev0) {	
MidiSend3((midi_device_t) attr_device, MIDI_CONTROL_CHANGE + (attr_channel-1),0 + inlet_startcc + param_startcc,inlet_v0 >>20);prev0 = inlet_v0; 
}]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="e014d977-1616-42c7-8d70-679307220b23" name="cc_9" x="2912" y="980">
      <params>
         <int32 name="startcc" value="82"/>
      </params>
      <attribs>
         <combo attributeName="device" selection="din"/>
         <spinner attributeName="channel" value="7"/>
      </attribs>
      <object id="patch/object" uuid="e014d977-1616-42c7-8d70-679307220b23">
         <sDescription>sends 4 midi control changes,starting from &apos;startcc&apos;</sDescription>
         <author>robert schirmer</author>
         <license>who cares</license>
         <helpPatch>midi_out.axh</helpPatch>
         <inlets>
            <frac32.positive name="v0"/>
            <int32 name="startcc"/>
         </inlets>
         <outlets/>
         <displays/>
         <params>
            <int32 name="startcc" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="127"/>
            </int32>
         </params>
         <attribs>
            <combo name="device">
               <MenuEntries>
                  <string>din</string>
                  <string>usb host port 1</string>
                  <string>usb host port 2</string>
                  <string>usb host port 3</string>
                  <string>usb host port 4</string>
                  <string>internal port 1</string>
                  <string>internal port 2</string>
                  <string>usb device port 1</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_DIN, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 2</string>
                  <string>MIDI_DEVICE_USB_HOST, 3</string>
                  <string>MIDI_DEVICE_USB_HOST, 4</string>
                  <string>MIDI_DEVICE_INTERNAL, 1</string>
                  <string>MIDI_DEVICE_INTERNAL, 2</string>
                  <string>MIDI_DEVICE_USB_DEVICE, 1</string>
               </CEntries>
            </combo>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="0"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[uint32_t prev0;]]></code.declaration>
         <code.krate><![CDATA[if (inlet_v0 != prev0) {	
MidiSend3((midi_device_t) attr_device, MIDI_CONTROL_CHANGE + (attr_channel-1),0 + inlet_startcc + param_startcc,inlet_v0 >>20);prev0 = inlet_v0; 
}]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="e014d977-1616-42c7-8d70-679307220b23" name="cc_10" x="3066" y="980">
      <params>
         <int32 name="startcc" value="115"/>
      </params>
      <attribs>
         <combo attributeName="device" selection="din"/>
         <spinner attributeName="channel" value="7"/>
      </attribs>
      <object id="patch/object" uuid="e014d977-1616-42c7-8d70-679307220b23">
         <sDescription>sends 4 midi control changes,starting from &apos;startcc&apos;</sDescription>
         <author>robert schirmer</author>
         <license>who cares</license>
         <helpPatch>midi_out.axh</helpPatch>
         <inlets>
            <frac32.positive name="v0"/>
            <int32 name="startcc"/>
         </inlets>
         <outlets/>
         <displays/>
         <params>
            <int32 name="startcc" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="127"/>
            </int32>
         </params>
         <attribs>
            <combo name="device">
               <MenuEntries>
                  <string>din</string>
                  <string>usb host port 1</string>
                  <string>usb host port 2</string>
                  <string>usb host port 3</string>
                  <string>usb host port 4</string>
                  <string>internal port 1</string>
                  <string>internal port 2</string>
                  <string>usb device port 1</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_DIN, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 2</string>
                  <string>MIDI_DEVICE_USB_HOST, 3</string>
                  <string>MIDI_DEVICE_USB_HOST, 4</string>
                  <string>MIDI_DEVICE_INTERNAL, 1</string>
                  <string>MIDI_DEVICE_INTERNAL, 2</string>
                  <string>MIDI_DEVICE_USB_DEVICE, 1</string>
               </CEntries>
            </combo>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="0"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[uint32_t prev0;]]></code.declaration>
         <code.krate><![CDATA[if (inlet_v0 != prev0) {	
MidiSend3((midi_device_t) attr_device, MIDI_CONTROL_CHANGE + (attr_channel-1),0 + inlet_startcc + param_startcc,inlet_v0 >>20);prev0 = inlet_v0; 
}]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="1102" y="1035" text="delay mod"/>
   <obj type="table/alloc 32b sdram" uuid="1a4546b7b52747ea765093ac97444601c44721e8" name="rec" x="700" y="1050">
      <params/>
      <attribs>
         <combo attributeName="size" selection="1048576"/>
         <text attributeName="init">
            <sText><![CDATA[]]></sText>
         </text>
      </attribs>
   </obj>
   <comment type="patch/comment" x="1068" y="1063" text="lfo speed"/>
   <comment type="patch/comment" x="1288" y="1064" text="lfo dpth"/>
   <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="*c_5" x="966" y="1078">
      <params>
         <frac32.u.map name="amp" value="32.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="conv/unipolar2bipolar" uuid="efc8ee28c508740c5edf7995eaaa07a6d6818e5e" name="unipolar2bipolar_3" x="1064" y="1078">
      <params/>
      <attribs/>
   </obj>
   <obj type="drj/lfo/tri_ph_p" uuid="ef2a164985b533c6e46ce43c0decba17b1862d85" name="tri_ph_p_1" x="1190" y="1078">
      <params>
         <frac32.s.map name="pitch" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_2" x="1288" y="1078">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="*c_4" x="1344" y="1078">
      <params>
         <frac32.u.map name="amp" value="14.699999809265137"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="*c_6" x="1498" y="1078">
      <params>
         <frac32.u.map name="amp" value="6.0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1694" y="1092" text="clear loop"/>
   <obj type="midi/note in gate" uuid="b08779f8-6dd0-4d7d-9f55-0d4f15d7fb32" name="note_18" x="1694" y="1106">
      <params/>
      <attribs>
         <spinner attributeName="note" value="6"/>
         <spinner attributeName="channel" value="5"/>
      </attribs>
   </obj>
   <obj type="rbrt/data/tcopy" uuid="d4c37687-69fd-442f-b560-b32c25224396" name="tcopy_2" x="1834" y="1106">
      <params>
         <int32 name="src" value="0"/>
         <int32 name="dst" value="0"/>
         <int32 name="range" value="1048576"/>
         <bool32.tgl name="splat" value="0"/>
         <bool32.tgl name="clear" value="1"/>
      </params>
      <attribs>
         <objref attributeName="src" obj="rec"/>
         <objref attributeName="dst" obj="rec"/>
         <spinner attributeName="speed" value="1"/>
      </attribs>
   </obj>
   <obj type="rbrt/midi/out/cc send 4" uuid="29673ede-ad04-49ea-bb7a-3ecf7cdcf098" name="cc_6" x="2758" y="1120">
      <params>
         <int32 name="startcc" value="90"/>
      </params>
      <attribs>
         <combo attributeName="device" selection="din"/>
         <spinner attributeName="channel" value="7"/>
      </attribs>
   </obj>
   <obj type="rbrt/midi/out/cc send 4" uuid="29673ede-ad04-49ea-bb7a-3ecf7cdcf098" name="cc_7" x="2898" y="1120">
      <params>
         <int32 name="startcc" value="102"/>
      </params>
      <attribs>
         <combo attributeName="device" selection="din"/>
         <spinner attributeName="channel" value="7"/>
      </attribs>
   </obj>
   <patchobj type="patch/object" uuid="e014d977-1616-42c7-8d70-679307220b23" name="cc_5" x="3038" y="1120">
      <params>
         <int32 name="startcc" value="85"/>
      </params>
      <attribs>
         <combo attributeName="device" selection="din"/>
         <spinner attributeName="channel" value="7"/>
      </attribs>
      <object id="patch/object" uuid="e014d977-1616-42c7-8d70-679307220b23">
         <sDescription>sends 4 midi control changes,starting from &apos;startcc&apos;</sDescription>
         <author>robert schirmer</author>
         <license>who cares</license>
         <helpPatch>midi_out.axh</helpPatch>
         <inlets>
            <frac32.positive name="v0"/>
            <int32 name="startcc"/>
         </inlets>
         <outlets/>
         <displays/>
         <params>
            <int32 name="startcc" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="127"/>
            </int32>
         </params>
         <attribs>
            <combo name="device">
               <MenuEntries>
                  <string>din</string>
                  <string>usb host port 1</string>
                  <string>usb host port 2</string>
                  <string>usb host port 3</string>
                  <string>usb host port 4</string>
                  <string>internal port 1</string>
                  <string>internal port 2</string>
                  <string>usb device port 1</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_DIN, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 2</string>
                  <string>MIDI_DEVICE_USB_HOST, 3</string>
                  <string>MIDI_DEVICE_USB_HOST, 4</string>
                  <string>MIDI_DEVICE_INTERNAL, 1</string>
                  <string>MIDI_DEVICE_INTERNAL, 2</string>
                  <string>MIDI_DEVICE_USB_DEVICE, 1</string>
               </CEntries>
            </combo>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="0"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[uint32_t prev0;]]></code.declaration>
         <code.krate><![CDATA[if (inlet_v0 != prev0) {	
MidiSend3((midi_device_t) attr_device, MIDI_CONTROL_CHANGE + (attr_channel-1),0 + inlet_startcc + param_startcc,inlet_v0 >>20);prev0 = inlet_v0; 
}]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="476" y="1162" text="loop record"/>
   <comment type="patch/comment" x="742" y="1162" text="stop"/>
   <obj type="midi/note in gate" uuid="b08779f8-6dd0-4d7d-9f55-0d4f15d7fb32" name="note_17" x="742" y="1176">
      <params/>
      <attribs>
         <spinner attributeName="note" value="5"/>
         <spinner attributeName="channel" value="5"/>
      </attribs>
   </obj>
   <obj type="audio/in right" uuid="5f35c9f87b3f291a8120a10db71935bebd186469" name="in_2" x="420" y="1190">
      <params/>
      <attribs/>
   </obj>
   <obj type="rbrt/looper/lrec" uuid="2e5874a9-b38b-40bf-8dda-03863ab6ca59" name="lrec_1" x="546" y="1190">
      <params>
         <frac32.s.map name="attack" value="-64.0"/>
         <bool32.tgl name="hard" value="0"/>
         <frac32.s.map name="release" value="-26.0"/>
         <bool32.tgl name="nofade" value="0"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="rec"/>
         <combo attributeName="slots" selection="1"/>
      </attribs>
   </obj>
   <comment type="patch/comment" x="2156" y="1190" text="lfo speed"/>
   <comment type="patch/comment" x="2366" y="1190" text="lfo dpth"/>
   <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="*c_10" x="2156" y="1204">
      <params>
         <frac32.u.map name="amp" value="49.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="conv/unipolar2bipolar" uuid="efc8ee28c508740c5edf7995eaaa07a6d6818e5e" name="unipolar2bipolar_5" x="2254" y="1204">
      <params/>
      <attribs/>
   </obj>
   <obj type="drj/lfo/tri_ph_p" uuid="ef2a164985b533c6e46ce43c0decba17b1862d85" name="tri_ph_p_3" x="2380" y="1204">
      <params>
         <frac32.s.map name="pitch" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_4" x="2478" y="1204">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="*c_11" x="2534" y="1204">
      <params>
         <frac32.u.map name="amp" value="64.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_3" x="1036" y="1218">
      <params>
         <frac32.u.map name="value" value="64.0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1148" y="1218" text="loop play"/>
   <comment type="patch/comment" x="1400" y="1218" text="avoid clipping when recording"/>
   <patchobj type="patch/object" uuid="7238340b-e114-4fb5-91bb-2fce4ed1b381" name="ldrive_1" x="1148" y="1232">
      <params>
         <frac32.s.map name="speed" value="64.0"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="rec"/>
      </attribs>
      <object id="patch/object" uuid="7238340b-e114-4fb5-91bb-2fce4ed1b381">
         <sDescription>drives a phasor (saw-wave) for reading/writing data</sDescription>
         <author>robert schirmer</author>
         <license>BSD</license>
         <helpPatch>ldrive.axh</helpPatch>
         <inlets>
            <frac32.positive name="offset" description="offset inside the table"/>
            <frac32.positive name="range" description="length of the area to index,or loop end"/>
            <frac32.positive name="startpoint" description="position inside range on reset"/>
            <frac32.positive name="loopstart" description="loopstart inside range"/>
            <frac32.bipolar name="speed" description="speed modulation"/>
            <bool32.risingfalling name="play" description="toggle playback"/>
            <bool32.rising name="r2offset" description="reset to &apos;offset&apos;"/>
            <bool32.rising name="r2start" description="reset to &apos;startpoint&apos;"/>
         </inlets>
         <outlets>
            <frac32buffer.positive name="pos" description="relative position inside table"/>
            <int32 name="count" description="loop count since reset"/>
            <int32 name="spos" description="playhead position inside range in samples"/>
            <int32 name="stotal" description="length of range in samples"/>
            <int32 name="sloop" description="length of loop in samples"/>
            <frac32.bipolar name="speed" description="total speed"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map name="speed" description="speed ,+ 64 normal speed forward, - 64 backward" noLabel="true">
               <DefaultValue v="64.0"/>
            </frac32.s.map>
         </params>
         <attribs>
            <objref name="table"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int32_t index;
bool rrs;
bool rro;
uint8_t shift;

int ntrig;

int32_t t_speed;
int32_t re;
int32_t rs;

int32_t start;
int32_t loopstart;
int32_t R;
int32_t lrange;
int32_t lstart;

uint32_t count;
bool add;
bool play;
bool mode;]]></code.declaration>
         <code.init><![CDATA[shift =     (27-attr_table.LENGTHPOW);
R=64;]]></code.init>
         <code.krate><![CDATA[loopstart = ___SMMUL(inlet_range,inlet_loopstart)<<5;
add = inlet_range;
//scale ranges up 8 times to achieve decent resolution for parameter speed
lrange = inlet_range << 3;
lstart = loopstart << 3;
start = ___SMMUL(inlet_range,inlet_startpoint)<< 8;
t_speed =  (((inlet_speed + param_speed ) << 3) >> attr_table.LENGTHPOW) + ((inlet_speed + param_speed ) > 0);


 play = inlet_play;
      if (inlet_r2start && (!rrs)) {
         index = start;
         rrs = 1;
         count = 0;
      }
      if (inlet_r2offset && (!rro)) {
         index = 0;
         rro = 1;
         count = 0;
      }
      if (!inlet_r2offset) rro = 0;
      if (!inlet_r2start) rrs = 0;

      if (!inlet_range) play = 0;

outlet_count = (inlet_play) ? count : -1;
outlet_spos =  (((index >> 3) >> shift) > 0) ? ((index >> 3)>> shift) : 0;
outlet_stotal = inlet_range >> shift;
outlet_sloop = (inlet_range - loopstart)>>shift;
outlet_speed = inlet_speed + param_speed;]]></code.krate>
         <code.srate><![CDATA[if (t_speed > 0){
      if (index >= lrange){index = lstart;count += add;} 
      } 
      else{
      if (index <= lstart){ index = lrange;count +=add;}  
          }    

if (play) {outlet_pos =  __USAT(((index >> 3) + inlet_offset),27);index += t_speed;}
else outlet_pos = 1 << 27;]]></code.srate>
      </object>
   </patchobj>
   <obj type="table/read interp" uuid="42918ec2255011ae3787cc5488c9b29980d796a8" name="read_1" x="1316" y="1232">
      <params/>
      <attribs>
         <objref attributeName="table" obj="rec"/>
      </attribs>
   </obj>
   <obj type="math/*" uuid="c16a625a661f40e4b359db604dcd00b3befcdbe3" name="*_1" x="1442" y="1232">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_1" x="1526" y="1232">
      <params/>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_4" x="1610" y="1232">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1372" y="1316" text="loop overdub"/>
   <obj type="math/+" uuid="44553fdc8628c67ab535845ed1be304ad6c9553b" name="+_5" x="2226" y="1316">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/change" uuid="96e39ae624c3f3c952cec4a95e1986ee0104f718" name="change_2" x="728" y="1330">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/inv" uuid="2bd44b865d3b63ff9b80862242bf5be779e3ad5" name="inv_3" x="826" y="1330">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/flipflop toggle" uuid="195e489e5fc3d275944b0de56c7a91c8641ea22a" name="flipflop_7" x="924" y="1330">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/or 2" uuid="3805d3c84d30032a44fbdbe42d9a2988a1790a3e" name="or_2" x="1050" y="1330">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/and 2" uuid="c67031682f552aa0a80b23377495c51ea28a8c9c" name="and_18" x="1288" y="1330">
      <params/>
      <attribs/>
   </obj>
   <obj type="rbrt/looper/ldub" uuid="5902f84f-1523-451f-bddb-7f12c8ced857" name="ldub_1" x="1358" y="1330">
      <params>
         <frac32.u.map name="feedback" value="64.0"/>
         <frac32.s.map name="attack" value="-63.0"/>
         <bool32.tgl name="hard" value="0"/>
         <frac32.s.map name="release" value="0.0"/>
         <bool32.tgl name="nofade" value="0"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="rec"/>
      </attribs>
   </obj>
   <obj type="conv/unipolar2bipolar" uuid="efc8ee28c508740c5edf7995eaaa07a6d6818e5e" name="unipolar2bipolar_6" x="2310" y="1330">
      <params/>
      <attribs/>
   </obj>
   <obj type="TSG/math/limit" uuid="96549a9d-cf2a-4b5c-b9b1-58b08745c3fe" name="limit_1" x="2436" y="1330">
      <params/>
      <attribs>
         <spinner attributeName="max" value="64"/>
         <spinner attributeName="min" value="-64"/>
      </attribs>
   </obj>
   <obj type="disp/dial b" uuid="9ffed04e6a3052d9001eda83bae7024cb6d17037" name="dial_4" x="2534" y="1330">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1806" y="1386" text="delay"/>
   <obj type="rbrt/patching/loadbang" uuid="45d1f29d-ac62-4e5b-86f8-2201d2f6c689" name="loadbang_1" x="784" y="1400">
      <params/>
      <attribs/>
   </obj>
   <obj type="phi/logic/or 4" uuid="5dc5a7c1fb7809522171638f755fead71cbe14ea" name="or_3" x="924" y="1400">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="*c_3" x="1540" y="1400">
      <params>
         <frac32.u.map name="amp" value="47.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_5" x="1638" y="1400">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="b22acb60-48df-4da1-bbf3-2f5a420b9c70" name="lp_1" x="1722" y="1400">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="b22acb60-48df-4da1-bbf3-2f5a420b9c70">
         <sDescription>Low pass filter, state-variable type</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>filter.axh</helpPatch>
         <inlets>
            <frac32buffer name="in" description="filter input"/>
            <frac32.bipolar name="filter"/>
            <frac32.positive name="reso"/>
         </inlets>
         <outlets>
            <frac32buffer name="out" description="filter output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t low;
int32_t band;]]></code.declaration>
         <code.init><![CDATA[low = 0;
band = 0;]]></code.init>
         <code.krate><![CDATA[int32_t damp = (0x80<<24) - (inlet_reso<<4);
damp = ___SMMUL(damp,damp);
int32_t alpha;
int32_t freq;
MTOFEXTENDED(inlet_filter,alpha);
SINE2TINTERP(alpha,freq);]]></code.krate>
         <code.srate><![CDATA[int32_t in1 = inlet_in;
int32_t notch = inlet_in - (___SMMUL(damp,band)<<1);
low = low + (___SMMUL(freq,band)<<1);
int32_t high  = notch - low;
band = (___SMMUL(freq,high)<<1) + band;// - drive*band*band*band;
int32_t out1 = low;
outlet_out = out1;]]></code.srate>
      </object>
   </patchobj>
   <patcher type="patch/patcher" uuid="ba37fd1e-48e0-41fe-b9e5-e0ca02e87758" name="obj_2" x="1806" y="1400">
      <params>
         <frac32.s.map name="lowpass_1" value="-1.0"/>
         <int32 name="read_interp_sync_1:clockmul" value="4"/>
         <int32 name="read_interp_sync_1:clockdiv" value="1"/>
         <frac32.u.map name="read_interp_sync_1:time" value="0.0"/>
      </params>
      <attribs/>
      <subpatch appVersion="1.0.12">
         <obj type="patch/inlet a" uuid="b577fe41e0a6bc7b5502ce33cb8a3129e2e28ee5" name="audio-in" x="84" y="14">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/inlet b" uuid="3b0d3eacb5bb978cb05d1372aa2714d5a4790844" name="24ppq" x="84" y="56">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/inlet f" uuid="5c585d2dcd9c05631e345ac09626a22a639d7c13" name="div" x="84" y="98">
            <params/>
            <attribs/>
         </obj>
         <obj type="midi/scale" uuid="68791136-f771-4a6c-ae09-5f0b8744dde4" name="scale_1" x="406" y="140">
            <params>
               <frac32.u.map name="a" value="0.0"/>
               <frac32.u.map name="b" value="11.0"/>
            </params>
            <attribs/>
         </obj>
         <patchobj type="patch/object" uuid="48f0d302-e63c-4e8e-8db4-51a74e6ceef6" name="mux_2" x="490" y="168">
            <params/>
            <attribs/>
            <object id="patch/object" uuid="48f0d302-e63c-4e8e-8db4-51a74e6ceef6">
               <sDescription>input multiplexer. Output is i1 when s &lt; 1, i[i] when....</sDescription>
               <author>Johannes Taelman</author>
               <license>BSD</license>
               <helpPatch>mux.axh</helpPatch>
               <inlets>
                  <int32.positive name="s" description="select"/>
               </inlets>
               <outlets>
                  <int32 name="o" description="output"/>
               </outlets>
               <displays/>
               <params/>
               <attribs/>
               <includes/>
               <code.krate><![CDATA[switch(inlet_s>0?inlet_s:0){
      case 0: outlet_o= 0;break;
      case 1: outlet_o= 1;break;
      case 2: outlet_o= 4;break;
      case 3: outlet_o= 6;break;
      case 4: outlet_o= 8;break;
      case 5: outlet_o= 12;break;
      case 6: outlet_o= 16;break;
      case 7: outlet_o= 24;break;
      case 8: outlet_o= 32;break;
      case 9: outlet_o= 48;break;
      case 10: outlet_o= 64;break;
      default: outlet_o= 16;break;
}]]></code.krate>
            </object>
         </patchobj>
         <obj type="patch/inlet f" uuid="5c585d2dcd9c05631e345ac09626a22a639d7c13" name="feedback" x="84" y="238">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/inlet f" uuid="5c585d2dcd9c05631e345ac09626a22a639d7c13" name="tm" x="84" y="350">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/inlet f" uuid="5c585d2dcd9c05631e345ac09626a22a639d7c13" name="tm2" x="84" y="392">
            <params/>
            <attribs/>
         </obj>
         <obj type="drj/math/sum3" uuid="93cb11244907aed86ae7d7f2274d118a23d46692" name="sum3_1" x="182" y="420">
            <params/>
            <attribs/>
         </obj>
         <obj type="toneburst/math/interpolation-bezier-cubic" uuid="42de82bd-22c1-4662-a63d-c43f6b824c40" name="interpolation-bezier-cubic_1" x="280" y="434">
            <params>
               <frac32.u.map name="start" value="0.0"/>
               <frac32.s.map name="end" value="4.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="sss/math/scaleInOut" uuid="1469e0f0-7674-4f23-897c-5dff075314f6" name="scaleInOut_1" x="518" y="434">
            <params>
               <frac32.s.map name="inMin" value="0.0"/>
               <frac32.s.map name="inMax" value="64.0"/>
               <frac32.s.map name="outMin" value="0.009999752044677734"/>
               <frac32.s.map name="outMax" value="63.5"/>
            </params>
            <attribs/>
         </obj>
         <obj type="kfilter/lowpass" uuid="4f0d68b39b6f6b1c1d371b028d84391d14062d68" name="lowpass_1" x="700" y="434">
            <params>
               <frac32.s.map name="freq" onParent="true" value="-54.39999961853027"/>
            </params>
            <attribs/>
         </obj>
         <obj type="conv/interp" uuid="d68c1a8709d8b55e3de8715d727ec0a2d8569d9a" name="interp_2" x="812" y="434">
            <params/>
            <attribs/>
         </obj>
         <patchobj type="patch/object" uuid="109043ad-898d-4a87-b513-d2b4b77811b7" name="read_interp_sync_1" x="896" y="434">
            <params>
               <int32 name="clockmul" onParent="true" value="1"/>
               <int32 name="clockdiv" onParent="true" value="64"/>
               <frac32.u.map name="time" onParent="true" value="0.0"/>
            </params>
            <attribs>
               <objref attributeName="delayname" obj="sound"/>
               <combo attributeName="clocksource" selection="External"/>
               <combo attributeName="device" selection="omni"/>
               <combo attributeName="smooth" selection="5"/>
            </attribs>
            <object id="patch/object" uuid="109043ad-898d-4a87-b513-d2b4b77811b7">
               <sDescription>Syncable delay read, interpolated, proportional time modulation</sDescription>
               <author>Are Leistad</author>
               <license>BSD</license>
               <inlets>
                  <frac32buffer name="time" description="Delay time bias"/>
                  <frac32buffer name="tmod" description="Delay time modulation"/>
                  <int32 name="clkoverride" description="Override clocksource attribute, 0,1,2,3,4 = attr,int,ext,midi,midi-omni"/>
                  <int32 name="muloverride" description="Override clockmul parameter, values above 0 overrides clockmul"/>
                  <int32 name="divoverride" description="Override clockdiv parameter, values above 0 overrides clockdiv"/>
                  <bool32.rising name="24ppq" description="Clock input"/>
                  <int32 name="div"/>
               </inlets>
               <outlets>
                  <frac32buffer name="out" description="Delay output"/>
                  <frac32 name="time" description="Delay time, fraction of the referenced delay writer&apos;s time"/>
               </outlets>
               <displays/>
               <params>
                  <int32 name="clockmul" noLabel="false">
                     <MinValue i="1"/>
                     <MaxValue i="128"/>
                  </int32>
                  <int32 name="clockdiv" noLabel="false">
                     <MinValue i="1"/>
                     <MaxValue i="128"/>
                  </int32>
                  <frac32.u.map name="time" description="Internal delay time"/>
               </params>
               <attribs>
                  <objref name="delayname"/>
                  <combo name="clocksource">
                     <MenuEntries>
                        <string>Internal</string>
                        <string>External</string>
                        <string>MIDI</string>
                     </MenuEntries>
                     <CEntries>
                        <string>0</string>
                        <string>1</string>
                        <string>2</string>
                     </CEntries>
                  </combo>
                  <combo name="device">
                     <MenuEntries>
                        <string>omni</string>
                        <string>din</string>
                        <string>usb host port 1</string>
                        <string>usb host port 2</string>
                        <string>usb host port 3</string>
                        <string>usb host port 4</string>
                        <string>internal port 1</string>
                        <string>internal port 2</string>
                        <string>usb device port 1</string>
                     </MenuEntries>
                     <CEntries>
                        <string>MIDI_DEVICE_OMNI, 0</string>
                        <string>MIDI_DEVICE_DIN, 1</string>
                        <string>MIDI_DEVICE_USB_HOST, 1</string>
                        <string>MIDI_DEVICE_USB_HOST, 2</string>
                        <string>MIDI_DEVICE_USB_HOST, 3</string>
                        <string>MIDI_DEVICE_USB_HOST, 4</string>
                        <string>MIDI_DEVICE_INTERNAL, 1</string>
                        <string>MIDI_DEVICE_INTERNAL, 2</string>
                        <string>MIDI_DEVICE_USB_DEVICE, 1</string>
                     </CEntries>
                  </combo>
                  <combo name="smooth">
                     <MenuEntries>
                        <string>5</string>
                        <string>4</string>
                        <string>3</string>
                        <string>2</string>
                        <string>1</string>
                        <string>0</string>
                     </MenuEntries>
                     <CEntries>
                        <string>5</string>
                        <string>4</string>
                        <string>3</string>
                        <string>2</string>
                        <string>1</string>
                        <string>0</string>
                     </CEntries>
                  </combo>
               </attribs>
               <includes/>
               <code.declaration><![CDATA[//#define DEBUGF LogTextMessage
      #define DEBUGF(...) {}

      enum
      {
        CLOCK_SOURCE_internal = 0,
        CLOCK_SOURCE_external = 1,
        CLOCK_SOURCE_midi     = 2,
        CLOCK_SOURCE_midi_omni= 3
      } CLOCK_SOURCE;

      int32_t   start_sequence;
      int32_t   clock_source;
      int32_t   clock_multiplier;
      int32_t   clock_divider;
      uint32_t  sync_count;       // At least N clocks before deriving synced time
      uint32_t  sync_time;        // Synced time expressed in fractional delay length
      uint32_t  ktimer;           // 3kHz timer
      uint32_t  last_ktime;
      float     delay_length_cpl; // cache result of  1.0 / lenght of delay line
      uint32_t  old_24ppq;

      __attribute__ ( ( always_inline ) ) __STATIC_INLINE float Q27ToF(int32_t op1)
      {
        float fop1 = *(float*)(&op1);
        __ASM volatile ("VCVT.F32.S32 %0, %0, 27" : "+w" (fop1) );
        return(fop1);
      }

      __attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t FToQ27(float fop1)
      {
        __ASM volatile ("VCVT.S32.F32 %0, %0, 27" : "+w" (fop1) );
        int32_t r = *(int32_t*)(&fop1);
        return(r);
      }

      __attribute__ ( ( always_inline ) ) __STATIC_INLINE int midi_device_test( midi_device_t dev, uint8_t port, int selected_dev, uint8_t selected_port )
      {
        if(    (selected_dev == MIDI_DEVICE_OMNI)
            || (selected_dev == dev && selected_port == port)
            )
          return 1;
        return 0;
      }

#if attr_smooth>0
      #define FIFO_EXP attr_smooth
      #define FIFO_LEN (1<<FIFO_EXP)
      #define FIFO_MASK (FIFO_LEN-1)
      typedef struct _AveragerContext
      {
        int32_t fifo[FIFO_LEN];
        int32_t fifo_i;
        int32_t acc;
      } AveragerContext;
      AveragerContext avg;
      __attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t moving_average( AveragerContext *avg, int32_t new_value )
      {
        avg->fifo_i             = (avg->fifo_i + 1) & FIFO_MASK;
        avg->acc               -= avg->fifo[avg->fifo_i];
        avg->acc               += new_value;
        avg->fifo[avg->fifo_i]  = new_value;
        return avg->acc >> FIFO_EXP;
      }
#endif

      void on_clock( void )
      {
        float   period;
        int32_t kperiod;
#if attr_smooth>0
        kperiod = moving_average( &avg, ktimer - last_ktime );
#else
        kperiod = ktimer - last_ktime;
#endif
        last_ktime = ktimer;
        period = kperiod * 16 * clock_divider;
        period = period / clock_multiplier;

        if( period < 1.0f )
          {
            period = 1.0f;
          }

        if( sync_count < 1 )
          {
            sync_count++;
          }
        else
          {
            sync_time = FToQ27( period * delay_length_cpl );
          }
      }]]></code.declaration>
               <code.init><![CDATA[#if attr_smooth>0
      for( avg.fifo_i = 0; avg.fifo_i < FIFO_LEN; avg.fifo_i++ )
        {
          avg.fifo[avg.fifo_i] = 0;
        }
      avg.fifo_i       = 0;
      avg.acc          = 0;
#endif
      start_sequence   = 0;
      clock_source     = CLOCK_SOURCE_internal;
      clock_multiplier = 1;
      clock_divider    = 12;
      sync_count       = 0;
      sync_time        = 0;
      ktimer           = 0;
      last_ktime       = 0;
      delay_length_cpl = 1.0f/attr_delayname.LENGTH;
      old_24ppq        = 0;]]></code.init>
               <code.krate><![CDATA[// Use preset time until synced
      if( start_sequence == 0 && clock_source != CLOCK_SOURCE_internal )
        {
          sync_time = param_time;
          start_sequence++;
        }

#ifdef USE_SYNC_HOLDOFF
      // If too long between clocks (likely absence of clock), require two successive clocks to resync.
      // Use max delay time as the minimum clock interval (using 5 seconds for now)?
      if( ktimer - last_ktime > (5*3000) )
        {
          sync_count = 0;
        }
#endif

      // Live overrides for the clock source and clock divider parameters.
      // Allow clock selection without restarting the patch is good :)
      // (The int32 spinbox is not CC assignable...(bug?))
      if( inlet_clkoverride > 0 )
        {
          clock_source = inlet_clkoverride - 1;
          if( clock_source > CLOCK_SOURCE_midi_omni )
            {
              clock_source = CLOCK_SOURCE_midi_omni;
            }
          else if( clock_source < CLOCK_SOURCE_internal )
            {
              clock_source = CLOCK_SOURCE_internal;
            }
        }
      else
        {
          clock_source = attr_clocksource;
        }

      if( inlet_divoverride > 0 )
        {
          clock_divider = inlet_divoverride;
          if( clock_divider < 1 )
            {
              clock_divider = 1;
            }
        }
      else
        {
          clock_divider = inlet_div;
        }

      if( inlet_muloverride > 0 )
        {
          clock_multiplier = inlet_muloverride;
          if( clock_multiplier < 1 )
            {
              clock_multiplier = 1;
            }
        }
      else
        {
          clock_multiplier = param_clockmul;
        }

      if( clock_source == CLOCK_SOURCE_external && inlet_24ppq && !old_24ppq  )
        {
          on_clock();
        }

      old_24ppq = inlet_24ppq;
      ktimer++;]]></code.krate>
               <code.srate><![CDATA[uint32_t tmp_time;
      int32_t  time_mod;
      uint32_t tmp_d;
      uint32_t tmp_d_limited;
      uint32_t tmp_di;
      uint32_t tmp_w1;
      uint32_t tmp_w2;
      int32_t  tmp_a1;
      int32_t  tmp_a2;
      int32_t  tmp_r;

      if( clock_source != CLOCK_SOURCE_internal )
        {
          tmp_time = sync_time;
        }
      else
        {
          tmp_time = param_time;
        }

      time_mod    = ___SMMUL( (tmp_time + inlet_time)<<3, inlet_tmod<<2 );
      tmp_d       = __USAT(tmp_time + inlet_time + time_mod,27);
      outlet_time = tmp_d;

      // Must limit the length!
      tmp_d_limited = tmp_d>>(27-attr_delayname.LENGTHPOW);
      if( tmp_d_limited > attr_delayname.LENGTHMASK - BUFSIZE )
        {
          tmp_d_limited = attr_delayname.LENGTHMASK - BUFSIZE;
          tmp_d = 0;
        }
      tmp_di = attr_delayname.writepos - tmp_d_limited - BUFSIZE + buffer_index -1;
      tmp_w1 = (tmp_d<<(attr_delayname.LENGTHPOW+3)) & 0x3FFFFFFF;
      tmp_w2 = (1<<30) - tmp_w1;
      tmp_a1 = attr_delayname.array[tmp_di&attr_delayname.LENGTHMASK]<<16;
      tmp_a2 = attr_delayname.array[(tmp_di+1)&attr_delayname.LENGTHMASK]<<16;
      tmp_r  = ___SMMUL(tmp_a1,tmp_w1);
      tmp_r  = ___SMMLA(tmp_a2,tmp_w2,tmp_r);

      outlet_out = tmp_r;]]></code.srate>
               <code.midihandler><![CDATA[if(    clock_source == CLOCK_SOURCE_midi_omni
         || (clock_source == CLOCK_SOURCE_midi && midi_device_test( dev, port, attr_device ) == 1)
        )
        {
          if( status == MIDI_TIMING_CLOCK )
            {
              on_clock();
            }
        }]]></code.midihandler>
            </object>
         </patchobj>
         <obj type="math/*" uuid="c16a625a661f40e4b359db604dcd00b3befcdbe3" name="*_2" x="1064" y="434">
            <params/>
            <attribs/>
         </obj>
         <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_1" x="1134" y="434">
            <params/>
            <attribs/>
         </obj>
         <obj type="delay/write sdram" uuid="5ae03f8d7b815edcfc40585d8bbac2ed48460fba" name="sound" x="1218" y="434">
            <params/>
            <attribs>
               <combo attributeName="size" selection="262144 (5.46s)"/>
            </attribs>
         </obj>
         <obj type="patch/outlet a" uuid="abd8c5fd3b0524a6630f65cad6dc27f6c58e2a3e" name="outlet_1" x="1442" y="434">
            <params/>
            <attribs/>
         </obj>
         <nets>
            <net>
               <source obj="+_1" outlet="out"/>
               <dest obj="sound" inlet="in"/>
            </net>
            <net>
               <source obj="read_interp_sync_1" outlet="out"/>
               <dest obj="*_2" inlet="a"/>
               <dest obj="outlet_1" inlet="outlet"/>
            </net>
            <net>
               <source obj="interp_2" outlet="o"/>
               <dest obj="read_interp_sync_1" inlet="time"/>
            </net>
            <net>
               <source obj="lowpass_1" outlet="out"/>
               <dest obj="interp_2" inlet="i"/>
            </net>
            <net>
               <source obj="*_2" outlet="result"/>
               <dest obj="+_1" inlet="in2"/>
            </net>
            <net>
               <source obj="interpolation-bezier-cubic_1" outlet="out"/>
               <dest obj="scaleInOut_1" inlet="in"/>
            </net>
            <net>
               <source obj="scaleInOut_1" outlet="out"/>
               <dest obj="lowpass_1" inlet="in"/>
            </net>
            <net>
               <source obj="tm" outlet="inlet"/>
               <dest obj="sum3_1" inlet="in1"/>
            </net>
            <net>
               <source obj="sum3_1" outlet="out"/>
               <dest obj="interpolation-bezier-cubic_1" inlet="in"/>
            </net>
            <net>
               <source obj="audio-in" outlet="inlet"/>
               <dest obj="+_1" inlet="in1"/>
            </net>
            <net>
               <source obj="24ppq" outlet="inlet"/>
               <dest obj="read_interp_sync_1" inlet="24ppq"/>
            </net>
            <net>
               <source obj="scale_1" outlet="o"/>
               <dest obj="mux_2" inlet="s"/>
            </net>
            <net>
               <source obj="mux_2" outlet="o"/>
               <dest obj="read_interp_sync_1" inlet="div"/>
            </net>
            <net>
               <source obj="div" outlet="inlet"/>
               <dest obj="scale_1" inlet="c"/>
            </net>
            <net>
               <source obj="feedback" outlet="inlet"/>
               <dest obj="*_2" inlet="b"/>
            </net>
            <net>
               <source obj="tm2" outlet="inlet"/>
               <dest obj="sum3_1" inlet="in2"/>
            </net>
         </nets>
         <settings>
            <subpatchmode>no</subpatchmode>
         </settings>
         <notes><![CDATA[]]></notes>
         <windowPos>
            <x>800</x>
            <y>0</y>
            <width>800</width>
            <height>860</height>
         </windowPos>
      </subpatch>
   </patcher>
   <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_4" x="2016" y="1400">
      <params/>
      <attribs/>
   </obj>
   <obj type="audio/out right" uuid="e58a4cbbb087052c5480366e3f5d3a04aa319777" name="out_2" x="2086" y="1400">
      <params/>
      <attribs/>
   </obj>
   <obj type="conv/unipolar2bipolar" uuid="efc8ee28c508740c5edf7995eaaa07a6d6818e5e" name="unipolar2bipolar_1" x="1022" y="1652">
      <params/>
      <attribs/>
   </obj>
   <obj type="conv/unipolar2bipolar" uuid="efc8ee28c508740c5edf7995eaaa07a6d6818e5e" name="unipolar2bipolar_2" x="1190" y="1666">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="*c_1" x="910" y="1680">
      <params>
         <frac32.u.map name="amp" value="8.5"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="2128" y="1694" text="lfo speed"/>
   <comment type="patch/comment" x="2352" y="1694" text="lfo dpth"/>
   <comment type="patch/comment" x="1481" y="1700" text="delay modulation"/>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_3" x="1022" y="1708">
      <params/>
      <attribs/>
   </obj>
   <obj type="x" uuid="1c5dfc8c-9df6-43a9-b685-a88a92313f5d" name="x_5" x="1106" y="1708">
      <params>
         <frac32.s.map name="pitch" value="0.0"/>
         <frac32.u.map name="reso" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="*c_12" x="2142" y="1708">
      <params>
         <frac32.u.map name="amp" value="49.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="conv/unipolar2bipolar" uuid="efc8ee28c508740c5edf7995eaaa07a6d6818e5e" name="unipolar2bipolar_7" x="2240" y="1708">
      <params/>
      <attribs/>
   </obj>
   <obj type="drj/lfo/tri_ph_p" uuid="ef2a164985b533c6e46ce43c0decba17b1862d85" name="tri_ph_p_4" x="2366" y="1708">
      <params>
         <frac32.s.map name="pitch" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_5" x="2464" y="1708">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="*c_13" x="2520" y="1708">
      <params>
         <frac32.u.map name="amp" value="64.0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1442" y="1722" text="lfo speed"/>
   <comment type="patch/comment" x="1666" y="1722" text="lfo dpth"/>
   <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="*c_7" x="1442" y="1736">
      <params>
         <frac32.u.map name="amp" value="32.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="conv/unipolar2bipolar" uuid="efc8ee28c508740c5edf7995eaaa07a6d6818e5e" name="unipolar2bipolar_4" x="1540" y="1736">
      <params/>
      <attribs/>
   </obj>
   <obj type="drj/lfo/tri_ph_p" uuid="ef2a164985b533c6e46ce43c0decba17b1862d85" name="tri_ph_p_2" x="1666" y="1736">
      <params>
         <frac32.s.map name="pitch" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_3" x="1764" y="1736">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="*c_8" x="1820" y="1736">
      <params>
         <frac32.u.map name="amp" value="14.699999809265137"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="*c_9" x="1974" y="1736">
      <params>
         <frac32.u.map name="amp" value="6.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="*c_2" x="910" y="1764">
      <params>
         <frac32.u.map name="amp" value="35.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="44553fdc8628c67ab535845ed1be304ad6c9553b" name="+_6" x="2212" y="1820">
      <params/>
      <attribs/>
   </obj>
   <obj type="conv/unipolar2bipolar" uuid="efc8ee28c508740c5edf7995eaaa07a6d6818e5e" name="unipolar2bipolar_8" x="2296" y="1834">
      <params/>
      <attribs/>
   </obj>
   <obj type="TSG/math/limit" uuid="96549a9d-cf2a-4b5c-b9b1-58b08745c3fe" name="limit_2" x="2422" y="1834">
      <params/>
      <attribs>
         <spinner attributeName="max" value="64"/>
         <spinner attributeName="min" value="-64"/>
      </attribs>
   </obj>
   <obj type="audio/in left" uuid="d40e60b7641fe75af4d7c91b45bb038aacafc52e" name="in_1" x="896" y="1848">
      <params/>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_1" x="1022" y="1862">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="aaabceff-5472-422b-9c7d-472a1c319a49" name="hp_1" x="1106" y="1862">
      <params>
         <frac32.s.map name="pitch" value="0.0"/>
         <frac32.u.map name="reso" value="0.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="aaabceff-5472-422b-9c7d-472a1c319a49">
         <sDescription>Highpass filter, state-variable type</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>filter.axh</helpPatch>
         <inlets>
            <frac32buffer name="in" description="filter input"/>
            <frac32.bipolar name="pitch"/>
         </inlets>
         <outlets>
            <frac32buffer name="out" description="filter output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.pitch name="pitch"/>
            <frac32.u.map.filterq name="reso"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t low;
int32_t band;]]></code.declaration>
         <code.init><![CDATA[low = 0;
band = 0;]]></code.init>
         <code.krate><![CDATA[int32_t damp = (0x80<<24) - (param_reso<<4);
damp = ___SMMUL(damp,damp);
int32_t alpha;
int32_t freq;
MTOFEXTENDED(inlet_pitch,alpha);
SINE2TINTERP(alpha,freq);]]></code.krate>
         <code.srate><![CDATA[int32_t in1 = inlet_in;
int32_t notch = inlet_in - (___SMMUL(damp,band)<<1);
low = low + (___SMMUL(freq,band)<<1);
int32_t high  = notch - low;
band = (___SMMUL(freq,high)<<1) + band;// - drive*band*band*band;
int32_t out1 = high;
outlet_out = out1;]]></code.srate>
      </object>
   </patchobj>
   <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_2" x="1218" y="1862">
      <params/>
      <attribs/>
   </obj>
   <obj type="fx/lmnts/reverb" uuid="8027561C-A0B5-4DF8-A10E-3ED1274F2980" name="reverb_2" x="1302" y="1862">
      <params>
         <frac32.u.map name="amount" value="64.0"/>
         <frac32.u.map name="time" value="0.0"/>
         <frac32.u.map name="diffusion" value="0.0"/>
         <frac32.u.map name="gain" value="33.0"/>
         <frac32.u.map name="lowpass" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_2" x="1442" y="1876">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_3" x="1512" y="1876">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="b22acb60-48df-4da1-bbf3-2f5a420b9c70" name="lp_2" x="1596" y="1876">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="b22acb60-48df-4da1-bbf3-2f5a420b9c70">
         <sDescription>Low pass filter, state-variable type</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>filter.axh</helpPatch>
         <inlets>
            <frac32buffer name="in" description="filter input"/>
            <frac32.bipolar name="filter"/>
            <frac32.positive name="reso"/>
         </inlets>
         <outlets>
            <frac32buffer name="out" description="filter output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t low;
int32_t band;]]></code.declaration>
         <code.init><![CDATA[low = 0;
band = 0;]]></code.init>
         <code.krate><![CDATA[int32_t damp = (0x80<<24) - (inlet_reso<<4);
damp = ___SMMUL(damp,damp);
int32_t alpha;
int32_t freq;
MTOFEXTENDED(inlet_filter,alpha);
SINE2TINTERP(alpha,freq);]]></code.krate>
         <code.srate><![CDATA[int32_t in1 = inlet_in;
int32_t notch = inlet_in - (___SMMUL(damp,band)<<1);
low = low + (___SMMUL(freq,band)<<1);
int32_t high  = notch - low;
band = (___SMMUL(freq,high)<<1) + band;// - drive*band*band*band;
int32_t out1 = low;
outlet_out = out1;]]></code.srate>
      </object>
   </patchobj>
   <patcher type="patch/patcher" uuid="ee1af999-2f93-4b9e-aadf-f51391f5158f" name="obj_1" x="1680" y="1876">
      <params>
         <frac32.s.map name="lowpass_1" value="-1.0"/>
         <int32 name="read_interp_sync_1:clockmul" value="4"/>
         <int32 name="read_interp_sync_1:clockdiv" value="1"/>
         <frac32.u.map name="read_interp_sync_1:time" value="0.0"/>
      </params>
      <attribs/>
      <subpatch appVersion="1.0.12">
         <obj type="patch/inlet a" uuid="b577fe41e0a6bc7b5502ce33cb8a3129e2e28ee5" name="audio-in" x="84" y="14">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/inlet b" uuid="3b0d3eacb5bb978cb05d1372aa2714d5a4790844" name="24ppq" x="84" y="56">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/inlet f" uuid="5c585d2dcd9c05631e345ac09626a22a639d7c13" name="div" x="84" y="98">
            <params/>
            <attribs/>
         </obj>
         <obj type="midi/scale" uuid="68791136-f771-4a6c-ae09-5f0b8744dde4" name="scale_1" x="406" y="140">
            <params>
               <frac32.u.map name="a" value="0.0"/>
               <frac32.u.map name="b" value="11.0"/>
            </params>
            <attribs/>
         </obj>
         <patchobj type="patch/object" uuid="48f0d302-e63c-4e8e-8db4-51a74e6ceef6" name="mux_2" x="490" y="168">
            <params/>
            <attribs/>
            <object id="patch/object" uuid="48f0d302-e63c-4e8e-8db4-51a74e6ceef6">
               <sDescription>input multiplexer. Output is i1 when s &lt; 1, i[i] when....</sDescription>
               <author>Johannes Taelman</author>
               <license>BSD</license>
               <helpPatch>mux.axh</helpPatch>
               <inlets>
                  <int32.positive name="s" description="select"/>
               </inlets>
               <outlets>
                  <int32 name="o" description="output"/>
               </outlets>
               <displays/>
               <params/>
               <attribs/>
               <includes/>
               <code.krate><![CDATA[switch(inlet_s>0?inlet_s:0){
      case 0: outlet_o= 0;break;
      case 1: outlet_o= 1;break;
      case 2: outlet_o= 4;break;
      case 3: outlet_o= 6;break;
      case 4: outlet_o= 8;break;
      case 5: outlet_o= 12;break;
      case 6: outlet_o= 16;break;
      case 7: outlet_o= 24;break;
      case 8: outlet_o= 32;break;
      case 9: outlet_o= 48;break;
      case 10: outlet_o= 64;break;
      default: outlet_o= 16;break;
}]]></code.krate>
            </object>
         </patchobj>
         <obj type="patch/inlet f" uuid="5c585d2dcd9c05631e345ac09626a22a639d7c13" name="feedback" x="84" y="238">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/inlet f" uuid="5c585d2dcd9c05631e345ac09626a22a639d7c13" name="tm" x="84" y="308">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/inlet f" uuid="5c585d2dcd9c05631e345ac09626a22a639d7c13" name="tm2" x="84" y="350">
            <params/>
            <attribs/>
         </obj>
         <obj type="drj/math/sum3" uuid="93cb11244907aed86ae7d7f2274d118a23d46692" name="sum3_1" x="182" y="420">
            <params/>
            <attribs/>
         </obj>
         <obj type="toneburst/math/interpolation-bezier-cubic" uuid="42de82bd-22c1-4662-a63d-c43f6b824c40" name="interpolation-bezier-cubic_1" x="280" y="434">
            <params>
               <frac32.u.map name="start" value="0.0"/>
               <frac32.s.map name="end" value="4.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="sss/math/scaleInOut" uuid="1469e0f0-7674-4f23-897c-5dff075314f6" name="scaleInOut_1" x="518" y="434">
            <params>
               <frac32.s.map name="inMin" value="0.0"/>
               <frac32.s.map name="inMax" value="64.0"/>
               <frac32.s.map name="outMin" value="0.009999752044677734"/>
               <frac32.s.map name="outMax" value="63.5"/>
            </params>
            <attribs/>
         </obj>
         <obj type="kfilter/lowpass" uuid="4f0d68b39b6f6b1c1d371b028d84391d14062d68" name="lowpass_1" x="700" y="434">
            <params>
               <frac32.s.map name="freq" onParent="true" value="-54.39999961853027"/>
            </params>
            <attribs/>
         </obj>
         <obj type="conv/interp" uuid="d68c1a8709d8b55e3de8715d727ec0a2d8569d9a" name="interp_2" x="812" y="434">
            <params/>
            <attribs/>
         </obj>
         <patchobj type="patch/object" uuid="109043ad-898d-4a87-b513-d2b4b77811b7" name="read_interp_sync_1" x="896" y="434">
            <params>
               <int32 name="clockmul" onParent="true" value="1"/>
               <int32 name="clockdiv" onParent="true" value="64"/>
               <frac32.u.map name="time" onParent="true" value="0.0"/>
            </params>
            <attribs>
               <objref attributeName="delayname" obj="sound"/>
               <combo attributeName="clocksource" selection="External"/>
               <combo attributeName="device" selection="omni"/>
               <combo attributeName="smooth" selection="5"/>
            </attribs>
            <object id="patch/object" uuid="109043ad-898d-4a87-b513-d2b4b77811b7">
               <sDescription>Syncable delay read, interpolated, proportional time modulation</sDescription>
               <author>Are Leistad</author>
               <license>BSD</license>
               <inlets>
                  <frac32buffer name="time" description="Delay time bias"/>
                  <frac32buffer name="tmod" description="Delay time modulation"/>
                  <int32 name="clkoverride" description="Override clocksource attribute, 0,1,2,3,4 = attr,int,ext,midi,midi-omni"/>
                  <int32 name="muloverride" description="Override clockmul parameter, values above 0 overrides clockmul"/>
                  <int32 name="divoverride" description="Override clockdiv parameter, values above 0 overrides clockdiv"/>
                  <bool32.rising name="24ppq" description="Clock input"/>
                  <int32 name="div"/>
               </inlets>
               <outlets>
                  <frac32buffer name="out" description="Delay output"/>
                  <frac32 name="time" description="Delay time, fraction of the referenced delay writer&apos;s time"/>
               </outlets>
               <displays/>
               <params>
                  <int32 name="clockmul" noLabel="false">
                     <MinValue i="1"/>
                     <MaxValue i="128"/>
                  </int32>
                  <int32 name="clockdiv" noLabel="false">
                     <MinValue i="1"/>
                     <MaxValue i="128"/>
                  </int32>
                  <frac32.u.map name="time" description="Internal delay time"/>
               </params>
               <attribs>
                  <objref name="delayname"/>
                  <combo name="clocksource">
                     <MenuEntries>
                        <string>Internal</string>
                        <string>External</string>
                        <string>MIDI</string>
                     </MenuEntries>
                     <CEntries>
                        <string>0</string>
                        <string>1</string>
                        <string>2</string>
                     </CEntries>
                  </combo>
                  <combo name="device">
                     <MenuEntries>
                        <string>omni</string>
                        <string>din</string>
                        <string>usb host port 1</string>
                        <string>usb host port 2</string>
                        <string>usb host port 3</string>
                        <string>usb host port 4</string>
                        <string>internal port 1</string>
                        <string>internal port 2</string>
                        <string>usb device port 1</string>
                     </MenuEntries>
                     <CEntries>
                        <string>MIDI_DEVICE_OMNI, 0</string>
                        <string>MIDI_DEVICE_DIN, 1</string>
                        <string>MIDI_DEVICE_USB_HOST, 1</string>
                        <string>MIDI_DEVICE_USB_HOST, 2</string>
                        <string>MIDI_DEVICE_USB_HOST, 3</string>
                        <string>MIDI_DEVICE_USB_HOST, 4</string>
                        <string>MIDI_DEVICE_INTERNAL, 1</string>
                        <string>MIDI_DEVICE_INTERNAL, 2</string>
                        <string>MIDI_DEVICE_USB_DEVICE, 1</string>
                     </CEntries>
                  </combo>
                  <combo name="smooth">
                     <MenuEntries>
                        <string>5</string>
                        <string>4</string>
                        <string>3</string>
                        <string>2</string>
                        <string>1</string>
                        <string>0</string>
                     </MenuEntries>
                     <CEntries>
                        <string>5</string>
                        <string>4</string>
                        <string>3</string>
                        <string>2</string>
                        <string>1</string>
                        <string>0</string>
                     </CEntries>
                  </combo>
               </attribs>
               <includes/>
               <code.declaration><![CDATA[//#define DEBUGF LogTextMessage
      #define DEBUGF(...) {}

      enum
      {
        CLOCK_SOURCE_internal = 0,
        CLOCK_SOURCE_external = 1,
        CLOCK_SOURCE_midi     = 2,
        CLOCK_SOURCE_midi_omni= 3
      } CLOCK_SOURCE;

      int32_t   start_sequence;
      int32_t   clock_source;
      int32_t   clock_multiplier;
      int32_t   clock_divider;
      uint32_t  sync_count;       // At least N clocks before deriving synced time
      uint32_t  sync_time;        // Synced time expressed in fractional delay length
      uint32_t  ktimer;           // 3kHz timer
      uint32_t  last_ktime;
      float     delay_length_cpl; // cache result of  1.0 / lenght of delay line
      uint32_t  old_24ppq;

      __attribute__ ( ( always_inline ) ) __STATIC_INLINE float Q27ToF(int32_t op1)
      {
        float fop1 = *(float*)(&op1);
        __ASM volatile ("VCVT.F32.S32 %0, %0, 27" : "+w" (fop1) );
        return(fop1);
      }

      __attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t FToQ27(float fop1)
      {
        __ASM volatile ("VCVT.S32.F32 %0, %0, 27" : "+w" (fop1) );
        int32_t r = *(int32_t*)(&fop1);
        return(r);
      }

      __attribute__ ( ( always_inline ) ) __STATIC_INLINE int midi_device_test( midi_device_t dev, uint8_t port, int selected_dev, uint8_t selected_port )
      {
        if(    (selected_dev == MIDI_DEVICE_OMNI)
            || (selected_dev == dev && selected_port == port)
            )
          return 1;
        return 0;
      }

#if attr_smooth>0
      #define FIFO_EXP attr_smooth
      #define FIFO_LEN (1<<FIFO_EXP)
      #define FIFO_MASK (FIFO_LEN-1)
      typedef struct _AveragerContext
      {
        int32_t fifo[FIFO_LEN];
        int32_t fifo_i;
        int32_t acc;
      } AveragerContext;
      AveragerContext avg;
      __attribute__ ( ( always_inline ) ) __STATIC_INLINE int32_t moving_average( AveragerContext *avg, int32_t new_value )
      {
        avg->fifo_i             = (avg->fifo_i + 1) & FIFO_MASK;
        avg->acc               -= avg->fifo[avg->fifo_i];
        avg->acc               += new_value;
        avg->fifo[avg->fifo_i]  = new_value;
        return avg->acc >> FIFO_EXP;
      }
#endif

      void on_clock( void )
      {
        float   period;
        int32_t kperiod;
#if attr_smooth>0
        kperiod = moving_average( &avg, ktimer - last_ktime );
#else
        kperiod = ktimer - last_ktime;
#endif
        last_ktime = ktimer;
        period = kperiod * 16 * clock_divider;
        period = period / clock_multiplier;

        if( period < 1.0f )
          {
            period = 1.0f;
          }

        if( sync_count < 1 )
          {
            sync_count++;
          }
        else
          {
            sync_time = FToQ27( period * delay_length_cpl );
          }
      }]]></code.declaration>
               <code.init><![CDATA[#if attr_smooth>0
      for( avg.fifo_i = 0; avg.fifo_i < FIFO_LEN; avg.fifo_i++ )
        {
          avg.fifo[avg.fifo_i] = 0;
        }
      avg.fifo_i       = 0;
      avg.acc          = 0;
#endif
      start_sequence   = 0;
      clock_source     = CLOCK_SOURCE_internal;
      clock_multiplier = 1;
      clock_divider    = 12;
      sync_count       = 0;
      sync_time        = 0;
      ktimer           = 0;
      last_ktime       = 0;
      delay_length_cpl = 1.0f/attr_delayname.LENGTH;
      old_24ppq        = 0;]]></code.init>
               <code.krate><![CDATA[// Use preset time until synced
      if( start_sequence == 0 && clock_source != CLOCK_SOURCE_internal )
        {
          sync_time = param_time;
          start_sequence++;
        }

#ifdef USE_SYNC_HOLDOFF
      // If too long between clocks (likely absence of clock), require two successive clocks to resync.
      // Use max delay time as the minimum clock interval (using 5 seconds for now)?
      if( ktimer - last_ktime > (5*3000) )
        {
          sync_count = 0;
        }
#endif

      // Live overrides for the clock source and clock divider parameters.
      // Allow clock selection without restarting the patch is good :)
      // (The int32 spinbox is not CC assignable...(bug?))
      if( inlet_clkoverride > 0 )
        {
          clock_source = inlet_clkoverride - 1;
          if( clock_source > CLOCK_SOURCE_midi_omni )
            {
              clock_source = CLOCK_SOURCE_midi_omni;
            }
          else if( clock_source < CLOCK_SOURCE_internal )
            {
              clock_source = CLOCK_SOURCE_internal;
            }
        }
      else
        {
          clock_source = attr_clocksource;
        }

      if( inlet_divoverride > 0 )
        {
          clock_divider = inlet_divoverride;
          if( clock_divider < 1 )
            {
              clock_divider = 1;
            }
        }
      else
        {
          clock_divider = inlet_div;
        }

      if( inlet_muloverride > 0 )
        {
          clock_multiplier = inlet_muloverride;
          if( clock_multiplier < 1 )
            {
              clock_multiplier = 1;
            }
        }
      else
        {
          clock_multiplier = param_clockmul;
        }

      if( clock_source == CLOCK_SOURCE_external && inlet_24ppq && !old_24ppq  )
        {
          on_clock();
        }

      old_24ppq = inlet_24ppq;
      ktimer++;]]></code.krate>
               <code.srate><![CDATA[uint32_t tmp_time;
      int32_t  time_mod;
      uint32_t tmp_d;
      uint32_t tmp_d_limited;
      uint32_t tmp_di;
      uint32_t tmp_w1;
      uint32_t tmp_w2;
      int32_t  tmp_a1;
      int32_t  tmp_a2;
      int32_t  tmp_r;

      if( clock_source != CLOCK_SOURCE_internal )
        {
          tmp_time = sync_time;
        }
      else
        {
          tmp_time = param_time;
        }

      time_mod    = ___SMMUL( (tmp_time + inlet_time)<<3, inlet_tmod<<2 );
      tmp_d       = __USAT(tmp_time + inlet_time + time_mod,27);
      outlet_time = tmp_d;

      // Must limit the length!
      tmp_d_limited = tmp_d>>(27-attr_delayname.LENGTHPOW);
      if( tmp_d_limited > attr_delayname.LENGTHMASK - BUFSIZE )
        {
          tmp_d_limited = attr_delayname.LENGTHMASK - BUFSIZE;
          tmp_d = 0;
        }
      tmp_di = attr_delayname.writepos - tmp_d_limited - BUFSIZE + buffer_index -1;
      tmp_w1 = (tmp_d<<(attr_delayname.LENGTHPOW+3)) & 0x3FFFFFFF;
      tmp_w2 = (1<<30) - tmp_w1;
      tmp_a1 = attr_delayname.array[tmp_di&attr_delayname.LENGTHMASK]<<16;
      tmp_a2 = attr_delayname.array[(tmp_di+1)&attr_delayname.LENGTHMASK]<<16;
      tmp_r  = ___SMMUL(tmp_a1,tmp_w1);
      tmp_r  = ___SMMLA(tmp_a2,tmp_w2,tmp_r);

      outlet_out = tmp_r;]]></code.srate>
               <code.midihandler><![CDATA[if(    clock_source == CLOCK_SOURCE_midi_omni
         || (clock_source == CLOCK_SOURCE_midi && midi_device_test( dev, port, attr_device ) == 1)
        )
        {
          if( status == MIDI_TIMING_CLOCK )
            {
              on_clock();
            }
        }]]></code.midihandler>
            </object>
         </patchobj>
         <obj type="math/*" uuid="c16a625a661f40e4b359db604dcd00b3befcdbe3" name="*_2" x="1064" y="434">
            <params/>
            <attribs/>
         </obj>
         <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_1" x="1134" y="434">
            <params/>
            <attribs/>
         </obj>
         <obj type="delay/write sdram" uuid="5ae03f8d7b815edcfc40585d8bbac2ed48460fba" name="sound" x="1218" y="434">
            <params/>
            <attribs>
               <combo attributeName="size" selection="524288 (10.9s)"/>
            </attribs>
         </obj>
         <obj type="patch/outlet a" uuid="abd8c5fd3b0524a6630f65cad6dc27f6c58e2a3e" name="outlet_1" x="1442" y="434">
            <params/>
            <attribs/>
         </obj>
         <nets>
            <net>
               <source obj="+_1" outlet="out"/>
               <dest obj="sound" inlet="in"/>
            </net>
            <net>
               <source obj="read_interp_sync_1" outlet="out"/>
               <dest obj="*_2" inlet="a"/>
               <dest obj="outlet_1" inlet="outlet"/>
            </net>
            <net>
               <source obj="interp_2" outlet="o"/>
               <dest obj="read_interp_sync_1" inlet="time"/>
            </net>
            <net>
               <source obj="lowpass_1" outlet="out"/>
               <dest obj="interp_2" inlet="i"/>
            </net>
            <net>
               <source obj="*_2" outlet="result"/>
               <dest obj="+_1" inlet="in2"/>
            </net>
            <net>
               <source obj="interpolation-bezier-cubic_1" outlet="out"/>
               <dest obj="scaleInOut_1" inlet="in"/>
            </net>
            <net>
               <source obj="scaleInOut_1" outlet="out"/>
               <dest obj="lowpass_1" inlet="in"/>
            </net>
            <net>
               <source obj="tm" outlet="inlet"/>
               <dest obj="sum3_1" inlet="in1"/>
            </net>
            <net>
               <source obj="sum3_1" outlet="out"/>
               <dest obj="interpolation-bezier-cubic_1" inlet="in"/>
            </net>
            <net>
               <source obj="audio-in" outlet="inlet"/>
               <dest obj="+_1" inlet="in1"/>
            </net>
            <net>
               <source obj="24ppq" outlet="inlet"/>
               <dest obj="read_interp_sync_1" inlet="24ppq"/>
            </net>
            <net>
               <source obj="scale_1" outlet="o"/>
               <dest obj="mux_2" inlet="s"/>
            </net>
            <net>
               <source obj="mux_2" outlet="o"/>
               <dest obj="read_interp_sync_1" inlet="div"/>
            </net>
            <net>
               <source obj="div" outlet="inlet"/>
               <dest obj="scale_1" inlet="c"/>
            </net>
            <net>
               <source obj="feedback" outlet="inlet"/>
               <dest obj="*_2" inlet="b"/>
            </net>
            <net>
               <source obj="tm2" outlet="inlet"/>
               <dest obj="sum3_1" inlet="in2"/>
            </net>
         </nets>
         <settings>
            <subpatchmode>no</subpatchmode>
         </settings>
         <notes><![CDATA[]]></notes>
         <windowPos>
            <x>-8</x>
            <y>-8</y>
            <width>1616</width>
            <height>876</height>
         </windowPos>
      </subpatch>
   </patcher>
   <obj type="drj/math/sum4" uuid="7d7f2293cb126acaed86ae2d46124474d118a692" name="sum4_1" x="1890" y="1890">
      <params/>
      <attribs/>
   </obj>
   <obj type="audio/out left" uuid="b11a3c09b2fdd575ea8212f2ce7743d5269253b1" name="out_1" x="1974" y="1890">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial b" uuid="9ffed04e6a3052d9001eda83bae7024cb6d17037" name="dial_5" x="2506" y="1890">
      <params/>
      <attribs/>
   </obj>
   <obj type="table/alloc 16b sdram load" uuid="e6b85dad3ab43565cda93ea4c43c73b668b1cd43" name="lcxl2" x="308" y="2002">
      <params/>
      <attribs>
         <combo attributeName="size" selection="65536"/>
         <file attributeName="filename" file="/daughter1"/>
      </attribs>
   </obj>
   <comment type="patch/comment" x="406" y="2086" text="automation record"/>
   <comment type="patch/comment" x="168" y="2114" text="row1"/>
   <comment type="patch/comment" x="350" y="2114" text="row2"/>
   <comment type="patch/comment" x="532" y="2114" text="row3"/>
   <comment type="patch/comment" x="686" y="2114" text="faders"/>
   <patchobj type="patch/object" uuid="5fd8e969-a2ec-4c9d-a2fe-9f9fc2e58a45" name="x_4" x="168" y="2128">
      <params>
         <int32 name="offset" value="0"/>
         <int32 name="offsetoff" value="8192"/>
         <int32 name="offsetbuttons" value="36000"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="lcxl2"/>
         <spinner attributeName="startcc" value="13"/>
         <spinner attributeName="channel" value="9"/>
      </attribs>
      <object id="patch/object" uuid="5fd8e969-a2ec-4c9d-a2fe-9f9fc2e58a45">
         <sDescription>read 8 values from a table,starting from &apos;offset&apos;</sDescription>
         <author>robert schirmer</author>
         <license>who cares</license>
         <inlets>
            <int32 name="step" description="sets an offset for writing to the table"/>
            <int32 name="offset"/>
            <bool32 name="active"/>
            <bool32 name="shift"/>
         </inlets>
         <outlets>
            <frac32 name="v0"/>
            <frac32 name="v1"/>
            <frac32 name="v2"/>
            <frac32 name="v3"/>
            <frac32 name="v4"/>
            <frac32 name="v5"/>
            <frac32 name="v6"/>
            <frac32 name="v7"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="offset" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="1000000"/>
            </int32>
            <int32 name="offsetoff">
               <MinValue i="0"/>
               <MaxValue i="10000"/>
            </int32>
            <int32 name="offsetbuttons">
               <MinValue i="0"/>
               <MaxValue i="1000000"/>
            </int32>
         </params>
         <attribs>
            <objref name="table"/>
            <spinner name="startcc" MinValue="0" MaxValue="127" DefaultValue="0"/>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="9"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
int off1;
int off2;
int off3;
int off4;
int off5;
int off6;
int off7;
int off8;
bool op;
int8_t cc;
int8_t cc2;
int8_t cc3;
int8_t cc4;
int8_t cc5;
int8_t cc6;
int8_t cc7;
int8_t cc8;
int8_t cv;
int8_t cv2;
int8_t cv3;
int8_t cv4;
int8_t cv5;
int8_t cv6;
int8_t cv7;
int8_t cv8;
int8_t ccoff;
int8_t cvoff;
int8_t _note;
int8_t cvprev;
uint8_t _gate;
uint8_t prevcv;
uint8_t prevcc;

uint8_t end;
uint8_t start;
uint32_t offset;]]></code.declaration>
         <code.init><![CDATA[prevcv=  0;
prevcc = 0;
cvprev = 0;]]></code.init>
         <code.krate><![CDATA[start = attr_startcc;
end = start + 8;
offset = (inlet_step*8) + (inlet_offset + param_offset);

//get button value
off1= attr_table.array[__USAT((param_offsetbuttons),attr_table.LENGTHPOW)]<<attr_table.GAIN;
off2= attr_table.array[__USAT((param_offsetbuttons+1),attr_table.LENGTHPOW)]<<attr_table.GAIN;
off3= attr_table.array[__USAT((param_offsetbuttons+2),attr_table.LENGTHPOW)]<<attr_table.GAIN;
off4= attr_table.array[__USAT((param_offsetbuttons+3),attr_table.LENGTHPOW)]<<attr_table.GAIN;
off5= attr_table.array[__USAT((param_offsetbuttons+4),attr_table.LENGTHPOW)]<<attr_table.GAIN;
off6= attr_table.array[__USAT((param_offsetbuttons+5),attr_table.LENGTHPOW)]<<attr_table.GAIN;
off7= attr_table.array[__USAT((param_offsetbuttons+6),attr_table.LENGTHPOW)]<<attr_table.GAIN;
off8= attr_table.array[__USAT((param_offsetbuttons+7),attr_table.LENGTHPOW)]<<attr_table.GAIN;

//automation off value
if ((!(inlet_shift>0))&&(cvoff!=cvprev)){
if ((ccoff >= start) && (ccoff < end)) {

if ((cvoff != prevcv)||(ccoff != prevcc)){
      attr_table.array[(ccoff - start) + (param_offsetoff+inlet_offset+ param_offset)]= ((cvoff << 20) >>attr_table.GAIN);
      prevcv = cvoff; 
      prevcc = ccoff;   
   }  
}
}
if (inlet_shift>0){cvprev=cvoff;}

//buttons
if (inlet_active){
if ((_gate>0) && !ntrig) {
      ntrig=1;
      op = attr_table.array[(_note + param_offsetbuttons)];
      op = !op ;
         attr_table.array[(_note + param_offsetbuttons)]= (op * (__SSAT(((1<<27)),28)>>attr_table.GAIN));
         
   }
   if (!(_gate>0)) {
   	ntrig=0;
   }}

//recording
if ((!off1)&&(cc==start)){
      attr_table.array[(cc - start) + offset]= ((cv << 20) >>attr_table.GAIN);
   }  

if ((!off2)&&(cc2==(start+1))){
      attr_table.array[(cc2 - start) + offset]= ((cv2 << 20) >>attr_table.GAIN);
   }
if ((!off3)&&(cc3==(start+2))){
      attr_table.array[(cc3 - start) + offset]= ((cv3 << 20) >>attr_table.GAIN);
   }
if ((!off4)&&(cc4==(start+3))){
      attr_table.array[(cc4 - start) + offset]= ((cv4 << 20) >>attr_table.GAIN);
   }
if ((!off5)&&(cc5==(start+4))){
      attr_table.array[(cc5 - start) + offset]= ((cv5 << 20) >>attr_table.GAIN);
   }
if ((!off6)&&(cc6==(start+5))){
      attr_table.array[(cc6 - start) + offset]= ((cv6 << 20) >>attr_table.GAIN);
   }
if ((!off7)&&(cc7==(start+6))){
      attr_table.array[(cc7 - start) + offset]= ((cv7 << 20) >>attr_table.GAIN);
   }
if ((!off8)&&(cc8==(start+7))){
      attr_table.array[(cc8 - start) + offset]= ((cv8 << 20) >>attr_table.GAIN);
   }

//playback

if (off1) {
outlet_v0= attr_table.array[__USAT(((offset) + 0),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (!off1) {
outlet_v0= attr_table.array[__USAT((param_offsetoff + 0+inlet_offset+ param_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (off2) {
outlet_v1= attr_table.array[__USAT(((offset) + 1),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (!off2) {
outlet_v1= attr_table.array[__USAT((param_offsetoff + 1+inlet_offset+ param_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (off3) {
outlet_v2= attr_table.array[__USAT(((offset) + 2),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (!off3) {
outlet_v2= attr_table.array[__USAT((param_offsetoff + 2+inlet_offset+ param_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (off4) {
outlet_v3= attr_table.array[__USAT(((offset) + 3),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (!off4) {
outlet_v3= attr_table.array[__USAT((param_offsetoff + 3+inlet_offset+ param_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (off5) {
outlet_v4= attr_table.array[__USAT(((offset) + 4),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (!off5) {
outlet_v4= attr_table.array[__USAT((param_offsetoff + 4+inlet_offset+ param_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (off6) {
outlet_v5= attr_table.array[__USAT(((offset) + 5),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (!off6) {
outlet_v5= attr_table.array[__USAT((param_offsetoff + 5+inlet_offset+ param_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (off7) {
outlet_v6= attr_table.array[__USAT(((offset) + 6),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (!off7) {
outlet_v6= attr_table.array[__USAT((param_offsetoff + 6+inlet_offset+ param_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (off8) {
outlet_v7= attr_table.array[__USAT(((offset) + 7),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (!off8) {
outlet_v7= attr_table.array[__USAT((param_offsetoff + 7+inlet_offset+ param_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}]]></code.krate>
         <code.midihandler><![CDATA[if (status == attr_midichannel + MIDI_CONTROL_CHANGE) {ccoff = data1;cvoff = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1==attr_startcc)) {cc = data1;cv = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1==(attr_startcc+1))) {cc2 = data1;cv2 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1==(attr_startcc+2))) {cc3 = data1;cv3 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1==(attr_startcc+3))) {cc4 = data1;cv4 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1==(attr_startcc+4))) {cc5 = data1;cv5 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1==(attr_startcc+5))) {cc6 = data1;cv6 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1==(attr_startcc+6))) {cc7 = data1;cv7 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1==(attr_startcc+7))) {cc8 = data1;cv8 = data2;}

if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 41)) {
    _note = 0;
    _gate = 1;
}
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 42)) {
    _note = 1;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 43)) {
    _note = 2;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 44)) {
    _note = 3;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 57)) {
    _note = 4;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 58)) {
    _note = 5;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + + (attr_channel-1)) && (data2) && (data1 == 59)) {
    _note = 6;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 60)) {
    _note = 7;
    _gate = 1;
} 

else if (((status == MIDI_NOTE_ON + (attr_channel-1)) && (!data2))||          (status == MIDI_NOTE_OFF + (attr_channel-1))) {
    _gate = 0;
  }
 
 else if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == MIDI_C_ALL_NOTES_OFF)) {
   _gate = 0;
}]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="521d1c35-a870-4dd4-91c8-61b02cb923f3" name="x_1" x="350" y="2128">
      <params>
         <int32 name="offset" value="9000"/>
         <int32 name="offsetoff" value="8192"/>
         <int32 name="offsetbuttons" value="36008"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="lcxl2"/>
         <spinner attributeName="startcc" value="29"/>
         <spinner attributeName="channel" value="9"/>
      </attribs>
      <object id="patch/object" uuid="521d1c35-a870-4dd4-91c8-61b02cb923f3">
         <sDescription>read 8 values from a table,starting from &apos;offset&apos;</sDescription>
         <author>robert schirmer</author>
         <license>who cares</license>
         <inlets>
            <int32 name="step" description="sets an offset for writing to the table"/>
            <int32 name="offset"/>
            <bool32 name="active"/>
            <bool32 name="shift"/>
         </inlets>
         <outlets>
            <frac32 name="v0"/>
            <frac32 name="v1"/>
            <frac32 name="v2"/>
            <frac32 name="v3"/>
            <frac32 name="v4"/>
            <frac32 name="v5"/>
            <frac32 name="v6"/>
            <frac32 name="v7"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="offset" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="1000000"/>
            </int32>
            <int32 name="offsetoff">
               <MinValue i="0"/>
               <MaxValue i="10000"/>
            </int32>
            <int32 name="offsetbuttons">
               <MinValue i="0"/>
               <MaxValue i="1000000"/>
            </int32>
         </params>
         <attribs>
            <objref name="table"/>
            <spinner name="startcc" MinValue="0" MaxValue="127" DefaultValue="0"/>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="9"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
int off1;
int off2;
int off3;
int off4;
int off5;
int off6;
int off7;
int off8;
bool op;
int8_t cc;
int8_t cc2;
int8_t cc3;
int8_t cc4;
int8_t cc5;
int8_t cc6;
int8_t cc7;
int8_t cc8;
int8_t cv;
int8_t cv2;
int8_t cv3;
int8_t cv4;
int8_t cv5;
int8_t cv6;
int8_t cv7;
int8_t cv8;
int8_t ccoff;
int8_t cvoff;
int8_t _note;
int8_t cvprev;
uint8_t _gate;
uint8_t prevcv;
uint8_t prevcc;

uint8_t end;
uint8_t start;
uint32_t offset;]]></code.declaration>
         <code.init><![CDATA[prevcv=  0;
prevcc = 0;
cvprev = 0;]]></code.init>
         <code.krate><![CDATA[start = attr_startcc;
end = start + 8;
offset = (inlet_step*8) + (inlet_offset + param_offset);

//get button value
off1= attr_table.array[__USAT((param_offsetbuttons),attr_table.LENGTHPOW)]<<attr_table.GAIN;
off2= attr_table.array[__USAT((param_offsetbuttons+1),attr_table.LENGTHPOW)]<<attr_table.GAIN;
off3= attr_table.array[__USAT((param_offsetbuttons+2),attr_table.LENGTHPOW)]<<attr_table.GAIN;
off4= attr_table.array[__USAT((param_offsetbuttons+3),attr_table.LENGTHPOW)]<<attr_table.GAIN;
off5= attr_table.array[__USAT((param_offsetbuttons+4),attr_table.LENGTHPOW)]<<attr_table.GAIN;
off6= attr_table.array[__USAT((param_offsetbuttons+5),attr_table.LENGTHPOW)]<<attr_table.GAIN;
off7= attr_table.array[__USAT((param_offsetbuttons+6),attr_table.LENGTHPOW)]<<attr_table.GAIN;
off8= attr_table.array[__USAT((param_offsetbuttons+7),attr_table.LENGTHPOW)]<<attr_table.GAIN;

//automation off value
if ((!(inlet_shift>0))&&(cvoff!=cvprev)){
if ((ccoff >= start) && (ccoff < end)) {

if ((cvoff != prevcv)||(ccoff != prevcc)){
      attr_table.array[(ccoff - start) + (param_offsetoff+inlet_offset+ param_offset)]= ((cvoff << 20) >>attr_table.GAIN);
      prevcv = cvoff; 
      prevcc = ccoff;   
   }  
}
}
if (inlet_shift>0){cvprev=cvoff;}

//buttons
if (inlet_active){
if ((_gate>0) && !ntrig) {
      ntrig=1;
      op = attr_table.array[(_note + param_offsetbuttons)];
      op = !op ;
         attr_table.array[(_note + param_offsetbuttons)]= (op * (__SSAT(((1<<27)),28)>>attr_table.GAIN));
         
   }
   if (!(_gate>0)) {
   	ntrig=0;
   }}

//recording
if ((!off1)&&(cc==start)){
      attr_table.array[(cc - start) + offset]= ((cv << 20) >>attr_table.GAIN);
   }  

if ((!off2)&&(cc2==(start+1))){
      attr_table.array[(cc2 - start) + offset]= ((cv2 << 20) >>attr_table.GAIN);
   }
if ((!off3)&&(cc3==(start+2))){
      attr_table.array[(cc3 - start) + offset]= ((cv3 << 20) >>attr_table.GAIN);
   }
if ((!off4)&&(cc4==(start+3))){
      attr_table.array[(cc4 - start) + offset]= ((cv4 << 20) >>attr_table.GAIN);
   }
if ((!off5)&&(cc5==(start+4))){
      attr_table.array[(cc5 - start) + offset]= ((cv5 << 20) >>attr_table.GAIN);
   }
if ((!off6)&&(cc6==(start+5))){
      attr_table.array[(cc6 - start) + offset]= ((cv6 << 20) >>attr_table.GAIN);
   }
if ((!off7)&&(cc7==(start+6))){
      attr_table.array[(cc7 - start) + offset]= ((cv7 << 20) >>attr_table.GAIN);
   }
if ((!off8)&&(cc8==(start+7))){
      attr_table.array[(cc8 - start) + offset]= ((cv8 << 20) >>attr_table.GAIN);
   }

//playback

if (off1) {
outlet_v0= attr_table.array[__USAT(((offset) + 0),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (!off1) {
outlet_v0= attr_table.array[__USAT((param_offsetoff + 0+inlet_offset+ param_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (off2) {
outlet_v1= attr_table.array[__USAT(((offset) + 1),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (!off2) {
outlet_v1= attr_table.array[__USAT((param_offsetoff + 1+inlet_offset+ param_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (off3) {
outlet_v2= attr_table.array[__USAT(((offset) + 2),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (!off3) {
outlet_v2= attr_table.array[__USAT((param_offsetoff + 2+inlet_offset+ param_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (off4) {
outlet_v3= attr_table.array[__USAT(((offset) + 3),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (!off4) {
outlet_v3= attr_table.array[__USAT((param_offsetoff + 3+inlet_offset+ param_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (off5) {
outlet_v4= attr_table.array[__USAT(((offset) + 4),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (!off5) {
outlet_v4= attr_table.array[__USAT((param_offsetoff + 4+inlet_offset+ param_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (off6) {
outlet_v5= attr_table.array[__USAT(((offset) + 5),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (!off6) {
outlet_v5= attr_table.array[__USAT((param_offsetoff + 5+inlet_offset+ param_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (off7) {
outlet_v6= attr_table.array[__USAT(((offset) + 6),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (!off7) {
outlet_v6= attr_table.array[__USAT((param_offsetoff + 6+inlet_offset+ param_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (off8) {
outlet_v7= attr_table.array[__USAT(((offset) + 7),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (!off8) {
outlet_v7= attr_table.array[__USAT((param_offsetoff + 7+inlet_offset+ param_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}]]></code.krate>
         <code.midihandler><![CDATA[if (status == attr_midichannel + MIDI_CONTROL_CHANGE) {ccoff = data1;cvoff = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1==attr_startcc)) {cc = data1;cv = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1==(attr_startcc+1))) {cc2 = data1;cv2 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1==(attr_startcc+2))) {cc3 = data1;cv3 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1==(attr_startcc+3))) {cc4 = data1;cv4 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1==(attr_startcc+4))) {cc5 = data1;cv5 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1==(attr_startcc+5))) {cc6 = data1;cv6 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1==(attr_startcc+6))) {cc7 = data1;cv7 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1==(attr_startcc+7))) {cc8 = data1;cv8 = data2;}


if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 73)) {
    _note = 0;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 74)) {
    _note = 1;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 75)) {
    _note = 2;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 76)) {
    _note = 3;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 89)) {
    _note = 4;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 90)) {
    _note = 5;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 91)) {
    _note = 6;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 92)) {
    _note = 7;
    _gate = 1;
} 
else if (((status == MIDI_NOTE_ON + (attr_channel-1)) && (!data2))||          (status == MIDI_NOTE_OFF + (attr_channel-1))) {
    _gate = 0;
  }
 
 else if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == MIDI_C_ALL_NOTES_OFF)) {
   _gate = 0;
}]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="fa2e31fc-9ae8-4105-92b8-2143f2127e0f" name="x_2" x="532" y="2128">
      <params>
         <int32 name="offset" value="18000"/>
         <int32 name="offsetoff" value="8192"/>
         <int32 name="offsetbuttons" value="36016"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="lcxl2"/>
         <spinner attributeName="startcc" value="49"/>
         <spinner attributeName="channel" value="9"/>
      </attribs>
      <object id="patch/object" uuid="fa2e31fc-9ae8-4105-92b8-2143f2127e0f">
         <sDescription>read 8 values from a table,starting from &apos;offset&apos;</sDescription>
         <author>robert schirmer</author>
         <license>who cares</license>
         <inlets>
            <int32 name="step" description="sets an offset for writing to the table"/>
            <int32 name="offset"/>
            <bool32 name="active"/>
            <bool32 name="shift"/>
         </inlets>
         <outlets>
            <frac32 name="v0"/>
            <frac32 name="v1"/>
            <frac32 name="v2"/>
            <frac32 name="v3"/>
            <frac32 name="v4"/>
            <frac32 name="v5"/>
            <frac32 name="v6"/>
            <frac32 name="v7"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="offset" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="1000000"/>
            </int32>
            <int32 name="offsetoff">
               <MinValue i="0"/>
               <MaxValue i="10000"/>
            </int32>
            <int32 name="offsetbuttons">
               <MinValue i="0"/>
               <MaxValue i="1000000"/>
            </int32>
         </params>
         <attribs>
            <objref name="table"/>
            <spinner name="startcc" MinValue="0" MaxValue="127" DefaultValue="0"/>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="9"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
int off1;
int off2;
int off3;
int off4;
int off5;
int off6;
int off7;
int off8;
bool op;
int8_t cc;
int8_t cc2;
int8_t cc3;
int8_t cc4;
int8_t cc5;
int8_t cc6;
int8_t cc7;
int8_t cc8;
int8_t cv;
int8_t cv2;
int8_t cv3;
int8_t cv4;
int8_t cv5;
int8_t cv6;
int8_t cv7;
int8_t cv8;
int8_t ccoff;
int8_t cvoff;
int8_t _note;
int8_t cvprev;
uint8_t _gate;
uint8_t prevcv;
uint8_t prevcc;

uint8_t end;
uint8_t start;
uint32_t offset;]]></code.declaration>
         <code.init><![CDATA[prevcv=  0;
prevcc = 0;
cvprev = 0;]]></code.init>
         <code.krate><![CDATA[start = attr_startcc;
end = start + 8;
offset = (inlet_step*8) + (inlet_offset + param_offset);

//get button value
off1= attr_table.array[__USAT((param_offsetbuttons),attr_table.LENGTHPOW)]<<attr_table.GAIN;
off2= attr_table.array[__USAT((param_offsetbuttons+1),attr_table.LENGTHPOW)]<<attr_table.GAIN;
off3= attr_table.array[__USAT((param_offsetbuttons+2),attr_table.LENGTHPOW)]<<attr_table.GAIN;
off4= attr_table.array[__USAT((param_offsetbuttons+3),attr_table.LENGTHPOW)]<<attr_table.GAIN;
off5= attr_table.array[__USAT((param_offsetbuttons+4),attr_table.LENGTHPOW)]<<attr_table.GAIN;
off6= attr_table.array[__USAT((param_offsetbuttons+5),attr_table.LENGTHPOW)]<<attr_table.GAIN;
off7= attr_table.array[__USAT((param_offsetbuttons+6),attr_table.LENGTHPOW)]<<attr_table.GAIN;
off8= attr_table.array[__USAT((param_offsetbuttons+7),attr_table.LENGTHPOW)]<<attr_table.GAIN;

//automation off value
if ((!(inlet_shift>0))&&(cvoff!=cvprev)){
if ((ccoff >= start) && (ccoff < end)) {

if ((cvoff != prevcv)||(ccoff != prevcc)){
      attr_table.array[(ccoff - start) + (param_offsetoff+inlet_offset+ param_offset)]= ((cvoff << 20) >>attr_table.GAIN);
      prevcv = cvoff; 
      prevcc = ccoff;   
   }  
}
}
if (inlet_shift>0){cvprev=cvoff;}

//buttons
if (inlet_active){
if ((_gate>0) && !ntrig) {
      ntrig=1;
      op = attr_table.array[(_note + param_offsetbuttons)];
      op = !op ;
         attr_table.array[(_note + param_offsetbuttons)]= (op * (__SSAT(((1<<27)),28)>>attr_table.GAIN));
         
   }
   if (!(_gate>0)) {
   	ntrig=0;
   }}

//recording
if ((!off1)&&(cc==start)){
      attr_table.array[(cc - start) + offset]= ((cv << 20) >>attr_table.GAIN);
   }  

if ((!off2)&&(cc2==(start+1))){
      attr_table.array[(cc2 - start) + offset]= ((cv2 << 20) >>attr_table.GAIN);
   }
if ((!off3)&&(cc3==(start+2))){
      attr_table.array[(cc3 - start) + offset]= ((cv3 << 20) >>attr_table.GAIN);
   }
if ((!off4)&&(cc4==(start+3))){
      attr_table.array[(cc4 - start) + offset]= ((cv4 << 20) >>attr_table.GAIN);
   }
if ((!off5)&&(cc5==(start+4))){
      attr_table.array[(cc5 - start) + offset]= ((cv5 << 20) >>attr_table.GAIN);
   }
if ((!off6)&&(cc6==(start+5))){
      attr_table.array[(cc6 - start) + offset]= ((cv6 << 20) >>attr_table.GAIN);
   }
if ((!off7)&&(cc7==(start+6))){
      attr_table.array[(cc7 - start) + offset]= ((cv7 << 20) >>attr_table.GAIN);
   }
if ((!off8)&&(cc8==(start+7))){
      attr_table.array[(cc8 - start) + offset]= ((cv8 << 20) >>attr_table.GAIN);
   }

//playback

if (off1) {
outlet_v0= attr_table.array[__USAT(((offset) + 0),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (!off1) {
outlet_v0= attr_table.array[__USAT((param_offsetoff + 0+inlet_offset+ param_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (off2) {
outlet_v1= attr_table.array[__USAT(((offset) + 1),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (!off2) {
outlet_v1= attr_table.array[__USAT((param_offsetoff + 1+inlet_offset+ param_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (off3) {
outlet_v2= attr_table.array[__USAT(((offset) + 2),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (!off3) {
outlet_v2= attr_table.array[__USAT((param_offsetoff + 2+inlet_offset+ param_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (off4) {
outlet_v3= attr_table.array[__USAT(((offset) + 3),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (!off4) {
outlet_v3= attr_table.array[__USAT((param_offsetoff + 3+inlet_offset+ param_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (off5) {
outlet_v4= attr_table.array[__USAT(((offset) + 4),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (!off5) {
outlet_v4= attr_table.array[__USAT((param_offsetoff + 4+inlet_offset+ param_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (off6) {
outlet_v5= attr_table.array[__USAT(((offset) + 5),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (!off6) {
outlet_v5= attr_table.array[__USAT((param_offsetoff + 5+inlet_offset+ param_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (off7) {
outlet_v6= attr_table.array[__USAT(((offset) + 6),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (!off7) {
outlet_v6= attr_table.array[__USAT((param_offsetoff + 6+inlet_offset+ param_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (off8) {
outlet_v7= attr_table.array[__USAT(((offset) + 7),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (!off8) {
outlet_v7= attr_table.array[__USAT((param_offsetoff + 7+inlet_offset+ param_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}]]></code.krate>
         <code.midihandler><![CDATA[if (status == attr_midichannel + MIDI_CONTROL_CHANGE) {ccoff = data1;cvoff = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1==attr_startcc)) {cc = data1;cv = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1==(attr_startcc+1))) {cc2 = data1;cv2 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1==(attr_startcc+2))) {cc3 = data1;cv3 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1==(attr_startcc+3))) {cc4 = data1;cv4 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1==(attr_startcc+4))) {cc5 = data1;cv5 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1==(attr_startcc+5))) {cc6 = data1;cv6 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1==(attr_startcc+6))) {cc7 = data1;cv7 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1==(attr_startcc+7))) {cc8 = data1;cv8 = data2;}

if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 41)) {
    _note = 0;
    _gate = 1;
}
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 42)) {
    _note = 1;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 43)) {
    _note = 2;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 44)) {
    _note = 3;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 57)) {
    _note = 4;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 58)) {
    _note = 5;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + + (attr_channel-1)) && (data2) && (data1 == 59)) {
    _note = 6;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 60)) {
    _note = 7;
    _gate = 1;
} 

else if (((status == MIDI_NOTE_ON + (attr_channel-1)) && (!data2))||          (status == MIDI_NOTE_OFF + (attr_channel-1))) {
    _gate = 0;
  }
 
 else if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == MIDI_C_ALL_NOTES_OFF)) {
   _gate = 0;
}]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="d50e35cb-e72b-48cf-a391-f440019d3b7a" name="x_3" x="686" y="2128">
      <params>
         <int32 name="offset" value="27000"/>
         <int32 name="offsetoff" value="8192"/>
         <int32 name="offsetbuttons" value="36024"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="lcxl2"/>
         <spinner attributeName="startcc" value="77"/>
         <spinner attributeName="channel" value="9"/>
      </attribs>
      <object id="patch/object" uuid="d50e35cb-e72b-48cf-a391-f440019d3b7a">
         <sDescription>read 8 values from a table,starting from &apos;offset&apos;</sDescription>
         <author>robert schirmer</author>
         <license>who cares</license>
         <inlets>
            <int32 name="step" description="sets an offset for writing to the table"/>
            <int32 name="offset"/>
            <bool32 name="active"/>
            <bool32 name="shift"/>
         </inlets>
         <outlets>
            <frac32 name="v0"/>
            <frac32 name="v1"/>
            <frac32 name="v2"/>
            <frac32 name="v3"/>
            <frac32 name="v4"/>
            <frac32 name="v5"/>
            <frac32 name="v6"/>
            <frac32 name="v7"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="offset" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="1000000"/>
            </int32>
            <int32 name="offsetoff">
               <MinValue i="0"/>
               <MaxValue i="10000"/>
            </int32>
            <int32 name="offsetbuttons">
               <MinValue i="0"/>
               <MaxValue i="1000000"/>
            </int32>
         </params>
         <attribs>
            <objref name="table"/>
            <spinner name="startcc" MinValue="0" MaxValue="127" DefaultValue="0"/>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="9"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
int off1;
int off2;
int off3;
int off4;
int off5;
int off6;
int off7;
int off8;
bool op;
int8_t cc;
int8_t cc2;
int8_t cc3;
int8_t cc4;
int8_t cc5;
int8_t cc6;
int8_t cc7;
int8_t cc8;
int8_t cv;
int8_t cv2;
int8_t cv3;
int8_t cv4;
int8_t cv5;
int8_t cv6;
int8_t cv7;
int8_t cv8;
int8_t ccoff;
int8_t cvoff;
int8_t _note;
int8_t cvprev;
uint8_t _gate;
uint8_t prevcv;
uint8_t prevcc;

uint8_t end;
uint8_t start;
uint32_t offset;]]></code.declaration>
         <code.init><![CDATA[prevcv=  0;
prevcc = 0;
cvprev = 0;]]></code.init>
         <code.krate><![CDATA[start = attr_startcc;
end = start + 8;
offset = (inlet_step*8) + (inlet_offset + param_offset);

//get button value
off1= attr_table.array[__USAT((param_offsetbuttons),attr_table.LENGTHPOW)]<<attr_table.GAIN;
off2= attr_table.array[__USAT((param_offsetbuttons+1),attr_table.LENGTHPOW)]<<attr_table.GAIN;
off3= attr_table.array[__USAT((param_offsetbuttons+2),attr_table.LENGTHPOW)]<<attr_table.GAIN;
off4= attr_table.array[__USAT((param_offsetbuttons+3),attr_table.LENGTHPOW)]<<attr_table.GAIN;
off5= attr_table.array[__USAT((param_offsetbuttons+4),attr_table.LENGTHPOW)]<<attr_table.GAIN;
off6= attr_table.array[__USAT((param_offsetbuttons+5),attr_table.LENGTHPOW)]<<attr_table.GAIN;
off7= attr_table.array[__USAT((param_offsetbuttons+6),attr_table.LENGTHPOW)]<<attr_table.GAIN;
off8= attr_table.array[__USAT((param_offsetbuttons+7),attr_table.LENGTHPOW)]<<attr_table.GAIN;

//automation off value
if ((!(inlet_shift>0))&&(cvoff!=cvprev)){
if ((ccoff >= start) && (ccoff < end)) {

if ((cvoff != prevcv)||(ccoff != prevcc)){
      attr_table.array[(ccoff - start) + (param_offsetoff+inlet_offset+ param_offset)]= ((cvoff << 20) >>attr_table.GAIN);
      prevcv = cvoff; 
      prevcc = ccoff;   
   }  
}
}
if (inlet_shift>0){cvprev=cvoff;}

//buttons
if (inlet_active){
if ((_gate>0) && !ntrig) {
      ntrig=1;
      op = attr_table.array[(_note + param_offsetbuttons)];
      op = !op ;
         attr_table.array[(_note + param_offsetbuttons)]= (op * (__SSAT(((1<<27)),28)>>attr_table.GAIN));
         
   }
   if (!(_gate>0)) {
   	ntrig=0;
   }}

//recording
if ((!off1)&&(cc==start)){
      attr_table.array[(cc - start) + offset]= ((cv << 20) >>attr_table.GAIN);
   }  

if ((!off2)&&(cc2==(start+1))){
      attr_table.array[(cc2 - start) + offset]= ((cv2 << 20) >>attr_table.GAIN);
   }
if ((!off3)&&(cc3==(start+2))){
      attr_table.array[(cc3 - start) + offset]= ((cv3 << 20) >>attr_table.GAIN);
   }
if ((!off4)&&(cc4==(start+3))){
      attr_table.array[(cc4 - start) + offset]= ((cv4 << 20) >>attr_table.GAIN);
   }
if ((!off5)&&(cc5==(start+4))){
      attr_table.array[(cc5 - start) + offset]= ((cv5 << 20) >>attr_table.GAIN);
   }
if ((!off6)&&(cc6==(start+5))){
      attr_table.array[(cc6 - start) + offset]= ((cv6 << 20) >>attr_table.GAIN);
   }
if ((!off7)&&(cc7==(start+6))){
      attr_table.array[(cc7 - start) + offset]= ((cv7 << 20) >>attr_table.GAIN);
   }
if ((!off8)&&(cc8==(start+7))){
      attr_table.array[(cc8 - start) + offset]= ((cv8 << 20) >>attr_table.GAIN);
   }

//playback

if (off1) {
outlet_v0= attr_table.array[__USAT(((offset) + 0),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (!off1) {
outlet_v0= attr_table.array[__USAT((param_offsetoff + 0+inlet_offset+ param_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (off2) {
outlet_v1= attr_table.array[__USAT(((offset) + 1),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (!off2) {
outlet_v1= attr_table.array[__USAT((param_offsetoff + 1+inlet_offset+ param_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (off3) {
outlet_v2= attr_table.array[__USAT(((offset) + 2),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (!off3) {
outlet_v2= attr_table.array[__USAT((param_offsetoff + 2+inlet_offset+ param_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (off4) {
outlet_v3= attr_table.array[__USAT(((offset) + 3),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (!off4) {
outlet_v3= attr_table.array[__USAT((param_offsetoff + 3+inlet_offset+ param_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (off5) {
outlet_v4= attr_table.array[__USAT(((offset) + 4),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (!off5) {
outlet_v4= attr_table.array[__USAT((param_offsetoff + 4+inlet_offset+ param_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (off6) {
outlet_v5= attr_table.array[__USAT(((offset) + 5),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (!off6) {
outlet_v5= attr_table.array[__USAT((param_offsetoff + 5+inlet_offset+ param_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (off7) {
outlet_v6= attr_table.array[__USAT(((offset) + 6),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (!off7) {
outlet_v6= attr_table.array[__USAT((param_offsetoff + 6+inlet_offset+ param_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (off8) {
outlet_v7= attr_table.array[__USAT(((offset) + 7),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}
if (!off8) {
outlet_v7= attr_table.array[__USAT((param_offsetoff + 7+inlet_offset+ param_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
}]]></code.krate>
         <code.midihandler><![CDATA[if (status == attr_midichannel + MIDI_CONTROL_CHANGE) {ccoff = data1;cvoff = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1==attr_startcc)) {cc = data1;cv = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1==(attr_startcc+1))) {cc2 = data1;cv2 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1==(attr_startcc+2))) {cc3 = data1;cv3 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1==(attr_startcc+3))) {cc4 = data1;cv4 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1==(attr_startcc+4))) {cc5 = data1;cv5 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1==(attr_startcc+5))) {cc6 = data1;cv6 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1==(attr_startcc+6))) {cc7 = data1;cv7 = data2;}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1==(attr_startcc+7))) {cc8 = data1;cv8 = data2;}


if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 73)) {
    _note = 0;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 74)) {
    _note = 1;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 75)) {
    _note = 2;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 76)) {
    _note = 3;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 89)) {
    _note = 4;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 90)) {
    _note = 5;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 91)) {
    _note = 6;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 92)) {
    _note = 7;
    _gate = 1;
} 
else if (((status == MIDI_NOTE_ON + (attr_channel-1)) && (!data2))||          (status == MIDI_NOTE_OFF + (attr_channel-1))) {
    _gate = 0;
  }
 
 else if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == MIDI_C_ALL_NOTES_OFF)) {
   _gate = 0;
}]]></code.midihandler>
      </object>
   </patchobj>
   <comment type="patch/comment" x="966" y="2184" text="midi out malcolm and trevor"/>
   <obj type="rbrt/midi/out/cc send 8" uuid="b878aae8-2a28-4f01-8581-5d87525a3b9e" name="cc_4" x="840" y="2212">
      <params>
         <int32 name="startcc" value="10"/>
      </params>
      <attribs>
         <combo attributeName="device" selection="din"/>
         <spinner attributeName="channel" value="16"/>
      </attribs>
   </obj>
   <obj type="rbrt/midi/out/cc send 8" uuid="b878aae8-2a28-4f01-8581-5d87525a3b9e" name="cc_2" x="994" y="2212">
      <params>
         <int32 name="startcc" value="20"/>
      </params>
      <attribs>
         <combo attributeName="device" selection="din"/>
         <spinner attributeName="channel" value="16"/>
      </attribs>
   </obj>
   <obj type="rbrt/midi/out/cc send 8" uuid="b878aae8-2a28-4f01-8581-5d87525a3b9e" name="cc_3" x="1148" y="2212">
      <params>
         <int32 name="startcc" value="30"/>
      </params>
      <attribs>
         <combo attributeName="device" selection="din"/>
         <spinner attributeName="channel" value="16"/>
      </attribs>
   </obj>
   <obj type="rbrt/midi/out/cc send 8" uuid="b878aae8-2a28-4f01-8581-5d87525a3b9e" name="cc_1" x="1288" y="2212">
      <params>
         <int32 name="startcc" value="40"/>
      </params>
      <attribs>
         <combo attributeName="device" selection="din"/>
         <spinner attributeName="channel" value="16"/>
      </attribs>
   </obj>
   <comment type="patch/comment" x="2114" y="2338" text="shiftnote for snapshot"/>
   <comment type="patch/comment" x="2422" y="2338" text="save snapshots to sdcard"/>
   <obj type="midi/note in gate" uuid="b08779f8-6dd0-4d7d-9f55-0d4f15d7fb32" name="note_11" x="2114" y="2352">
      <params/>
      <attribs>
         <spinner attributeName="note" value="107"/>
         <spinner attributeName="channel" value="9"/>
      </attribs>
   </obj>
   <obj type="logic/and 2" uuid="c67031682f552aa0a80b23377495c51ea28a8c9c" name="and_1" x="2212" y="2352">
      <params/>
      <attribs/>
   </obj>
   <obj type="midi/note out gate" uuid="a8b48ecf-79f1-4cb3-8193-aee6983e5198" name="note_13" x="2282" y="2352">
      <params/>
      <attribs>
         <combo attributeName="device" selection="din"/>
         <spinner attributeName="channel" value="3"/>
         <spinner attributeName="note" value="21"/>
      </attribs>
   </obj>
   <obj type="string/c" uuid="4aa90a90c435a742ddfa152d232883fc5b2f1b3" name="c_1" x="2422" y="2352">
      <params/>
      <attribs>
         <table attributeName="str" table="/daughter1"/>
      </attribs>
   </obj>
   <obj type="table/save" uuid="3e4108b607d56d9e1cd10abb898b58eea11e53b2" name="save_1" x="2590" y="2352">
      <params/>
      <attribs>
         <objref attributeName="table" obj="preset"/>
      </attribs>
   </obj>
   <obj type="rbrt/patching/loadbang" uuid="45d1f29d-ac62-4e5b-86f8-2201d2f6c689" name="loadbang_3" x="2142" y="2478">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="658" y="2506" text="midi sync light"/>
   <patchobj type="patch/object" uuid="21d767be-1393-42b2-8b79-1f3c8f144832" name="+_7" x="602" y="2520">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="21d767be-1393-42b2-8b79-1f3c8f144832">
         <sDescription>add</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>math.axh</helpPatch>
         <inlets>
            <bool32 name="in1"/>
         </inlets>
         <outlets>
            <int32 name="out" description="out"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[if (inlet_in1)
{outlet_out=3;}
else if (!inlet_in1)
{outlet_out=0;}]]></code.krate>
      </object>
   </patchobj>
   <obj type="logic/change" uuid="96e39ae624c3f3c952cec4a95e1986ee0104f718" name="change_4" x="686" y="2520">
      <params/>
      <attribs/>
   </obj>
   <obj type="ctrl/i" uuid="a3786816db6ea5bc6ac4193a5cccdb2c83b83496" name="i_4" x="532" y="2562">
      <params>
         <int32 name="value" value="106"/>
      </params>
      <attribs/>
   </obj>
   <obj type="timer/delayedpulse" uuid="3f05ee534ca67755fb20c7437f9e4de3d4c2f73d" name="delayedpulse_2" x="2310" y="2562">
      <params>
         <frac32.s.map name="delay" value="-25.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="69d49725-9620-4da1-97ac-ccfd20248cd8" name="cc_13" x="742" y="2576">
      <params/>
      <attribs>
         <combo attributeName="device" selection="usb host port 1"/>
      </attribs>
      <object id="patch/object" uuid="69d49725-9620-4da1-97ac-ccfd20248cd8">
         <sDescription>Midi controller output to any CC number and channel</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>midi_out.axh</helpPatch>
         <inlets>
            <frac32.positive name="v" description="value"/>
            <int32.positive name="cc" description="midi Continous Controller number 0-127"/>
            <int32.positive name="chan" description="channel 1..16"/>
            <bool32.rising name="trig" description="trigger"/>
         </inlets>
         <outlets/>
         <displays/>
         <params/>
         <attribs>
            <combo name="device">
               <MenuEntries>
                  <string>din</string>
                  <string>usb host port 1</string>
                  <string>usb host port 2</string>
                  <string>usb host port 3</string>
                  <string>usb host port 4</string>
                  <string>internal port 1</string>
                  <string>internal port 2</string>
                  <string>usb device port 1</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_DIN, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 2</string>
                  <string>MIDI_DEVICE_USB_HOST, 3</string>
                  <string>MIDI_DEVICE_USB_HOST, 4</string>
                  <string>MIDI_DEVICE_INTERNAL, 1</string>
                  <string>MIDI_DEVICE_INTERNAL, 2</string>
                  <string>MIDI_DEVICE_USB_DEVICE, 1</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
]]></code.declaration>
         <code.krate><![CDATA[if ((inlet_trig>0) && !ntrig) {MidiSend3((midi_device_t) attr_device, MIDI_CONTROL_CHANGE + ((8)&0xF),inlet_cc,__USAT(inlet_v>>20,7));  ntrig=1;}
if (!(inlet_trig>0)) ntrig=0;]]></code.krate>
      </object>
   </patchobj>
   <obj type="midi/note in gate" uuid="b08779f8-6dd0-4d7d-9f55-0d4f15d7fb32" name="note_19" x="2100" y="2590">
      <params/>
      <attribs>
         <spinner attributeName="note" value="21"/>
         <spinner attributeName="channel" value="3"/>
      </attribs>
   </obj>
   <obj type="midi/note in gate" uuid="b08779f8-6dd0-4d7d-9f55-0d4f15d7fb32" name="note_1" x="1386" y="2632">
      <params/>
      <attribs>
         <spinner attributeName="note" value="108"/>
         <spinner attributeName="channel" value="9"/>
      </attribs>
   </obj>
   <obj type="logic/and 2" uuid="c67031682f552aa0a80b23377495c51ea28a8c9c" name="ptchdown" x="1498" y="2632">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1610" y="2646" text="patch change"/>
   <obj type="logic/and 2" uuid="c67031682f552aa0a80b23377495c51ea28a8c9c" name="ptchup" x="1498" y="2688">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="588" y="2702" text="play light"/>
   <obj type="djrm/logic/counter2_init_start" uuid="d5936f238ab92e53ac93d5927c3b43ceef998dc1" name="counter2_init_start_1" x="532" y="2716">
      <params>
         <int32 name="maximum" value="3"/>
         <int32 name="init" value="3"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/i" uuid="a3786816db6ea5bc6ac4193a5cccdb2c83b83496" name="i_3" x="686" y="2716">
      <params>
         <int32 name="value" value="104"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="69d49725-9620-4da1-97ac-ccfd20248cd8" name="cc_12" x="742" y="2716">
      <params/>
      <attribs>
         <combo attributeName="device" selection="usb host port 1"/>
      </attribs>
      <object id="patch/object" uuid="69d49725-9620-4da1-97ac-ccfd20248cd8">
         <sDescription>Midi controller output to any CC number and channel</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>midi_out.axh</helpPatch>
         <inlets>
            <frac32.positive name="v" description="value"/>
            <int32.positive name="cc" description="midi Continous Controller number 0-127"/>
            <int32.positive name="chan" description="channel 1..16"/>
            <bool32.rising name="trig" description="trigger"/>
         </inlets>
         <outlets/>
         <displays/>
         <params/>
         <attribs>
            <combo name="device">
               <MenuEntries>
                  <string>din</string>
                  <string>usb host port 1</string>
                  <string>usb host port 2</string>
                  <string>usb host port 3</string>
                  <string>usb host port 4</string>
                  <string>internal port 1</string>
                  <string>internal port 2</string>
                  <string>usb device port 1</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_DIN, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 2</string>
                  <string>MIDI_DEVICE_USB_HOST, 3</string>
                  <string>MIDI_DEVICE_USB_HOST, 4</string>
                  <string>MIDI_DEVICE_INTERNAL, 1</string>
                  <string>MIDI_DEVICE_INTERNAL, 2</string>
                  <string>MIDI_DEVICE_USB_DEVICE, 1</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
]]></code.declaration>
         <code.krate><![CDATA[if ((inlet_trig>0) && !ntrig) {MidiSend3((midi_device_t) attr_device, MIDI_CONTROL_CHANGE + ((8)&0xF),inlet_cc,__USAT(inlet_v>>20,7));  ntrig=1;}
if (!(inlet_trig>0)) ntrig=0;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="ed9c8c54-86ef-4f9d-9969-4e48f4d55db9" name="note_5" x="1582" y="2716">
      <params/>
      <attribs>
         <combo attributeName="device" selection="din"/>
         <spinner attributeName="channel" value="15"/>
         <spinner attributeName="note" value="10"/>
      </attribs>
      <object id="patch/object" uuid="ed9c8c54-86ef-4f9d-9969-4e48f4d55db9">
         <sDescription>Midi note output</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>midi_out.axh</helpPatch>
         <inlets>
            <bool32.rising name="trig" description="trigger"/>
         </inlets>
         <outlets/>
         <displays/>
         <params/>
         <attribs>
            <combo name="device">
               <MenuEntries>
                  <string>din</string>
                  <string>usb host port 1</string>
                  <string>usb host port 2</string>
                  <string>usb host port 3</string>
                  <string>usb host port 4</string>
                  <string>internal port 1</string>
                  <string>internal port 2</string>
                  <string>usb device port 1</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_DIN, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 2</string>
                  <string>MIDI_DEVICE_USB_HOST, 3</string>
                  <string>MIDI_DEVICE_USB_HOST, 4</string>
                  <string>MIDI_DEVICE_INTERNAL, 1</string>
                  <string>MIDI_DEVICE_INTERNAL, 2</string>
                  <string>MIDI_DEVICE_USB_DEVICE, 1</string>
               </CEntries>
            </combo>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="0"/>
            <spinner name="note" MinValue="1" MaxValue="127" DefaultValue="1"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
int lastnote;]]></code.declaration>
         <code.init><![CDATA[ntrig=0;
]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig>0) && !ntrig) {
lastnote = (attr_note)&0x7F;
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (attr_channel-1),lastnote,127);  ntrig=1;
}
if (!(inlet_trig>0) && ntrig) {MidiSend3((midi_device_t) attr_device, MIDI_NOTE_OFF + (attr_channel-1),lastnote,__USAT(0,7)); ntrig=0;}]]></code.krate>
      </object>
   </patchobj>
   <obj type="midi/note out gate" uuid="a8b48ecf-79f1-4cb3-8193-aee6983e5198" name="note_10" x="1736" y="2716">
      <params/>
      <attribs>
         <combo attributeName="device" selection="din"/>
         <spinner attributeName="channel" value="15"/>
         <spinner attributeName="note" value="11"/>
      </attribs>
   </obj>
   <obj type="string/c" uuid="4aa90a90c435a742ddfa152d232883fc5b2f1b3" name="c_8" x="1974" y="2716">
      <params/>
      <attribs>
         <table attributeName="str" table="/loopm"/>
      </attribs>
   </obj>
   <obj type="table/save" uuid="3e4108b607d56d9e1cd10abb898b58eea11e53b2" name="save_5" x="2254" y="2716">
      <params/>
      <attribs>
         <objref attributeName="table" obj="rec"/>
      </attribs>
   </obj>
   <obj type="timer/delayedpulseduration" uuid="3b7bf0a7b7f89fad06a734667f48de051deb5c78" name="delayedpulseduration_2" x="2450" y="2716">
      <params>
         <frac32.s.map name="delay" value="-36.0"/>
         <frac32.s.map name="pulselength" value="21.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="table/load" uuid="600cc22c6734d23a82620da1a14e78782a7e168e" name="load_6" x="2604" y="2716">
      <params/>
      <attribs>
         <objref attributeName="table" obj="rec"/>
      </attribs>
   </obj>
   <obj type="patch/bankindex" uuid="943bd281-10a5-4994-9876-11a3b1fbde8a" name="bankindex_1" x="1890" y="2814">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+1" uuid="13c1a4574bb81783beb8839e81782b9a34e3fc17" name="+1_1" x="2002" y="2814">
      <params/>
      <attribs/>
   </obj>
   <obj type="patch/load i" uuid="b79124f5b7d1e8b39e187677ddab6260ce8c60a3" name="load_1" x="2072" y="2814">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="0a57c013-268c-4870-84a5-806aca382ec2" name="i_16" x="140" y="2856">
      <params/>
      <attribs>
         <spinner attributeName="shift" value="3"/>
      </attribs>
      <object id="patch/object" uuid="0a57c013-268c-4870-84a5-806aca382ec2">
         <sDescription>positive integer control</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets>
            <bool32 name="active"/>
            <int32 name="offset"/>
         </inlets>
         <outlets>
            <int32.positive name="out" description="output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <spinner name="shift" MinValue="0" MaxValue="100000" DefaultValue="0"/>
         </attribs>
         <includes/>
         <code.krate><![CDATA[if (inlet_active>0)
{outlet_out= attr_shift;}
else if (!(inlet_active>0))
{outlet_out = inlet_offset;}]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="402" y="2870" text="bottom button lights"/>
   <obj type="math/-1" uuid="5fd46bab471bb6509ae83de702dea72933683a98" name="-1_1" x="2002" y="2870">
      <params/>
      <attribs/>
   </obj>
   <obj type="patch/load i" uuid="b79124f5b7d1e8b39e187677ddab6260ce8c60a3" name="load_2" x="2072" y="2870">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/change" uuid="96e39ae624c3f3c952cec4a95e1986ee0104f718" name="change_3" x="252" y="2884">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="7b3da513-fc06-40c1-b5d2-dc794956bb9e" name="launch_3" x="350" y="2884">
      <params>
         <bool32.tgl name="active" value="1"/>
         <int32 name="length" value="8"/>
         <int32 name="start" value="0"/>
         <int32 name="offset" value="36000"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="lcxl2"/>
         <combo attributeName="device" selection="usb host port / LP"/>
         <combo attributeName="blocksize" selection="1"/>
         <combo attributeName="coloron" selection="off"/>
         <combo attributeName="coloroff" selection="off"/>
         <spinner attributeName="channel" value="9"/>
      </attribs>
      <object id="patch/object" uuid="7b3da513-fc06-40c1-b5d2-dc794956bb9e">
         <sDescription>visual feedback of table data for midi controllers</sDescription>
         <author>Robert Schirmer</author>
         <license>BSD</license>
         <helpPatch>launchpad.axh</helpPatch>
         <rotatedParams>true</rotatedParams>
         <inlets>
            <int32 name="offset" description="offset in the table to read from"/>
            <int32 name="start" description="display start modulation"/>
            <int32 name="length" description="display length modulation"/>
            <int32 name="coloron" description="color on modulation"/>
            <int32 name="coloroff" description="color off modulation"/>
            <bool32.risingfalling name="active" description="active??"/>
            <bool32.rising name="redraw"/>
         </inlets>
         <outlets>
            <int32 name="offset" description="offset through"/>
            <int32 name="start" description="start through"/>
            <int32 name="coloron" description="color on through"/>
            <int32 name="coloroff" description="color off through"/>
            <int32 name="blocksize"/>
         </outlets>
         <displays/>
         <params>
            <bool32.tgl name="active" description="active??"/>
            <int32 name="length" description="length of the area to display">
               <MinValue i="0"/>
               <MaxValue i="127"/>
            </int32>
            <int32 name="start" description="display start on the LP">
               <MinValue i="0"/>
               <MaxValue i="127"/>
            </int32>
            <int32 name="offset">
               <MinValue i="0"/>
               <MaxValue i="10000000"/>
            </int32>
         </params>
         <attribs>
            <objref name="table" description="name of the table to display"/>
            <combo name="device">
               <MenuEntries>
                  <string>usb host port / LP</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_USB_HOST, 9</string>
               </CEntries>
            </combo>
            <combo name="blocksize">
               <MenuEntries>
                  <string>1</string>
                  <string>2</string>
                  <string>4</string>
                  <string>8</string>
                  <string>16</string>
                  <string>32</string>
                  <string>64</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>4</string>
                  <string>5</string>
                  <string>6</string>
                  <string>7</string>
               </CEntries>
            </combo>
            <combo name="coloron">
               <MenuEntries>
                  <string>off</string>
                  <string>red W</string>
                  <string>red M</string>
                  <string>red S</string>
                  <string>orange W</string>
                  <string>orange S</string>
                  <string>green W</string>
                  <string>green M</string>
                  <string>green S</string>
                  <string>lime 1 W</string>
                  <string>lime 1 S</string>
                  <string>lime 2</string>
                  <string>yellow W</string>
                  <string>yellow M</string>
                  <string>yellow S</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>18</string>
                  <string>35</string>
                  <string>16</string>
                  <string>32</string>
                  <string>48</string>
                  <string>33</string>
                  <string>50</string>
                  <string>49</string>
                  <string>17</string>
                  <string>34</string>
                  <string>51</string>
               </CEntries>
            </combo>
            <combo name="coloroff">
               <MenuEntries>
                  <string>off</string>
                  <string>red W</string>
                  <string>red M</string>
                  <string>red S</string>
                  <string>orange W</string>
                  <string>orange S</string>
                  <string>green W</string>
                  <string>green M</string>
                  <string>green S</string>
                  <string>lime 1 W</string>
                  <string>lime 1 S</string>
                  <string>lime 2</string>
                  <string>yellow W</string>
                  <string>yellow M</string>
                  <string>yellow S</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>18</string>
                  <string>35</string>
                  <string>16</string>
                  <string>32</string>
                  <string>48</string>
                  <string>33</string>
                  <string>50</string>
                  <string>49</string>
                  <string>17</string>
                  <string>34</string>
                  <string>51</string>
               </CEntries>
            </combo>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="9"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
int rtrig;
uint8_t map[127];
int i;
int vt;
int trigt;
int prevt[64];
int length;
int plength;

uint8_t coloron;
uint8_t start;
uint8_t coloroff;
uint32_t offset;]]></code.declaration>
         <code.init><![CDATA[{ 
  int i;
  for(i=0;i<16;i++) prevt[i]= -666 ;}

  { 
  int i;
  for(i=0;i<16;i++) 

  map[0] = 41;
map[1] = 42;
map[2] = 43;
map[3] = 44;
map[4] = 57;
map[5] = 58;
map[6] = 59;
map[7] = 60;
map[8] = 73;
map[9] = 74;
map[10] = 75;
map[11] = 76;
map[12] = 89;
map[13] = 90;
map[14] = 91;
map[15] = 92;
}]]></code.init>
         <code.krate><![CDATA[coloron = inlet_coloron + attr_coloron;
coloroff = inlet_coloroff + attr_coloroff;
offset = param_offset + inlet_offset;
start = inlet_start+ param_start;
length = inlet_length +param_length;

//redraw
if (inlet_redraw > 0)
  { 
  int ii;
  for(ii=0;ii<16;ii++) prevt[ii]= -666 ;}
  
  { 
  int ii;
  for(ii=0;ii<16;ii++) 

  map[0] = 41;
map[1] = 42;
map[2] = 43;
map[3] = 44;
map[4] = 57;
map[5] = 58;
map[6] = 59;
map[7] = 60;
map[8] = 73;
map[9] = 74;
map[10] = 75;
map[11] = 76;
map[12] = 89;
map[13] = 90;
map[14] = 91;
map[15] = 92;
}




    
//display steps
  if (inlet_active || param_active) { 
{ 
  i += 1;
  if (i == (length)) i = 0; 
  vt = attr_table.array[__USAT((offset + (i << attr_blocksize)),attr_table.LENGTHPOW)]<<attr_table.GAIN;
if (prevt[i] != vt ) trigt = 0;
prevt[i] = vt;
if (vt && (!trigt)) {
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (attr_channel-1)   ,map[(i + start)],(coloron));  trigt=1;
}
if ((!vt) && (!trigt)){
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (attr_channel-1)  ,map[(i + start)],(coloroff));  trigt=1;
}
 }
}



outlet_coloron = coloron;
outlet_coloroff = coloroff;
outlet_offset = offset;
outlet_start = start;
outlet_blocksize = attr_blocksize;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="d8ced0f6-4fc4-464c-b571-d078152d4138" name="launch_4" x="644" y="2884">
      <params>
         <bool32.tgl name="active" value="1"/>
         <int32 name="length" value="8"/>
         <int32 name="start" value="8"/>
         <int32 name="offset" value="36008"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="lcxl2"/>
         <combo attributeName="device" selection="usb host port / LP"/>
         <combo attributeName="blocksize" selection="1"/>
         <combo attributeName="coloron" selection="off"/>
         <combo attributeName="coloroff" selection="off"/>
         <spinner attributeName="channel" value="9"/>
      </attribs>
      <object id="patch/object" uuid="d8ced0f6-4fc4-464c-b571-d078152d4138">
         <sDescription>visual feedback of table data for midi controllers</sDescription>
         <author>Robert Schirmer</author>
         <license>BSD</license>
         <helpPatch>launchpad.axh</helpPatch>
         <rotatedParams>true</rotatedParams>
         <inlets>
            <int32 name="offset" description="offset in the table to read from"/>
            <int32 name="start" description="display start modulation"/>
            <int32 name="length" description="display length modulation"/>
            <int32 name="coloron" description="color on modulation"/>
            <int32 name="coloroff" description="color off modulation"/>
            <bool32.risingfalling name="active" description="active??"/>
            <bool32.rising name="redraw"/>
         </inlets>
         <outlets>
            <int32 name="offset" description="offset through"/>
            <int32 name="start" description="start through"/>
            <int32 name="coloron" description="color on through"/>
            <int32 name="coloroff" description="color off through"/>
            <int32 name="blocksize"/>
         </outlets>
         <displays/>
         <params>
            <bool32.tgl name="active" description="active??"/>
            <int32 name="length" description="length of the area to display">
               <MinValue i="0"/>
               <MaxValue i="127"/>
            </int32>
            <int32 name="start" description="display start on the LP">
               <MinValue i="0"/>
               <MaxValue i="127"/>
            </int32>
            <int32 name="offset">
               <MinValue i="0"/>
               <MaxValue i="10000000"/>
            </int32>
         </params>
         <attribs>
            <objref name="table" description="name of the table to display"/>
            <combo name="device">
               <MenuEntries>
                  <string>usb host port / LP</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_USB_HOST, 9</string>
               </CEntries>
            </combo>
            <combo name="blocksize">
               <MenuEntries>
                  <string>1</string>
                  <string>2</string>
                  <string>4</string>
                  <string>8</string>
                  <string>16</string>
                  <string>32</string>
                  <string>64</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>4</string>
                  <string>5</string>
                  <string>6</string>
                  <string>7</string>
               </CEntries>
            </combo>
            <combo name="coloron">
               <MenuEntries>
                  <string>off</string>
                  <string>red W</string>
                  <string>red M</string>
                  <string>red S</string>
                  <string>orange W</string>
                  <string>orange S</string>
                  <string>green W</string>
                  <string>green M</string>
                  <string>green S</string>
                  <string>lime 1 W</string>
                  <string>lime 1 S</string>
                  <string>lime 2</string>
                  <string>yellow W</string>
                  <string>yellow M</string>
                  <string>yellow S</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>18</string>
                  <string>35</string>
                  <string>16</string>
                  <string>32</string>
                  <string>48</string>
                  <string>33</string>
                  <string>50</string>
                  <string>49</string>
                  <string>17</string>
                  <string>34</string>
                  <string>51</string>
               </CEntries>
            </combo>
            <combo name="coloroff">
               <MenuEntries>
                  <string>off</string>
                  <string>red W</string>
                  <string>red M</string>
                  <string>red S</string>
                  <string>orange W</string>
                  <string>orange S</string>
                  <string>green W</string>
                  <string>green M</string>
                  <string>green S</string>
                  <string>lime 1 W</string>
                  <string>lime 1 S</string>
                  <string>lime 2</string>
                  <string>yellow W</string>
                  <string>yellow M</string>
                  <string>yellow S</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>18</string>
                  <string>35</string>
                  <string>16</string>
                  <string>32</string>
                  <string>48</string>
                  <string>33</string>
                  <string>50</string>
                  <string>49</string>
                  <string>17</string>
                  <string>34</string>
                  <string>51</string>
               </CEntries>
            </combo>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="9"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
int rtrig;
uint8_t map[127];
int i;
int vt;
int trigt;
int prevt[64];
int length;
int plength;

uint8_t coloron;
uint8_t start;
uint8_t coloroff;
uint32_t offset;]]></code.declaration>
         <code.init><![CDATA[{ 
  int i;
  for(i=0;i<16;i++) prevt[i]= -666 ;}

  { 
  int i;
  for(i=0;i<16;i++) 

  map[0] = 41;
map[1] = 42;
map[2] = 43;
map[3] = 44;
map[4] = 57;
map[5] = 58;
map[6] = 59;
map[7] = 60;
map[8] = 73;
map[9] = 74;
map[10] = 75;
map[11] = 76;
map[12] = 89;
map[13] = 90;
map[14] = 91;
map[15] = 92;
}]]></code.init>
         <code.krate><![CDATA[coloron = inlet_coloron + attr_coloron;
coloroff = inlet_coloroff + attr_coloroff;
offset = param_offset + inlet_offset;
start = inlet_start+ param_start;
length = inlet_length +param_length;

//redraw
if (inlet_redraw > 0)
  { 
  int ii;
  for(ii=0;ii<16;ii++) prevt[ii]= -666 ;}
  
  { 
  int ii;
  for(ii=0;ii<16;ii++) 

  map[0] = 41;
map[1] = 42;
map[2] = 43;
map[3] = 44;
map[4] = 57;
map[5] = 58;
map[6] = 59;
map[7] = 60;
map[8] = 73;
map[9] = 74;
map[10] = 75;
map[11] = 76;
map[12] = 89;
map[13] = 90;
map[14] = 91;
map[15] = 92;
}




    
//display steps
  if (inlet_active || param_active) { 
{ 
  i += 1;
  if (i == (length)) i = 0; 
  vt = attr_table.array[__USAT((offset + (i << attr_blocksize)),attr_table.LENGTHPOW)]<<attr_table.GAIN;
if (prevt[i] != vt ) trigt = 0;
prevt[i] = vt;
if (vt && (!trigt)) {
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (attr_channel-1)   ,map[(i + start)],(coloron));  trigt=1;
}
if ((!vt) && (!trigt)){
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (attr_channel-1)  ,map[(i + start)],(coloroff));  trigt=1;
}
 }
}



outlet_coloron = coloron;
outlet_coloroff = coloroff;
outlet_offset = offset;
outlet_start = start;
outlet_blocksize = attr_blocksize;]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="1400" y="2937" text="knob lights"/>
   <patchobj type="patch/object" uuid="aa2c5ef4-0acd-4f88-8567-67081da344d9" name="launch_8" x="1386" y="2954">
      <params>
         <bool32.tgl name="active" value="1"/>
         <int32 name="length" value="8"/>
         <int32 name="start" value="0"/>
         <int32 name="offset" value="36000"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="lcxl2"/>
         <combo attributeName="device" selection="usb host port / LP"/>
         <combo attributeName="blocksize" selection="1"/>
         <spinner attributeName="Aoffset" value="0"/>
         <combo attributeName="Acolouron" selection="red S"/>
         <combo attributeName="Acolouroff" selection="off"/>
         <spinner attributeName="channel" value="9"/>
      </attribs>
      <object id="patch/object" uuid="aa2c5ef4-0acd-4f88-8567-67081da344d9">
         <sDescription>visual feedback of table data for midi controllers</sDescription>
         <author>Robert Schirmer</author>
         <license>BSD</license>
         <helpPatch>launchpad.axh</helpPatch>
         <rotatedParams>true</rotatedParams>
         <inlets>
            <int32 name="offset" description="offset in the table to read from"/>
            <int32 name="start" description="display start modulation"/>
            <int32 name="length" description="display length modulation"/>
            <bool32.risingfalling name="active" description="active??"/>
            <bool32.rising name="redraw"/>
         </inlets>
         <outlets>
            <int32 name="offset" description="offset through"/>
            <int32 name="start" description="start through"/>
            <int32 name="colouron" description="color on through"/>
            <int32 name="colouroff" description="color off through"/>
            <int32 name="blocksize"/>
         </outlets>
         <displays/>
         <params>
            <bool32.tgl name="active" description="active??"/>
            <int32 name="length" description="length of the area to display">
               <MinValue i="0"/>
               <MaxValue i="24"/>
            </int32>
            <int32 name="start" description="display start on the LP">
               <MinValue i="0"/>
               <MaxValue i="24"/>
            </int32>
            <int32 name="offset">
               <MinValue i="0"/>
               <MaxValue i="10000000"/>
            </int32>
         </params>
         <attribs>
            <objref name="table" description="name of the table to display"/>
            <combo name="device">
               <MenuEntries>
                  <string>usb host port / LP</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_USB_HOST, 9</string>
               </CEntries>
            </combo>
            <combo name="blocksize">
               <MenuEntries>
                  <string>1</string>
                  <string>2</string>
                  <string>4</string>
                  <string>8</string>
                  <string>16</string>
                  <string>32</string>
                  <string>64</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>4</string>
                  <string>5</string>
                  <string>6</string>
                  <string>7</string>
               </CEntries>
            </combo>
            <spinner name="Aoffset" MinValue="0" MaxValue="1000" DefaultValue="0"/>
            <combo name="Acolouron">
               <MenuEntries>
                  <string>off</string>
                  <string>red W</string>
                  <string>red M</string>
                  <string>red S</string>
                  <string>orange W</string>
                  <string>orange S</string>
                  <string>green W</string>
                  <string>green M</string>
                  <string>green S</string>
                  <string>lime 1 W</string>
                  <string>lime 1 S</string>
                  <string>lime 2</string>
                  <string>yellow W</string>
                  <string>yellow M</string>
                  <string>yellow S</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>18</string>
                  <string>35</string>
                  <string>16</string>
                  <string>32</string>
                  <string>48</string>
                  <string>33</string>
                  <string>50</string>
                  <string>49</string>
                  <string>17</string>
                  <string>34</string>
                  <string>51</string>
               </CEntries>
            </combo>
            <combo name="Acolouroff">
               <MenuEntries>
                  <string>off</string>
                  <string>red W</string>
                  <string>red M</string>
                  <string>red S</string>
                  <string>orange W</string>
                  <string>orange S</string>
                  <string>green W</string>
                  <string>green M</string>
                  <string>green S</string>
                  <string>lime 1 W</string>
                  <string>lime 1 S</string>
                  <string>lime 2</string>
                  <string>yellow W</string>
                  <string>yellow M</string>
                  <string>yellow S</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>18</string>
                  <string>35</string>
                  <string>16</string>
                  <string>32</string>
                  <string>48</string>
                  <string>33</string>
                  <string>50</string>
                  <string>49</string>
                  <string>17</string>
                  <string>34</string>
                  <string>51</string>
               </CEntries>
            </combo>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="9"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
int rtrig;
uint8_t map[127];
int i;
int vt;
int trigt;
int prevt[64];
int length;
int plength;

uint8_t colouron;
uint8_t start;
uint8_t colouroff;
uint32_t offset;]]></code.declaration>
         <code.init><![CDATA[{ 
  int i;
  for(i=0;i<24;i++) prevt[i]= -666 ;}

  { 
  int i;
  for(i=0;i<24;i++) 

map[0] = 13;
map[1] = 29;
map[2] = 45;
map[3] = 61;
map[4] = 77;
map[5] = 93;
map[6] = 109;
map[7] = 125;
map[8] = 14;
map[9] = 30;
map[10] = 46;
map[11] = 62;
map[12] = 78;
map[13] = 94;
map[14] = 110;
map[15] = 126;
 map[16] = 15;
map[17] = 31;
map[18] = 47;
map[19] = 63;
map[20] = 79;
map[21] = 95;
map[22] = 111;
map[23] = 127;
}]]></code.init>
         <code.krate><![CDATA[offset = param_offset + inlet_offset;
start = inlet_start+ param_start;
length = inlet_length +param_length;

//redraw
if (inlet_redraw > 0)
{ 
  int i;
  for(i=0;i<24;i++) prevt[i]= -666 ;}
{ 
  int ii;
  for(ii=0;ii<24;ii++) prevt[ii];
  }




    
//display steps
  if ((inlet_active || param_active) && (inlet_offset == attr_Aoffset)) { 
{ 
  i += 1;
  if (i == (length)) i = 0; 
  vt = attr_table.array[__USAT((offset + (i << attr_blocksize)),attr_table.LENGTHPOW)]<<attr_table.GAIN;
if (prevt[i] != vt ) trigt = 0;
prevt[i] = vt;
if (vt && (!trigt)) {
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (attr_channel-1)   ,map[(i + start)],(attr_Acolouron));  trigt=1;
}
if ((!vt) && (!trigt)){
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (attr_channel-1)  ,map[(i + start)],(attr_Acolouroff));  trigt=1;
}
 }
}



if (inlet_offset == attr_Aoffset)
{
outlet_colouron = attr_Acolouron;
outlet_colouroff = attr_Acolouroff;
}

outlet_offset = offset;
outlet_start = start;
outlet_blocksize = attr_blocksize;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="aa2c5ef4-0acd-4f88-8567-67081da344d9" name="launch_14" x="1736" y="2954">
      <params>
         <bool32.tgl name="active" value="1"/>
         <int32 name="length" value="8"/>
         <int32 name="start" value="8"/>
         <int32 name="offset" value="36008"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="lcxl2"/>
         <combo attributeName="device" selection="usb host port / LP"/>
         <combo attributeName="blocksize" selection="1"/>
         <spinner attributeName="Aoffset" value="0"/>
         <combo attributeName="Acolouron" selection="orange S"/>
         <combo attributeName="Acolouroff" selection="off"/>
         <spinner attributeName="channel" value="9"/>
      </attribs>
      <object id="patch/object" uuid="aa2c5ef4-0acd-4f88-8567-67081da344d9">
         <sDescription>visual feedback of table data for midi controllers</sDescription>
         <author>Robert Schirmer</author>
         <license>BSD</license>
         <helpPatch>launchpad.axh</helpPatch>
         <rotatedParams>true</rotatedParams>
         <inlets>
            <int32 name="offset" description="offset in the table to read from"/>
            <int32 name="start" description="display start modulation"/>
            <int32 name="length" description="display length modulation"/>
            <bool32.risingfalling name="active" description="active??"/>
            <bool32.rising name="redraw"/>
         </inlets>
         <outlets>
            <int32 name="offset" description="offset through"/>
            <int32 name="start" description="start through"/>
            <int32 name="colouron" description="color on through"/>
            <int32 name="colouroff" description="color off through"/>
            <int32 name="blocksize"/>
         </outlets>
         <displays/>
         <params>
            <bool32.tgl name="active" description="active??"/>
            <int32 name="length" description="length of the area to display">
               <MinValue i="0"/>
               <MaxValue i="24"/>
            </int32>
            <int32 name="start" description="display start on the LP">
               <MinValue i="0"/>
               <MaxValue i="24"/>
            </int32>
            <int32 name="offset">
               <MinValue i="0"/>
               <MaxValue i="10000000"/>
            </int32>
         </params>
         <attribs>
            <objref name="table" description="name of the table to display"/>
            <combo name="device">
               <MenuEntries>
                  <string>usb host port / LP</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_USB_HOST, 9</string>
               </CEntries>
            </combo>
            <combo name="blocksize">
               <MenuEntries>
                  <string>1</string>
                  <string>2</string>
                  <string>4</string>
                  <string>8</string>
                  <string>16</string>
                  <string>32</string>
                  <string>64</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>4</string>
                  <string>5</string>
                  <string>6</string>
                  <string>7</string>
               </CEntries>
            </combo>
            <spinner name="Aoffset" MinValue="0" MaxValue="1000" DefaultValue="0"/>
            <combo name="Acolouron">
               <MenuEntries>
                  <string>off</string>
                  <string>red W</string>
                  <string>red M</string>
                  <string>red S</string>
                  <string>orange W</string>
                  <string>orange S</string>
                  <string>green W</string>
                  <string>green M</string>
                  <string>green S</string>
                  <string>lime 1 W</string>
                  <string>lime 1 S</string>
                  <string>lime 2</string>
                  <string>yellow W</string>
                  <string>yellow M</string>
                  <string>yellow S</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>18</string>
                  <string>35</string>
                  <string>16</string>
                  <string>32</string>
                  <string>48</string>
                  <string>33</string>
                  <string>50</string>
                  <string>49</string>
                  <string>17</string>
                  <string>34</string>
                  <string>51</string>
               </CEntries>
            </combo>
            <combo name="Acolouroff">
               <MenuEntries>
                  <string>off</string>
                  <string>red W</string>
                  <string>red M</string>
                  <string>red S</string>
                  <string>orange W</string>
                  <string>orange S</string>
                  <string>green W</string>
                  <string>green M</string>
                  <string>green S</string>
                  <string>lime 1 W</string>
                  <string>lime 1 S</string>
                  <string>lime 2</string>
                  <string>yellow W</string>
                  <string>yellow M</string>
                  <string>yellow S</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>18</string>
                  <string>35</string>
                  <string>16</string>
                  <string>32</string>
                  <string>48</string>
                  <string>33</string>
                  <string>50</string>
                  <string>49</string>
                  <string>17</string>
                  <string>34</string>
                  <string>51</string>
               </CEntries>
            </combo>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="9"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
int rtrig;
uint8_t map[127];
int i;
int vt;
int trigt;
int prevt[64];
int length;
int plength;

uint8_t colouron;
uint8_t start;
uint8_t colouroff;
uint32_t offset;]]></code.declaration>
         <code.init><![CDATA[{ 
  int i;
  for(i=0;i<24;i++) prevt[i]= -666 ;}

  { 
  int i;
  for(i=0;i<24;i++) 

map[0] = 13;
map[1] = 29;
map[2] = 45;
map[3] = 61;
map[4] = 77;
map[5] = 93;
map[6] = 109;
map[7] = 125;
map[8] = 14;
map[9] = 30;
map[10] = 46;
map[11] = 62;
map[12] = 78;
map[13] = 94;
map[14] = 110;
map[15] = 126;
 map[16] = 15;
map[17] = 31;
map[18] = 47;
map[19] = 63;
map[20] = 79;
map[21] = 95;
map[22] = 111;
map[23] = 127;
}]]></code.init>
         <code.krate><![CDATA[offset = param_offset + inlet_offset;
start = inlet_start+ param_start;
length = inlet_length +param_length;

//redraw
if (inlet_redraw > 0)
{ 
  int i;
  for(i=0;i<24;i++) prevt[i]= -666 ;}
{ 
  int ii;
  for(ii=0;ii<24;ii++) prevt[ii];
  }




    
//display steps
  if ((inlet_active || param_active) && (inlet_offset == attr_Aoffset)) { 
{ 
  i += 1;
  if (i == (length)) i = 0; 
  vt = attr_table.array[__USAT((offset + (i << attr_blocksize)),attr_table.LENGTHPOW)]<<attr_table.GAIN;
if (prevt[i] != vt ) trigt = 0;
prevt[i] = vt;
if (vt && (!trigt)) {
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (attr_channel-1)   ,map[(i + start)],(attr_Acolouron));  trigt=1;
}
if ((!vt) && (!trigt)){
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (attr_channel-1)  ,map[(i + start)],(attr_Acolouroff));  trigt=1;
}
 }
}



if (inlet_offset == attr_Aoffset)
{
outlet_colouron = attr_Acolouron;
outlet_colouroff = attr_Acolouroff;
}

outlet_offset = offset;
outlet_start = start;
outlet_blocksize = attr_blocksize;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="aa2c5ef4-0acd-4f88-8567-67081da344d9" name="launch_13" x="2044" y="2954">
      <params>
         <bool32.tgl name="active" value="1"/>
         <int32 name="length" value="8"/>
         <int32 name="start" value="16"/>
         <int32 name="offset" value="36016"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="lcxl2"/>
         <combo attributeName="device" selection="usb host port / LP"/>
         <combo attributeName="blocksize" selection="1"/>
         <spinner attributeName="Aoffset" value="0"/>
         <combo attributeName="Acolouron" selection="yellow S"/>
         <combo attributeName="Acolouroff" selection="off"/>
         <spinner attributeName="channel" value="9"/>
      </attribs>
      <object id="patch/object" uuid="aa2c5ef4-0acd-4f88-8567-67081da344d9">
         <sDescription>visual feedback of table data for midi controllers</sDescription>
         <author>Robert Schirmer</author>
         <license>BSD</license>
         <helpPatch>launchpad.axh</helpPatch>
         <rotatedParams>true</rotatedParams>
         <inlets>
            <int32 name="offset" description="offset in the table to read from"/>
            <int32 name="start" description="display start modulation"/>
            <int32 name="length" description="display length modulation"/>
            <bool32.risingfalling name="active" description="active??"/>
            <bool32.rising name="redraw"/>
         </inlets>
         <outlets>
            <int32 name="offset" description="offset through"/>
            <int32 name="start" description="start through"/>
            <int32 name="colouron" description="color on through"/>
            <int32 name="colouroff" description="color off through"/>
            <int32 name="blocksize"/>
         </outlets>
         <displays/>
         <params>
            <bool32.tgl name="active" description="active??"/>
            <int32 name="length" description="length of the area to display">
               <MinValue i="0"/>
               <MaxValue i="24"/>
            </int32>
            <int32 name="start" description="display start on the LP">
               <MinValue i="0"/>
               <MaxValue i="24"/>
            </int32>
            <int32 name="offset">
               <MinValue i="0"/>
               <MaxValue i="10000000"/>
            </int32>
         </params>
         <attribs>
            <objref name="table" description="name of the table to display"/>
            <combo name="device">
               <MenuEntries>
                  <string>usb host port / LP</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_USB_HOST, 9</string>
               </CEntries>
            </combo>
            <combo name="blocksize">
               <MenuEntries>
                  <string>1</string>
                  <string>2</string>
                  <string>4</string>
                  <string>8</string>
                  <string>16</string>
                  <string>32</string>
                  <string>64</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>4</string>
                  <string>5</string>
                  <string>6</string>
                  <string>7</string>
               </CEntries>
            </combo>
            <spinner name="Aoffset" MinValue="0" MaxValue="1000" DefaultValue="0"/>
            <combo name="Acolouron">
               <MenuEntries>
                  <string>off</string>
                  <string>red W</string>
                  <string>red M</string>
                  <string>red S</string>
                  <string>orange W</string>
                  <string>orange S</string>
                  <string>green W</string>
                  <string>green M</string>
                  <string>green S</string>
                  <string>lime 1 W</string>
                  <string>lime 1 S</string>
                  <string>lime 2</string>
                  <string>yellow W</string>
                  <string>yellow M</string>
                  <string>yellow S</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>18</string>
                  <string>35</string>
                  <string>16</string>
                  <string>32</string>
                  <string>48</string>
                  <string>33</string>
                  <string>50</string>
                  <string>49</string>
                  <string>17</string>
                  <string>34</string>
                  <string>51</string>
               </CEntries>
            </combo>
            <combo name="Acolouroff">
               <MenuEntries>
                  <string>off</string>
                  <string>red W</string>
                  <string>red M</string>
                  <string>red S</string>
                  <string>orange W</string>
                  <string>orange S</string>
                  <string>green W</string>
                  <string>green M</string>
                  <string>green S</string>
                  <string>lime 1 W</string>
                  <string>lime 1 S</string>
                  <string>lime 2</string>
                  <string>yellow W</string>
                  <string>yellow M</string>
                  <string>yellow S</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>18</string>
                  <string>35</string>
                  <string>16</string>
                  <string>32</string>
                  <string>48</string>
                  <string>33</string>
                  <string>50</string>
                  <string>49</string>
                  <string>17</string>
                  <string>34</string>
                  <string>51</string>
               </CEntries>
            </combo>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="9"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
int rtrig;
uint8_t map[127];
int i;
int vt;
int trigt;
int prevt[64];
int length;
int plength;

uint8_t colouron;
uint8_t start;
uint8_t colouroff;
uint32_t offset;]]></code.declaration>
         <code.init><![CDATA[{ 
  int i;
  for(i=0;i<24;i++) prevt[i]= -666 ;}

  { 
  int i;
  for(i=0;i<24;i++) 

map[0] = 13;
map[1] = 29;
map[2] = 45;
map[3] = 61;
map[4] = 77;
map[5] = 93;
map[6] = 109;
map[7] = 125;
map[8] = 14;
map[9] = 30;
map[10] = 46;
map[11] = 62;
map[12] = 78;
map[13] = 94;
map[14] = 110;
map[15] = 126;
 map[16] = 15;
map[17] = 31;
map[18] = 47;
map[19] = 63;
map[20] = 79;
map[21] = 95;
map[22] = 111;
map[23] = 127;
}]]></code.init>
         <code.krate><![CDATA[offset = param_offset + inlet_offset;
start = inlet_start+ param_start;
length = inlet_length +param_length;

//redraw
if (inlet_redraw > 0)
{ 
  int i;
  for(i=0;i<24;i++) prevt[i]= -666 ;}
{ 
  int ii;
  for(ii=0;ii<24;ii++) prevt[ii];
  }




    
//display steps
  if ((inlet_active || param_active) && (inlet_offset == attr_Aoffset)) { 
{ 
  i += 1;
  if (i == (length)) i = 0; 
  vt = attr_table.array[__USAT((offset + (i << attr_blocksize)),attr_table.LENGTHPOW)]<<attr_table.GAIN;
if (prevt[i] != vt ) trigt = 0;
prevt[i] = vt;
if (vt && (!trigt)) {
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (attr_channel-1)   ,map[(i + start)],(attr_Acolouron));  trigt=1;
}
if ((!vt) && (!trigt)){
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (attr_channel-1)  ,map[(i + start)],(attr_Acolouroff));  trigt=1;
}
 }
}



if (inlet_offset == attr_Aoffset)
{
outlet_colouron = attr_Acolouron;
outlet_colouroff = attr_Acolouroff;
}

outlet_offset = offset;
outlet_start = start;
outlet_blocksize = attr_blocksize;]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="1022" y="2982" text="loop record light"/>
   <obj type="logic/or 2" uuid="3805d3c84d30032a44fbdbe42d9a2988a1790a3e" name="or_4" x="966" y="2996">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="0a57c013-268c-4870-84a5-806aca382ec2" name="i_14" x="1036" y="2996">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="0a57c013-268c-4870-84a5-806aca382ec2">
         <sDescription>positive integer control</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets>
            <bool32 name="active"/>
            <int32 name="colour"/>
         </inlets>
         <outlets>
            <int32.positive name="out" description="output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[if (inlet_active>0)
{outlet_out= 127;}
else if (!(inlet_active>0))
{outlet_out = inlet_colour;}]]></code.krate>
      </object>
   </patchobj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_1" x="1134" y="3038">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="92c4830e-f31e-4007-96a8-c4e8f9a086c3" name="right_1" x="1218" y="3052">
      <params/>
      <attribs>
         <combo attributeName="device" selection="usb host port / LP"/>
         <spinner attributeName="button" value="0"/>
         <combo attributeName="on" selection="red S"/>
         <combo attributeName="off" selection="off"/>
      </attribs>
      <object id="patch/object" uuid="92c4830e-f31e-4007-96a8-c4e8f9a086c3">
         <sDescription>sets a right row button on the &apos;launchpad&apos; to the defined color</sDescription>
         <author>robert schirmer</author>
         <license>BSD</license>
         <helpPatch>launchpad.axh</helpPatch>
         <inlets>
            <bool32.risingfalling name="on"/>
            <int32 name="coloron"/>
            <int32 name="coloroff"/>
            <bool32.rising name="redraw"/>
         </inlets>
         <outlets/>
         <displays/>
         <params/>
         <attribs>
            <combo name="device">
               <MenuEntries>
                  <string>usb host port / LP</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_USB_HOST, 1</string>
               </CEntries>
            </combo>
            <spinner name="button" MinValue="0" MaxValue="7" DefaultValue="0"/>
            <combo name="on">
               <MenuEntries>
                  <string>off</string>
                  <string>red W</string>
                  <string>red M</string>
                  <string>red S</string>
                  <string>orange W</string>
                  <string>orange S</string>
                  <string>green W</string>
                  <string>green M</string>
                  <string>green S</string>
                  <string>lime 1 W</string>
                  <string>lime 1 S</string>
                  <string>lime 2</string>
                  <string>yellow W</string>
                  <string>yellow M</string>
                  <string>yellow S</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>18</string>
                  <string>35</string>
                  <string>16</string>
                  <string>32</string>
                  <string>48</string>
                  <string>33</string>
                  <string>50</string>
                  <string>49</string>
                  <string>17</string>
                  <string>34</string>
                  <string>51</string>
               </CEntries>
            </combo>
            <combo name="off">
               <MenuEntries>
                  <string>off</string>
                  <string>red W</string>
                  <string>red M</string>
                  <string>red S</string>
                  <string>orange W</string>
                  <string>orange S</string>
                  <string>green W</string>
                  <string>green M</string>
                  <string>green S</string>
                  <string>lime 1 W</string>
                  <string>lime 1 S</string>
                  <string>lime 2</string>
                  <string>yellow W</string>
                  <string>yellow M</string>
                  <string>yellow S</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>18</string>
                  <string>35</string>
                  <string>16</string>
                  <string>32</string>
                  <string>48</string>
                  <string>33</string>
                  <string>50</string>
                  <string>49</string>
                  <string>17</string>
                  <string>34</string>
                  <string>51</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[uint8_t b;
uint8_t prevb;
int ntrig;]]></code.declaration>
         <code.krate><![CDATA[b  = (inlet_on)?(attr_on+inlet_coloron):(attr_off + inlet_coloroff);
if (((b != prevb ) || (inlet_redraw > 0)) && (!ntrig))
{ MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + 8, (73), b);ntrig = 1; prevb=b;}
else ntrig = 0;]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="210" y="3192" text="side button lights"/>
   <obj type="timer/delayedpulse" uuid="3f05ee534ca67755fb20c7437f9e4de3d4c2f73d" name="delayedpulse_1" x="210" y="3206">
      <params>
         <frac32.s.map name="delay" value="-46.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="timer/pulselength" uuid="ca68725237d8ba8407773340801660a9fd9b0dba" name="pulselength_2" x="322" y="3206">
      <params>
         <frac32.s.map name="delay" value="-64.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="logic/inv" uuid="2bd44b865d3b63ff9b80862242bf5be779e3ad5" name="inv_1" x="420" y="3206">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="d9215098-8b8a-480b-9437-a23d2dbd495d" name="note_3" x="476" y="3206">
      <params/>
      <attribs>
         <combo attributeName="device" selection="usb host port 1"/>
         <spinner attributeName="channel" value="9"/>
      </attribs>
      <object id="patch/object" uuid="d9215098-8b8a-480b-9437-a23d2dbd495d">
         <sDescription>Midi note output</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>midi_out.axh</helpPatch>
         <inlets>
            <frac32.bipolar name="note" description="note (-64..63)"/>
            <frac32.positive name="velo" description="velocity"/>
            <bool32.rising name="trig" description="trigger"/>
         </inlets>
         <outlets/>
         <displays/>
         <params/>
         <attribs>
            <combo name="device">
               <MenuEntries>
                  <string>din</string>
                  <string>usb host port 1</string>
                  <string>usb host port 2</string>
                  <string>usb host port 3</string>
                  <string>usb host port 4</string>
                  <string>internal port 1</string>
                  <string>internal port 2</string>
                  <string>usb device port 1</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_DIN, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 2</string>
                  <string>MIDI_DEVICE_USB_HOST, 3</string>
                  <string>MIDI_DEVICE_USB_HOST, 4</string>
                  <string>MIDI_DEVICE_INTERNAL, 1</string>
                  <string>MIDI_DEVICE_INTERNAL, 2</string>
                  <string>MIDI_DEVICE_USB_DEVICE, 1</string>
               </CEntries>
            </combo>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="0"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
int lastnote;]]></code.declaration>
         <code.init><![CDATA[ntrig=0;
]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig>0) && !ntrig) {
lastnote = (108-(inlet_note>>21))&0x7F;
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (attr_channel-1),lastnote,inlet_velo>>20);  ntrig=1;
}
if (!(inlet_trig>0) && ntrig) {MidiSend3((midi_device_t) attr_device, MIDI_NOTE_OFF + (attr_channel-1),lastnote,__USAT(inlet_velo>>20,7)); ntrig=0;}]]></code.krate>
      </object>
   </patchobj>
   <nets>
      <net>
         <source obj="tr" outlet="o"/>
         <dest obj="flipflop_1" inlet="set"/>
         <dest obj="counter_1" inlet="trig"/>
         <dest obj="counter2_init_start_1" inlet="inc"/>
         <dest obj="cc_12" inlet="trig"/>
      </net>
      <net>
         <source obj="launchcontrol_1" outlet="t1"/>
         <dest obj="tap_tempo_1" inlet="tap"/>
         <dest obj="counter_3" inlet="trig"/>
      </net>
      <net>
         <source obj="launchcontrol_1" outlet="t2"/>
         <dest obj="toggle_2" inlet="trig"/>
         <dest obj="ptchdown" inlet="i1"/>
      </net>
      <net>
         <source obj="dial_1" outlet="out"/>
         <dest obj="note_2" inlet="velo"/>
      </net>
      <net>
         <source obj="dial_2" outlet="out"/>
         <dest obj="note_2" inlet="note"/>
      </net>
      <net>
         <source obj="launch_1" outlet="gate"/>
         <dest obj="delayedpulse_1" inlet="trig"/>
      </net>
      <net>
         <source obj="inv_1" outlet="o"/>
         <dest obj="note_3" inlet="velo"/>
         <dest obj="note_3" inlet="trig"/>
      </net>
      <net>
         <source obj="or_1" outlet="o"/>
         <dest obj="note_7" inlet="velo"/>
         <dest obj="note_7" inlet="trig"/>
         <dest obj="and_20" inlet="i1"/>
         <dest obj="and_21" inlet="i1"/>
         <dest obj="ldrive_1" inlet="r2start"/>
         <dest obj="counter_2" inlet="r"/>
      </net>
      <net>
         <source obj="clock_1" outlet="pos4ppq"/>
         <dest obj="change_1" inlet="in"/>
      </net>
      <net>
         <source obj="midi clock switch" outlet="o"/>
         <dest obj="tr" inlet="i2"/>
         <dest obj="note_2" inlet="trig"/>
         <dest obj="clk_mul_1" inlet="clk"/>
         <dest obj="and_4" inlet="i1"/>
      </net>
      <net>
         <source obj="tap_tempo_1" outlet="clock"/>
         <dest obj="and_3" inlet="i1"/>
      </net>
      <net>
         <source obj="toggle_1" outlet="o"/>
         <dest obj="tr" inlet="i1"/>
         <dest obj="note_8" inlet="velo"/>
         <dest obj="note_8" inlet="trig"/>
         <dest obj="xor_15" inlet="i1"/>
         <dest obj="and_2" inlet="i2"/>
         <dest obj="change_2" inlet="in"/>
      </net>
      <net>
         <source obj="toggle_2" outlet="o"/>
         <dest obj="midi clock switch" inlet="trigger"/>
         <dest obj="+_7" inlet="in1"/>
         <dest obj="inv_2" inlet="i"/>
      </net>
      <net>
         <source obj="or_6" outlet="o"/>
         <dest obj="toggle_1" inlet="trig"/>
         <dest obj="flipflop_1" inlet="reset"/>
         <dest obj="counter2_init_start_1" inlet="r"/>
      </net>
      <net>
         <source obj="i_2" outlet="out"/>
         <dest obj="note_7" inlet="note"/>
      </net>
      <net>
         <source obj="launch_2" outlet="note"/>
         <dest obj="note_4" inlet="note"/>
      </net>
      <net>
         <source obj="launch_2" outlet="gate"/>
         <dest obj="note_4" inlet="velo"/>
         <dest obj="note_4" inlet="trig"/>
      </net>
      <net>
         <source obj="launch_1" outlet="note"/>
         <dest obj="note_3" inlet="note"/>
      </net>
      <net>
         <source obj="launch_1" outlet="snapshot"/>
         <dest obj="note_4" inlet="active"/>
         <dest obj="launch_9" inlet="active"/>
      </net>
      <net>
         <source obj="x_2" outlet="v0"/>
         <dest obj="vca_2" inlet="v"/>
      </net>
      <net>
         <source obj="x_2" outlet="v1"/>
         <dest obj="obj_1" inlet="feedback"/>
      </net>
      <net>
         <source obj="x_2" outlet="v4"/>
         <dest obj="reverb_2" inlet="lowpass"/>
      </net>
      <net>
         <source obj="x_2" outlet="v5"/>
         <dest obj="reverb_2" inlet="diffusion"/>
      </net>
      <net>
         <source obj="x_2" outlet="v6"/>
         <dest obj="reverb_2" inlet="time"/>
      </net>
      <net>
         <source obj="x_2" outlet="v7"/>
         <dest obj="*c_2" inlet="in"/>
      </net>
      <net>
         <source obj="flipflop_1" outlet="o"/>
         <dest obj="pulselength_1" inlet="trig"/>
      </net>
      <net>
         <source obj="i_9" outlet="out"/>
         <dest obj="note_8" inlet="note"/>
      </net>
      <net>
         <source obj="sum4_1" outlet="out"/>
         <dest obj="out_1" inlet="wave"/>
      </net>
      <net>
         <source obj="in_1" outlet="wave"/>
         <dest obj="vca_1" inlet="a"/>
         <dest obj="vca_2" inlet="a"/>
         <dest obj="sum4_1" inlet="in1"/>
      </net>
      <net>
         <source obj="reverb_2" outlet="l"/>
         <dest obj="sum4_1" inlet="in2"/>
      </net>
      <net>
         <source obj="obj_1" outlet="outlet_1"/>
         <dest obj="sum4_1" inlet="in3"/>
      </net>
      <net>
         <source obj="vca_1" outlet="o"/>
         <dest obj="hp_1" inlet="in"/>
      </net>
      <net>
         <source obj="vca_2" outlet="o"/>
         <dest obj="+_3" inlet="in1"/>
      </net>
      <net>
         <source obj="x_2" outlet="v2"/>
         <dest obj="obj_1" inlet="div"/>
      </net>
      <net>
         <source obj="launchcontrol_1" outlet="t3"/>
         <dest obj="ptchup" inlet="i1"/>
         <dest obj="flipflop_3" inlet="set"/>
         <dest obj="counter_4" inlet="r"/>
      </net>
      <net>
         <source obj="note_1" outlet="gate"/>
         <dest obj="ptchdown" inlet="i2"/>
         <dest obj="ptchup" inlet="i2"/>
      </net>
      <net>
         <source obj="bankindex_1" outlet="index"/>
         <dest obj="+1_1" inlet="a"/>
         <dest obj="-1_1" inlet="a"/>
      </net>
      <net>
         <source obj="+1_1" outlet="result"/>
         <dest obj="load_1" inlet="i"/>
      </net>
      <net>
         <source obj="-1_1" outlet="result"/>
         <dest obj="load_2" inlet="i"/>
      </net>
      <net>
         <source obj="ptchdown" outlet="o"/>
         <dest obj="note_5" inlet="trig"/>
         <dest obj="load_2" inlet="trig"/>
      </net>
      <net>
         <source obj="ptchup" outlet="o"/>
         <dest obj="note_10" inlet="trig"/>
         <dest obj="load_1" inlet="trig"/>
      </net>
      <net>
         <source obj="c_1" outlet="out"/>
         <dest obj="save_1" inlet="filename"/>
      </net>
      <net>
         <source obj="launch_9" outlet="snapshot"/>
         <dest obj="tcopy_1" inlet="snapshot"/>
      </net>
      <net>
         <source obj="launch_9" outlet="save"/>
         <dest obj="note_12" inlet="trig"/>
         <dest obj="and_1" inlet="i1"/>
         <dest obj="tcopy_1" inlet="save"/>
      </net>
      <net>
         <source obj="launch_9" outlet="button1"/>
         <dest obj="tcopy_1" inlet="trig"/>
      </net>
      <net>
         <source obj="note_11" outlet="gate"/>
         <dest obj="and_1" inlet="i2"/>
      </net>
      <net>
         <source obj="and_1" outlet="o"/>
         <dest obj="note_13" inlet="trig"/>
         <dest obj="save_1" inlet="trig"/>
         <dest obj="delayedpulse_2" inlet="trig"/>
      </net>
      <net>
         <source obj="pulselength_1" outlet="pulse"/>
         <dest obj="or_5" inlet="i1"/>
         <dest obj="or_1" inlet="i3"/>
      </net>
      <net>
         <source obj="lrec_1" outlet="offset"/>
         <dest obj="ldrive_1" inlet="offset"/>
      </net>
      <net>
         <source obj="ldrive_1" outlet="pos"/>
         <dest obj="ldub_1" inlet="phase"/>
         <dest obj="read_1" inlet="a"/>
      </net>
      <net>
         <source obj="read_1" outlet="o"/>
         <dest obj="*_1" inlet="a"/>
      </net>
      <net>
         <source obj="and_18" outlet="o"/>
         <dest obj="ldub_1" inlet="overdub"/>
      </net>
      <net>
         <source obj="lrec_1" outlet="rec"/>
         <dest obj="inv_3" inlet="i"/>
         <dest obj="or_2" inlet="i1"/>
      </net>
      <net>
         <source obj="or_2" outlet="o"/>
         <dest obj="ldrive_1" inlet="play"/>
         <dest obj="ldrive_1" inlet="r2offset"/>
      </net>
      <net>
         <source obj="loadbang_1" outlet="pulse"/>
         <dest obj="or_3" inlet="i2"/>
      </net>
      <net>
         <source obj="or_3" outlet="o"/>
         <dest obj="flipflop_7" inlet="reset"/>
      </net>
      <net>
         <source obj="inv_3" outlet="o"/>
         <dest obj="flipflop_7" inlet="set"/>
      </net>
      <net>
         <source obj="flipflop_7" outlet="o"/>
         <dest obj="and_18" inlet="i1"/>
         <dest obj="or_2" inlet="i2"/>
         <dest obj="*_1" inlet="b"/>
      </net>
      <net>
         <source obj="flipflop_9" outlet="o"/>
         <dest obj="or_3" inlet="i1"/>
         <dest obj="lrec_1" inlet="rec"/>
         <dest obj="right_1" inlet="on"/>
      </net>
      <net>
         <source obj="change_2" outlet="trig"/>
         <dest obj="or_3" inlet="i3"/>
      </net>
      <net>
         <source obj="*_1" outlet="result"/>
         <dest obj="+_1" inlet="in1"/>
      </net>
      <net>
         <source obj="in_2" outlet="wave"/>
         <dest obj="ldub_1" inlet="wave"/>
         <dest obj="lrec_1" inlet="wave"/>
         <dest obj="+_1" inlet="in2"/>
      </net>
      <net>
         <source obj="dial_3" outlet="out"/>
         <dest obj="ldrive_1" inlet="range"/>
      </net>
      <net>
         <source obj="+_1" outlet="out"/>
         <dest obj="vca_4" inlet="a"/>
      </net>
      <net>
         <source obj="and_20" outlet="o"/>
         <dest obj="flipflop_9" inlet="set"/>
         <dest obj="counter2_init_start_2" inlet="inc"/>
      </net>
      <net>
         <source obj="counter2_init_start_2" outlet="c"/>
         <dest obj="flipflop_9" inlet="reset"/>
         <dest obj="flipflop_10" inlet="reset"/>
      </net>
      <net>
         <source obj="flipflop_10" outlet="o"/>
         <dest obj="and_20" inlet="i2"/>
         <dest obj="or_4" inlet="i1"/>
      </net>
      <net>
         <source obj="note_14" outlet="gate"/>
         <dest obj="flipflop_10" inlet="set"/>
         <dest obj="counter2_init_start_2" inlet="r"/>
      </net>
      <net>
         <source obj="flipflop_11" outlet="o"/>
         <dest obj="and_21" inlet="i2"/>
      </net>
      <net>
         <source obj="and_21" outlet="o"/>
         <dest obj="flipflop_11" inlet="reset"/>
         <dest obj="flipflop_7" inlet="trig"/>
      </net>
      <net>
         <source obj="xor_15" outlet="o"/>
         <dest obj="flipflop_11" inlet="set"/>
      </net>
      <net>
         <source obj="toggle_4" outlet="o"/>
         <dest obj="and_18" inlet="i2"/>
         <dest obj="or_4" inlet="i2"/>
      </net>
      <net>
         <source obj="note_15" outlet="gate"/>
         <dest obj="toggle_4" inlet="trig"/>
      </net>
      <net>
         <source obj="note_16" outlet="gate"/>
         <dest obj="xor_15" inlet="i2"/>
      </net>
      <net>
         <source obj="note_17" outlet="gate"/>
         <dest obj="or_3" inlet="i4"/>
      </net>
      <net>
         <source obj="note_18" outlet="gate"/>
         <dest obj="tcopy_2" inlet="trig"/>
      </net>
      <net>
         <source obj="button_1" outlet="o"/>
         <dest obj="right_1" inlet="redraw"/>
      </net>
      <net>
         <source obj="i_14" outlet="out"/>
         <dest obj="right_1" inlet="coloroff"/>
      </net>
      <net>
         <source obj="or_4" outlet="o"/>
         <dest obj="i_14" inlet="active"/>
      </net>
      <net>
         <source obj="counter_2" outlet="o"/>
         <dest obj="i_1" inlet="in"/>
         <dest obj="x_3" inlet="step"/>
         <dest obj="x_1" inlet="step"/>
         <dest obj="x_4" inlet="step"/>
         <dest obj="x_2" inlet="step"/>
      </net>
      <net>
         <source obj="clk_mul_1" outlet="clk"/>
         <dest obj="and_2" inlet="i1"/>
      </net>
      <net>
         <source obj="and_2" outlet="o"/>
         <dest obj="counter_2" inlet="trig"/>
      </net>
      <net>
         <source obj="launch_1" outlet="row1and2"/>
         <dest obj="x_1" inlet="active"/>
         <dest obj="x_4" inlet="active"/>
      </net>
      <net>
         <source obj="launch_1" outlet="row3andfader"/>
         <dest obj="x_3" inlet="active"/>
         <dest obj="x_2" inlet="active"/>
      </net>
      <net>
         <source obj="launch_1" outlet="matrixoffset"/>
         <dest obj="launch_4" inlet="offset"/>
         <dest obj="launch_3" inlet="offset"/>
      </net>
      <net>
         <source obj="launch_1" outlet="colouroff"/>
         <dest obj="i_16" inlet="offset"/>
      </net>
      <net>
         <source obj="launch_1" outlet="colouron"/>
         <dest obj="launch_3" inlet="coloron"/>
      </net>
      <net>
         <source obj="launch_1" outlet="colouron2"/>
         <dest obj="launch_4" inlet="coloron"/>
      </net>
      <net>
         <source obj="launch_1" outlet="shift"/>
         <dest obj="x_1" inlet="shift"/>
         <dest obj="x_3" inlet="shift"/>
         <dest obj="x_4" inlet="shift"/>
         <dest obj="table_1" inlet="active"/>
         <dest obj="i_16" inlet="active"/>
         <dest obj="table_3" inlet="active"/>
         <dest obj="x_2" inlet="shift"/>
         <dest obj="table_2" inlet="active"/>
      </net>
      <net>
         <source obj="i_16" outlet="out"/>
         <dest obj="change_3" inlet="in"/>
         <dest obj="launch_4" inlet="coloroff"/>
         <dest obj="launch_3" inlet="coloroff"/>
      </net>
      <net>
         <source obj="x_4" outlet="v3"/>
         <dest obj="cc_4" inlet="v3"/>
      </net>
      <net>
         <source obj="x_4" outlet="v4"/>
         <dest obj="cc_4" inlet="v4"/>
      </net>
      <net>
         <source obj="x_4" outlet="v5"/>
         <dest obj="cc_4" inlet="v5"/>
      </net>
      <net>
         <source obj="x_4" outlet="v6"/>
         <dest obj="cc_4" inlet="v6"/>
      </net>
      <net>
         <source obj="x_4" outlet="v7"/>
         <dest obj="cc_4" inlet="v7"/>
      </net>
      <net>
         <source obj="x_1" outlet="v0"/>
         <dest obj="cc_2" inlet="v0"/>
      </net>
      <net>
         <source obj="x_1" outlet="v1"/>
         <dest obj="cc_2" inlet="v1"/>
      </net>
      <net>
         <source obj="x_1" outlet="v2"/>
         <dest obj="cc_2" inlet="v2"/>
      </net>
      <net>
         <source obj="x_1" outlet="v3"/>
         <dest obj="cc_2" inlet="v3"/>
      </net>
      <net>
         <source obj="x_1" outlet="v4"/>
         <dest obj="cc_2" inlet="v4"/>
      </net>
      <net>
         <source obj="x_1" outlet="v5"/>
         <dest obj="cc_2" inlet="v5"/>
      </net>
      <net>
         <source obj="x_1" outlet="v6"/>
         <dest obj="cc_2" inlet="v6"/>
      </net>
      <net>
         <source obj="x_1" outlet="v7"/>
         <dest obj="cc_2" inlet="v7"/>
      </net>
      <net>
         <source obj="x_3" outlet="v0"/>
         <dest obj="cc_1" inlet="v0"/>
      </net>
      <net>
         <source obj="x_3" outlet="v1"/>
         <dest obj="cc_1" inlet="v1"/>
      </net>
      <net>
         <source obj="x_3" outlet="v2"/>
         <dest obj="cc_1" inlet="v2"/>
      </net>
      <net>
         <source obj="x_3" outlet="v3"/>
         <dest obj="cc_1" inlet="v3"/>
      </net>
      <net>
         <source obj="x_3" outlet="v5"/>
         <dest obj="cc_1" inlet="v5"/>
      </net>
      <net>
         <source obj="x_3" outlet="v6"/>
         <dest obj="cc_1" inlet="v6"/>
      </net>
      <net>
         <source obj="x_3" outlet="v7"/>
         <dest obj="cc_1" inlet="v7"/>
      </net>
      <net>
         <source obj="and_3" outlet="o"/>
         <dest obj="midi clock switch" inlet="i1"/>
      </net>
      <net>
         <source obj="flipflop_2" outlet="o"/>
         <dest obj="and_3" inlet="i2"/>
      </net>
      <net>
         <source obj="counter_3" outlet="c"/>
         <dest obj="flipflop_2" inlet="set"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v7"/>
         <dest obj="*c_1" inlet="in"/>
      </net>
      <net>
         <source obj="vca_3" outlet="o"/>
         <dest obj="x_5" inlet="in"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v3"/>
         <dest obj="unipolar2bipolar_1" inlet="i"/>
      </net>
      <net>
         <source obj="unipolar2bipolar_1" outlet="o"/>
         <dest obj="x_5" inlet="pitch"/>
      </net>
      <net>
         <source obj="vca_4" outlet="o"/>
         <dest obj="vca_3" inlet="a"/>
         <dest obj="vca_5" inlet="a"/>
         <dest obj="+_4" inlet="in1"/>
      </net>
      <net>
         <source obj="x_3" outlet="v4"/>
         <dest obj="vca_4" inlet="v"/>
      </net>
      <net>
         <source obj="x_5" outlet="out"/>
         <dest obj="+_2" inlet="in1"/>
      </net>
      <net>
         <source obj="+_2" outlet="out"/>
         <dest obj="reverb_2" inlet="l"/>
         <dest obj="reverb_2" inlet="r"/>
      </net>
      <net>
         <source obj="hp_1" outlet="out"/>
         <dest obj="+_2" inlet="in2"/>
      </net>
      <net>
         <source obj="reverb_2" outlet="r"/>
         <dest obj="sum4_1" inlet="in4"/>
      </net>
      <net>
         <source obj="*c_1" outlet="out"/>
         <dest obj="vca_3" inlet="v"/>
      </net>
      <net>
         <source obj="*c_2" outlet="out"/>
         <dest obj="vca_1" inlet="v"/>
      </net>
      <net>
         <source obj="x_2" outlet="v3"/>
         <dest obj="unipolar2bipolar_2" inlet="i"/>
      </net>
      <net>
         <source obj="unipolar2bipolar_2" outlet="o"/>
         <dest obj="hp_1" inlet="pitch"/>
      </net>
      <net>
         <source obj="+_3" outlet="out"/>
         <dest obj="lp_2" inlet="in"/>
      </net>
      <net>
         <source obj="+_4" outlet="out"/>
         <dest obj="out_2" inlet="wave"/>
      </net>
      <net>
         <source obj="obj_2" outlet="outlet_1"/>
         <dest obj="+_4" inlet="in2"/>
      </net>
      <net>
         <source obj="*c_3" outlet="out"/>
         <dest obj="vca_5" inlet="v"/>
      </net>
      <net>
         <source obj="x_4" outlet="v0"/>
         <dest obj="*c_3" inlet="in"/>
      </net>
      <net>
         <source obj="x_4" outlet="v1"/>
         <dest obj="obj_2" inlet="feedback"/>
      </net>
      <net>
         <source obj="x_4" outlet="v2"/>
         <dest obj="obj_2" inlet="div"/>
      </net>
      <net>
         <source obj="tri_ph_p_1" outlet="tri"/>
         <dest obj="*_2" inlet="b"/>
      </net>
      <net>
         <source obj="*_2" outlet="result"/>
         <dest obj="*c_4" inlet="in"/>
      </net>
      <net>
         <source obj="*c_4" outlet="out"/>
         <dest obj="obj_2" inlet="tm"/>
      </net>
      <net>
         <source obj="*c_5" outlet="out"/>
         <dest obj="unipolar2bipolar_3" inlet="i"/>
      </net>
      <net>
         <source obj="unipolar2bipolar_3" outlet="o"/>
         <dest obj="tri_ph_p_1" inlet="pitch"/>
      </net>
      <net>
         <source obj="tableread_2" outlet="v0"/>
         <dest obj="*_2" inlet="a"/>
      </net>
      <net>
         <source obj="tableread_2" outlet="v1"/>
         <dest obj="*c_5" inlet="in"/>
      </net>
      <net>
         <source obj="*c_6" outlet="out"/>
         <dest obj="obj_2" inlet="tm2"/>
      </net>
      <net>
         <source obj="tableread_2" outlet="v2"/>
         <dest obj="*c_6" inlet="in"/>
      </net>
      <net>
         <source obj="delayedpulse_1" outlet="pulse"/>
         <dest obj="inv_1" inlet="i"/>
      </net>
      <net>
         <source obj="change_3" outlet="trig"/>
         <dest obj="launch_4" inlet="redraw"/>
         <dest obj="launch_3" inlet="redraw"/>
      </net>
      <net>
         <source obj="tri_ph_p_2" outlet="tri"/>
         <dest obj="*_3" inlet="b"/>
      </net>
      <net>
         <source obj="*_3" outlet="result"/>
         <dest obj="*c_8" inlet="in"/>
      </net>
      <net>
         <source obj="*c_7" outlet="out"/>
         <dest obj="unipolar2bipolar_4" inlet="i"/>
      </net>
      <net>
         <source obj="unipolar2bipolar_4" outlet="o"/>
         <dest obj="tri_ph_p_2" inlet="pitch"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v0"/>
         <dest obj="*_3" inlet="a"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v1"/>
         <dest obj="*c_7" inlet="in"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v2"/>
         <dest obj="*c_9" inlet="in"/>
      </net>
      <net>
         <source obj="*c_8" outlet="out"/>
         <dest obj="obj_1" inlet="tm"/>
      </net>
      <net>
         <source obj="*c_9" outlet="out"/>
         <dest obj="obj_1" inlet="tm2"/>
      </net>
      <net>
         <source obj="vca_5" outlet="o"/>
         <dest obj="lp_1" inlet="in"/>
      </net>
      <net>
         <source obj="lp_1" outlet="out"/>
         <dest obj="obj_2" inlet="audio-in"/>
      </net>
      <net>
         <source obj="tableread_3" outlet="v0"/>
         <dest obj="+_6" inlet="in1"/>
      </net>
      <net>
         <source obj="tableread_3" outlet="v1"/>
         <dest obj="lp_2" inlet="reso"/>
      </net>
      <net>
         <source obj="tri_ph_p_3" outlet="tri"/>
         <dest obj="*_4" inlet="b"/>
      </net>
      <net>
         <source obj="*_4" outlet="result"/>
         <dest obj="*c_11" inlet="in"/>
      </net>
      <net>
         <source obj="*c_10" outlet="out"/>
         <dest obj="unipolar2bipolar_5" inlet="i"/>
      </net>
      <net>
         <source obj="unipolar2bipolar_5" outlet="o"/>
         <dest obj="tri_ph_p_3" inlet="pitch"/>
      </net>
      <net>
         <source obj="+_5" outlet="out"/>
         <dest obj="unipolar2bipolar_6" inlet="i"/>
      </net>
      <net>
         <source obj="*c_11" outlet="out"/>
         <dest obj="+_5" inlet="in2"/>
      </net>
      <net>
         <source obj="tableread_3" outlet="v2"/>
         <dest obj="*_5" inlet="a"/>
      </net>
      <net>
         <source obj="tableread_3" outlet="v3"/>
         <dest obj="*c_12" inlet="in"/>
      </net>
      <net>
         <source obj="limit_1" outlet="o"/>
         <dest obj="lp_1" inlet="filter"/>
         <dest obj="dial_4" inlet="in"/>
      </net>
      <net>
         <source obj="unipolar2bipolar_6" outlet="o"/>
         <dest obj="limit_1" inlet="i"/>
      </net>
      <net>
         <source obj="tri_ph_p_4" outlet="tri"/>
         <dest obj="*_5" inlet="b"/>
      </net>
      <net>
         <source obj="*_5" outlet="result"/>
         <dest obj="*c_13" inlet="in"/>
      </net>
      <net>
         <source obj="*c_12" outlet="out"/>
         <dest obj="unipolar2bipolar_7" inlet="i"/>
      </net>
      <net>
         <source obj="unipolar2bipolar_7" outlet="o"/>
         <dest obj="tri_ph_p_4" inlet="pitch"/>
      </net>
      <net>
         <source obj="+_6" outlet="out"/>
         <dest obj="unipolar2bipolar_8" inlet="i"/>
      </net>
      <net>
         <source obj="*c_13" outlet="out"/>
         <dest obj="+_6" inlet="in2"/>
      </net>
      <net>
         <source obj="limit_2" outlet="o"/>
         <dest obj="lp_2" inlet="filter"/>
         <dest obj="dial_5" inlet="in"/>
      </net>
      <net>
         <source obj="unipolar2bipolar_8" outlet="o"/>
         <dest obj="limit_2" inlet="i"/>
      </net>
      <net>
         <source obj="lp_2" outlet="out"/>
         <dest obj="obj_1" inlet="audio-in"/>
      </net>
      <net>
         <source obj="tableread_3" outlet="v4"/>
         <dest obj="+_5" inlet="in1"/>
      </net>
      <net>
         <source obj="tableread_3" outlet="v5"/>
         <dest obj="lp_1" inlet="reso"/>
      </net>
      <net>
         <source obj="tableread_3" outlet="v6"/>
         <dest obj="*_4" inlet="a"/>
      </net>
      <net>
         <source obj="tableread_3" outlet="v7"/>
         <dest obj="*c_10" inlet="in"/>
      </net>
      <net>
         <source obj="c_8" outlet="out"/>
         <dest obj="save_5" inlet="filename"/>
         <dest obj="load_6" inlet="filename"/>
      </net>
      <net>
         <source obj="delayedpulseduration_2" outlet="pulse"/>
         <dest obj="load_6" inlet="trig"/>
      </net>
      <net>
         <source obj="loadbang_3" outlet="pulse"/>
         <dest obj="delayedpulseduration_2" inlet="trig"/>
      </net>
      <net>
         <source obj="delayedpulse_2" outlet="pulse"/>
         <dest obj="save_5" inlet="trig"/>
      </net>
      <net>
         <source obj="i_3" outlet="out"/>
         <dest obj="cc_12" inlet="cc"/>
      </net>
      <net>
         <source obj="counter2_init_start_1" outlet="o"/>
         <dest obj="cc_12" inlet="v"/>
      </net>
      <net>
         <source obj="i_4" outlet="out"/>
         <dest obj="cc_13" inlet="cc"/>
      </net>
      <net>
         <source obj="change_4" outlet="trig"/>
         <dest obj="cc_13" inlet="trig"/>
      </net>
      <net>
         <source obj="+_7" outlet="out"/>
         <dest obj="change_4" inlet="in"/>
         <dest obj="cc_13" inlet="v"/>
      </net>
      <net>
         <source obj="launch_3" outlet="coloroff"/>
         <dest obj="i_14" inlet="colour"/>
      </net>
      <net>
         <source obj="keyb_1" outlet="gate"/>
         <dest obj="midi clock switch" inlet="i2"/>
      </net>
      <net>
         <source obj="keyb_2" outlet="gate"/>
         <dest obj="or_5" inlet="i2"/>
         <dest obj="or_1" inlet="i1"/>
      </net>
      <net>
         <source obj="or_5" outlet="o"/>
         <dest obj="counter_1" inlet="r"/>
      </net>
      <net>
         <source obj="and_4" outlet="o"/>
         <dest obj="counter_4" inlet="trig"/>
         <dest obj="tap_tempo_2" inlet="tap"/>
      </net>
      <net>
         <source obj="counter_4" outlet="c"/>
         <dest obj="flipflop_3" inlet="reset"/>
      </net>
      <net>
         <source obj="flipflop_3" outlet="o"/>
         <dest obj="and_4" inlet="i2"/>
      </net>
      <net>
         <source obj="tap_tempo_2" outlet="clock"/>
         <dest obj="obj_2" inlet="24ppq"/>
         <dest obj="obj_1" inlet="24ppq"/>
      </net>
      <net>
         <source obj="launchcontrol_1" outlet="t0"/>
         <dest obj="or_6" inlet="i1"/>
      </net>
      <net>
         <source obj="keyb_3" outlet="gate"/>
         <dest obj="or_6" inlet="i2"/>
      </net>
      <net>
         <source obj="counter_1" outlet="c"/>
         <dest obj="and_5" inlet="i1"/>
      </net>
      <net>
         <source obj="and_5" outlet="o"/>
         <dest obj="or_1" inlet="i2"/>
      </net>
      <net>
         <source obj="inv_2" outlet="o"/>
         <dest obj="and_5" inlet="i2"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
      <MidiChannel>9</MidiChannel>
      <NPresets>0</NPresets>
      <NPresetEntries>0</NPresetEntries>
      <NModulationSources>16</NModulationSources>
      <NModulationTargetsPerSource>16</NModulationTargetsPerSource>
   </settings>
   <notes><![CDATA[can i use 1 table write for the notes? use offset
]]></notes>
   <windowPos>
      <x>-8</x>
      <y>-8</y>
      <width>1616</width>
      <height>876</height>
   </windowPos>
</patch-1.0>