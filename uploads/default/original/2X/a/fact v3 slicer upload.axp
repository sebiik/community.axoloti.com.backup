<patch-1.0 appVersion="1.0.12">
   <obj type="table/alloc 32b sdram" uuid="1a4546b7b52747ea765093ac97444601c44721e8" name="data" x="28" y="42">
      <params/>
      <attribs>
         <combo attributeName="size" selection="1048576"/>
         <text attributeName="init">
            <sText><![CDATA[]]></sText>
         </text>
      </attribs>
   </obj>
   <comment type="patch/comment" x="168" y="56" text="1. RECORD: looper style recording, recording when on, trigggers playback when recording stops"/>
   <comment type="patch/comment" x="812" y="56" text="12. DELAY MODE: This delays recording and turns overdub on so that you can use the loop as a delay buffer. the loop is your maximum delay time"/>
   <comment type="patch/comment" x="896" y="70" text="Remember to turn loop feedback down when you turn on delay mode!"/>
   <comment type="patch/comment" x="168" y="84" text="2. OVERDUB"/>
   <comment type="patch/comment" x="812" y="98" text="13. DELAY TIME: Set the delay time as a percentage of the loop (if you&apos;ve recorded a one bar loop a delay  time of 16 will give you a delay of 1 beat"/>
   <comment type="patch/comment" x="168" y="112" text="3. REPLACE: replaces whatever is recorded with the input for as long as button is pressed"/>
   <comment type="patch/comment" x="896" y="112" text="Depending on stretch/ pitch settings you may get clicks (for example, if the slice is reversed the record position will crossover the play position and cause a click)"/>
   <comment type="patch/comment" x="896" y="126" text="You can avoid this by setting a delay time longer than the slice length (check the slice length display)"/>
   <comment type="patch/comment" x="168" y="140" text="4. NATURAL LOOP: when on playback is normal - no slicing/pitching/stretching, etc."/>
   <comment type="patch/comment" x="812" y="154" text="14. ACTUAL FEEDBACK: feeds back looper output to input after slicer/stretching/pitching. Careful now, if looper feedback is turned up it can get messy!"/>
   <comment type="patch/comment" x="168" y="168" text="5.INPUT/LOOP: crossfade between input and recording"/>
   <comment type="patch/comment" x="924" y="182" text="When using overdubbing/ delay mode the repeats will get reprocessed. "/>
   <comment type="patch/comment" x="168" y="196" text="6. VOLUME"/>
   <comment type="patch/comment" x="924" y="196" text="for example, if you are pitch shifting up an octave, each repeat will be an octave higher than the one before"/>
   <comment type="patch/comment" x="168" y="224" text="7. SLICER DIVISION: sets the rate of the slicing. It&apos;s a divsion of the loop length. "/>
   <comment type="patch/comment" x="812" y="224" text="15. LOOPER FEEDBACK: When overdub/delaymode is on each repeat gets quieter. "/>
   <comment type="patch/comment" x="266" y="238" text="so, if you record a 1 bar loop and this is set to 4, each slice will be 1 beat long. "/>
   <comment type="patch/comment" x="924" y="238" text="It doesn&apos;t get reprocessed."/>
   <comment type="patch/comment" x="168" y="266" text="8. PITCH: pitch shift the loop"/>
   <comment type="patch/comment" x="924" y="266" text=" for example,  if you are pitch shifting up an octave the pitch will not keep rising at each repeat, it will stay an octave above the natural pitch"/>
   <comment type="patch/comment" x="168" y="294" text="9. STRETCH: time stretch the loop (scaled like the pitch control - 12 is double speed, -12 = half speed)"/>
   <comment type="patch/comment" x="812" y="294" text="16. PLAY"/>
   <comment type="patch/comment" x="168" y="322" text="10. RATE: speed of play back (after stretching). if below 0 playback is reversed. Affects pitch too."/>
   <comment type="patch/comment" x="812" y="322" text="17. STOP"/>
   <comment type="patch/comment" x="168" y="350" text="11. LOOP SLICE: this sets a loop point within the slice. to enable repeater style play back"/>
   <comment type="patch/comment" x="812" y="350" text="18. RESTART"/>
   <comment type="patch/comment" x="238" y="364" text=" When at maximum the full slice will play back. It may loop round/repeat depending on stretch settings"/>
   <comment type="patch/comment" x="238" y="378" text=" (if it&apos;s playing back faster because of stretch settings)"/>
   <comment type="patch/comment" x="812" y="378" text="19. SAVE: Sound will stop when saving, and it takes a looong time if your table is big (watch display below button)"/>
   <comment type="patch/comment" x="238" y="406" text="When lower than maximum a loop point is set within the slice - kind of like a repeater. "/>
   <comment type="patch/comment" x="812" y="406" text="20. LOAD: sound will stop. loading is a bit quicker"/>
   <comment type="patch/comment" x="238" y="420" text="The dial is a percentage of the slice length. If the dial is at 16 (1/4 of max value) when the slice is triggered "/>
   <comment type="patch/comment" x="238" y="434" text="it will play the first 1/4 of the loop and then repeat it until the next slice is triggered."/>
   <comment type="patch/comment" x="1386" y="462" text="NOTES*********************"/>
   <comment type="patch/comment" x="182" y="476" text="1. record"/>
   <comment type="patch/comment" x="266" y="476" text="2. overdub"/>
   <comment type="patch/comment" x="364" y="476" text="3. replace"/>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_2" x="182" y="490">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_5____tmp" x="266" y="490">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_6" x="364" y="490">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1386" y="490" text="PITCH/STRETCH/RATE tips"/>
   <comment type="patch/comment" x="1414" y="518" text="For normal play back pitch and stretch should be 0, and rate should be 64."/>
   <comment type="patch/comment" x="518" y="532" text="4. natural loop"/>
   <comment type="patch/comment" x="616" y="532" text="5. input/loop"/>
   <comment type="patch/comment" x="714" y="532" text="6. volume"/>
   <comment type="patch/comment" x="812" y="532" text="7. slicer division"/>
   <comment type="patch/comment" x="938" y="532" text="8. pitch"/>
   <comment type="patch/comment" x="1036" y="532" text="9.stretch"/>
   <comment type="patch/comment" x="1134" y="532" text="10.rate"/>
   <comment type="patch/comment" x="1232" y="532" text="11. loop slice"/>
   <comment type="patch/comment" x="1414" y="532" text="If pitch and stretch match, there is effectively no pitch shifting or stretching going on, the playback is just faster or slower"/>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_4" x="518" y="546">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_13" x="616" y="546">
      <params>
         <frac32.u.map name="value" value="32.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_14" x="714" y="546">
      <params>
         <frac32.u.map name="value" value="64.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/i" uuid="a3786816db6ea5bc6ac4193a5cccdb2c83b83496" name="i_2" x="826" y="546">
      <params>
         <int32 name="value" value="4"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_1" x="938" y="546">
      <params>
         <frac32.s.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_2" x="1036" y="546">
      <params>
         <frac32.s.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_3" x="1134" y="546">
      <params>
         <frac32.s.map name="value" value="64.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_4" x="1232" y="546">
      <params>
         <frac32.u.map name="value" value="64.0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1414" y="546" text="For example, if pitch is at 12, and stretch is at 12, it plays back twice as fast, and an octave higher just as it would if you sped it up"/>
   <comment type="patch/comment" x="1386" y="574" text="STRETCH - multiples of 3 are really nice! Depending on the slicing division,  and other settings you can kind of swing the rythm, try 3/6/9"/>
   <comment type="patch/comment" x="280" y="588" text="14. actual"/>
   <comment type="patch/comment" x="364" y="588" text="15. looper"/>
   <comment type="patch/comment" x="84" y="602" text="12. delay mode"/>
   <comment type="patch/comment" x="182" y="602" text="13. delay time"/>
   <comment type="patch/comment" x="280" y="602" text="feedback"/>
   <comment type="patch/comment" x="364" y="602" text="feedback"/>
   <comment type="patch/comment" x="1386" y="602" text="RATE - this is a fraction of the natural playback speed. "/>
   <obj type="ctrl/toggle" uuid="42b8134fa729d54bfc8d62d6ef3fa99498c1de99" name="toggle_7" x="84" y="616">
      <params>
         <bool32.tgl name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_12" x="182" y="616">
      <params>
         <frac32.u.map name="value" value="16.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_7" x="280" y="616">
      <params>
         <frac32.u.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_5" x="364" y="616">
      <params>
         <frac32.u.map name="value" value="64.0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1428" y="616" text="for example: if rate is at 64 it will play back normally (taking into account pitch and stretch settings!))"/>
   <comment type="patch/comment" x="1484" y="630" text="if rate is at 32 it will play back at half speed and an octve lower"/>
   <comment type="patch/comment" x="1484" y="644" text="if rate is at -32 it will play back at half speed and an octve lower, and reversed"/>
   <comment type="patch/comment" x="504" y="686" text="***************************************** displays *****************************************"/>
   <comment type="patch/comment" x="1386" y="686" text="TABLE DATA:"/>
   <comment type="patch/comment" x="504" y="714" text="phase of normal"/>
   <comment type="patch/comment" x="616" y="714" text="current slice  ****************************************"/>
   <comment type="patch/comment" x="1386" y="714" text="Elements 0-2047: this is used as a buffer for the recorder"/>
   <comment type="patch/comment" x="196" y="728" text="16. play"/>
   <comment type="patch/comment" x="280" y="728" text="17. stop"/>
   <comment type="patch/comment" x="364" y="728" text="18. restart"/>
   <comment type="patch/comment" x="504" y="728" text="playback"/>
   <comment type="patch/comment" x="616" y="728" text="start"/>
   <comment type="patch/comment" x="686" y="728" text="end"/>
   <comment type="patch/comment" x="770" y="728" text="index"/>
   <comment type="patch/comment" x="826" y="728" text="slice length"/>
   <comment type="patch/comment" x="994" y="728" text="19. save"/>
   <comment type="patch/comment" x="1092" y="728" text="20. load"/>
   <comment type="patch/comment" x="1428" y="728" text="2048 - 2079: this is used for sample data. so far only length, but more in the revamped poly player (coming soon!)"/>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_1" x="196" y="742">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_4" x="280" y="742">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_5" x="364" y="742">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_6" x="504" y="742">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_9" x="616" y="742">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_11" x="686" y="742">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/i" uuid="5e35fd0c62d81e70017289250cf28edd26e19e4a" name="i_3" x="770" y="742">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="dial_10" x="826" y="742">
      <params/>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_2" x="994" y="742">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_3" x="1092" y="742">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1428" y="742" text="2080 - 4127: this is a 2048 sample lead in before the loop, helps with smooth playback when stretching for various reasons"/>
   <comment type="patch/comment" x="1428" y="756" text="2080 - end of table/loop: this is the actual loop, the audio will be a bit longer than the length for crossfading purposes"/>
   <comment type="patch/comment" x="994" y="798" text="saving"/>
   <comment type="patch/comment" x="1092" y="798" text="loading"/>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="bool_1" x="994" y="812">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="bool_2" x="1092" y="812">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="1246" y="882" text="crossfade &amp; attenuate"/>
   <patchobj type="patch/object" uuid="b9d39eb1-e1c5-45d9-a32d-e690a0e06a27" name="crossfade_1" x="1246" y="896">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="b9d39eb1-e1c5-45d9-a32d-e690a0e06a27">
         <sDescription>Left shift. Doubles the value &quot;shift&quot; times, with overflow. If overflow is not desireable, use &quot;muls&quot;.</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>math.axh</helpPatch>
         <inlets>
            <frac32 name="drywet" description="a"/>
            <frac32 name="volume"/>
         </inlets>
         <outlets>
            <frac32 name="dry"/>
            <frac32 name="wet" description="a amplified in 6dB steps"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_dry=  ___SMMUL((__SSAT((0x07FFFFFF-inlet_drywet)<<1,28))<<3,inlet_volume<<2);
outlet_wet= ___SMMUL( (__SSAT((inlet_drywet<<1),28))<<3,inlet_volume<<2);]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="672" y="924" text="custom slice module"/>
   <comment type="patch/comment" x="672" y="938" text="divides the normal playback phase"/>
   <comment type="patch/comment" x="672" y="952" text="and puts out start and end points "/>
   <comment type="patch/comment" x="126" y="966" text="actual"/>
   <comment type="patch/comment" x="672" y="966" text="for the player, and triggers it"/>
   <comment type="patch/comment" x="126" y="980" text="feedback"/>
   <comment type="patch/comment" x="196" y="980" text="input + feedback"/>
   <comment type="patch/comment" x="308" y="980" text="fact recorder"/>
   <comment type="patch/comment" x="490" y="980" text="fact simple"/>
   <comment type="patch/comment" x="672" y="980" text="can also delay the phase"/>
   <comment type="patch/comment" x="1078" y="980" text="switch between "/>
   <obj type="audio/in left" uuid="d40e60b7641fe75af4d7c91b45bb038aacafc52e" name="in_1" x="28" y="994">
      <params/>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_1" x="126" y="994">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_1" x="210" y="994">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="43af9211-329e-4c79-9d89-67fd63af8fcd" name="1_1" x="308" y="994">
      <params/>
      <attribs>
         <objref attributeName="table" obj="data"/>
         <combo attributeName="dubtrig" selection="internal"/>
      </attribs>
      <object id="patch/object" uuid="43af9211-329e-4c79-9d89-67fd63af8fcd">
         <sDescription>Difficult to name. Pitchshifter, time-stretcher, play-rate adjuster (stretch+pitchshift), sampler, delay, granulizer...

See inputs/controls for their functions (hoover above them)</sDescription>
         <author>Remco van der most</author>
         <license>BSD</license>
         <helpPatch>delay.axh</helpPatch>
         <inlets>
            <frac32buffer name="in" description="audio input"/>
            <bool32.risingfalling name="rec"/>
            <bool32.rising name="dubtrig"/>
            <bool32.rising name="play"/>
            <bool32.rising name="stop"/>
            <bool32.risingfalling name="overdub"/>
            <bool32.risingfalling name="replace"/>
            <frac32.positive name="feedback"/>
            <bool32.risingfalling name="delaymode"/>
            <frac32.positive name="delay"/>
         </inlets>
         <outlets>
            <bool32.pulse name="start"/>
            <bool32.pulse name="xtrig"/>
            <int32 name="length"/>
            <frac32.positive name="phase"/>
            <bool32.pulse name="stop"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <objref name="table"/>
            <combo name="dubtrig">
               <MenuEntries>
                  <string>internal</string>
                  <string>external</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int prevo;
int dhold;
int dcount;

int32_t dubfade;
int32_t dubphase;
int32_t prev;
int32_t step;
int32_t prevf;
int32_t stepf;
int32_t cnt;
int32_t fade;
int32_t env;
int32_t prevR;
int32_t envR;
int32_t stepR;
//int32_t iix;
int32_t ii;
int32_t iii;
uint32_t dubpos;
int32_t inx;
uint32_t delaypos;
uint32_t position;
uint32_t delay;
uint32_t x;
uint32_t prevxx;
uint32_t offset;
uint32_t stepxx;
uint32_t delayin;
uint32_t Pdelayin;
uint32_t dwrap;
uint32_t lastmax;
uint32_t wrap;
uint32_t writepos;
uint32_t recorded;
uint32_t frecorded;
uint32_t length;
uint32_t buffer;
uint32_t bsize;
uint32_t repcnt;
uint32_t dubcnt;
uint32_t prevtime;
//uint32_t bufftable[1024];
uint32_t in;
bool reset;
bool stop;
bool play;
bool pl;
bool prevplay;
bool replace;
bool reptrig;
bool dubbtrig;
bool pd;
bool dubb;
bool rec;
bool overdub;
bool dubbing;
bool dtrig;
bool recording;
bool start;
bool prevd;
bool prevrep;
bool delaymode;
bool dt;
bool xtrig;
bool fadein;
bool delayoff;
bool dubhold;
bool fhold;]]></code.declaration>
         <code.krate><![CDATA[fade=1<<10;
bsize=2048;
dubphase=0x07FFFFFF/6;
if (replace && (envR>0)){
			envR-=dubphase;
			if (envR<0){
				envR=0;
			}
		}
else if (!replace && (envR<0x07FFFFFF)){
	envR+=dubphase;
	if (envR>=0x07FFFFFF){
		envR=0x07FFFFFF;
	}
}
stepR = (envR - prevR)>>4;
   iii = prevR;
   prevR = envR;

length=(attr_table.array[0+bsize]<<15)+attr_table.array[1+bsize];





step = (inlet_feedback - prev)>>4;
int32_t i = prev;
prev = inlet_feedback;
if (inlet_replace!=prevrep){
	prevrep=inlet_replace;
	repcnt=0;
	
	
}

if (reptrig){
	reptrig=0;
	replace=inlet_replace;
	//if (!delaymode)
	if (inlet_replace){
		fadein=1;
	}
	else if (!overdub){
		fadein=0;
	}
}
if (repcnt<=bsize){
	repcnt+=(1<<4);
	if (repcnt>=bsize){
		reptrig=1;
	}
}

if (prevo!=inlet_overdub){
	dubcnt=0;
	overdub=inlet_overdub;
	prevo=inlet_overdub;
	}

if (dubbtrig){
	dubbtrig=0;
	if (!delaymode){
		dubb=1;
		if (overdub){
			if (prevo==2){
				delayoff=1;
				dhold=1;
			}
			fadein=1;
		}
		else if (!overdub){
			fadein=0;
		}
		}
}
if (dubcnt<=bsize){
	dubcnt+=(1<<4);
	if (dubcnt>=bsize){
		dubbtrig=1;
	}
}
if (((prevd!=inlet_delaymode) || ((inlet_delay!=prevtime)&&delaymode)) &&!dhold){
	prevd=inlet_delaymode;
	prevtime=inlet_delay;
	fadein=0;
	//dubfade=0x07FFFFFF;
	dhold=1;
}


if ((dhold>0)&&(!dubbing)){
		dhold=0;
		
		if (!delayoff){
			if (prevd){
				delaymode=1;
				//delay=delayin;
				delay=((___SMMUL(inlet_delay<<3,(length*(0x07FFFFFF/length))<<2))/(0x07FFFFFF/length));
				fadein=1;
				
				}
			if (!prevd){
				delaymode=0;
				fadein=0;
				if (inlet_overdub){
					prevo=2;
					
				}
			}
		}
		if (delayoff){
			delayoff=0;
		}
	
}

if((inlet_rec>0)&&!rec){
	inx=0;
	dubhold=1;
	rec=1;
	recording=1;
	writepos=0;
	dubpos=0;
	cnt=0;
	length=0;
	attr_table.array[0+bsize]=0;
	attr_table.array[1+bsize]=0;
	overdub=0;
	play=0;
}

else if((inlet_rec==0)&&rec&&(writepos>=(bsize))){
	dubhold=1;
	start=1;
	rec=0;
	attr_table.array[0+bsize]=((writepos)/(1<<15));
	attr_table.array[1+bsize]=writepos-(((writepos)/(1<<15))<<15);
	length=writepos;
	lastmax=length;
	dubpos=0;
	overdub=inlet_overdub;
	cnt=fade+8192;
	play=1;

	}
if (inlet_play&&!play &&(length>0)){
	if (overdub){
	fadein=1;
	}
	play=1;
	reset=1;
}
if (inlet_stop&&play){
	fadein=0;
	play=0;
	
}


if (inlet_dubtrig&&!dtrig){
	if (!delaymode){
	reset=1;
	dtrig=1;
	
	}
}
else if (!inlet_dubtrig){
	dtrig=0;
} 

if (reset){
	reset=0;
	dubpos=0;
	start=1;
	xtrig=1;
	lastmax=dubpos;
	
}
if (delaymode && (dubpos>=length) && (length>0)){
	lastmax=length;
	dubpos=0;
}
if (!attr_dubtrig && (dubpos>=length) && (length>0)){
	dubpos=0;
	lastmax=length;
}



if (fadein && (env<0x07FFFFFF)){
	env+=dubphase;
	if (env>=0x07FFFFFF){
		env=0x07FFFFFF;
	}
}
if (!fadein && (env>0)){
	env-=dubphase;
	if (env<=0){
		env=0;
	}
}
stepf = (env - prevf)>>4;
   ii = prevf;
   prevf = env;
   dubbing=ii;

if ((dubpos==0)&&!dt&&!rec){
	dt=1;
	xtrig=1;;
}
if (dubpos>0){
	dt=0;
}

if (play!=prevplay){
	if (!play){
		stop=1;
	}
	prevplay=play;
}
outlet_length=length;
if (play){   
	outlet_start=start;
	outlet_xtrig=xtrig;
	outlet_phase=dubpos*(0x07FFFFFF/length);
}
else {
	outlet_start=0;
	outlet_xtrig=0;
	outlet_phase=0;
}
outlet_stop=stop;
start=0;
stop=0;
xtrig=0;]]></code.krate>
         <code.srate><![CDATA[inx=0x07FFFFFF;
if(rec>0) {
attr_table.array[writepos-bsize+32+bsize+2048] =attr_table.array[buffer];

	
}
if(cnt>0){
			attr_table.array[writepos-bsize+32+bsize+2048]= attr_table.array[buffer];
	if (cnt==1){
		recording=0;
	}
	
	cnt-=1;
}

if (dubpos>=bsize){
		position=dubpos-bsize;
		dubhold=0;
	}
	if (dubpos<bsize){
		position=dubpos-bsize+lastmax;
	}


if (delaymode){
	offset=0;
	if (position<(lastmax-delay)){
			delaypos=delay;
	}
	else {
		delaypos=0-(lastmax-delay);
	}
	
}
else {
	delaypos=0;
	offset=lastmax;
	}


if ((dubbing)&&!rec&&(length>0)&&!dubhold){
	
		

		attr_table.array[position+delaypos+32+bsize+2048]= __SSAT((___SMMUL((attr_table.array[buffer] )<<3,ii<<2)) + (___SMMUL((( ___SMMUL(attr_table.array[bsize+position+32+2048]<<3,i<<2)) )<<3,(iii)<<2)) ,16);
		if (((position+delaypos)<(8192)) &&!recording ){			
			attr_table.array[position+delaypos+32+lastmax+bsize+2048]= __SSAT( ((___SMMUL((attr_table.array[buffer] )<<3,ii<<2)) + (___SMMUL((( ___SMMUL(attr_table.array[position+32+bsize+2048+offset]<<3,i<<2)) )<<3,(iii)<<2)) ),16);
		}
		else if (((position+delaypos)>(lastmax-2048)) &&!recording ){			
			attr_table.array[((position+delaypos)-(lastmax-2048))+32+bsize]= __SSAT( ((___SMMUL((attr_table.array[buffer] )<<3,ii<<2)) + (___SMMUL((( ___SMMUL(attr_table.array[((position+delaypos)-(lastmax-2048))+32+bsize]<<3,i<<2)) )<<3,(iii)<<2)) ),16);
		}


	
}
i += step;
ii += stepf;
iii+=stepR;
x += stepxx;

in=__SSAT(inlet_in>>14,16);
attr_table.array[buffer]=in;
buffer+=1;
if (buffer>=bsize){
	buffer=0;
}


writepos = (writepos + 1)&attr_table.LENGTHMASK;
dubpos = (dubpos + 1)&attr_table.LENGTHMASK;]]></code.srate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="71ce7875-e44f-465d-98d2-c4ba9a021701" name="2_1" x="490" y="994">
      <params>
         <int32 name="fadein" value="48"/>
         <int32 name="fadeout" value="48"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="data"/>
      </attribs>
      <object id="patch/object" uuid="71ce7875-e44f-465d-98d2-c4ba9a021701">
         <sDescription>convert to integer output</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <inlets>
            <bool32.rising name="trigger"/>
            <bool32.rising name="stop"/>
         </inlets>
         <outlets>
            <frac32buffer name="out"/>
            <frac32.positive name="phase"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="fadein">
               <MinValue i="1"/>
               <MaxValue i="4194304"/>
            </int32>
            <int32 name="fadeout">
               <MinValue i="1"/>
               <MaxValue i="4194304"/>
            </int32>
         </params>
         <attribs>
            <objref name="table"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int fade;
int fphase;
int fphaseO;
int xfade;
uint32_t pos;
uint32_t out;
uint32_t xout;
uint32_t lastmax;
uint32_t length;
bool rtrig;
bool play;
bool fadein;
bool fadeout;
bool prevplay;
bool xfading;
bool strig;]]></code.declaration>
         <code.krate><![CDATA[fphase=0x07FFFFFF/param_fadein;
fphaseO=0x07FFFFFF/param_fadeout;
length=(attr_table.array[0+2048]<<15)+attr_table.array[1+2048];
if (inlet_trigger&&!rtrig){
	rtrig=1;
	
	if (fade>0){
		prevplay=0;
		xfading=1;
		xfade=0x07FFFFFF;
		lastmax=pos;
	}
	pos=0;
	play=1;
	
}
else if (!inlet_trigger){
	rtrig=0;
}

if (pos>=length){
	play=0;
}
if (inlet_stop &&!strig){
	strig=1;
	play=0;
}
else if (!inlet_stop){
	strig=0;
}
if (play!=prevplay){
if (play){
	fadein=1;
	fadeout=0;
	fade=0;
}
else if (!play){
	fade=0x07FFFFFF;
	fadeout=1;
	fadein=0;
}
prevplay=play;
}

if (!play){
	outlet_phase=0;
}
else{
	outlet_phase=pos*(0x07FFFFFF/length);
	}]]></code.krate>
         <code.srate><![CDATA[if (fadeout){
	fade-=fphaseO;
	if (fade<=0){
		fade=0;
		fadeout=0;
	}
}
if (xfading){
	xfade-=fphaseO;
	if (xfade<=0){
		xfade=0;
		xfading=0;
	}
}

	out= ___SMMUL((attr_table.array[pos+32+2048+2048]<<14)<<3,fade<<2);
	xout= ___SMMUL((attr_table.array[pos+32+2048+lastmax+2048]<<14)<<3,xfade<<2);
	outlet_out=out+xout;


pos = (pos + 1)&attr_table.LENGTHMASK;


if (fadein){
	fade+=fphase;
	if (fade>=0x07FFFFFF){
	fadein=0;
	fade=0x07FFFFFF;
}
}]]></code.srate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="545c9685-426c-4f88-815a-5eb93c32f6be" name="q_1" x="686" y="994">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="545c9685-426c-4f88-815a-5eb93c32f6be">
         <sDescription>right shift. halves the value n times.n = inlet &apos;shift&apos;.</sDescription>
         <author>robert schirmer</author>
         <license>who cares</license>
         <helpPatch>math.axh</helpPatch>
         <inlets>
            <frac32.positive name="phase"/>
            <int32 name="divide"/>
            <bool32 name="start"/>
            <frac32.positive name="sliceloop"/>
            <bool32 name="delay"/>
            <frac32.positive name="delayt"/>
            <bool32 name="xtrig"/>
            <bool32 name="stop"/>
            <bool32 name="unslice"/>
         </inlets>
         <outlets>
            <frac32.positive name="start"/>
            <frac32.positive name="end"/>
            <bool32.pulse name="trig"/>
            <frac32.positive name="slice"/>
            <int32 name="index"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int prev;
int start;
int end;
int ratio;
int offset;
int phase;
int index;
bool trig;
bool play;
bool st;]]></code.declaration>
         <code.krate><![CDATA[ratio=(1<<27)/inlet_divide;
if (inlet_stop){
	play=0;
}
if (inlet_start&&!st){
	play=1;
	st=1;
	trig=1;
}
else if(!inlet_start){
	st=0;
}
if (inlet_delay){
phase=inlet_phase-inlet_delayt;
}
else{
phase=inlet_phase;	
}
if (phase<0){
	phase=0x07FFFFFF+phase;
}
if (inlet_divide==0){
	trig=inlet_start;
	start=0;
	end=0x07FFFFFF;
}
else if (inlet_divide==1){
	trig=inlet_xtrig;
	if (trig){
	index+=1;
	}
	start=0;
	end=0x07FFFFFF;
}
else {
	if (!st){
	trig=0;
	}
	
	start= ((phase / ratio) * ratio);
//	if (start<0x07FFFFFF){
//	start=start;
//	}
	if (start>=0x07FFF000){
		start=0;
	}
	//else {
	//start=start-0x07FFFFFF;
	//}
	end=(___SMMUL(inlet_sliceloop<<3,ratio<<2))+start;





	//if (end<=0x07FFFFFF){
		//end=end;
	//}
	//else {
		//end=end-0x07FFFFFF;
	//	}
	//if (end==0){
	//	end=0x07FFFFFF;
	//}

	

}

	if (start!=prev){
	trig=1;
	prev=start;
	index+=1;
	}
	if (inlet_start){
		index=0;
	}
	
if (!play){
	trig=0;
}
if (inlet_unslice){
	outlet_start=0;

	outlet_end=0x07FFFFFF;
	outlet_trig=inlet_xtrig;
}
else {
	outlet_start=start;

	outlet_end=end;

outlet_trig=trig;
}
outlet_slice=ratio;
outlet_index=(index)- ((index>>3)<<3);]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="1078" y="994" text="fact player"/>
   <comment type="patch/comment" x="868" y="1008" text="window"/>
   <comment type="patch/comment" x="938" y="1008" text="fact player"/>
   <comment type="patch/comment" x="1078" y="1008" text="and simple player"/>
   <comment type="patch/comment" x="1190" y="1008" text="looper vol"/>
   <comment type="patch/comment" x="1274" y="1008" text="input vol"/>
   <comment type="patch/comment" x="1372" y="1008" text="input + sampler"/>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_8" x="868" y="1022">
      <params>
         <frac32.u.map name="value" value="64.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="9c5b391f-d6ec-4a59-8c94-f3879aeba73d" name="2_2" x="938" y="1022">
      <params>
         <int32 name="fadein" value="256"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="data"/>
         <combo attributeName="xfade" selection="auto"/>
      </attribs>
      <object id="patch/object" uuid="9c5b391f-d6ec-4a59-8c94-f3879aeba73d">
         <sDescription>Difficult to name. Pitchshifter, time-stretcher, play-rate adjuster (stretch+pitchshift), sampler, delay, granulizer...

See inputs/controls for their functions (hoover above them)</sDescription>
         <author>Remco van der most</author>
         <license>BSD</license>
         <helpPatch>delay.axh</helpPatch>
         <inlets>
            <bool32 name="trigger" description="when high, restarts at &quot;phase-position&quot;  of phase input+parameter"/>
            <bool32 name="stop"/>
            <frac32.bipolar name="pitchshift" description="ONLY pitchshifts the signal without stretching it. normal semitone response."/>
            <frac32.bipolar name="stretch" description="ONLY stretches the signal without pitchshifting it. normal semitone response."/>
            <frac32.bipolar name="rate"/>
            <bool32.risingfalling name="oneshot"/>
            <frac32.positive name="start"/>
            <frac32.positive name="end"/>
            <frac32.positive name="window"/>
         </inlets>
         <outlets>
            <frac32buffer name="out"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="fadein" noLabel="true">
               <MinValue i="0"/>
               <MaxValue i="30000"/>
            </int32>
         </params>
         <attribs>
            <objref name="table"/>
            <combo name="xfade">
               <MenuEntries>
                  <string>auto</string>
                  <string>parameter</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int32_t phase[2];
int32_t phs[2];
int32_t P1[2];
int32_t P2[2];
int32_t tmp1[2];
int32_t tmp2[2];
int32_t out[2];
int32_t mp[2];
int32_t prevv[2];
int32_t FRQ[2];
int32_t FRQQ[2];
int32_t FR;
int32_t FRR;
int32_t i[2];
int32_t prestep[2];
int32_t step[2];

int32_t Xphase;
int32_t start;
int32_t end;
int32_t x;
int32_t rate;
int32_t bsize;
int32_t length;
int32_t xlength;
int32_t xoffset;
int32_t total;
float32_t ratio;
int32_t fBase;
int32_t fRate;
int32_t LNG;
int32_t window;
int32_t playpos;
int32_t Lpoint;
int32_t Lp;
int32_t Pp;
int32_t Xo;
int32_t RATEPRE;
int32_t player;
int32_t dir;

int32_t READ(int T,uint32_t R,uint32_t L,uint32_t P){
      int32_t tmp_di = T/R;
      int32_t tmp_w1 = (T-tmp_di*R)*R>>2;
      int32_t tmp_diX=tmp_di+32+start+bsize;
      int32_t tmp_a1 = attr_table.array[tmp_diX];
      tmp_a1 = (tmp_a1<<14)+___SMMUL(attr_table.array[tmp_diX+1]-tmp_a1<<16,tmp_w1);
      return out[P]= tmp_a1;
}

bool fadein;
bool fading;
bool play;
bool prevplay;
bool snc;
bool oneshot;
bool ztrig;
bool ptt;
bool stop;]]></code.declaration>
         <code.init><![CDATA[player=2;
bsize=2048;]]></code.init>
         <code.krate><![CDATA[total=(attr_table.array[0+bsize]<<15)+attr_table.array[1+bsize];
oneshot=inlet_oneshot;



if((inlet_trigger>0)&&!snc){
	fadein=1;
	ztrig=1;
	snc=1;
}

else if(inlet_trigger==0){
	snc=0;
	}


if (inlet_stop && !stop){
	stop=1;
	play=0;
}
else if (!inlet_stop){
	stop=0;
}

xlength=total;
length=total+(1024<<4);

MTOFEXTENDED(0,fBase);
MTOFEXTENDED(inlet_stretch,fRate)
ratio=(float32_t)fRate/fBase;

LNG=___SMMUL(length,(0x7FFFFFF0))<<1;
rate=((uint64_t)1<<32)/LNG;
int32_t RATE=rate*ratio;
RATEPRE=rate;
int32_t prate;
MTOFEXTENDED(inlet_pitchshift-inlet_stretch,prate)
float32_t pratio=(float32_t)prate/fBase;
window=((uint64_t)inlet_window<<16)/length;

float32_t wratio=(float32_t)(1<<30)/(window>>1);
prate=(int64_t)((int64_t)RATE*pratio-RATE)*wratio;
FR=___SMMUL(prate<<2,inlet_rate<<3);
FRR=___SMMUL(RATE<<2,inlet_rate<<3);


if (play!=prevplay){
	if (!play){
		player=2;
	}
	prevplay=play;
}
xoffset=(((1024<<4))*rate);
if (inlet_start==0x07FFFFFF){
		playpos=0;
	}
	else{
		//playpos=((inlet_start<<3)/((1<<30)/(xlength)))*rate;
		playpos=((inlet_start)/((1<<27)/(xlength)))*rate;
		}
	if (inlet_end==0){
		Lpoint=((0x07FFFFFF)/((1<<27)/(xlength)))*rate;
	}
	else{
		Lpoint=((inlet_end)/((1<<27)/(xlength)))*rate;
		}
if (ztrig){
	
	if (fading){
		Lp=0;
		Pp=0;
		Xo=0-xoffset;
		
	}
	else {
		Lp=Lpoint;
		Pp=playpos;
		Xo=0;
	}
	ztrig=0;
	play=1;
	if ((player==1) || (player==2)){
		player=0;
		phs[0]=0;
		if (inlet_rate>=0){	
			phase[0]=0+Pp;
			}
		else if (inlet_rate<0){
			phase[0]=Xo+Lp;
			}
		prevv[0]=phase[0];
	}
	else if (player==0){
		player=1;
		phs[1]=0;
		if (inlet_rate>=0){	
			phase[1]=0+Pp;
			}
		else if (inlet_rate<0){
			phase[1]=Xo+Lp;
			}
		prevv[1]=phase[1];
	
	}
	
	fading=0;
	
}
if (inlet_rate>0){
	dir=1;
	Xphase=(window/___SMMUL(RATE<<2,inlet_rate<<3))>>4;
}
else if (inlet_rate<0) {
	dir=0;
	Xphase=(window/___SMMUL(RATE<<2,-inlet_rate<<3))>>4;
}

if (Xphase<48){
	Xphase=48;
}
if(Xphase>=4096){
	Xphase=4096;
}

for (x = 0;x<2;x++){
	if (player==x){
		FRQ[x]=FR;
		FRQQ[x]=FRR;
		if (dir){
			if ((phase[x]>=(0-xoffset))  && (prevv[x]<(0-xoffset)))  {
					if (((inlet_end==0x07FFFFFF)||(inlet_end==0))){
						if (oneshot){
						play=0;
						}
						else {
						ztrig=1;
						//fading=1;	
						}
					}
					else if (play){
						ztrig=1;
						fading=1;
					}
					}
			if ((phase[x]>=(Lpoint))  && (prevv[x]<(Lpoint)))  {
					if (oneshot){
						play=0;
					}
					else if (play){
						ztrig=1;
						fading=0;
					}
					}
			}

		else if (!dir){
			if   ((!(phase[x]>(0)))&&((prevv[x])>(0)))  {
					if (((inlet_start==0)||(inlet_start==0x07FFFFFF))){
						if (oneshot){
						play=0;
						}
						else {
						ztrig=1;
						//fading=1;	
						}
					}
					else if (play){
						ztrig=1;
						fading=1;
					}
				}
			if   ((!(phase[x]>(playpos)))&&((prevv[x])>(playpos)))  {
					if (oneshot){
						play=0;
					}
					else if (play){
						ztrig=1;
						fading=0;
					}
				}
		}
	
	}
	//if (fadein || attr_xfade){
	if (attr_xfade){
		step[x]=0x07FFFFFF/param_fadein;
		}
	else {
		step[x]=0x07FFFFFF/(Xphase-1);
		}
}


prevv[0]=phase[0];
prevv[1]=phase[1];]]></code.krate>
         <code.srate><![CDATA[x=0;
for (x = 0;x<2;x++){
	phase[x]+=FRQQ[x];
	phs[x]+=FRQ[x];
	P1[x]=((uint32_t)phs[x])>>1;
	P2[x]=((uint32_t)phs[x]+(1<<31))>>1;
	
	tmp1[x]=READ(phase[x]+(___SMMUL(P1[x],window)<<2),rate,LNG,x);
	tmp2[x]=READ(phase[x]+(___SMMUL(P2[x],window)<<2),rate,LNG,x);
	
	
	SINE2TINTERP(phs[x]-(1<<30),mp[x])
	mp[x]=(mp[x]>>2)+(1<<29);
	
	out[x]=tmp2[x]+(___SMMUL(tmp1[x]-tmp2[x],mp[x])<<2);
	
	out[x] =  ___SMMUL(out[x],i[x])<<5;
	if (player==x){
		i[x] += step[x];
		if (i[x]>0x07FFFFFF){
			i[x]=0x07FFFFFF;
			fadein=0;
		}
		}
	else {
		i[x] -= step[x];
		if (i[x]<0){
			i[x]=0;
		}
		}
	
}
outlet_out=out[0]+out[1];]]></code.srate>
      </object>
   </patchobj>
   <obj type="mux/mux 2" uuid="539c246f4c360ac476e128cfbfa84348fb7f7e73" name="mux_1" x="1078" y="1022">
      <params/>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_2" x="1190" y="1022">
      <params/>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_3" x="1274" y="1022">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_2" x="1372" y="1022">
      <params/>
      <attribs/>
   </obj>
   <obj type="audio/out left" uuid="b11a3c09b2fdd575ea8212f2ce7743d5269253b1" name="out_2" x="1484" y="1022">
      <params/>
      <attribs/>
   </obj>
   <obj type="string/c" uuid="4aa90a90c435a742ddfa152d232883fc5b2f1b3" name="c_1" x="1106" y="1120">
      <params/>
      <attribs>
         <table attributeName="str" table="/operationivy"/>
      </attribs>
   </obj>
   <obj type="table/save" uuid="3e4108b607d56d9e1cd10abb898b58eea11e53b2" name="save_1" x="1274" y="1120">
      <params/>
      <attribs>
         <objref attributeName="table" obj="data"/>
      </attribs>
   </obj>
   <obj type="table/load" uuid="600cc22c6734d23a82620da1a14e78782a7e168e" name="load_1" x="1414" y="1120">
      <params/>
      <attribs>
         <objref attributeName="table" obj="data"/>
      </attribs>
   </obj>
   <nets>
      <net>
         <source obj="toggle_2" outlet="o"/>
         <dest obj="1_1" inlet="rec"/>
      </net>
      <net>
         <source obj="c_1" outlet="out"/>
         <dest obj="load_1" inlet="filename"/>
         <dest obj="save_1" inlet="filename"/>
      </net>
      <net>
         <source obj="button_3" outlet="o"/>
         <dest obj="load_1" inlet="trig"/>
         <dest obj="bool_2" inlet="in"/>
      </net>
      <net>
         <source obj="button_2" outlet="o"/>
         <dest obj="save_1" inlet="trig"/>
         <dest obj="bool_1" inlet="in"/>
      </net>
      <net>
         <source obj="toggle_5____tmp" outlet="o"/>
         <dest obj="1_1" inlet="overdub"/>
      </net>
      <net>
         <source obj="dial_5" outlet="out"/>
         <dest obj="1_1" inlet="feedback"/>
      </net>
      <net>
         <source obj="dial_1" outlet="out"/>
         <dest obj="2_2" inlet="pitchshift"/>
      </net>
      <net>
         <source obj="dial_2" outlet="out"/>
         <dest obj="2_2" inlet="stretch"/>
      </net>
      <net>
         <source obj="dial_3" outlet="out"/>
         <dest obj="2_2" inlet="rate"/>
      </net>
      <net>
         <source obj="button_6" outlet="o"/>
         <dest obj="1_1" inlet="replace"/>
      </net>
      <net>
         <source obj="1_1" outlet="phase"/>
         <dest obj="dial_6" inlet="in"/>
         <dest obj="q_1" inlet="phase"/>
      </net>
      <net>
         <source obj="1_1" outlet="xtrig"/>
         <dest obj="2_1" inlet="trigger"/>
         <dest obj="q_1" inlet="xtrig"/>
      </net>
      <net>
         <source obj="+_2" outlet="out"/>
         <dest obj="out_2" inlet="wave"/>
      </net>
      <net>
         <source obj="dial_8" outlet="out"/>
         <dest obj="2_2" inlet="window"/>
      </net>
      <net>
         <source obj="1_1" outlet="stop"/>
         <dest obj="2_1" inlet="stop"/>
         <dest obj="2_2" inlet="stop"/>
         <dest obj="q_1" inlet="stop"/>
      </net>
      <net>
         <source obj="2_1" outlet="out"/>
         <dest obj="mux_1" inlet="i2"/>
      </net>
      <net>
         <source obj="toggle_4" outlet="o"/>
         <dest obj="mux_1" inlet="s"/>
      </net>
      <net>
         <source obj="2_2" outlet="out"/>
         <dest obj="mux_1" inlet="i1"/>
      </net>
      <net>
         <source obj="1_1" outlet="start"/>
         <dest obj="q_1" inlet="start"/>
      </net>
      <net>
         <source obj="mux_1" outlet="o"/>
         <dest obj="vca_2" inlet="a"/>
         <dest obj="vca_1" inlet="a"/>
      </net>
      <net>
         <source obj="i_2" outlet="out"/>
         <dest obj="q_1" inlet="divide"/>
      </net>
      <net>
         <source obj="dial_4" outlet="out"/>
         <dest obj="q_1" inlet="sliceloop"/>
      </net>
      <net>
         <source obj="in_1" outlet="wave"/>
         <dest obj="vca_3" inlet="a"/>
         <dest obj="+_1" inlet="in1"/>
      </net>
      <net>
         <source obj="vca_1" outlet="o"/>
         <dest obj="+_1" inlet="in2"/>
      </net>
      <net>
         <source obj="+_1" outlet="out"/>
         <dest obj="1_1" inlet="in"/>
      </net>
      <net>
         <source obj="dial_7" outlet="out"/>
         <dest obj="vca_1" inlet="v"/>
      </net>
      <net>
         <source obj="q_1" outlet="slice"/>
         <dest obj="dial_10" inlet="in"/>
      </net>
      <net>
         <source obj="q_1" outlet="index"/>
         <dest obj="i_3" inlet="in"/>
      </net>
      <net>
         <source obj="toggle_7" outlet="o"/>
         <dest obj="1_1" inlet="delaymode"/>
      </net>
      <net>
         <source obj="vca_2" outlet="o"/>
         <dest obj="+_2" inlet="in2"/>
      </net>
      <net>
         <source obj="vca_3" outlet="o"/>
         <dest obj="+_2" inlet="in1"/>
      </net>
      <net>
         <source obj="dial_13" outlet="out"/>
         <dest obj="crossfade_1" inlet="drywet"/>
      </net>
      <net>
         <source obj="crossfade_1" outlet="dry"/>
         <dest obj="vca_3" inlet="v"/>
      </net>
      <net>
         <source obj="crossfade_1" outlet="wet"/>
         <dest obj="vca_2" inlet="v"/>
      </net>
      <net>
         <source obj="dial_14" outlet="out"/>
         <dest obj="crossfade_1" inlet="volume"/>
      </net>
      <net>
         <source obj="dial_12" outlet="out"/>
         <dest obj="1_1" inlet="delay"/>
      </net>
      <net>
         <source obj="button_1" outlet="o"/>
         <dest obj="1_1" inlet="play"/>
      </net>
      <net>
         <source obj="button_4" outlet="o"/>
         <dest obj="1_1" inlet="stop"/>
      </net>
      <net>
         <source obj="button_5" outlet="o"/>
         <dest obj="1_1" inlet="dubtrig"/>
      </net>
      <net>
         <source obj="q_1" outlet="start"/>
         <dest obj="dial_9" inlet="in"/>
         <dest obj="2_2" inlet="start"/>
      </net>
      <net>
         <source obj="q_1" outlet="end"/>
         <dest obj="dial_11" inlet="in"/>
         <dest obj="2_2" inlet="end"/>
      </net>
      <net>
         <source obj="q_1" outlet="trig"/>
         <dest obj="2_2" inlet="trigger"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>-8</x>
      <y>-8</y>
      <width>1616</width>
      <height>876</height>
   </windowPos>
</patch-1.0>