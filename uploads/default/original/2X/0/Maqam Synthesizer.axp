<patch-1.0 appVersion="1.0.12">
   <obj type="math/glide" uuid="cfa0324c7cc8ebfd6e03c6b92f41115e3172d0d9" name="glide_1" x="364" y="56">
      <params>
         <frac32.u.map name="time" value="17.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="osc/saw" uuid="739ecc36017ef3249479b8f01716b8bbfba9abc1" name="saw_1" x="462" y="70">
      <params>
         <frac32.s.map name="pitch" value="-32.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_1" x="784" y="84">
      <params/>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_1" x="854" y="84">
      <params/>
      <attribs/>
   </obj>
   <obj type="env/adsr" uuid="d1dbcc5fa6f87b98a6a91c87fd44acee5e690bac" name="adsr_2" x="924" y="84">
      <params>
         <frac32.s.map name="a" value="-62.0"/>
         <frac32.s.map name="d" value="-42.0"/>
         <frac32.u.map name="s" value="10.5"/>
         <frac32.s.map name="r" value="-23.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="filter/multimode svf m" uuid="71d5f8b2131b691d591a9a9ee28771309f8938d" name="multimode_1" x="1036" y="84">
      <params>
         <frac32.s.map name="pitch" value="5.0"/>
         <frac32.u.map name="reso" value="5.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="filter/multimode svf m" uuid="71d5f8b2131b691d591a9a9ee28771309f8938d" name="multimode_2" x="1176" y="84">
      <params>
         <frac32.s.map name="pitch" value="-64.0"/>
         <frac32.u.map name="reso" value="27.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/*c" uuid="7a66f52a9594e7e9eb31328ea725cb3641a80b55" name="Vol" x="1302" y="84">
      <params>
         <frac32.u.map name="amp" value="20.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="audio/out stereo" uuid="a1ca7a567f535acc21055669829101d3ee7f0189" name="out_1" x="1624" y="84">
      <params/>
      <attribs/>
   </obj>
   <obj type="mix/mix 4" uuid="e6f9a0cc7aadc1b89516143cf1ccb79b3538d05a" name="mix_1" x="574" y="140">
      <params>
         <frac32.u.map name="gain1" value="64.0"/>
         <frac32.u.map name="gain2" value="64.0"/>
         <frac32.u.map name="gain3" value="0.0"/>
         <frac32.u.map name="gain4" value="18.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="env/adsr" uuid="d1dbcc5fa6f87b98a6a91c87fd44acee5e690bac" name="adsr_1" x="672" y="140">
      <params>
         <frac32.s.map name="a" value="-64.0"/>
         <frac32.s.map name="d" value="20.0"/>
         <frac32.u.map name="s" value="44.0"/>
         <frac32.s.map name="r" value="-44.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="osc/saw" uuid="739ecc36017ef3249479b8f01716b8bbfba9abc1" name="saw_2" x="462" y="168">
      <params>
         <frac32.s.map name="pitch" value="-32.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="osc/pwm" uuid="a6b40ff63f161d8bac8ea2eba5b0dbffcf49b472" name="pwm_1" x="462" y="266">
      <params>
         <frac32.s.map name="pitch" value="-32.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="mix/mix 3" uuid="7d947bff9b8466d81c2ddd49b4a7fb702302e05c" name="mix_2" x="1050" y="378">
      <params>
         <frac32.u.map name="gain1" value="64.0"/>
         <frac32.u.map name="gain2" value="39.0"/>
         <frac32.u.map name="gain3" value="64.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="lfo/sine" uuid="75f7330c26a13953215dccc3b7b9008545c9daa9" name="sine_1" x="42" y="420">
      <params>
         <frac32.s.map name="pitch" value="-27.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/*c" uuid="7d5ef61c3bcd571ee6bbd8437ef3612125dfb225" name="*c_1" x="154" y="420">
      <params>
         <frac32.u.map name="amp" value="22.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="gpio/in/analog" uuid="1c0c845ed2d7e06ae5f377ba13d9d09f4747ac87" name="analog_1" x="812" y="490">
      <params/>
      <attribs>
         <combo attributeName="channel" selection="PB1 (ADC1_IN9)"/>
      </attribs>
   </obj>
   <obj type="noise/pink" uuid="72c03a2468ee865f248733fcf9b12d4cf42b5a61" name="pink_1" x="266" y="504">
      <params/>
      <attribs/>
   </obj>
   <obj type="table/alloc 32b" uuid="ac26551322b24f37c3be0e6481d1193f1fd66bc8" name="tuning" x="42" y="532">
      <params/>
      <attribs>
         <combo attributeName="size" selection="128"/>
         <text attributeName="init">
            <sText><![CDATA[]]></sText>
         </text>
      </attribs>
   </obj>
   <comment type="patch/comment" x="154" y="602" text="load scala file into table"/>
   <patchobj type="patch/object" uuid="be251126-228b-423e-a1b9-c505dd8d5645" name="scalaloader" x="42" y="616">
      <params/>
      <attribs>
         <file attributeName="filename" file="Desktop/axscala/arabic_rast_on_cr.scl"/>
         <objref attributeName="table" obj="tuning"/>
         <combo attributeName="keyboardMapping" selection="off"/>
      </attribs>
      <object id="patch/object" uuid="be251126-228b-423e-a1b9-c505dd8d5645">
         <sDescription>description</sDescription>
         <inlets/>
         <outlets/>
         <displays/>
         <params/>
         <attribs>
            <file name="filename" description="scala file"/>
            <objref name="table" description="tuning table"/>
            <combo name="keyboardMapping">
               <MenuEntries>
                  <string>off</string>
                  <string>on</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[float interval[36];
int numberOfDegrees;
char line[64];
// propertyFiles is a 2048 char array
static const int ScalaBufferSize = 1024;


//config
const int keyboardMapping=attr_keyboardMapping;

int getLine(char* file, char* line) {
	int k;
	for (k=0; k <128 && file[k] != '\n' && file[k] != '\r'; k++) {
		line[k] = file[k];
	}
	line[k] = 0;
	while (file[k]=='\n' || file[k]=='\r' || file[k]=='\t' || file[k]==' ') {
		k++;
	}
	// Let's continue...
	if (file[k] == 0) {
		return -1;
	}
	return k;
}

int toInt(const char *str) {
	int           result;

	result = 0;
	while ((*str >= '0') && (*str <= '9'))
	{
		result = (result * 10) + ((*str) - '0');
		str++;
	}
	return result;
}

float toFloat(const char *str) {
	float           result;
    float           result2;
	float           puiss = 1.0f;

	result = 0.0f;
    result2 = 0.0f;
	while ((*str >= '0') && (*str <= '9'))
	{
		result = (result * 10.0f) + ((*str) - '0');
		str++;
	}
    if (*str == '.') {
        str++;
        while ((*str >= '0') && (*str <= '9'))
    	{
    		result2 = (result2 * 10.0f) + ((*str) - '0');
            puiss *= 10.0f;
    		str++;
    	}
        result += result2 / puiss;
    }

	return result;
}

int getPositionOfSlash(const char *line) {
  for (int k=0; k < 20 && line[k] != 0; k++) {
		if (line[k] == '/') {
			return k;
		}
	}
	return -1;
}

float getScalaIntervale(const char* line) {
    int slashPos = getPositionOfSlash(line);
    if (slashPos != -1) {
        float num = toFloat(line);
        float den = toFloat(line + slashPos + 1);
        return num/den;
    } else {
        return pow(2.0f, toFloat(line) / 1200.0f);
    }
}

int log2_q27(float in){
Float_t f;
f.f = in;
int32_t r1 = ((f.parts.exponent&0x7F)-5)<<20;
int32_t r3 = logt[f.parts.mantissa>>15]<<6;
//LogTextMessage("%d %d %d %d %d %d",(int)in,r1,r3,f.parts.exponent&0x7F,f.parts.mantissa>>15, r1+r3);
return 12*(r1 + r3);
}

void loadScalaScale(char * fullScalaFileName) {
    static char scalaBuffer[ScalaBufferSize];
	static float scalaFrequency[128];
	float scalaFreq = 130.8f;


//    int result = load(fullScalaFileName, 0,  , size);
    static FIL FileObject;
    FRESULT err;
    UINT bytes_read;
    err = f_open(&FileObject, fullScalaFileName, FA_READ | FA_OPEN_EXISTING);
    if (err != FR_OK) { report_fatfs_error(err,fullScalaFileName); return;}

    UINT size = f_size (&FileObject);
    if (size >= ScalaBufferSize || size == -1) {
    	// ERROR but should not happen
    	return;
    }
    scalaBuffer[size] = 0;
	LogTextMessage("sc1");
    err = f_read(&FileObject, (void*)scalaBuffer, ScalaBufferSize, &size);

    if (size>ScalaBufferSize-1){
    	LogTextMessage("Warning: Scala file truncated!");
    }

    int loop = 0;
    char *readProperties = scalaBuffer;
    int state = 0;

    numberOfDegrees = 0;
    for (int i=0; i< 24; i++) {
    	interval[i] = 0.0f;
    }
    while (loop !=-1 && (readProperties - scalaBuffer) < size) {
    	loop = getLine(readProperties, line);
    	if (line[0] != '!') {
            switch (state) {
                case 0:
                    // line contains short description
                    break;
                case 1:
                    // line contains number of degrees
                	numberOfDegrees = toInt(line);
                	if (numberOfDegrees > 36) {
                		numberOfDegrees = 36;
                	}
                	LogTextMessage("degrees=%d",numberOfDegrees);
                    break;
                default:
                    // contains the frequencey (state-2)
                	if ((state -2) < 36) {
                		interval[state -2] = getScalaIntervale(line);
	                	LogTextMessage("degrees=%d%%",(int)(100*interval[state -2]));
                	}
                    break;
            }
            state ++;
    	}
    	readProperties += loop;
    }

    // apply scala


	float octaveRatio = interval[numberOfDegrees-1];

     LogTextMessage("octave=%d%%",(int)(100*octaveRatio));


	int octaveDegree = numberOfDegrees;
	if (keyboardMapping) {
		octaveDegree = ((numberOfDegrees + 11) / 12) * 12;
	}
     LogTextMessage("octavedegree=%d",octaveDegree);

	// Fill middle C
	scalaFrequency[60] = scalaFreq;
    LogTextMessage("p6 %3d=%5d",60,(int)(scalaFrequency[60]));
	// Fill all C
	int firstC = 0;
	int lastNote = 127;
	for (int n = 60 - octaveDegree; n >=0; n = n - octaveDegree) {
		scalaFrequency[n] = scalaFrequency[n + octaveDegree]  / octaveRatio;
	     LogTextMessage("p %3d=%5d",n,(int)(scalaFrequency[n]));
		firstC = n;
	}
	for (int n = 60 + octaveDegree; n <=127; n = n + octaveDegree) {
		scalaFrequency[n] = scalaFrequency[n - octaveDegree]  * octaveRatio;
	     LogTextMessage("q %3d=%5d",n,(int)(scalaFrequency[n]));
	}

	// init unusable last 8 notes
	for (int n = 0; n < firstC; n++) {
		scalaFrequency[n] = scalaFreq;
	}

	// Fill all notes
	for (int octave = firstC ; octave <= 127; octave += octaveDegree) {
		for (int n = 1; n < numberOfDegrees; n++) {
			if (octave + n <= 127) {
				scalaFrequency[octave + n] = scalaFrequency[octave] * interval[n-1];
				lastNote = octave + n;
			}
		}
		// Same scalaFrequency for all remaining notes
		for (int nn = numberOfDegrees ; nn < octaveDegree; nn++) {
			if (octave + nn <= 127) {
				scalaFrequency[octave + nn] = scalaFrequency[octave] * octaveRatio;
				lastNote = octave + nn;
			}
		}
	}
    LogTextMessage("lastnote %d",lastNote);
	for (int n = lastNote; n < 128; n++) {
		scalaFrequency[n] = scalaFreq;
	}
	//debug
//	float f = 12.0f/log((double)2.0);
	for (int n = 0; n < 128; n++) {
		int mi = log2_q27((int)(scalaFrequency[n]))<<1;
	      attr_table.array[n&attr_table.LENGTHMASK]=__SSAT(mi,28)>>attr_table.GAIN;

		LogTextMessage("sc %d %04d %8x",n,(int)scalaFrequency[n],mi);
	}
}
]]></code.declaration>
         <code.init><![CDATA[loadScalaScale("attr_filename");]]></code.init>
      </object>
   </patchobj>
   <obj type="midi/in/keyb zone lru" uuid="36a44968a4f8b980273e94dca846b7544a3c45d2" name="keyb_2" x="266" y="672">
      <params/>
      <attribs>
         <spinner attributeName="startNote" value="0"/>
         <spinner attributeName="endNote" value="127"/>
      </attribs>
   </obj>
   <comment type="patch/comment" x="686" y="672" text="read out the tuning file with the actual pitch values for oscilator"/>
   <obj type="conv/to i" uuid="305966430ee86b5c3b8e18cde0c721657c558a87" name="to_1" x="658" y="686">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="b94a9b8e9adcb7d18868c0ee808a9b211b65578d" name="+_1" x="714" y="686">
      <params/>
      <attribs/>
   </obj>
   <obj type="table/read" uuid="65eb8d0f6a3344638de94c9882999b9af15510d0" name="read_2" x="784" y="686">
      <params/>
      <attribs>
         <objref attributeName="table" obj="tuning"/>
      </attribs>
   </obj>
   <obj type="math/c 64" uuid="9116584b9960241e86c12effea4ce12d13871e77" name="c_1" x="644" y="728">
      <params/>
      <attribs/>
   </obj>
   <obj type="ctrl/i" uuid="a3786816db6ea5bc6ac4193a5cccdb2c83b83496" name="i_5" x="84" y="812">
      <params>
         <int32 name="value" value="88"/>
      </params>
      <attribs/>
   </obj>
   <obj type="table/read" uuid="65eb8d0f6a3344638de94c9882999b9af15510d0" name="read_1" x="182" y="826">
      <params/>
      <attribs>
         <objref attributeName="table" obj="tuning"/>
      </attribs>
   </obj>
   <obj type="disp/note" uuid="ce3190ad98b73b468f22221f555b01feee03226a" name="note_1" x="336" y="840">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/hex" uuid="87617898f70d90033f8add921438bf0d11721fdd" name="hex_1" x="336" y="910">
      <params/>
      <attribs/>
   </obj>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_5" x="126" y="966">
      <params>
         <frac32.s.map name="value" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="disp/hex" uuid="87617898f70d90033f8add921438bf0d11721fdd" name="hex_2" x="308" y="980">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/note" uuid="ce3190ad98b73b468f22221f555b01feee03226a" name="note_2" x="308" y="980">
      <params/>
      <attribs/>
   </obj>
   <nets>
      <net>
         <source obj="vca_1" outlet="o"/>
         <dest obj="multimode_1" inlet="in"/>
      </net>
      <net>
         <source obj="multimode_1" outlet="lp"/>
         <dest obj="multimode_2" inlet="in"/>
      </net>
      <net>
         <source obj="pwm_1" outlet="wave"/>
         <dest obj="mix_1" inlet="in3"/>
      </net>
      <net>
         <source obj="sine_1" outlet="wave"/>
         <dest obj="*c_1" inlet="in"/>
      </net>
      <net>
         <source obj="*c_1" outlet="out"/>
         <dest obj="pwm_1" inlet="pw"/>
      </net>
      <net>
         <source obj="multimode_2" outlet="hp"/>
         <dest obj="Vol" inlet="in"/>
      </net>
      <net>
         <source obj="adsr_1" outlet="env"/>
         <dest obj="*_1" inlet="a"/>
      </net>
      <net>
         <source obj="*_1" outlet="result"/>
         <dest obj="vca_1" inlet="v"/>
      </net>
      <net>
         <source obj="saw_1" outlet="wave"/>
         <dest obj="mix_1" inlet="in1"/>
      </net>
      <net>
         <source obj="saw_2" outlet="wave"/>
         <dest obj="mix_1" inlet="in2"/>
      </net>
      <net>
         <source obj="mix_1" outlet="out"/>
         <dest obj="vca_1" inlet="a"/>
      </net>
      <net>
         <source obj="mix_2" outlet="out"/>
         <dest obj="multimode_1" inlet="pitch"/>
      </net>
      <net>
         <source obj="adsr_2" outlet="env"/>
         <dest obj="mix_2" inlet="in1"/>
      </net>
      <net>
         <source obj="Vol" outlet="out"/>
         <dest obj="out_1" inlet="left"/>
         <dest obj="out_1" inlet="right"/>
      </net>
      <net>
         <source obj="glide_1" outlet="out"/>
         <dest obj="saw_1" inlet="pitch"/>
         <dest obj="saw_2" inlet="pitch"/>
         <dest obj="pwm_1" inlet="pitch"/>
      </net>
      <net>
         <source obj="pink_1" outlet="out"/>
         <dest obj="mix_1" inlet="in4"/>
      </net>
      <net>
         <source obj="read_1" outlet="o"/>
         <dest obj="note_1" inlet="in"/>
         <dest obj="hex_1" inlet="in"/>
      </net>
      <net>
         <source obj="i_5" outlet="out"/>
         <dest obj="read_1" inlet="a"/>
      </net>
      <net>
         <source obj="dial_5" outlet="out"/>
         <dest obj="note_2" inlet="in"/>
         <dest obj="hex_2" inlet="in"/>
      </net>
      <net>
         <source obj="keyb_2" outlet="note"/>
         <dest obj="to_1" inlet="i"/>
      </net>
      <net>
         <source obj="c_1" outlet="o"/>
         <dest obj="+_1" inlet="in2"/>
      </net>
      <net>
         <source obj="+_1" outlet="out"/>
         <dest obj="read_2" inlet="a"/>
      </net>
      <net>
         <source obj="keyb_2" outlet="gate"/>
         <dest obj="adsr_1" inlet="gate"/>
         <dest obj="adsr_2" inlet="gate"/>
      </net>
      <net>
         <source obj="keyb_2" outlet="velocity"/>
         <dest obj="*_1" inlet="b"/>
         <dest obj="mix_2" inlet="in2"/>
      </net>
      <net>
         <source obj="analog_1" outlet="out"/>
         <dest obj="mix_2" inlet="in3"/>
      </net>
      <net>
         <source obj="read_2" outlet="o"/>
         <dest obj="glide_1" inlet="in"/>
      </net>
      <net>
         <source obj="to_1" outlet="o"/>
         <dest obj="+_1" inlet="in1"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>0</x>
      <y>23</y>
      <width>1440</width>
      <height>777</height>
   </windowPos>
</patch-1.0>