<patch-1.0 appVersion="1.0.12">
   <patchobj type="patch/object" uuid="5c452928-a92b-4fd2-9167-1890d477d516" name="global" x="0" y="0">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="5c452928-a92b-4fd2-9167-1890d477d516">
         <sDescription>Novation Circuit-style chromatic layout for Launchpad Pro. 
this object handles the global part of the patch (there is also per-voise/note object that runs as subpatch). 
designed for 1.0.12 and at the moment (may 2020) doesn&apos;t work with 2.0 due to different SysEx implementation (at least). 
to set root note, press Note button (it will highlight) and then press desired note anywhere on the pad area. 
to shift notes range, use up/down keys (±4 octaves). 
notes out of allowed range (higher than 127 or lower than 0) won&apos;t be played, and active note visual feedback won&apos;t happen when respective pasd are pressed; however currently they are not highlighted/darkened in any way on the pad area.
2do: clear pad area switching all LEDs off.</sDescription>
         <author>chaocrator</author>
         <license>do what Thou wilt should be the whole of the Law</license>
         <helpPatch>logic.axh</helpPatch>
         <inlets/>
         <outlets>
            <bool32 name="setup"/>
            <int32 name="noteshift"/>
            <int32 name="outMidiCh"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[// setup mode
uint8_t setup;

// global variables
// shift = rootnote + octave
uint8_t rootnote;
int octave;

// octave shifter counter variables
int octcount; 
int up; 
int down; 

// LP Pro SysEx message for programmer's layout
uint8_t LayoutSysexArray[9] = {240,0,32,41,2,16,44,3,247};

// LP Pro SysEx message for pads/buttons colors
uint8_t PadsSysexArray[144] = {240,0,32,41,2,16,10,
11,14,12,22,13,22,14,25,15,19,16,22,17,22,18,14,
21,51,22,22,23,22,24,51,25,22,26,22,27,22,28,51,
31,15,32,23,33,23,34,28,35,18,36,23,37,23,38,15,
41,51,42,23,43,23,44,51,45,23,46,23,47,23,48,51,
51,14,52,22,53,22,54,25,55,19,56,22,57,22,58,14,
61,51,62,22,63,22,64,51,65,22,66,22,67,22,68,51,
71,15,72,23,73,23,74,28,75,18,76,23,77,23,78,15,
81,51,82,23,83,23,84,51,85,23,86,23,87,23,88,51,
91,30,92,30,96,30,99,4,247};

// map for selecting root note in setup mode
uint8_t rootnoteMap[128] { 0,0,0,0,0,0,0,0,0,0,0,
   0,  2,  4,  5,  7,  9, 11,  0, 0, 0, 
   0,  1,  3,  0,  6,  8, 10,  0, 0, 0, 
   0,  2,  4,  5,  7,  9, 11,  0, 0, 0, 
   0,  1,  3,  0,  6,  8, 10,  0, 0, 0, 
   0,  2,  4,  5,  7,  9, 11,  0, 0, 0, 
   0,  1,  3,  0,  6,  8, 10,  0, 0, 0, 
   0,  2,  4,  5,  7,  9, 11,  0, 0, 0, 
   0,  1,  3,  0,  6,  8, 10,  0, 0, 0, 
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };

// MIDI channels and switcher

int midiChnlShiftActive;
uint8_t midiChnl;

// LP Pro SysEx message for MIDI channel selection buttons colors
uint8_t MidiChLowerSysexArray[26] = {240,0,32,41,2,16,10,
1,46,2,46,3,46,4,46,5,46,6,46,7,46,8,46,97,46,247};
uint8_t MidiChHigherSysexArray[26] = {240,0,32,41,2,16,10,
1,59,2,59,3,59,4,59,5,59,6,59,7,59,8,59,97,59,247};

uint8_t MidiChClearSysexArray[10] = {240,0,32,41,2,16,10,1,0,247};
uint8_t MidiCh01SysexArray[10] = {240,0,32,41,2,16,10,1,39,247};
uint8_t MidiCh02SysexArray[10] = {240,0,32,41,2,16,10,2,39,247};
uint8_t MidiCh03SysexArray[10] = {240,0,32,41,2,16,10,3,39,247};
uint8_t MidiCh04SysexArray[10] = {240,0,32,41,2,16,10,4,39,247};
uint8_t MidiCh05SysexArray[10] = {240,0,32,41,2,16,10,5,39,247};
uint8_t MidiCh06SysexArray[10] = {240,0,32,41,2,16,10,6,39,247};
uint8_t MidiCh07SysexArray[10] = {240,0,32,41,2,16,10,7,39,247};
uint8_t MidiCh08SysexArray[10] = {240,0,32,41,2,16,10,8,39,247};
uint8_t MidiCh09SysexArray[10] = {240,0,32,41,2,16,10,1,53,247};
uint8_t MidiCh10SysexArray[10] = {240,0,32,41,2,16,10,2,53,247};
uint8_t MidiCh11SysexArray[10] = {240,0,32,41,2,16,10,3,53,247};
uint8_t MidiCh12SysexArray[10] = {240,0,32,41,2,16,10,4,53,247};
uint8_t MidiCh13SysexArray[10] = {240,0,32,41,2,16,10,5,53,247};
uint8_t MidiCh14SysexArray[10] = {240,0,32,41,2,16,10,6,53,247};
uint8_t MidiCh15SysexArray[10] = {240,0,32,41,2,16,10,7,53,247};
uint8_t MidiCh16SysexArray[10] = {240,0,32,41,2,16,10,8,53,247};

//uint8_t MidiChnlSysexArray[10] = {240,0,32,41,2,16,10,midiChnl-1,midiChnlShift,247};]]></code.declaration>
         <code.init><![CDATA[// LP Pro SysEx message – programmer's layout
MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,LayoutSysexArray,9);

// LP Pro SysEx message – pads/buttons colors
MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,PadsSysexArray,144);

// LP Pro SysEx message – MIDI channel selection buttons colors
MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiChLowerSysexArray,26);

// LP Pro SysEx message – highlight default MIDI channel
//MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiChClearSysexArray,10);
// MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiCh1SysexArray,10);

// setup mode is normally off
setup = 0;

// global variables
rootnote = 0;
octave = 0;
//noteshift = 0;

// octave counter is in the middle position by default
octcount = 4;
//accu = 0;
up = 0;
down = 0;

midiChnl = 0; 
midiChnlShiftActive = 0;

// LP Pro SysEx message – highlight default MIDI channel
//uint8_t MidiCh1SysexArray[10] = {240,0,32,41,2,16,10,1,39,247};
//MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiChClearSysexArray,10);

// LP Pro SysEx message – highlight default MIDI channel
//MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiChClearSysexArray,10);
//MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiCh01SysexArray,10);]]></code.init>
         <code.krate><![CDATA[outlet_outMidiCh = midiChnl; 
outlet_setup = setup; 
outlet_noteshift = rootnote + octave;]]></code.krate>
         <code.midihandler><![CDATA[if (midiChnl == 0) { MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiCh01SysexArray,10); }
if (midiChnl == 1) { MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiCh02SysexArray,10); }
if (midiChnl == 2) { MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiCh03SysexArray,10); }
if (midiChnl == 3) { MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiCh04SysexArray,10); }
if (midiChnl == 4) { MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiCh05SysexArray,10); }
if (midiChnl == 5) { MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiCh06SysexArray,10); }
if (midiChnl == 6) { MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiCh07SysexArray,10); }
if (midiChnl == 7) { MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiCh08SysexArray,10); }
if (midiChnl == 8) { MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiCh09SysexArray,10); }
if (midiChnl == 9) { MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiCh10SysexArray,10); }
if (midiChnl == 10) { MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiCh11SysexArray,10); }
if (midiChnl == 11) { MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiCh12SysexArray,10); }
if (midiChnl == 12) { MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiCh13SysexArray,10); }
if (midiChnl == 13) { MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiCh14SysexArray,10); }
if (midiChnl == 14) { MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiCh15SysexArray,10); }
if (midiChnl == 15) { MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiCh16SysexArray,10); }

//MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiChnlSysexArray,10);

// setup – root note
if ((setup == 0) && (status == attr_midichannel + MIDI_CONTROL_CHANGE) && (data1 == 96) && (data2 == 127)) {
  setup = 1;
  uint8_t sysexArray[10] = {240,0,32,41,2,16,10,96,32,247};
  MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,sysexArray,10);
}
if ((setup == 1) && (status == MIDI_NOTE_ON + attr_midichannel) && (data2)) {
  rootnote = (rootnoteMap[data1]);
  setup = 0;
  uint8_t sysexArray[10] = {240,0,32,41,2,16,10,96,30,247};
  MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,sysexArray,10);
}

// octave range shift
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE) && (data1 == 91) && (data2 == 127)) {
	if (octcount>=1 && octcount<8) { octcount += 1;  octave += 12; up=1; }
	else { octcount += 0; octave += 0; up=1; }
}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE) && (data1 == 92) && (data2 == 127)) {
	if (octcount>1 && octcount<=8) {octcount -= 1;  octave -= 12; down=1;}
	else { octcount -= 0; octave -= 0; down=1; }
}

// MIDI channel range switching
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE) && (data1 == 97) && (data2 == 127)) {
	midiChnlShiftActive = !midiChnlShiftActive;
	if (midiChnlShiftActive == 0) { 
		MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiChLowerSysexArray,26); }
	else if (midiChnlShiftActive == 1) { 
		MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiChHigherSysexArray,26); }
}

// MIDI channel switching
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE) && (data1 == 1) && (data2 == 127)) {
	if (midiChnlShiftActive == 0) { 
		MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiChLowerSysexArray,26); 
		midiChnl = 0; }
	else if (midiChnlShiftActive == 1) {
		MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiChHigherSysexArray,26); 
		midiChnl = 8; }
}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE) && (data1 == 2) && (data2 == 127)) {
	if (midiChnlShiftActive == 0) { 
		MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiChLowerSysexArray,26); 
		midiChnl = 1; }
	else if (midiChnlShiftActive == 1) {
		MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiChHigherSysexArray,26); 
		midiChnl = 9; }
}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE) && (data1 == 3) && (data2 == 127)) {
	if (midiChnlShiftActive == 0) { 
		MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiChLowerSysexArray,26); 
		midiChnl = 2; }
	else if (midiChnlShiftActive == 1) {
		MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiChHigherSysexArray,26); 
		midiChnl = 10; }
}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE) && (data1 == 4) && (data2 == 127)) {
	if (midiChnlShiftActive == 0) { 
		MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiChLowerSysexArray,26); 
		midiChnl = 3; }
	else if (midiChnlShiftActive == 1) {
		MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiChHigherSysexArray,26); 
		midiChnl = 11; }
}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE) && (data1 == 5) && (data2 == 127)) {
	if (midiChnlShiftActive == 0) { 
		MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiChLowerSysexArray,26); 
		midiChnl = 4; }
	else if (midiChnlShiftActive == 1) {
		MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiChHigherSysexArray,26); 
		midiChnl = 12; }
}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE) && (data1 == 6) && (data2 == 127)) {
	if (midiChnlShiftActive == 0) { 
		MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiChLowerSysexArray,26); 
		midiChnl = 5; }
	else if (midiChnlShiftActive == 1) {
		MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiChHigherSysexArray,26); 
		midiChnl = 13; }
}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE) && (data1 == 7) && (data2 == 127)) {
	if (midiChnlShiftActive == 0) { 
		MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiChLowerSysexArray,26); 
		midiChnl = 6; }
	else if (midiChnlShiftActive == 1) {
		MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiChHigherSysexArray,26); 
		midiChnl = 14; }
}
if ((status == attr_midichannel + MIDI_CONTROL_CHANGE) && (data1 == 8) && (data2 == 127)) {
	if (midiChnlShiftActive == 0) { 
		MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiChLowerSysexArray,26); 
		midiChnl = 7; }
	else if (midiChnlShiftActive == 1) {
		MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,MidiChHigherSysexArray,26); 
		midiChnl = 15; }
}]]></code.midihandler>
      </object>
   </patchobj>
   <patcher type="patch/patcher" uuid="b89c4c5c-fc10-4de4-88a6-3fe26afe8236" name="patcher" x="84" y="0">
      <params/>
      <attribs>
         <combo attributeName="poly" selection="10"/>
      </attribs>
      <subpatch appVersion="1.0.12">
         <obj type="patch/inlet b" uuid="3b0d3eacb5bb978cb05d1372aa2714d5a4790844" name="setup" x="0" y="0">
            <params/>
            <attribs/>
         </obj>
         <patchobj type="patch/object" uuid="d385b02a-80ea-44aa-a2aa-2a3333239b76" name="LPProChromatic" x="112" y="28">
            <params/>
            <attribs>
               <spinner attributeName="activeColor" value="60"/>
               <combo attributeName="out" selection="din"/>
            </attribs>
            <object id="patch/object" uuid="d385b02a-80ea-44aa-a2aa-2a3333239b76">
               <sDescription>Novation Circuit-style chromatic layout for Launchpad Pro. 
this is per-voice/note object intended to runs as polyphonic subpatch (there&apos;s also another object that handles global part of the patch). 
designed for 1.0.12 and at the moment (may 2020) doesn&apos;t work with 2.0 due to different SysEx implementation (at least). 
this object provides: 1) note mapping; 2) visual feedback for active notes (changing pad color when pressed to activeColor parameter). 
some pads at the extremes are out of range (corresponding notes would be &lt;0 or &gt;127). such notes won&apos;t be transmitted, and no pad activity visual feedback will occur on pad press, however those pads are not visually distinct in any other way for now.</sDescription>
               <author>chaocrator</author>
               <license>do what Thou wilt should be the whole of the Law</license>
               <helpPatch>logic.axh</helpPatch>
               <inlets>
                  <bool32 name="setup"/>
                  <int32 name="shift"/>
                  <int32 name="outMidiCh"/>
               </inlets>
               <outlets/>
               <displays/>
               <params/>
               <attribs>
                  <spinner name="activeColor" MinValue="0" MaxValue="127" DefaultValue="60"/>
                  <combo name="out">
                     <MenuEntries>
                        <string>din</string>
                        <string>internal port 1</string>
                        <string>internal port 2</string>
                        <string>usb device port 1</string>
                     </MenuEntries>
                     <CEntries>
                        <string>MIDI_DEVICE_DIN, 1</string>
                        <string>MIDI_DEVICE_INTERNAL, 1</string>
                        <string>MIDI_DEVICE_INTERNAL, 2</string>
                        <string>MIDI_DEVICE_USB_DEVICE, 1</string>
                     </CEntries>
                  </combo>
               </attribs>
               <includes/>
               <code.declaration><![CDATA[int ntrig; 
int lpnote; 
//int lednote; 
int outnote; 
int vel; 
int gate; 
int notevalue; 
int nvtrig;
int setup; 
uint8_t noteMap[128] { 0,0,0,0,0,0,0,0,0,0,0,
  36, 38, 40, 41, 43, 45, 47, 48, 0, 0, 
   1, 37, 39,  0, 42, 44, 46,  0, 0, 0, 
  48, 50, 52, 53, 55, 57, 59, 60, 0, 0,
   0, 49, 51,  0, 54, 56, 58,  0, 0, 0, 
  60, 62, 64, 65, 67, 69, 71, 72, 0, 0, 
   0, 61, 63,  0, 66, 68, 70,  0, 0, 0, 
  72, 74, 76, 77, 79, 81, 83, 84, 0, 0, 
   0, 73, 75,  0, 78, 80, 82,  0, 0, 0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
};
uint8_t velMap[128] { 0,0,0,0,0,0,0,0,0,0,0,
  14, 22, 22, 25, 98, 22, 22, 14, 0, 0, 
   0, 22, 22,  0, 22, 22, 22,  0, 0, 0, 
  15, 23, 23, 28, 86, 23, 23, 15, 0, 0,
   0, 23, 23,  0, 23, 23, 23,  0, 0, 0, 
  14, 22, 22, 25, 98, 22, 22, 14, 0, 0, 
   0, 22, 22,  0, 22, 22, 22,  0, 0, 0, 
  15, 23, 23, 28, 86, 23, 23, 15, 0, 0, 
   0, 23, 23,  0, 85, 23, 23,  0, 0, 0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
};]]></code.declaration>
               <code.init><![CDATA[gate = 0;]]></code.init>
               <code.krate><![CDATA[setup = inlet_setup; 

if ((gate>0) && !ntrig) {
//	lednote = lpnote&0x7F;
	outnote = ((noteMap[lpnote]) + inlet_shift); //&0x7F;
	if ((outnote>=0) && (outnote<=127)) {
	MidiSend3((midi_device_t) attr_out, MIDI_NOTE_ON + inlet_outMidiCh, outnote&0x7F, vel);
	MidiSend3((midi_device_t) MIDI_DEVICE_USB_HOST, 2, MIDI_NOTE_ON + 0, lpnote&0x7F, attr_activeColor); 
	ntrig=1;
  }	
}

if (!(gate>0) && ntrig) {
	MidiSend3((midi_device_t) attr_out, MIDI_NOTE_OFF + inlet_outMidiCh, outnote&0x7F, __USAT(vel,7)); 
	MidiSend3((midi_device_t) MIDI_DEVICE_USB_HOST, 2, MIDI_NOTE_OFF + 0, lpnote&0x7F, __USAT(attr_activeColor,7)); 
	uint8_t sysexArray[10] = {240,0,32,41,2,16,10,lpnote,(velMap[lpnote]),247};
	MidiSendSysEx(MIDI_DEVICE_USB_HOST,2,sysexArray,10);
	ntrig=0;
}

/* sample of code for sending SysEx either via USB or DIN — currently unused
if ((inlet_trig1>0) && !ntrig1) { 
	if (param_sendDIN==1) { sdWrite(&SDMIDI,sysex1Array,13); }
     else { MidiSendSysEx(attr_outUSB,sysex1Array,13); }
  ntrig1=1;
}
*/]]></code.krate>
               <code.midihandler><![CDATA[//if ((status == MIDI_NOTE_ON + attr_midichannel ) && (data2)) {currnote= data1;}

if ((setup == 0) && (status == MIDI_NOTE_ON + attr_midichannel) && (data2)) {
	if (data1 == 21 || data1 == 24 || data1 == 28 ||
	    data1 == 41 || data1 == 44 || data1 == 48 ||
	    data1 == 61 || data1 == 64 || data1 == 68 ||
	    data1 == 81 || data1 == 84 || data1 == 88) {
  notevalue = -data1; nvtrig = 1; /* lpnote = -1; gate = 0; */ }
  else { lpnote = data1; vel = data2; gate = 1; }
} else if (((status == MIDI_NOTE_ON + attr_midichannel) && (!data2))||
          (status == MIDI_NOTE_OFF + attr_midichannel)) {
  if (lpnote == data1) { gate = 0; vel = data2; }
} else if ((status == attr_midichannel + MIDI_CONTROL_CHANGE)&&(data1 == MIDI_C_ALL_NOTES_OFF)) {
  gate = 0;
}]]></code.midihandler>
            </object>
         </patchobj>
         <obj type="patch/inlet i" uuid="f11927f00c59219df0c50f73056aa19f125540b7" name="noteshift" x="0" y="42">
            <params/>
            <attribs/>
         </obj>
         <obj type="patch/inlet i" uuid="f11927f00c59219df0c50f73056aa19f125540b7" name="outMidiCh" x="0" y="84">
            <params/>
            <attribs/>
         </obj>
         <nets>
            <net>
               <source obj="noteshift" outlet="inlet"/>
               <dest obj="LPProChromatic" inlet="shift"/>
            </net>
            <net>
               <source obj="outMidiCh" outlet="inlet"/>
               <dest obj="LPProChromatic" inlet="outMidiCh"/>
            </net>
            <net>
               <source obj="setup" outlet="inlet"/>
               <dest obj="LPProChromatic" inlet="setup"/>
            </net>
         </nets>
         <settings>
            <subpatchmode>polyphonic</subpatchmode>
            <MidiChannel>1</MidiChannel>
            <NPresets>8</NPresets>
            <NPresetEntries>32</NPresetEntries>
            <NModulationSources>8</NModulationSources>
            <NModulationTargetsPerSource>8</NModulationTargetsPerSource>
            <Author>chaocrator</Author>
            <License>do what Thou wilt should be the whole of the Law</License>
         </settings>
         <notes><![CDATA[]]></notes>
         <windowPos>
            <x>838</x>
            <y>367</y>
            <width>400</width>
            <height>400</height>
         </windowPos>
      </subpatch>
   </patcher>
   <comment type="patch/comment" x="210" y="0" text="rev. 2020-05-13"/>
   <comment type="patch/comment" x="0" y="126" text="this patch assumes that LP Pro is plugged into USB. notes are transmitted via DIN by default."/>
   <comment type="patch/comment" x="0" y="140" text="other destination ports (internal or USB device port) may be selected inside the subpatch."/>
   <comment type="patch/comment" x="0" y="154" text="/* connecting LP Pro via DIN ports is technically possible, but requires different procedure of sending SysEx,"/>
   <comment type="patch/comment" x="0" y="168" text="so not implemented for now. */"/>
   <comment type="patch/comment" x="0" y="196" text="to define your root note (default is C), press Note button and then desired note anywhere in the pad area."/>
   <comment type="patch/comment" x="0" y="210" text="to shift octave range (±4 octaves), use Up &amp; Down keys."/>
   <comment type="patch/comment" x="0" y="238" text="some pads at the extremes are out of range (corresponding notes would be &lt;0 or &gt;127)."/>
   <comment type="patch/comment" x="0" y="252" text="such notes won&apos;t be transmitted, and no pad activity visual feedback will occur on pad press,"/>
   <comment type="patch/comment" x="0" y="266" text="however those pads are not visually distinct in any other way for now."/>
   <comment type="patch/comment" x="0" y="294" text="MIDI channels are switched and indicated by the bottom button row, default channel is 1."/>
   <comment type="patch/comment" x="0" y="308" text="MIDI channel range (1-8 or 9-16) is switched by Device button in the upper button row."/>
   <comment type="patch/comment" x="0" y="336" text="unused (dark purple) pads do nothing in this patch, they are highlighted for future use"/>
   <comment type="patch/comment" x="0" y="350" text="(i&apos;m planning to use these pads to control arpeggiator parameters)."/>
   <nets>
      <net>
         <source obj="global" outlet="outMidiCh"/>
         <dest obj="patcher" inlet="outMidiCh"/>
      </net>
      <net>
         <source obj="global" outlet="setup"/>
         <dest obj="patcher" inlet="setup"/>
      </net>
      <net>
         <source obj="global" outlet="noteshift"/>
         <dest obj="patcher" inlet="noteshift"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>polyphonic</subpatchmode>
      <MidiChannel>1</MidiChannel>
      <NPresets>8</NPresets>
      <NPresetEntries>32</NPresetEntries>
      <NModulationSources>8</NModulationSources>
      <NModulationTargetsPerSource>8</NModulationTargetsPerSource>
      <Saturate>false</Saturate>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>753</x>
      <y>539</y>
      <width>523</width>
      <height>485</height>
   </windowPos>
</patch-1.0>