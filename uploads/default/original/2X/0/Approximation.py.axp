#!/usr/bin/python

import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import fsolve

def plotSignals(x, inSig, outSig):
    """plots the source signal and the distorted signal in a format
       that makes direct comparison to the oscilloscope shots easy."""
    fig, ax1 = plt.subplots()
    ax1.plot(x, inSig, 'r')
    ax1.set_xlabel('phase')
    ax1.set_ylabel('Uin/V')
    ax1.set_ylim([0, 0.15])

    ax2 = ax1.twinx()
    ax2.plot(x, outSig, 'b')
    ax2.set_ylabel('Uout/V')
    ax2.set_ylim([0, 3.0])
    plt.grid(True)
    fig.tight_layout()
    plt.show()
    pass

def readInterpolated(index, table):
    """reads a interpolated value from a lookup table"""
    integral = int(np.trunc(index))
    fractional = index - integral
    return table[integral]*(1.0 - fractional) + table[integral+1] * fractional

# constants of the 1N4148 diode equation (@25Â°C)
# Id = I0*(exp(A*Ud) - 1)
I0 = 0.00005036586847334689
A = 7.48336
# value of the resistor feeding the diode (in Ohms)
R = 1000
# value of the input resistance of the following amplifier stage (in Ohms)
Ri = 47000
# gain of the output amplifier
outputAmpGain = 100.0/47.0
# size of the lookup table to create for the Uout(Uin) relationship
lutSize = 255
# maximum value expected for Uin
UinMax = 1.0

### numerically solve the basic equation of the system.
# the equation is formed by summing all currents into the node connecting
# the diode and R:
# Ir = Id + Iri
# where Ir is the current through R, Id is the current through D and Iri
# is the current into the output amplifiers input

# define the function for numerical solving
func = lambda Ud : -(10.0*Uin[i] - Ud)/R + I0*(np.exp(A*Ud) - 1) + Ud/Ri

# solve for all expected input voltages
Uin = np.linspace(0.0, UinMax, lutSize)
Ud = np.array([0.0]*lutSize)
Ud_solution = 0.5 # just an initial guess
for i in range(0,lutSize):
    # last solution will be initial guess
    Ud_solution = fsolve(func, Ud_solution)
    Ud[i] = Ud_solution
# add scaling of the output
Uout = outputAmpGain * Ud
plt.plot(Uin, Uout)
plt.xlabel("Uin")
plt.ylabel("Uout")
plt.grid()
plt.show()

# create a lookup table for C source code.
currentLineLength = 3 # start value, including 3 spaces indentation
maxLineLength = 80
lut = "static const float lutDiodeDist = {\n   "
for i in range(0,lutSize):
    if i == lutSize - 1:
        s = "%.4f" % Uout[i]
    else:
        s = "%.4f, " % Uout[i]
    if len(s) + currentLineLength > maxLineLength:
        lut += "\n   "
        currentLineLength = 3
    currentLineLength += len(s)
    lut += s
lut += "\n};"
# print the source code to the command line
print (lut)

### print some example signals and the distorted waveforms calculated from the
### lookup table
# show distortion of a sine wave
phase = np.linspace(0, np.pi, 4096)
sin = np.sin(phase) * 0.15 # peak voltage is 150mV
result = np.array([0.0]*4096)
for i in range(0,4096):
    index = sin[i]/UinMax * lutSize
    result[i] = readInterpolated(index, Uout)
plotSignals(phase, sin, result);

# show distortion of a saw wave
result2 = np.array([0.0]*4096)
saw = np.linspace(0.0, 0.15, 4096) # peak voltage is 150mV
for i in range(0,4096):
    index = saw[i]/UinMax * lutSize
    result2[i] = readInterpolated(index, Uout)
plotSignals(phase, saw, result2);
