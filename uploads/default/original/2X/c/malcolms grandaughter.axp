<patch-1.0 appVersion="1.0.12">
   <patchobj type="patch/object" uuid="d6b67a55-7ae0-42ef-9276-20fedb0e78b1" name="note_3" x="252" y="0">
      <params/>
      <attribs>
         <spinner attributeName="note" value="0"/>
         <spinner attributeName="channel" value="15"/>
      </attribs>
      <object id="patch/object" uuid="d6b67a55-7ae0-42ef-9276-20fedb0e78b1">
         <sDescription>Monophonic MIDI keyboard note input, gate, velocity and release velocity</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>midi_in.axh</helpPatch>
         <inlets/>
         <outlets>
            <bool32 name="gate" description="key pressed?"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <spinner name="note" MinValue="0" MaxValue="127" DefaultValue="64"/>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="0"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[uint8_t _gate;]]></code.declaration>
         <code.init><![CDATA[_gate = 0;]]></code.init>
         <code.krate><![CDATA[outlet_gate= _gate<<27;]]></code.krate>
         <code.midihandler><![CDATA[if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2)) {if (data1 == attr_note) {
   _gate = 1;
}
} else if (((status == MIDI_NOTE_ON + (attr_channel-1)) && (!data2))||          (status == MIDI_NOTE_OFF + (attr_channel-1))) {
  if (data1 == attr_note) {
    _gate = 0;
  }
}]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="fb3dbbfc-4256-4001-afcb-095e1a73d66d" name="note_5" x="658" y="0">
      <params/>
      <attribs>
         <spinner attributeName="note" value="2"/>
         <spinner attributeName="channel" value="15"/>
      </attribs>
      <object id="patch/object" uuid="fb3dbbfc-4256-4001-afcb-095e1a73d66d">
         <sDescription>Monophonic MIDI keyboard note input, gate, velocity and release velocity</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>midi_in.axh</helpPatch>
         <inlets/>
         <outlets>
            <bool32 name="gate" description="key pressed?"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <spinner name="note" MinValue="0" MaxValue="127" DefaultValue="64"/>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="0"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[uint8_t _gate;]]></code.declaration>
         <code.init><![CDATA[_gate = 0;]]></code.init>
         <code.krate><![CDATA[outlet_gate= _gate<<27;]]></code.krate>
         <code.midihandler><![CDATA[if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2)) {if (data1 == attr_note) {
   _gate = 1;
}
} else if (((status == MIDI_NOTE_ON + (attr_channel-1)) && (!data2))||          (status == MIDI_NOTE_OFF + (attr_channel-1))) {
  if (data1 == attr_note) {
    _gate = 0;
  }
}]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="1cd819cb-800b-4295-8d05-01f8ac8cd92e" name="note_6" x="798" y="0">
      <params/>
      <attribs>
         <spinner attributeName="note" value="3"/>
         <spinner attributeName="channel" value="15"/>
      </attribs>
      <object id="patch/object" uuid="1cd819cb-800b-4295-8d05-01f8ac8cd92e">
         <sDescription>Monophonic MIDI keyboard note input, gate, velocity and release velocity</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>midi_in.axh</helpPatch>
         <inlets/>
         <outlets>
            <bool32 name="gate" description="key pressed?"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <spinner name="note" MinValue="0" MaxValue="127" DefaultValue="64"/>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="0"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[uint8_t _gate;]]></code.declaration>
         <code.init><![CDATA[_gate = 0;]]></code.init>
         <code.krate><![CDATA[outlet_gate= _gate<<27;]]></code.krate>
         <code.midihandler><![CDATA[if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2)) {if (data1 == attr_note) {
   _gate = 1;
}
} else if (((status == MIDI_NOTE_ON + (attr_channel-1)) && (!data2))||          (status == MIDI_NOTE_OFF + (attr_channel-1))) {
  if (data1 == attr_note) {
    _gate = 0;
  }
}]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="fb3dbbfc-4256-4001-afcb-095e1a73d66d" name="note_7" x="1288" y="0">
      <params/>
      <attribs>
         <spinner attributeName="note" value="4"/>
         <spinner attributeName="channel" value="15"/>
      </attribs>
      <object id="patch/object" uuid="fb3dbbfc-4256-4001-afcb-095e1a73d66d">
         <sDescription>Monophonic MIDI keyboard note input, gate, velocity and release velocity</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>midi_in.axh</helpPatch>
         <inlets/>
         <outlets>
            <bool32 name="gate" description="key pressed?"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <spinner name="note" MinValue="0" MaxValue="127" DefaultValue="64"/>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="0"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[uint8_t _gate;]]></code.declaration>
         <code.init><![CDATA[_gate = 0;]]></code.init>
         <code.krate><![CDATA[outlet_gate= _gate<<27;]]></code.krate>
         <code.midihandler><![CDATA[if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2)) {if (data1 == attr_note) {
   _gate = 1;
}
} else if (((status == MIDI_NOTE_ON + (attr_channel-1)) && (!data2))||          (status == MIDI_NOTE_OFF + (attr_channel-1))) {
  if (data1 == attr_note) {
    _gate = 0;
  }
}]]></code.midihandler>
      </object>
   </patchobj>
   <comment type="patch/comment" x="938" y="14" text="shift"/>
   <patchobj type="patch/object" uuid="9bfcf277-a28b-41d6-b233-8dd0d8b7eab0" name="top_1" x="938" y="28">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="9bfcf277-a28b-41d6-b233-8dd0d8b7eab0">
         <sDescription>outputs the state of the top-row buttons of a &apos;novation launchpad&apos;.
DOES NOT work with the &apos;LP mark 1&apos;.</sDescription>
         <author>Robert Schirmer</author>
         <license>BSD</license>
         <helpPatch>launchpad.axh</helpPatch>
         <inlets/>
         <outlets>
            <bool32 name="t7"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[uint8_t cc [128];]]></code.declaration>
         <code.krate><![CDATA[outlet_t7 = cc[111];]]></code.krate>
         <code.midihandler><![CDATA[if (status == 0 + MIDI_CONTROL_CHANGE) cc[data1] = data2;]]></code.midihandler>
      </object>
   </patchobj>
   <comment type="patch/comment" x="1106" y="56" text="master play"/>
   <obj type="drj/seq/clk_mul" uuid="1413af5343f97123abeeb627811120af4b3a4793" name="clk_mul_6" x="420" y="70">
      <params>
         <int32 name="clockmul" value="2"/>
      </params>
      <attribs/>
   </obj>
   <obj type="drj/seq/clk_mul" uuid="1413af5343f97123abeeb627811120af4b3a4793" name="clk_mul_2" x="532" y="70">
      <params>
         <int32 name="clockmul" value="32"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="2402584d-2694-4ed4-8d77-54830ea0fabf" name="toggle_1" x="1078" y="70">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="2402584d-2694-4ed4-8d77-54830ea0fabf">
         <sDescription>toggle</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>logic.axh</helpPatch>
         <inlets>
            <bool32.rising name="trig" description="trigger"/>
            <bool32 name="set"/>
            <bool32 name="reset"/>
         </inlets>
         <outlets>
            <bool32 name="o" description="output"/>
            <bool32 name="stop"/>
            <bool32 name="start"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
   int op;
int Mtrig;
int MBtrig;
   int p_set;
   int p_reset;]]></code.declaration>
         <code.init><![CDATA[ntrig = 0;
op = 0;
]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig>0) && !ntrig) {op = !op; ntrig=1;}
if (!(inlet_trig>0)) ntrig=0;
if ((inlet_set>0) && !p_set) {op = 1; p_set=1;}
if ((inlet_reset>0) && !p_reset) {op = 0; p_reset=1;}
if (!(inlet_set>0)) p_set=0;
if (!(inlet_reset>0)) p_reset=0;

outlet_o= op;
if ((!(op>0))&&!Mtrig) {
outlet_stop=1;
	Mtrig=1;
}
else outlet_stop=0;
if ((op>0)&&(!MBtrig)) {
outlet_start=1;
	MBtrig=1;
}
else outlet_start=0;

if (op>0) {Mtrig=0;}
if(!(op>0)) {MBtrig=0;}]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="7adf6824-f78a-4e1a-90e6-9f120b9662c8" name="launch_7" x="1484" y="112">
      <params/>
      <attribs>
         <spinner attributeName="channel" value="1"/>
      </attribs>
      <object id="patch/object" uuid="7adf6824-f78a-4e1a-90e6-9f120b9662c8">
         <sDescription>Monophonic MIDI keyboard note input, gate, velocity and release velocity, only responding to a range of notes</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>midi_in.axh</helpPatch>
         <inlets/>
         <outlets>
            <int32 name="note"/>
            <bool32 name="gate" description="key pressed?"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="9"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int8_t _note;
uint8_t _gate;]]></code.declaration>
         <code.init><![CDATA[_gate = 0;
_note = 0;]]></code.init>
         <code.krate><![CDATA[outlet_note= _note;

outlet_gate= _gate<<27;]]></code.krate>
         <code.midihandler><![CDATA[if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 6-4)) {
    _note = 0;
    _gate = 1;
}
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 22-4)) {
    _note = 1;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 38-4)) {
    _note = 2;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 54-4)) {
    _note = 3;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 70-4)) {
    _note = 4;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 86-4)) {
    _note = 5;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + + (attr_channel-1)) && (data2) && (data1 == 102-4)) {
    _note = 6;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 118-4)) {
    _note = 7;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 7-4)) {
    _note = 8;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 23-4)) {
    _note = 9;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 39-4)) {
    _note = 10;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 55-4)) {
    _note = 11;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 71-4)) {
    _note = 12;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 87-4)) {
    _note = 13;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 103-4)) {
    _note = 14;
    _gate = 1;
} 
if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2) && (data1 == 119-4)) {
    _note = 15;
    _gate = 1;
} 
else if (((status == MIDI_NOTE_ON + (attr_channel-1)) && (!data2))||          (status == MIDI_NOTE_OFF + (attr_channel-1))) {
    _gate = 0;
  }]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="dcefc491-221f-4521-bad8-87185f5df137" name="tcopy_5" x="1624" y="112">
      <params>
         <int32 name="range" value="130"/>
      </params>
      <attribs>
         <objref attributeName="preset" obj="lcxl3"/>
         <objref attributeName="play" obj="lcxl3"/>
      </attribs>
      <object id="patch/object" uuid="dcefc491-221f-4521-bad8-87185f5df137">
         <sDescription>copy the elements of a table from table &apos;src&apos; to table &apos;dst&apos;
the length of the area to copy is defined by &apos;range&apos;,
the read offset is defined by inlet&apos;src&apos; and the write offset by &apos;dst&apos;
&apos;speed&apos; sets the copying speed in terms of audio-rate (16 is really fast!)
if &apos;splat&apos; is enabled,tcopy will preserve the original contents of the destination table.
if &apos;clear&apos; is enabled,tcopy will clear the contents of the table.</sDescription>
         <author>Robert Schirmer</author>
         <license>BSD</license>
         <helpPatch>data.axh</helpPatch>
         <inlets>
            <bool32 name="save"/>
            <int32 name="snapshot"/>
            <bool32.rising name="trig" description="start copying"/>
         </inlets>
         <outlets/>
         <displays/>
         <params>
            <int32 name="range">
               <MinValue i="1"/>
               <MaxValue i="2097152"/>
            </int32>
         </params>
         <attribs>
            <objref name="preset" description="name of the source -table"/>
            <objref name="play" description="name of the destination - table"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[uint32_t i;
uint32_t ii;
int ntrig;
int rtrig;

int speed;
uint32_t src;
uint32_t dst;
uint32_t range;
uint32_t block;]]></code.declaration>
         <code.krate><![CDATA[//load
if (!(inlet_save>0))
{
speed = 16 << 4;
src = (param_range+100+(inlet_snapshot*param_range));
dst = 0;
range = param_range;

block  = (range / speed) * speed;

if ((inlet_trig)&& (!ntrig)){ ntrig = 1;i = 0;rtrig = 0;}
if ((i == range) && (!inlet_trig)) {ntrig = 0;;i = 0;}

//copy n chunks of size 'speed'
if (ntrig && (i < block)){ 
	{ 
  for(ii=0;ii<speed;ii++)
  attr_play.array[(i + ii + dst)]= (( attr_preset.array[(i + ii + src)] + (attr_play.array[(i + ii + dst)] * 0)) * (1));
  }
  i += speed;	
}

//copy what's left
if (i == block) rtrig = 1; 

if ((ntrig && rtrig) && (i < (range))){ 
	attr_play.array[(i + dst)]= (( attr_preset.array[(i + src)] + (attr_play.array[(i + dst)] * 0)) * (1));
   i += 1;  
 }
}



//save
else if (inlet_save>0)
{
speed = 16 << 4;
src = 0;
dst = (param_range+100+(inlet_snapshot*param_range));;
range = param_range;

block  = (range / speed) * speed;

if ((inlet_trig)&& (!ntrig)){ ntrig = 1;i = 0;rtrig = 0;}
if ((i == range) && (!inlet_trig)) {ntrig = 0;i = 0;}

//copy n chunks of size 'speed'
if (ntrig && (i < block)){ 
	{ 
  for(ii=0;ii<speed;ii++)
  attr_preset.array[(i + ii + dst)]= (( attr_play.array[(i + ii + src)] + (attr_preset.array[(i + ii + dst)] * 0)) * (1));
  }
  i += speed;	
}

//copy what's left
if (i == block) rtrig = 1; 

if ((ntrig && rtrig) && (i < (range))){ 
	attr_preset.array[(i + dst)]= (( attr_play.array[(i + src)] + (attr_preset.array[(i + dst)] * 0)) * (1));
   i += 1;  
 }
}]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="c8ce26a1-1552-494a-94aa-26fb839ba19d" name="step_2" x="1764" y="112">
      <params/>
      <attribs>
         <combo attributeName="device" selection="usb host port / LP"/>
         <combo attributeName="color" selection="orange W"/>
         <spinner attributeName="column" value="2"/>
      </attribs>
      <object id="patch/object" uuid="c8ce26a1-1552-494a-94aa-26fb839ba19d">
         <sDescription>display a step counter on a novation launchpad</sDescription>
         <author>Robert Schirmer</author>
         <license>BSD</license>
         <helpPatch>launchpad.axh</helpPatch>
         <rotatedParams>true</rotatedParams>
         <inlets>
            <int32 name="step" description="current step"/>
            <bool32 name="active" description="active??"/>
         </inlets>
         <outlets/>
         <displays/>
         <params/>
         <attribs>
            <combo name="device">
               <MenuEntries>
                  <string>usb host port / LP</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_USB_HOST, 1</string>
               </CEntries>
            </combo>
            <combo name="color">
               <MenuEntries>
                  <string>off</string>
                  <string>red W</string>
                  <string>red M</string>
                  <string>red S</string>
                  <string>orange W</string>
                  <string>orange S</string>
                  <string>green W</string>
                  <string>green M</string>
                  <string>green S</string>
                  <string>lime 1 W</string>
                  <string>lime 1 S</string>
                  <string>lime 2</string>
                  <string>yellow W</string>
                  <string>yellow M</string>
                  <string>yellow S</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>18</string>
                  <string>35</string>
                  <string>16</string>
                  <string>32</string>
                  <string>48</string>
                  <string>33</string>
                  <string>50</string>
                  <string>49</string>
                  <string>17</string>
                  <string>34</string>
                  <string>51</string>
               </CEntries>
            </combo>
            <spinner name="column" MinValue="0" MaxValue="7" DefaultValue="0"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
int rtrig;
int prev;
int i;
int32_t map[16];
int32_t v;]]></code.declaration>
         <code.init><![CDATA[{ 
  int i;
  for(i=0;i<16;i++) 

  map[0] = 0+attr_column;
map[1] = 16+attr_column;
map[2] = 32+attr_column;
map[3] = 48+attr_column;
map[4] = 64+attr_column;
map[5] = 80+attr_column;
map[6] = 96+attr_column;
map[7] = 112+attr_column;
  map[8] = 0+attr_column+1;
map[9] = 16+attr_column+1;
map[10] = 32+attr_column+1;
map[11] = 48+attr_column+1;
map[12] = 64+attr_column+1;
map[13] = 80+attr_column+1;
map[14] = 96+attr_column+1;
map[15] = 112+attr_column+1;

}
rtrig=1;]]></code.init>
         <code.krate><![CDATA[if (i < 16){
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON ,map[i],17);

i += 1;
  }
  else i = 666;
if (inlet_active){rtrig=1;}

if (rtrig) {MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON ,map[(inlet_step)],(attr_color));}

if (inlet_step  != prev) {
  MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON ,map[(inlet_step)],(attr_color));
  MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON ,map[(prev)],17);
prev = inlet_step;
}




rtrig = 0;]]></code.krate>
      </object>
   </patchobj>
   <obj type="table/alloc 16b sdram load" uuid="e6b85dad3ab43565cda93ea4c43c73b668b1cd43" name="lcxl3" x="280" y="140">
      <params/>
      <attribs>
         <combo attributeName="size" selection="8192"/>
         <file attributeName="filename" file="/granVBsX"/>
      </attribs>
   </obj>
   <obj type="table/alloc 16b sdram load" uuid="e6b85dad3ab43565cda93ea4c43c73b668b1cd43" name="lcxl2" x="532" y="140">
      <params/>
      <attribs>
         <combo attributeName="size" selection="524288"/>
         <file attributeName="filename" file="/granVBX"/>
      </attribs>
   </obj>
   <comment type="patch/comment" x="1946" y="168" text="all lpad triggers for mode switch rodney"/>
   <comment type="patch/comment" x="952" y="182" text="bar trigger counters"/>
   <patchobj type="patch/object" uuid="fb3dbbfc-4256-4001-afcb-095e1a73d66d" name="note_9" x="1988" y="182">
      <params/>
      <attribs>
         <spinner attributeName="note" value="0"/>
         <spinner attributeName="channel" value="1"/>
      </attribs>
      <object id="patch/object" uuid="fb3dbbfc-4256-4001-afcb-095e1a73d66d">
         <sDescription>Monophonic MIDI keyboard note input, gate, velocity and release velocity</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>midi_in.axh</helpPatch>
         <inlets/>
         <outlets>
            <bool32 name="gate" description="key pressed?"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <spinner name="note" MinValue="0" MaxValue="127" DefaultValue="64"/>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="0"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[uint8_t _gate;]]></code.declaration>
         <code.init><![CDATA[_gate = 0;]]></code.init>
         <code.krate><![CDATA[outlet_gate= _gate<<27;]]></code.krate>
         <code.midihandler><![CDATA[//if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2)) {
//   _gate = 1;
//
//} else if (((status == MIDI_NOTE_ON + (attr_channel-1)) && (!data2))||          (status == MIDI_NOTE_OFF + (attr_channel-1))) {

//    _gate = 0;
  
//} 
if (status == (attr_channel-1) + MIDI_CONTROL_CHANGE) {
  _gate = data2;
}]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="0685748e-22ef-4f17-8627-027ec45a132f" name="note_10" x="2114" y="182">
      <params/>
      <attribs>
         <combo attributeName="device" selection="din"/>
         <spinner attributeName="channel" value="16"/>
      </attribs>
      <object id="patch/object" uuid="0685748e-22ef-4f17-8627-027ec45a132f">
         <sDescription>Midi note output</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>midi_out.axh</helpPatch>
         <inlets>
            <bool32.rising name="trig" description="trigger"/>
         </inlets>
         <outlets/>
         <displays/>
         <params/>
         <attribs>
            <combo name="device">
               <MenuEntries>
                  <string>din</string>
                  <string>usb host port 1</string>
                  <string>usb host port 2</string>
                  <string>usb host port 3</string>
                  <string>usb host port 4</string>
                  <string>internal port 1</string>
                  <string>internal port 2</string>
                  <string>usb device port 1</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_DIN, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 2</string>
                  <string>MIDI_DEVICE_USB_HOST, 3</string>
                  <string>MIDI_DEVICE_USB_HOST, 4</string>
                  <string>MIDI_DEVICE_INTERNAL, 1</string>
                  <string>MIDI_DEVICE_INTERNAL, 2</string>
                  <string>MIDI_DEVICE_USB_DEVICE, 1</string>
               </CEntries>
            </combo>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="0"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int ntrig;]]></code.declaration>
         <code.init><![CDATA[ntrig=0;]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig>0) && !ntrig) {
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (attr_channel-1),0,127);  ntrig=1;
}
if (!(inlet_trig>0) && ntrig) {MidiSend3((midi_device_t) attr_device, MIDI_NOTE_OFF + (attr_channel-1),0,0); ntrig=0;}]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="756" y="196" text="4ppq half a step early for quantize"/>
   <comment type="patch/comment" x="952" y="196" text="barcount play"/>
   <comment type="patch/comment" x="1050" y="196" text="bar count rec"/>
   <obj type="djrm/logic/counter2_init_start" uuid="d5936f238ab92e53ac93d5927c3b43ceef998dc1" name="counter2_init_start_3" x="784" y="210">
      <params>
         <int32 name="maximum" value="1"/>
         <int32 name="init" value="1"/>
      </params>
      <attribs/>
   </obj>
   <obj type="logic/counter" uuid="7a141ba82230e54e5f5cd12da5dbe5a74ba854a5" name="counter_14" x="952" y="210">
      <params>
         <int32 name="maximum" value="16"/>
      </params>
      <attribs/>
   </obj>
   <obj type="logic/counter" uuid="7a141ba82230e54e5f5cd12da5dbe5a74ba854a5" name="counter_15" x="1050" y="210">
      <params>
         <int32 name="maximum" value="16"/>
      </params>
      <attribs/>
   </obj>
   <obj type="logic/and 2" uuid="c67031682f552aa0a80b23377495c51ea28a8c9c" name="and_13" x="1190" y="210">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/and 2" uuid="c67031682f552aa0a80b23377495c51ea28a8c9c" name="and_14" x="1330" y="210">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="eb1bc18c-44dd-4edd-b6d6-9964f9e80b3e" name="keyb_1" x="28" y="252">
      <params/>
      <attribs>
         <spinner attributeName="channel" value="1"/>
         <spinner attributeName="start" value="0"/>
         <combo attributeName="corner" selection="topright"/>
      </attribs>
      <object id="patch/object" uuid="eb1bc18c-44dd-4edd-b6d6-9964f9e80b3e">
         <sDescription>Monophonic MIDI keyboard note input, gate, velocity and release velocity</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>midi_in.axh</helpPatch>
         <inlets/>
         <outlets>
            <int32 name="note"/>
            <bool32 name="gate" description="key pressed, no retrigger legato"/>
            <frac32.positive name="velocity" description="note-on velocity"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="1"/>
            <spinner name="start" MinValue="0" MaxValue="8" DefaultValue="0"/>
            <combo name="corner">
               <MenuEntries>
                  <string>topleft</string>
                  <string>topright</string>
                  <string>bottomleft</string>
                  <string>bottomright</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>4</string>
                  <string>64</string>
                  <string>68</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int8_t _note;
int32_t _gate;
int32_t _gate2;
uint8_t _velo;
int outnote;
int gatehold;]]></code.declaration>
         <code.init><![CDATA[_gate = 0;
_note = 0;
outnote=0;]]></code.init>
         <code.krate><![CDATA[if ((_note>attr_corner-1)&&(_note<(attr_corner+4))){
	outnote=_note-attr_corner+4+4+4;
	gatehold=_gate2;
}
if ((_note>attr_corner+15)&&(_note<(attr_corner+16+4))){
	outnote=(_note-attr_corner)-15+3+4;
	gatehold=_gate2;
}
if ((_note>attr_corner+15+16)&&(_note<(attr_corner+16+16+4))){
	outnote=(_note-attr_corner)-15-16+3;
	gatehold=_gate2;
}
if ((_note>attr_corner+15+16+16)&&(_note<(attr_corner+16+16+16+4))){
	outnote=(_note-attr_corner)-15-16-16-1;
	gatehold=_gate2;
}
else if (!_gate2){
	gatehold=0;
	}
outlet_note= outnote-28;
outlet_gate= gatehold;
_gate2 = _gate;
outlet_velocity= _velo<<20;]]></code.krate>
         <code.midihandler><![CDATA[if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2)) {
	if ((data1>3)&&(data1<56)){
  _velo = data2;
  _note = data1;
  _gate = 1<<27;
  _gate2 = 0;
	}
	else if (data1==56){
  MidiSend3((midi_device_t) MIDI_DEVICE_INTERNAL, 1, MIDI_CONTROL_CHANGE + 12,100,127);
	}
} 
else if (((status == MIDI_NOTE_ON + (attr_channel-1)) && (!data2))||
          (status == MIDI_NOTE_OFF + (attr_channel-1))) {
  
  if (_note == data1) {
    _gate = 0;
  }
  else if (data1==56){
  MidiSend3((midi_device_t) MIDI_DEVICE_INTERNAL, 1, MIDI_CONTROL_CHANGE + 12,100,0);
	}
}]]></code.midihandler>
      </object>
   </patchobj>
   <obj type="midi/out/note" uuid="a76ae870da278cbbce5501a57ce7bd0e0ea4215c" name="note_12" x="168" y="252">
      <params/>
      <attribs>
         <combo attributeName="device" selection="internal port 1"/>
         <spinner attributeName="channel" value="14"/>
      </attribs>
   </obj>
   <obj type="const/i" uuid="e202f44b2df17ae0b3e663b98ea6b14c8ff00408" name="i_1" x="1050" y="294">
      <params/>
      <attribs>
         <spinner attributeName="value" value="130"/>
      </attribs>
   </obj>
   <obj type="const/i" uuid="e202f44b2df17ae0b3e663b98ea6b14c8ff00408" name="i_10" x="1596" y="294">
      <params/>
      <attribs>
         <spinner attributeName="value" value="140"/>
      </attribs>
   </obj>
   <patchobj type="patch/object" uuid="eb1bc18c-44dd-4edd-b6d6-9964f9e80b3e" name="keyb_5" x="364" y="336">
      <params/>
      <attribs>
         <spinner attributeName="channel" value="1"/>
         <spinner attributeName="start" value="0"/>
         <combo attributeName="corner" selection="bottomright"/>
      </attribs>
      <object id="patch/object" uuid="eb1bc18c-44dd-4edd-b6d6-9964f9e80b3e">
         <sDescription>Monophonic MIDI keyboard note input, gate, velocity and release velocity</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>midi_in.axh</helpPatch>
         <inlets/>
         <outlets>
            <int32 name="note"/>
            <bool32 name="gate" description="key pressed, no retrigger legato"/>
            <frac32.positive name="velocity" description="note-on velocity"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="1"/>
            <spinner name="start" MinValue="0" MaxValue="8" DefaultValue="0"/>
            <combo name="corner">
               <MenuEntries>
                  <string>topleft</string>
                  <string>topright</string>
                  <string>bottomleft</string>
                  <string>bottomright</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>4</string>
                  <string>64</string>
                  <string>68</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int8_t _note;
int32_t _gate;
int32_t _gate2;
uint8_t _velo;
int outnote;
int gatehold;]]></code.declaration>
         <code.init><![CDATA[_gate = 0;
_note = 0;
outnote=0;]]></code.init>
         <code.krate><![CDATA[if ((_note>attr_corner-1)&&(_note<(attr_corner+4))){
	outnote=_note-attr_corner+4+4+4;
	gatehold=_gate2;
}
if ((_note>attr_corner+15)&&(_note<(attr_corner+16+4))){
	outnote=(_note-attr_corner)-15+3+4;
	gatehold=_gate2;
}
if ((_note>attr_corner+15+16)&&(_note<(attr_corner+16+16+4))){
	outnote=(_note-attr_corner)-15-16+3;
	gatehold=_gate2;
}
if ((_note>attr_corner+15+16+16)&&(_note<(attr_corner+16+16+16+4))){
	outnote=(_note-attr_corner)-15-16-16-1;
	gatehold=_gate2;
}
else if (!_gate2){
	gatehold=0;
	}
outlet_note= outnote-28;
outlet_gate= gatehold;
_gate2 = _gate;
outlet_velocity= _velo<<20;]]></code.krate>
         <code.midihandler><![CDATA[if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2)) {
	if ((data1>67)&&(data1<120)){
  _velo = data2;
  _note = data1;
  _gate = 1<<27;
  _gate2 = 0;
	}
	else if (data1==120){
  MidiSend3((midi_device_t) MIDI_DEVICE_INTERNAL, 1, MIDI_CONTROL_CHANGE + 12,101,127);
	}
} 
else if (((status == MIDI_NOTE_ON + (attr_channel-1)) && (!data2))||
          (status == MIDI_NOTE_OFF + (attr_channel-1))) {
  
  if (_note == data1) {
    _gate = 0;
  }
  else if (data1==120){
  MidiSend3((midi_device_t) MIDI_DEVICE_INTERNAL, 1, MIDI_CONTROL_CHANGE + 12,101,0);
	}
}]]></code.midihandler>
      </object>
   </patchobj>
   <obj type="midi/out/note" uuid="a76ae870da278cbbce5501a57ce7bd0e0ea4215c" name="note_13" x="476" y="336">
      <params/>
      <attribs>
         <combo attributeName="device" selection="internal port 1"/>
         <spinner attributeName="channel" value="4"/>
      </attribs>
   </obj>
   <comment type="patch/comment" x="854" y="336" text="track 3"/>
   <comment type="patch/comment" x="1162" y="336" text="track 4"/>
   <comment type="patch/comment" x="1386" y="336" text="transport &amp; pattern length rec"/>
   <comment type="patch/comment" x="854" y="350" text="transport &amp; pattern length rec"/>
   <comment type="patch/comment" x="1064" y="350" text="cc104"/>
   <patchobj type="patch/object" uuid="8385bd19-937d-47af-9b09-08facf287fbb" name="object_4" x="1372" y="350">
      <params/>
      <attribs>
         <objref attributeName="table" obj="lcxl2"/>
         <spinner attributeName="buttonoffset" value="145161"/>
         <spinner attributeName="total" value="20736"/>
         <spinner attributeName="barcount" value="4"/>
         <spinner attributeName="column" value="2"/>
      </attribs>
      <object id="patch/object" uuid="8385bd19-937d-47af-9b09-08facf287fbb">
         <inlets>
            <bool32 name="shift"/>
            <bool32 name="pulse"/>
            <bool32 name="pulseplay"/>
            <int32 name="barcount"/>
            <bool32 name="start"/>
            <bool32 name="stop"/>
         </inlets>
         <outlets>
            <int32 name="clipslot"/>
            <int32 name="clearslot"/>
            <bool32 name="cliptrigger"/>
            <bool32 name="cleartrigger"/>
            <int32 name="offsetnotes"/>
            <bool32 name="wait"/>
            <bool32 name="rec"/>
            <bool32 name="play"/>
            <bool32 name="nplaytrig"/>
            <bool32 name="nrectrig"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <objref name="table"/>
            <spinner name="buttonoffset" MinValue="0" MaxValue="10000000" DefaultValue="0"/>
            <spinner name="total" MinValue="0" MaxValue="5000000" DefaultValue="0"/>
            <spinner name="barcount" MinValue="0" MaxValue="16" DefaultValue="0"/>
            <spinner name="column" MinValue="1" MaxValue="8" DefaultValue="1"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[uint32_t i;
uint32_t ii;
uint32_t src;
uint32_t range;
uint32_t block;
int note;
int trigger;
int clipslot;
int clearslot;
int clear;
int clip;
int clipB;

int cloffset;
int nclear;
int rclear;
int speed;



int pclipslot;
int slotoffset;
int offset;
int full;
int ntrig;
int xtrig;
int prevplay;
int playtrig;
int recordtrig;
int recofftrig;
int wait;
int zwait;
int ztrig;
int record;
int play;
int outletrectrig;
int bar_record;
int maxbar;
int vcount;
int vtrig;
int vrtrig;
int vr2trig;
int ctrig;
int rtrig;
int count;
int prevfull;
int nrectrig;
int nplaytrig;
int prevoffset;]]></code.declaration>
         <code.init><![CDATA[full=attr_table.array[__USAT((0+ attr_buttonoffset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
slotoffset=0;
count=0;
ctrig = 0;
rtrig = 0;
clipslot=6;
clearslot=6;
pclipslot=8;]]></code.init>
         <code.krate><![CDATA[/////
if ((!inlet_shift)&&trigger){
if (note==(0+(attr_column-1))) {clipslot=0;clip=1;clipB=0;}
if (note==(16+(attr_column-1))) {clipslot=1;clip=1;clipB=0;}
if (note==(32+(attr_column-1))) {clipslot=2;clip=1;clipB=0;}
if (note==(48+(attr_column-1))) {clipslot=3;clip=1;clipB=0;}
if (note==(64+(attr_column-1))) {clipslot=4;clip=1;clipB=0;}
if (note==(80+(attr_column-1))) {clipslot=5;clip=1;clipB=0;}
if (note==(96+(attr_column-1))) {clipslot=6;clip=1;clipB=0;}
if (note==(112+(attr_column-1))) {clipslot=7;clip=1;}
//if ((note==(112+(attr_column-1)))||(note==120)) {clipslot=7;clip=1;}
//	if (note==8) {clipslot=0;clipB=1;clip=1;}
//	if (note==24) {clipslot=1;clipB=1;clip=1;}
//	if (note==40) {clipslot=2;clipB=1;clip=1;}
//	if (note==56) {clipslot=3;clipB=1;clip=1;}
//	if (note==72) {clipslot=4;clipB=1;clip=1;}
//	if (note==88) {clipslot=5;clipB=1;clip=1;}
//	if (note==104) {clipslot=6;clipB=1;clip=1;}
//	if (note==120) {clipslot=7;clipB=1;clip=1;}
	
}

else if (inlet_shift){
if ((note==(0+(attr_column-1)))&&trigger) {clearslot=0;clear=1;}
if ((note==(16+(attr_column-1)))&&trigger) {clearslot=1;clear=1;}
if ((note==(32+(attr_column-1)))&&trigger) {clearslot=2;clear=1;}
if ((note==(48+(attr_column-1)))&&trigger) {clearslot=3;clear=1;}
if ((note==(64+(attr_column-1)))&&trigger) {clearslot=4;clear=1;}
if ((note==(80+(attr_column-1)))&&trigger) {clearslot=5;clear=1;}
if ((note==(96+(attr_column-1)))&&trigger) {clearslot=6;clear=1;}
if ((note==(112+(attr_column-1)))&&trigger) {clearslot=7;clear=1;}
}




//full=attr_table.array[__USAT((clipslot+ attr_buttonoffset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
//if ((clipB)&&(full>0)){clip=1;clipB=0;}
//if ((clipB)&&(!(full>0))){clip=1;}
       

if (!trigger) {clip=0;clear=0;}



/////

full=attr_table.array[__USAT((clipslot+ attr_buttonoffset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
nrectrig=0;
nplaytrig=0;
offset=8+slotoffset+attr_buttonoffset;
outlet_offsetnotes=offset+1;

if (inlet_start>0){play=prevplay;}
//if ((clipB>0)&&(full)&&!ntrig){	
//	wait=1;
//	zwait=1;	
//	ntrig=1;
//}
if ((clip>0)&&!ntrig){	
	wait=1;
	zwait=1;	
	ntrig=1;
}
if ((wait>0)&&(!(clip>0))&&(inlet_pulse>0)) {xtrig=1;nrectrig=1;wait=0;ntrig=0;}
if ((zwait>0)&&(!(clip>0))&&(inlet_pulseplay>0)) {
	nplaytrig=1;
	zwait=0;
	}

//
if ((clipslot==7)&&xtrig){
	if (record>0){
		attr_table.array[prevfull + attr_buttonoffset]=__SSAT(0,28)>>attr_table.GAIN;
	}
	prevplay=play;
	play=0;
	record=0;
	wait=0;
	ntrig=0;
	xtrig=0;
	clipB=0;
	pclipslot=8;
}
//
if (clipslot<7)
{
if ((clipslot!=pclipslot)&&xtrig){
	if (record>0){
		attr_table.array[offset]=__SSAT((bar_record),28)>>attr_table.GAIN;
	}
	xtrig=0;
	vcount=0;
	count=-1;
	nrectrig=1;
	slotoffset=(attr_total*clipslot);
	offset=8+slotoffset+attr_buttonoffset;
	prevoffset=slotoffset;
	full=attr_table.array[__USAT((clipslot+ attr_buttonoffset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
	if (full>0){
		play=1;
		record=0;
	}
	if (!(full>0)){
		if (!clipB){
		play=0;
		attr_table.array[clipslot + attr_buttonoffset]=__SSAT(0x07FFFFFF,28)>>attr_table.GAIN;
		prevfull=clipslot;
		record=1;
		}
		else if (clipB){
		play=0;
		record=0;
		clipB=0;
		}
	}
	pclipslot=clipslot;
	
}
if (!clipB){
if ((!(full>0))&&xtrig){
	attr_table.array[clipslot + attr_buttonoffset]=__SSAT(0x07FFFFFF,28)>>attr_table.GAIN;
	prevfull=clipslot;
	record=1;
	xtrig=0;
}

if ((full>0)&&(!(play>0))&&xtrig){
	record=0;
	play=1;
	xtrig=0;
}
if ((full>0)&&(play>0)&&xtrig){
	record=0;
	vcount=0;
	play=1;
	xtrig=0;
}
}
else if ((clipB)&&(xtrig)){
	if (!full){
	play=0;
	record=0;
	}
	else if (full){
		play=1;
		record=0;
	}
	clipB=0;
	xtrig=0;
}

}


if (inlet_stop>0){
	prevplay=play;
	play=0;
	record=0;
	wait=0;
	ntrig=0;
	xtrig=0;
	clipB=0;
}


if ((clear>0)&&!ntrig){
	ntrig=1;
	attr_table.array[clearslot + attr_buttonoffset]=__SSAT(0,28)>>attr_table.GAIN;
	if (clipslot==clearslot){
		play=0;
		record=0;
		wait=0;
		zwait=0;
	}
}
else if(!(clear)) {ntrig=0;}



//





outlet_play=play;


outlet_wait=wait;
outlet_rec=record;


//playback
if ((play>0)&&!playtrig){
	playtrig=1;
	vcount=0;
}
if (!(play>0)) {playtrig=0;}
outletrectrig=0;
if ((record>0)&&!recordtrig){
	recordtrig=1;
	outletrectrig=1;
}


if (!(record>0)) {recordtrig=0;}

if ((!(record>0))&&!recofftrig){
	attr_table.array[offset]=__SSAT(bar_record,28)>>attr_table.GAIN;
	zwait=1;
	recofftrig=1;
}

//reset
if (record>0){recofftrig=0;}

//barclocks
if ((inlet_pulse>0) && !ctrig) {
   count += 1; 
   if (count>=attr_barcount) 
   {
   	count = attr_barcount;
   }
   if ((count==(inlet_barcount))&&(record>0)){wait=1;}
   ctrig=1;
}
else if (!(inlet_pulse>0)) ctrig=0;

bar_record=(count+1)<<21;
if ((outletrectrig>0) && !rtrig) {count=0; rtrig = 1;}
else if (!(outletrectrig>0)) rtrig=0;



//barlength=recorded
maxbar=(attr_table.array[__USAT(offset,attr_table.LENGTHPOW)]<<attr_table.GAIN)>>21;
//play bar counter
if ((inlet_pulseplay>0) && !vtrig) {
   vcount += 1; if ((vcount>(maxbar))||(vcount>(16))) {
   	vcount = 1; 
   	if ((play>0)&&(!(record>0))){
   	nplaytrig=1;
   	}
   }
   vtrig=1;
}
else if (!(inlet_pulseplay>0)) vtrig=0;
//start
if ((inlet_start>0) && !vr2trig) {vcount=1; vr2trig = 1; nplaytrig=1; nrectrig=1;}
else if (!(inlet_start>0)) vr2trig=0;
//reset vcount
if (vcount>(maxbar)){vcount=1;}

/////////////
cloffset=(attr_buttonoffset+8)+(attr_total*clearslot);


speed = 16 << 4;
src = cloffset;
range = (attr_total);
block  = (range / speed) * speed;

if ((clear)&& (!nclear)){ nclear= 1;i = 0;rclear = 0;}
if ((i == attr_total) && (!clear)) {nclear= 0;i = 0;}


//copy n chunks of size 'speed'
if (nclear && (i < block)){ 
	{ 
  for(ii=0;ii<speed;ii++)
  attr_table.array[(i + ii + src)]= (( attr_table.array[(i + ii + src)] + (attr_table.array[(i + ii + src)] * 0)) * (0));
  }
  i += speed;	
}

//copy what's left
if (i == block) rclear = 1; 

if ((ntrig && rclear) && (i < (attr_total))){ 
	attr_table.array[(i + src)]= (( attr_table.array[(i + src)] + (attr_table.array[(i + src)] * 0)) * (0));
   i += 1;  
 }
//////////////////////////////


outlet_clipslot=clipslot;
outlet_cliptrigger=clip;
outlet_clearslot=clearslot;
outlet_cleartrigger=clear;


outlet_nrectrig=nrectrig;
outlet_nplaytrig=nplaytrig;]]></code.krate>
         <code.midihandler><![CDATA[if ((status == MIDI_NOTE_ON + 0)&&(data2))
	{
		note=data1;
		trigger=1;
	}
if ((status == MIDI_NOTE_ON + 0)&&(!data2))
	{trigger=0;
	}]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="fb3dbbfc-4256-4001-afcb-095e1a73d66d" name="note_15" x="1554" y="350">
      <params/>
      <attribs>
         <spinner attributeName="note" value="0"/>
         <spinner attributeName="channel" value="1"/>
      </attribs>
      <object id="patch/object" uuid="fb3dbbfc-4256-4001-afcb-095e1a73d66d">
         <sDescription>Monophonic MIDI keyboard note input, gate, velocity and release velocity</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>midi_in.axh</helpPatch>
         <inlets/>
         <outlets>
            <bool32 name="gate" description="key pressed?"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <spinner name="note" MinValue="0" MaxValue="127" DefaultValue="64"/>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="0"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[uint8_t _gate;]]></code.declaration>
         <code.init><![CDATA[_gate = 0;]]></code.init>
         <code.krate><![CDATA[outlet_gate= _gate<<27;]]></code.krate>
         <code.midihandler><![CDATA[//if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2)) {
//   _gate = 1;
//
//} else if (((status == MIDI_NOTE_ON + (attr_channel-1)) && (!data2))||          (status == MIDI_NOTE_OFF + (attr_channel-1))) {

//    _gate = 0;
  
//} 
if (status == (attr_channel-1) + MIDI_CONTROL_CHANGE) {
	if (data1==105){
  _gate = data2;
	}
}]]></code.midihandler>
      </object>
   </patchobj>
   <obj type="const/i" uuid="e202f44b2df17ae0b3e663b98ea6b14c8ff00408" name="i_16" x="756" y="364">
      <params/>
      <attribs>
         <spinner attributeName="value" value="3"/>
      </attribs>
   </obj>
   <patchobj type="patch/object" uuid="8385bd19-937d-47af-9b09-08facf287fbb" name="object_3" x="896" y="364">
      <params/>
      <attribs>
         <objref attributeName="table" obj="lcxl2"/>
         <spinner attributeName="buttonoffset" value="0"/>
         <spinner attributeName="total" value="20736"/>
         <spinner attributeName="barcount" value="4"/>
         <spinner attributeName="column" value="1"/>
      </attribs>
      <object id="patch/object" uuid="8385bd19-937d-47af-9b09-08facf287fbb">
         <inlets>
            <bool32 name="shift"/>
            <bool32 name="pulse"/>
            <bool32 name="pulseplay"/>
            <int32 name="barcount"/>
            <bool32 name="start"/>
            <bool32 name="stop"/>
         </inlets>
         <outlets>
            <int32 name="clipslot"/>
            <int32 name="clearslot"/>
            <bool32 name="cliptrigger"/>
            <bool32 name="cleartrigger"/>
            <int32 name="offsetnotes"/>
            <bool32 name="wait"/>
            <bool32 name="rec"/>
            <bool32 name="play"/>
            <bool32 name="nplaytrig"/>
            <bool32 name="nrectrig"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <objref name="table"/>
            <spinner name="buttonoffset" MinValue="0" MaxValue="10000000" DefaultValue="0"/>
            <spinner name="total" MinValue="0" MaxValue="5000000" DefaultValue="0"/>
            <spinner name="barcount" MinValue="0" MaxValue="16" DefaultValue="0"/>
            <spinner name="column" MinValue="1" MaxValue="8" DefaultValue="1"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[uint32_t i;
uint32_t ii;
uint32_t src;
uint32_t range;
uint32_t block;
int note;
int trigger;
int clipslot;
int clearslot;
int clear;
int clip;
int clipB;

int cloffset;
int nclear;
int rclear;
int speed;



int pclipslot;
int slotoffset;
int offset;
int full;
int ntrig;
int xtrig;
int prevplay;
int playtrig;
int recordtrig;
int recofftrig;
int wait;
int zwait;
int ztrig;
int record;
int play;
int outletrectrig;
int bar_record;
int maxbar;
int vcount;
int vtrig;
int vrtrig;
int vr2trig;
int ctrig;
int rtrig;
int count;
int prevfull;
int nrectrig;
int nplaytrig;
int prevoffset;]]></code.declaration>
         <code.init><![CDATA[full=attr_table.array[__USAT((0+ attr_buttonoffset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
slotoffset=0;
count=0;
ctrig = 0;
rtrig = 0;
clipslot=6;
clearslot=6;
pclipslot=8;]]></code.init>
         <code.krate><![CDATA[/////
if ((!inlet_shift)&&trigger){
if (note==(0+(attr_column-1))) {clipslot=0;clip=1;clipB=0;}
if (note==(16+(attr_column-1))) {clipslot=1;clip=1;clipB=0;}
if (note==(32+(attr_column-1))) {clipslot=2;clip=1;clipB=0;}
if (note==(48+(attr_column-1))) {clipslot=3;clip=1;clipB=0;}
if (note==(64+(attr_column-1))) {clipslot=4;clip=1;clipB=0;}
if (note==(80+(attr_column-1))) {clipslot=5;clip=1;clipB=0;}
if (note==(96+(attr_column-1))) {clipslot=6;clip=1;clipB=0;}
if (note==(112+(attr_column-1))) {clipslot=7;clip=1;}
//if ((note==(112+(attr_column-1)))||(note==120)) {clipslot=7;clip=1;}
//	if (note==8) {clipslot=0;clipB=1;clip=1;}
//	if (note==24) {clipslot=1;clipB=1;clip=1;}
//	if (note==40) {clipslot=2;clipB=1;clip=1;}
//	if (note==56) {clipslot=3;clipB=1;clip=1;}
//	if (note==72) {clipslot=4;clipB=1;clip=1;}
//	if (note==88) {clipslot=5;clipB=1;clip=1;}
//	if (note==104) {clipslot=6;clipB=1;clip=1;}
//	if (note==120) {clipslot=7;clipB=1;clip=1;}
	
}

else if (inlet_shift){
if ((note==(0+(attr_column-1)))&&trigger) {clearslot=0;clear=1;}
if ((note==(16+(attr_column-1)))&&trigger) {clearslot=1;clear=1;}
if ((note==(32+(attr_column-1)))&&trigger) {clearslot=2;clear=1;}
if ((note==(48+(attr_column-1)))&&trigger) {clearslot=3;clear=1;}
if ((note==(64+(attr_column-1)))&&trigger) {clearslot=4;clear=1;}
if ((note==(80+(attr_column-1)))&&trigger) {clearslot=5;clear=1;}
if ((note==(96+(attr_column-1)))&&trigger) {clearslot=6;clear=1;}
if ((note==(112+(attr_column-1)))&&trigger) {clearslot=7;clear=1;}
}




//full=attr_table.array[__USAT((clipslot+ attr_buttonoffset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
//if ((clipB)&&(full>0)){clip=1;clipB=0;}
//if ((clipB)&&(!(full>0))){clip=1;}
       

if (!trigger) {clip=0;clear=0;}



/////

full=attr_table.array[__USAT((clipslot+ attr_buttonoffset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
nrectrig=0;
nplaytrig=0;
offset=8+slotoffset+attr_buttonoffset;
outlet_offsetnotes=offset+1;

if (inlet_start>0){play=prevplay;}
//if ((clipB>0)&&(full)&&!ntrig){	
//	wait=1;
//	zwait=1;	
//	ntrig=1;
//}
if ((clip>0)&&!ntrig){	
	wait=1;
	zwait=1;	
	ntrig=1;
}
if ((wait>0)&&(!(clip>0))&&(inlet_pulse>0)) {xtrig=1;nrectrig=1;wait=0;ntrig=0;}
if ((zwait>0)&&(!(clip>0))&&(inlet_pulseplay>0)) {
	nplaytrig=1;
	zwait=0;
	}

//
if ((clipslot==7)&&xtrig){
	if (record>0){
		attr_table.array[prevfull + attr_buttonoffset]=__SSAT(0,28)>>attr_table.GAIN;
	}
	prevplay=play;
	play=0;
	record=0;
	wait=0;
	ntrig=0;
	xtrig=0;
	clipB=0;
	pclipslot=8;
}
//
if (clipslot<7)
{
if ((clipslot!=pclipslot)&&xtrig){
	if (record>0){
		attr_table.array[offset]=__SSAT((bar_record),28)>>attr_table.GAIN;
	}
	xtrig=0;
	vcount=0;
	count=-1;
	nrectrig=1;
	slotoffset=(attr_total*clipslot);
	offset=8+slotoffset+attr_buttonoffset;
	prevoffset=slotoffset;
	full=attr_table.array[__USAT((clipslot+ attr_buttonoffset),attr_table.LENGTHPOW)]<<attr_table.GAIN;
	if (full>0){
		play=1;
		record=0;
	}
	if (!(full>0)){
		if (!clipB){
		play=0;
		attr_table.array[clipslot + attr_buttonoffset]=__SSAT(0x07FFFFFF,28)>>attr_table.GAIN;
		prevfull=clipslot;
		record=1;
		}
		else if (clipB){
		play=0;
		record=0;
		clipB=0;
		}
	}
	pclipslot=clipslot;
	
}
if (!clipB){
if ((!(full>0))&&xtrig){
	attr_table.array[clipslot + attr_buttonoffset]=__SSAT(0x07FFFFFF,28)>>attr_table.GAIN;
	prevfull=clipslot;
	record=1;
	xtrig=0;
}

if ((full>0)&&(!(play>0))&&xtrig){
	record=0;
	play=1;
	xtrig=0;
}
if ((full>0)&&(play>0)&&xtrig){
	record=0;
	vcount=0;
	play=1;
	xtrig=0;
}
}
else if ((clipB)&&(xtrig)){
	if (!full){
	play=0;
	record=0;
	}
	else if (full){
		play=1;
		record=0;
	}
	clipB=0;
	xtrig=0;
}

}


if (inlet_stop>0){
	prevplay=play;
	play=0;
	record=0;
	wait=0;
	ntrig=0;
	xtrig=0;
	clipB=0;
}


if ((clear>0)&&!ntrig){
	ntrig=1;
	attr_table.array[clearslot + attr_buttonoffset]=__SSAT(0,28)>>attr_table.GAIN;
	if (clipslot==clearslot){
		play=0;
		record=0;
		wait=0;
		zwait=0;
	}
}
else if(!(clear)) {ntrig=0;}



//





outlet_play=play;


outlet_wait=wait;
outlet_rec=record;


//playback
if ((play>0)&&!playtrig){
	playtrig=1;
	vcount=0;
}
if (!(play>0)) {playtrig=0;}
outletrectrig=0;
if ((record>0)&&!recordtrig){
	recordtrig=1;
	outletrectrig=1;
}


if (!(record>0)) {recordtrig=0;}

if ((!(record>0))&&!recofftrig){
	attr_table.array[offset]=__SSAT(bar_record,28)>>attr_table.GAIN;
	zwait=1;
	recofftrig=1;
}

//reset
if (record>0){recofftrig=0;}

//barclocks
if ((inlet_pulse>0) && !ctrig) {
   count += 1; 
   if (count>=attr_barcount) 
   {
   	count = attr_barcount;
   }
   if ((count==(inlet_barcount))&&(record>0)){wait=1;}
   ctrig=1;
}
else if (!(inlet_pulse>0)) ctrig=0;

bar_record=(count+1)<<21;
if ((outletrectrig>0) && !rtrig) {count=0; rtrig = 1;}
else if (!(outletrectrig>0)) rtrig=0;



//barlength=recorded
maxbar=(attr_table.array[__USAT(offset,attr_table.LENGTHPOW)]<<attr_table.GAIN)>>21;
//play bar counter
if ((inlet_pulseplay>0) && !vtrig) {
   vcount += 1; if ((vcount>(maxbar))||(vcount>(16))) {
   	vcount = 1; 
   	if ((play>0)&&(!(record>0))){
   	nplaytrig=1;
   	}
   }
   vtrig=1;
}
else if (!(inlet_pulseplay>0)) vtrig=0;
//start
if ((inlet_start>0) && !vr2trig) {vcount=1; vr2trig = 1; nplaytrig=1; nrectrig=1;}
else if (!(inlet_start>0)) vr2trig=0;
//reset vcount
if (vcount>(maxbar)){vcount=1;}

/////////////
cloffset=(attr_buttonoffset+8)+(attr_total*clearslot);


speed = 16 << 4;
src = cloffset;
range = (attr_total);
block  = (range / speed) * speed;

if ((clear)&& (!nclear)){ nclear= 1;i = 0;rclear = 0;}
if ((i == attr_total) && (!clear)) {nclear= 0;i = 0;}


//copy n chunks of size 'speed'
if (nclear && (i < block)){ 
	{ 
  for(ii=0;ii<speed;ii++)
  attr_table.array[(i + ii + src)]= (( attr_table.array[(i + ii + src)] + (attr_table.array[(i + ii + src)] * 0)) * (0));
  }
  i += speed;	
}

//copy what's left
if (i == block) rclear = 1; 

if ((ntrig && rclear) && (i < (attr_total))){ 
	attr_table.array[(i + src)]= (( attr_table.array[(i + src)] + (attr_table.array[(i + src)] * 0)) * (0));
   i += 1;  
 }
//////////////////////////////


outlet_clipslot=clipslot;
outlet_cliptrigger=clip;
outlet_clearslot=clearslot;
outlet_cleartrigger=clear;


outlet_nrectrig=nrectrig;
outlet_nplaytrig=nplaytrig;]]></code.krate>
         <code.midihandler><![CDATA[if ((status == MIDI_NOTE_ON + 0)&&(data2))
	{
		note=data1;
		trigger=1;
	}
if ((status == MIDI_NOTE_ON + 0)&&(!data2))
	{trigger=0;
	}]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="fb3dbbfc-4256-4001-afcb-095e1a73d66d" name="note_14" x="1050" y="364">
      <params/>
      <attribs>
         <spinner attributeName="note" value="0"/>
         <spinner attributeName="channel" value="1"/>
      </attribs>
      <object id="patch/object" uuid="fb3dbbfc-4256-4001-afcb-095e1a73d66d">
         <sDescription>Monophonic MIDI keyboard note input, gate, velocity and release velocity</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>midi_in.axh</helpPatch>
         <inlets/>
         <outlets>
            <bool32 name="gate" description="key pressed?"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <spinner name="note" MinValue="0" MaxValue="127" DefaultValue="64"/>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="0"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[uint8_t _gate;]]></code.declaration>
         <code.init><![CDATA[_gate = 0;]]></code.init>
         <code.krate><![CDATA[outlet_gate= _gate<<27;]]></code.krate>
         <code.midihandler><![CDATA[//if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2)) {
//   _gate = 1;
//
//} else if (((status == MIDI_NOTE_ON + (attr_channel-1)) && (!data2))||          (status == MIDI_NOTE_OFF + (attr_channel-1))) {

//    _gate = 0;
  
//} 
if (status == (attr_channel-1) + MIDI_CONTROL_CHANGE) {
	if (data1==104){
  _gate = data2;
	}
}]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="9bd5cd86-529c-4fb0-88ab-f5ee0c3b8762" name="step_1____tmp_____" x="1162" y="434">
      <params>
         <frac32.u.map name="value" value="64.0"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="lcxl3"/>
      </attribs>
      <object id="patch/object" uuid="9bd5cd86-529c-4fb0-88ab-f5ee0c3b8762">
         <sDescription>toggles an element of a table : if the element at index == 0,the element is set to the dial &apos;value&apos;.
if the element &gt; 0 ,the element is set to 0.</sDescription>
         <author>Robert Schirmer</author>
         <license>BSD</license>
         <helpPatch>step_seq.axh</helpPatch>
         <inlets>
            <int32.positive name="offset" description="offset in the table"/>
            <int32.positive name="index" description="write index"/>
            <bool32.rising name="toggle" description="toggle the table&apos;s content at &apos;index&apos; "/>
         </inlets>
         <outlets>
            <frac32 name="value"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="value" description="value if index is set to &apos;high&apos;" noLabel="true">
               <DefaultValue v="64.0"/>
            </frac32.u.map>
         </params>
         <attribs>
            <objref name="table"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
bool op;]]></code.declaration>
         <code.krate><![CDATA[if ((inlet_toggle>0) && !ntrig) {
      ntrig=1;
      op = attr_table.array[(inlet_index + inlet_offset)];
      op = !op ;
         attr_table.array[(inlet_index + inlet_offset)]= (op * (__SSAT(((param_value)),28)>>attr_table.GAIN));
         
   }
   if (!(inlet_toggle>0)) {
   	ntrig=0;
   }
outlet_value= attr_table.array[__USAT((inlet_index+ inlet_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="9bd5cd86-529c-4fb0-88ab-f5ee0c3b8762" name="step_1____tmp____" x="1666" y="434">
      <params>
         <frac32.u.map name="value" value="64.0"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="lcxl3"/>
      </attribs>
      <object id="patch/object" uuid="9bd5cd86-529c-4fb0-88ab-f5ee0c3b8762">
         <sDescription>toggles an element of a table : if the element at index == 0,the element is set to the dial &apos;value&apos;.
if the element &gt; 0 ,the element is set to 0.</sDescription>
         <author>Robert Schirmer</author>
         <license>BSD</license>
         <helpPatch>step_seq.axh</helpPatch>
         <inlets>
            <int32.positive name="offset" description="offset in the table"/>
            <int32.positive name="index" description="write index"/>
            <bool32.rising name="toggle" description="toggle the table&apos;s content at &apos;index&apos; "/>
         </inlets>
         <outlets>
            <frac32 name="value"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="value" description="value if index is set to &apos;high&apos;" noLabel="true">
               <DefaultValue v="64.0"/>
            </frac32.u.map>
         </params>
         <attribs>
            <objref name="table"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
bool op;]]></code.declaration>
         <code.krate><![CDATA[if ((inlet_toggle>0) && !ntrig) {
      ntrig=1;
      op = attr_table.array[(inlet_index + inlet_offset)];
      op = !op ;
         attr_table.array[(inlet_index + inlet_offset)]= (op * (__SSAT(((param_value)),28)>>attr_table.GAIN));
         
   }
   if (!(inlet_toggle>0)) {
   	ntrig=0;
   }
outlet_value= attr_table.array[__USAT((inlet_index+ inlet_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;]]></code.krate>
      </object>
   </patchobj>
   <obj type="logic/or 2" uuid="3805d3c84d30032a44fbdbe42d9a2988a1790a3e" name="or_12" x="1890" y="532">
      <params/>
      <attribs/>
   </obj>
   <obj type="phi/logic/or 4" uuid="5dc5a7c1fb7809522171638f755fead71cbe14ea" name="or_13" x="1974" y="546">
      <params/>
      <attribs/>
   </obj>
   <obj type="const/i" uuid="e202f44b2df17ae0b3e663b98ea6b14c8ff00408" name="i_9" x="490" y="574">
      <params/>
      <attribs>
         <spinner attributeName="value" value="13"/>
      </attribs>
   </obj>
   <obj type="const/i" uuid="e202f44b2df17ae0b3e663b98ea6b14c8ff00408" name="i_14" x="616" y="574">
      <params/>
      <attribs>
         <spinner attributeName="value" value="12"/>
      </attribs>
   </obj>
   <obj type="const/i" uuid="e202f44b2df17ae0b3e663b98ea6b14c8ff00408" name="i_20" x="714" y="574">
      <params/>
      <attribs>
         <spinner attributeName="value" value="3"/>
      </attribs>
   </obj>
   <obj type="logic/inv" uuid="2bd44b865d3b63ff9b80862242bf5be779e3ad5" name="inv_4" x="1288" y="574">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/inv" uuid="2bd44b865d3b63ff9b80862242bf5be779e3ad5" name="inv_5" x="1806" y="574">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="854" y="644" text="track 3"/>
   <comment type="patch/comment" x="1372" y="644" text="track 4"/>
   <comment type="patch/comment" x="1890" y="644" text="track 4"/>
   <comment type="patch/comment" x="854" y="658" text="note off &amp; cc counter"/>
   <comment type="patch/comment" x="1008" y="658" text="note on play counter"/>
   <comment type="patch/comment" x="1134" y="658" text="noteoffshift counter"/>
   <comment type="patch/comment" x="1246" y="658" text="note on rec counter"/>
   <comment type="patch/comment" x="1372" y="658" text="note off &amp; cc counter"/>
   <comment type="patch/comment" x="1498" y="658" text="note on play counter"/>
   <comment type="patch/comment" x="1624" y="658" text="noteoffshift counter"/>
   <comment type="patch/comment" x="1736" y="658" text="note on rec counter"/>
   <comment type="patch/comment" x="1890" y="658" text="note off &amp; cc counter"/>
   <obj type="logic/counter" uuid="7a141ba82230e54e5f5cd12da5dbe5a74ba854a5" name="counter_9" x="854" y="672">
      <params>
         <int32 name="maximum" value="2048"/>
      </params>
      <attribs/>
   </obj>
   <obj type="logic/counter" uuid="7a141ba82230e54e5f5cd12da5dbe5a74ba854a5" name="counter_11" x="1008" y="672">
      <params>
         <int32 name="maximum" value="64"/>
      </params>
      <attribs/>
   </obj>
   <obj type="logic/counter" uuid="7a141ba82230e54e5f5cd12da5dbe5a74ba854a5" name="counter_13" x="1134" y="672">
      <params>
         <int32 name="maximum" value="16"/>
      </params>
      <attribs/>
   </obj>
   <obj type="logic/counter" uuid="7a141ba82230e54e5f5cd12da5dbe5a74ba854a5" name="counter_8" x="1246" y="672">
      <params>
         <int32 name="maximum" value="256"/>
      </params>
      <attribs/>
   </obj>
   <obj type="logic/counter" uuid="7a141ba82230e54e5f5cd12da5dbe5a74ba854a5" name="counter_10" x="1372" y="672">
      <params>
         <int32 name="maximum" value="2048"/>
      </params>
      <attribs/>
   </obj>
   <obj type="logic/counter" uuid="7a141ba82230e54e5f5cd12da5dbe5a74ba854a5" name="counter_12" x="1498" y="672">
      <params>
         <int32 name="maximum" value="64"/>
      </params>
      <attribs/>
   </obj>
   <obj type="logic/counter" uuid="7a141ba82230e54e5f5cd12da5dbe5a74ba854a5" name="counter_17" x="1736" y="672">
      <params>
         <int32 name="maximum" value="64"/>
      </params>
      <attribs/>
   </obj>
   <obj type="logic/counter" uuid="7a141ba82230e54e5f5cd12da5dbe5a74ba854a5" name="counter_18" x="1890" y="672">
      <params>
         <int32 name="maximum" value="2048"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="854" y="770" text="track 3"/>
   <comment type="patch/comment" x="1652" y="770" text="track 3"/>
   <comment type="patch/comment" x="854" y="784" text="poly recorder"/>
   <comment type="patch/comment" x="980" y="784" text="track 3"/>
   <comment type="patch/comment" x="1148" y="784" text="track 3"/>
   <comment type="patch/comment" x="1288" y="784" text="track 3"/>
   <comment type="patch/comment" x="1652" y="784" text="poly recorder"/>
   <comment type="patch/comment" x="1778" y="784" text="track 3"/>
   <comment type="patch/comment" x="980" y="798" text=" noteplay poly 1"/>
   <comment type="patch/comment" x="1148" y="798" text="bend touch cc recorder"/>
   <comment type="patch/comment" x="1288" y="798" text="bend/touch.CC play"/>
   <comment type="patch/comment" x="1778" y="798" text=" noteplay poly 1"/>
   <patchobj type="patch/object" uuid="a919ffab-f138-4bb2-9193-1455073b35ac" name="tablestore_9" x="840" y="812">
      <params/>
      <attribs>
         <objref attributeName="table" obj="lcxl2"/>
         <spinner attributeName="seqlength" value="64"/>
         <spinner attributeName="channel" value="14"/>
      </attribs>
      <object id="patch/object" uuid="a919ffab-f138-4bb2-9193-1455073b35ac">
         <sDescription>writes and outputs 8 values to a table.</sDescription>
         <author>robert schirmer</author>
         <license>who cares</license>
         <inlets>
            <bool32 name="rec"/>
            <int32 name="polyphony"/>
            <int32 name="offset" description="sets an offset for writing to the table"/>
            <int32 name="steprec"/>
            <int32 name="step"/>
            <int32 name="stepunQ"/>
            <int32 name="Qstep"/>
         </inlets>
         <outlets/>
         <displays/>
         <params/>
         <attribs>
            <objref name="table"/>
            <spinner name="seqlength" MinValue="1" MaxValue="10000" DefaultValue="0"/>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="1"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int polyphony;
int innote;
int invel;
int inputnote;
int inputvel;
int inputnoteon;
int inputnoteoff;
int ingate;
int ingate2;
int inntrig;
int inytrig;
int op;
int Atrig;
int notecount;
int seqlength;
int seqlengthUNQ;
int off1;
int recoffset1g;
int voiceoffset;
int offset;
int offset1;
int totaloffset;
int offsetg;
int offset1g;
int etrig;
int early;
int earlyshift;
int offsetunQ1;
int offsetunQ1g;
int noteon;
int noteoff;
int ytrig;
int xtrig;
int prevsteprec;
int prevstep;
int prevstepunQ;
int prevx;
int prevy;
int Pnoteoff;
int Poffset;]]></code.declaration>
         <code.init><![CDATA[seqlengthUNQ=(attr_seqlength*32);
seqlength=attr_seqlength;
noteon=0;
notecount=0;
offsetg=offset;]]></code.init>
         <code.krate><![CDATA[off1= !inlet_rec;
voiceoffset=seqlength+seqlength+seqlengthUNQ;
totaloffset=voiceoffset+voiceoffset;
offset=inlet_offset+(totaloffset*(inlet_polyphony));



inputnote = innote<<20;
inputvel= invel<<20;

if((ingate2)&&!inntrig){
inputnoteon=ingate2;
inntrig=1;}
else inputnoteon=0;
if (!ingate2){
inntrig=0;
}

if((!ingate)&&!inytrig){
inputnoteoff=64<<20;
inytrig=1;}
else inputnoteoff=0;
if (ingate){
inytrig=0;
}

ingate2=ingate;

if ((inputnoteon>0) && !Atrig) {op = !op; Atrig=1;}
if (!(inputnoteon>0)) Atrig=0;
notecount= op;


if (notecount){offsetg=offset;}
if (!notecount){offsetg=offset+voiceoffset;}


recoffset1g=(offsetg + (inlet_steprec));
offsetunQ1g=(offsetg + inlet_stepunQ);




//1
if (!off1){
if ((inputnoteon>0)&&(!ytrig))
{
attr_table.array[recoffset1g]=__SSAT(inputnote,28)>>attr_table.GAIN;
attr_table.array[recoffset1g + seqlength]=__SSAT(inputvel,28)>>attr_table.GAIN;
Pnoteoff=0;
if ((inlet_steprec!=inlet_step)&&!etrig) {
	
	earlyshift=(16-inlet_Qstep);
	etrig=1;
}
if ((inlet_steprec==inlet_step)&&!etrig) 
{
	
	earlyshift=(0-inlet_Qstep);
	etrig=1;
	//if (inlet_steprec==0)
	//{
	//	early=2;
	//}
}

//if (inlet_steprec==(seqlength-1)){early=2;}
prevy=inlet_steprec;
ytrig=1;
}
else if ((!(inputnoteon>0))&&(inlet_steprec!=prevy)){
	ytrig=0;
	
}


if ((inputnoteoff>0)&&(!xtrig))
{early=earlyshift;
	

		attr_table.array[offsetunQ1g + seqlength + seqlength + earlyshift]=__SSAT(inputnoteoff,28)>>attr_table.GAIN;
		Pnoteoff=1;
		//attr_table.array[recoffset1g]=__SSAT(inputnote,28)>>attr_table.GAIN;
	
etrig=0;
prevx=inlet_stepunQ;
xtrig=1;
}
else if ((!(inputnoteoff>0))&&(inlet_stepunQ!=prevx)){
	xtrig=0;
}


if ((offsetg!=Poffset)&&ingate){
	inputnoteoff=64<<20;
	attr_table.array[Poffset + prevstepunQ + seqlength + seqlength]=__SSAT(inputnoteoff,28)>>attr_table.GAIN;
	}

prevstep=inlet_step;
prevstepunQ=inlet_stepunQ;
prevsteprec=inlet_steprec;
Poffset=offsetg;
}



else if (off1)
{
	if (!Pnoteoff){
	inputnoteoff=64<<20;
	attr_table.array[offsetg + prevstepunQ + seqlength + seqlength + earlyshift]=__SSAT(inputnoteoff,28)>>attr_table.GAIN;Pnoteoff=1;}
inputnoteoff=0;
etrig=0;
ytrig=0;
xtrig=0;
op=0;
prevx=(-1);
prevy=(-1);
}]]></code.krate>
         <code.midihandler><![CDATA[if (status == MIDI_NOTE_ON + (attr_channel-1)) {
  innote = data1;
  invel = data2;
  ingate=1;
  ingate2=0;
}
if (status == MIDI_NOTE_OFF + (attr_channel-1)) {
	if (data1==(innote)){
		ingate=0;
	}
}]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="a919ffab-f138-4bb2-9193-1455073b35ac" name="tablestore_21" x="980" y="812">
      <params/>
      <attribs>
         <objref attributeName="table" obj="lcxl2"/>
         <spinner attributeName="seqlength" value="64"/>
         <combo attributeName="device" selection="internal port 1"/>
      </attribs>
      <object id="patch/object" uuid="a919ffab-f138-4bb2-9193-1455073b35ac">
         <sDescription>writes and outputs 8 values to a table.</sDescription>
         <author>robert schirmer</author>
         <license>who cares</license>
         <inlets>
            <int32 name="channel"/>
            <bool32 name="play"/>
            <int32 name="offset" description="sets an offset for writing to the table"/>
            <int32 name="step"/>
            <int32 name="stepunQ"/>
         </inlets>
         <outlets>
            <int32 name="totaloffset"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <objref name="table"/>
            <spinner name="seqlength" MinValue="1" MaxValue="10000" DefaultValue="0"/>
            <combo name="device">
               <MenuEntries>
                  <string>din</string>
                  <string>usb host port 1</string>
                  <string>usb host port 2</string>
                  <string>usb host port 3</string>
                  <string>usb host port 4</string>
                  <string>internal port 1</string>
                  <string>internal port 2</string>
                  <string>usb device port 1</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_DIN, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 2</string>
                  <string>MIDI_DEVICE_USB_HOST, 3</string>
                  <string>MIDI_DEVICE_USB_HOST, 4</string>
                  <string>MIDI_DEVICE_INTERNAL, 1</string>
                  <string>MIDI_DEVICE_INTERNAL, 2</string>
                  <string>MIDI_DEVICE_USB_DEVICE, 1</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int prevchannel;
int steptrig;
int TntrigA;
int TntrigB;
int TlastnoteA;
int TlastnoteB;
int seqlength;
int seqlengthUNQ;
int voiceoffset;
int off1;
int offtrig;
int offset1;
int offsetunQ1;
int noteonA;
int noteoffA;
int noteA;
int holdnoteA;
int holdvelA;
int TnoteA;
int TvelA;
int TnoteonA;
int TnoteoffA;
int noteonB;
int noteoffB;
int noteB;
int holdnoteB;
int holdvelB;
int TnoteB;
int TvelB;
int TnoteonB;
int TnoteoffB;
int prevoffset;
int prevstep;
int prevstepunQ;]]></code.declaration>
         <code.init><![CDATA[noteonA=0;
seqlengthUNQ=(attr_seqlength*32);
seqlength=attr_seqlength;]]></code.init>
         <code.krate><![CDATA[off1= inlet_play;
if ((inlet_channel!=prevchannel)||(inlet_offset!=prevoffset)){
	if ((TntrigB>0)&&(TlastnoteB>0)){
	MidiSend3((midi_device_t) attr_device, MIDI_NOTE_OFF + (prevchannel),TlastnoteB,__USAT(TvelB,7)); TntrigB=0;}
	if ((TntrigA>0)&&(TlastnoteA>0)){
	MidiSend3((midi_device_t) attr_device, MIDI_NOTE_OFF + (prevchannel),TlastnoteA,__USAT(TvelA,7)); TntrigA=0;}
	prevchannel=inlet_channel;
}
//if (inlet_offset!=prevoffset){
//	if ((TntrigB>0)&&(TlastnoteB>0)){
//	MidiSend3((midi_device_t) attr_device, MIDI_NOTE_OFF + (inlet_channel),TlastnoteB,__USAT(TvelB,7)); TntrigB=0;}
//	if ((TntrigA>0)&&(TlastnoteA>0)){
//	MidiSend3((midi_device_t) attr_device, MIDI_NOTE_OFF + (inlet_channel),TlastnoteA,__USAT(TvelA,7)); TntrigA=0;}
//}

offset1=(inlet_offset + inlet_step);
offsetunQ1=(inlet_offset + inlet_stepunQ);
voiceoffset=(seqlength+seqlength+seqlengthUNQ);



//1
if (!off1){
TnoteA=0;
TvelA=0;
TnoteonA=0;
TnoteB=0;
TvelB=0;
TnoteonB=0;
if (offtrig==0){

if ((TntrigB>0)&&(TlastnoteB>0)){
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_OFF + (inlet_channel),TlastnoteB,__USAT(TvelB,7)); TntrigB=0;}
if ((TntrigA>0)&&(TlastnoteA>0)){
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_OFF + (inlet_channel),TlastnoteA,__USAT(TvelA,7)); TntrigA=0;}

offtrig=1;
}}





else if (off1)
{



	noteA= attr_table.array[__USAT((offset1),attr_table.LENGTHPOW)]<<attr_table.GAIN;
noteonA=attr_table.array[__USAT((offset1 + seqlength),attr_table.LENGTHPOW)]<<attr_table.GAIN;
noteoffA=attr_table.array[__USAT((offsetunQ1+ seqlength + seqlength),attr_table.LENGTHPOW)]<<attr_table.GAIN;
noteB= attr_table.array[__USAT((voiceoffset+ offset1),attr_table.LENGTHPOW)]<<attr_table.GAIN;
noteonB=attr_table.array[__USAT((voiceoffset+ offset1 + seqlength),attr_table.LENGTHPOW)]<<attr_table.GAIN;
noteoffB=attr_table.array[__USAT((voiceoffset+ offsetunQ1+ seqlength + seqlength),attr_table.LENGTHPOW)]<<attr_table.GAIN;


//voiceA*****************************************
//note
if ((inlet_step != prevstep )&&(noteA > (0) )) { 
     holdnoteA = noteA>>20;
     TnoteA = holdnoteA;
}
else {
	TnoteA = holdnoteA;
}

//vel
if ((inlet_step != prevstep )&&(noteonA> 0 )) { 
     holdvelA = noteonA>>20;
     TvelA = holdvelA;
}
else {
	TvelA = holdvelA;
}


if ((noteoffA>0)&&(inlet_stepunQ!=prevstepunQ)){
	TnoteoffA=1;}
else TnoteoffA=0;

if ((noteonA>0)&&(inlet_step!=prevstep)){
	TnoteonA=1;}
else TnoteonA=0;

//voiceB*****************************************
//note
if ((inlet_step != prevstep )&&(noteB > 0) ) { 
     holdnoteB = noteB>>20;
     TnoteB = holdnoteB;
}
else {
	TnoteB = holdnoteB;
}

//vel
if ((inlet_step != prevstep )&&(noteonB> 0 )) { 
     holdvelB = noteonB>>20;
     TvelB = holdvelB;
}
else {
	TvelB = holdvelB;
}


if ((noteoffB>0)&&(inlet_stepunQ!=prevstepunQ)){
	TnoteoffB=1;}
else TnoteoffB=0;

if ((noteonB>0)&&(inlet_step!=prevstep)){
	TnoteonB=1;}
else TnoteonB=0;


if ((TnoteonA>0) && !TntrigA) {
if ((TlastnoteB>0)&&TntrigB){	
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_OFF + (inlet_channel),TlastnoteB,__USAT(TvelB,7)); TntrigB=0;
}
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (inlet_channel),TnoteA,TvelA);  TntrigA=1;
TlastnoteA = TnoteA;
}
if ((TnoteoffA>0) && TntrigA) {MidiSend3((midi_device_t) attr_device, MIDI_NOTE_OFF + (inlet_channel),TlastnoteA,__USAT(TvelA,7)); TntrigA=0;}

if ((TnoteonB>0) && !TntrigB) {
if ((TlastnoteA>0)&&TntrigA){
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_OFF + (inlet_channel),TlastnoteA,__USAT(TvelA,7)); TntrigA=0;
}
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (inlet_channel),TnoteB,TvelB);  TntrigB=1;
TlastnoteB = TnoteB;
}
if ((TnoteoffB>0) && TntrigB) {MidiSend3((midi_device_t) attr_device, MIDI_NOTE_OFF + (inlet_channel),TlastnoteB,__USAT(TvelB,7)); TntrigB=0;}




offtrig=0;
}
prevoffset=inlet_offset;
prevstep=inlet_step;
prevstepunQ=inlet_stepunQ;
outlet_totaloffset=inlet_offset+voiceoffset+voiceoffset;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="a919ffab-f138-4bb2-9193-1455073b35ac" name="tablestore_11" x="1148" y="812">
      <params/>
      <attribs>
         <objref attributeName="table" obj="lcxl2"/>
         <spinner attributeName="seqlength" value="64"/>
         <spinner attributeName="channel" value="13"/>
      </attribs>
      <object id="patch/object" uuid="a919ffab-f138-4bb2-9193-1455073b35ac">
         <sDescription>writes and outputs 8 values to a table.</sDescription>
         <author>robert schirmer</author>
         <license>who cares</license>
         <inlets>
            <bool32 name="rec"/>
            <int32 name="offset" description="sets an offset for writing to the table"/>
            <int32 name="stepunQ"/>
         </inlets>
         <outlets>
            <int32 name="offset"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <objref name="table"/>
            <spinner name="seqlength" MinValue="1" MaxValue="10000" DefaultValue="0"/>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="1"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[uint32_t i;
uint32_t ii;
int32_t _bend;
int32_t Btrig;
int32_t _press;
int cc;
int ccv;
int innote;
int invel;
int inputnote;
int inputvel;
int inputnoteon;
int inputnoteoff;
int ingate;
int ingate2;
int inntrig;
int inytrig;
int op;
int Atrig;
int notecount;
int seqlength;
int seqlengthUNQ;
int splat;
int clear;
int ntrig;
int rtrig;
int speed;
int off1;
int recoffset1g;
int voiceoffset;
int offset;
int offset1;
int totaloffset;
int offsetg;
int offset1g;
int early;
int offsetunQ1;
int offsetunQ1g;
int noteon;
int noteoff;
int ytrig;
int xtrig;
int prevsteprec;
int prevstep;
int prevstepunQ;
int prevx;
int prevy;]]></code.declaration>
         <code.init><![CDATA[seqlengthUNQ=(attr_seqlength*32);
seqlength=attr_seqlength;
_bend=0;
_press=0;]]></code.init>
         <code.krate><![CDATA[off1= !inlet_rec;

offset=inlet_offset;

//1
if (!off1){
	if(inlet_stepunQ!=prevstepunQ){
	attr_table.array[offset + inlet_stepunQ]=__SSAT(_bend,28)>>attr_table.GAIN;
	attr_table.array[offset + inlet_stepunQ + seqlengthUNQ]=__SSAT(_press,28)>>attr_table.GAIN;
	attr_table.array[offset + inlet_stepunQ + seqlengthUNQ + seqlengthUNQ]=__SSAT(cc,28)>>attr_table.GAIN;
	attr_table.array[offset + inlet_stepunQ + seqlengthUNQ + seqlengthUNQ + seqlengthUNQ]=__SSAT(ccv,28)>>attr_table.GAIN;
	prevstepunQ=inlet_stepunQ;
	}
}


else if (off1)
{
	_bend=0;
	_press=0;
	cc=0;
	ccv=0;
}

outlet_offset=inlet_offset+seqlengthUNQ+seqlengthUNQ+seqlengthUNQ+seqlengthUNQ;]]></code.krate>
         <code.midihandler><![CDATA[if (status == MIDI_PITCH_BEND + (attr_channel-1)) {  _bend = ((int)((data2<<7)+data1)-0x2000)<<14;
}
if (status == MIDI_CHANNEL_PRESSURE + (attr_channel-1)) {  _press = (data1)<<20;
}
if (status == (attr_channel-1) + MIDI_CONTROL_CHANGE) {
  ccv = data2<<20;
  cc = data1<<20;
}]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="a919ffab-f138-4bb2-9193-1455073b35ac" name="tablestore_12" x="1288" y="812">
      <params/>
      <attribs>
         <objref attributeName="table" obj="lcxl2"/>
         <spinner attributeName="seqlength" value="64"/>
         <combo attributeName="device" selection="internal port 1"/>
      </attribs>
      <object id="patch/object" uuid="a919ffab-f138-4bb2-9193-1455073b35ac">
         <sDescription>writes and outputs 8 values to a table.</sDescription>
         <author>robert schirmer</author>
         <license>who cares</license>
         <inlets>
            <int32 name="channel"/>
            <bool32 name="play"/>
            <int32 name="offset" description="sets an offset for writing to the table"/>
            <int32 name="stepunQ"/>
         </inlets>
         <outlets>
            <int32 name="totaloffset"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <objref name="table"/>
            <spinner name="seqlength" MinValue="1" MaxValue="10000" DefaultValue="0"/>
            <combo name="device">
               <MenuEntries>
                  <string>din</string>
                  <string>usb host port 1</string>
                  <string>usb host port 2</string>
                  <string>usb host port 3</string>
                  <string>usb host port 4</string>
                  <string>internal port 1</string>
                  <string>internal port 2</string>
                  <string>usb device port 1</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_DIN, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 2</string>
                  <string>MIDI_DEVICE_USB_HOST, 3</string>
                  <string>MIDI_DEVICE_USB_HOST, 4</string>
                  <string>MIDI_DEVICE_INTERNAL, 1</string>
                  <string>MIDI_DEVICE_INTERNAL, 2</string>
                  <string>MIDI_DEVICE_USB_DEVICE, 1</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int prevchannel;
int steptrigger;
int seqlength;
int seqlengthUNQ;
int off1;
int offtrig;
int offsetunQ1;
int bend;
int bendA;
int bendB;
int touch;
int cc;
int ccv;
int prevbend;
int prevbendB;
int prevtouch;
int prevcc;
int prevccv;
int prevoffset;
int prevstepunQ;]]></code.declaration>
         <code.init><![CDATA[seqlengthUNQ=(attr_seqlength*32);
seqlength=attr_seqlength;
bendB=64;
bendA=0;
bend=0;
prevbendB=64;]]></code.init>
         <code.krate><![CDATA[off1= inlet_play;
if (inlet_channel!=prevchannel){
	if (prevbendB!=64){
	MidiSend3((midi_device_t) attr_device , MIDI_PITCH_BEND + (inlet_channel),0,64);prevbendB=64;
	}
	if (touch>0){
	MidiSend2((midi_device_t) attr_device, MIDI_CHANNEL_PRESSURE + (inlet_channel),0>>20);
	}
	prevchannel=inlet_channel;
}


offsetunQ1=(inlet_offset + inlet_stepunQ);

if (inlet_offset!=prevoffset){
	if (prevbendB!=64){
MidiSend3((midi_device_t) attr_device , MIDI_PITCH_BEND + (inlet_channel),0,64);prevbendB=64;
}
if (touch>0){
MidiSend2((midi_device_t) attr_device, MIDI_CHANNEL_PRESSURE + (inlet_channel),0>>20);
}
prevoffset=inlet_offset;
}

if (!off1){

if (offtrig==0){
//TnoteoffA=1;
//TnoteoffB=1;
if (prevbendB!=64){
MidiSend3((midi_device_t) attr_device , MIDI_PITCH_BEND + (inlet_channel),0,64);prevbendB=64;
}
if (touch>0){
MidiSend2((midi_device_t) attr_device, MIDI_CHANNEL_PRESSURE + (inlet_channel),0>>20);
}
offtrig=1;
}
bendB=64;
bendA=0;
bend=0;
touch=0;
}





else if (off1)
{
	if ((inlet_stepunQ==0)&&!steptrigger){
	if (prevbendB!=64){
		
	MidiSend3((midi_device_t) attr_device , MIDI_PITCH_BEND + (inlet_channel),0,64);prevbendB=64;}
	if (touch>0){
	MidiSend2((midi_device_t) attr_device, MIDI_CHANNEL_PRESSURE + (inlet_channel),0>>20);touch=0;}
	steptrigger=1;
}
if (inlet_stepunQ>0){
	steptrigger=0;
}
bend=attr_table.array[__USAT((offsetunQ1),attr_table.LENGTHPOW)]<<attr_table.GAIN;
bendA=(bend>>14)&0x7F;
bendB=(bend>>21)+64;
touch=attr_table.array[__USAT((offsetunQ1+ seqlengthUNQ),attr_table.LENGTHPOW)]<<attr_table.GAIN;
cc=attr_table.array[__USAT((offsetunQ1+ seqlengthUNQ+ seqlengthUNQ),attr_table.LENGTHPOW)]<<attr_table.GAIN;
ccv=attr_table.array[__USAT((offsetunQ1+ seqlengthUNQ+ seqlengthUNQ+ seqlengthUNQ),attr_table.LENGTHPOW)]<<attr_table.GAIN;

//pitchbend
if ((inlet_stepunQ!=prevstepunQ)&&(bendB!=prevbendB)){
MidiSend3((midi_device_t) attr_device , MIDI_PITCH_BEND + (inlet_channel),bendA,bendB);
prevbend=bend;
prevbendB=bendB;
}
//aftertouch
if ((touch!=prevtouch)&&(inlet_stepunQ!=prevstepunQ)){
MidiSend2((midi_device_t) attr_device, MIDI_CHANNEL_PRESSURE + (inlet_channel),touch>>20);
prevtouch=touch;
}
if (((ccv!=prevccv)||(cc!=prevcc))&&(inlet_stepunQ!=prevstepunQ)){
	MidiSend3((midi_device_t) attr_device, MIDI_CONTROL_CHANGE + (inlet_channel),(cc>>20),__USAT(ccv>>20,7));
	prevcc=cc;
	prevccv=ccv;
}

}

prevstepunQ=inlet_stepunQ;
outlet_totaloffset=inlet_offset+seqlengthUNQ+seqlengthUNQ+seqlengthUNQ+seqlengthUNQ;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="a919ffab-f138-4bb2-9193-1455073b35ac" name="tablestore_10" x="1652" y="812">
      <params/>
      <attribs>
         <objref attributeName="table" obj="lcxl2"/>
         <spinner attributeName="seqlength" value="64"/>
         <spinner attributeName="channel" value="4"/>
      </attribs>
      <object id="patch/object" uuid="a919ffab-f138-4bb2-9193-1455073b35ac">
         <sDescription>writes and outputs 8 values to a table.</sDescription>
         <author>robert schirmer</author>
         <license>who cares</license>
         <inlets>
            <bool32 name="rec"/>
            <int32 name="polyphony"/>
            <int32 name="offset" description="sets an offset for writing to the table"/>
            <int32 name="steprec"/>
            <int32 name="step"/>
            <int32 name="stepunQ"/>
            <int32 name="Qstep"/>
         </inlets>
         <outlets/>
         <displays/>
         <params/>
         <attribs>
            <objref name="table"/>
            <spinner name="seqlength" MinValue="1" MaxValue="10000" DefaultValue="0"/>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="1"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int polyphony;
int innote;
int invel;
int inputnote;
int inputvel;
int inputnoteon;
int inputnoteoff;
int ingate;
int ingate2;
int inntrig;
int inytrig;
int op;
int Atrig;
int notecount;
int seqlength;
int seqlengthUNQ;
int off1;
int recoffset1g;
int voiceoffset;
int offset;
int offset1;
int totaloffset;
int offsetg;
int offset1g;
int etrig;
int early;
int earlyshift;
int offsetunQ1;
int offsetunQ1g;
int noteon;
int noteoff;
int ytrig;
int xtrig;
int prevsteprec;
int prevstep;
int prevstepunQ;
int prevx;
int prevy;
int Pnoteoff;
int Poffset;]]></code.declaration>
         <code.init><![CDATA[seqlengthUNQ=(attr_seqlength*32);
seqlength=attr_seqlength;
noteon=0;
notecount=0;
offsetg=offset;]]></code.init>
         <code.krate><![CDATA[off1= !inlet_rec;
voiceoffset=seqlength+seqlength+seqlengthUNQ;
totaloffset=voiceoffset+voiceoffset;
offset=inlet_offset+(totaloffset*(inlet_polyphony));



inputnote = innote<<20;
inputvel= invel<<20;

if((ingate2)&&!inntrig){
inputnoteon=ingate2;
inntrig=1;}
else inputnoteon=0;
if (!ingate2){
inntrig=0;
}

if((!ingate)&&!inytrig){
inputnoteoff=64<<20;
inytrig=1;}
else inputnoteoff=0;
if (ingate){
inytrig=0;
}

ingate2=ingate;

if ((inputnoteon>0) && !Atrig) {op = !op; Atrig=1;}
if (!(inputnoteon>0)) Atrig=0;
notecount= op;


if (notecount){offsetg=offset;}
if (!notecount){offsetg=offset+voiceoffset;}


recoffset1g=(offsetg + (inlet_steprec));
offsetunQ1g=(offsetg + inlet_stepunQ);




//1
if (!off1){
if ((inputnoteon>0)&&(!ytrig))
{
attr_table.array[recoffset1g]=__SSAT(inputnote,28)>>attr_table.GAIN;
attr_table.array[recoffset1g + seqlength]=__SSAT(inputvel,28)>>attr_table.GAIN;
Pnoteoff=0;
if ((inlet_steprec!=inlet_step)&&!etrig) {
	
	earlyshift=(16-inlet_Qstep);
	etrig=1;
}
if ((inlet_steprec==inlet_step)&&!etrig) 
{
	
	earlyshift=(0-inlet_Qstep);
	etrig=1;
	//if (inlet_steprec==0)
	//{
	//	early=2;
	//}
}

//if (inlet_steprec==(seqlength-1)){early=2;}
prevy=inlet_steprec;
ytrig=1;
}
else if ((!(inputnoteon>0))&&(inlet_steprec!=prevy)){
	ytrig=0;
	
}


if ((inputnoteoff>0)&&(!xtrig))
{early=earlyshift;
	

		attr_table.array[offsetunQ1g + seqlength + seqlength + earlyshift]=__SSAT(inputnoteoff,28)>>attr_table.GAIN;
		Pnoteoff=1;
		//attr_table.array[recoffset1g]=__SSAT(inputnote,28)>>attr_table.GAIN;
	
etrig=0;
prevx=inlet_stepunQ;
xtrig=1;
}
else if ((!(inputnoteoff>0))&&(inlet_stepunQ!=prevx)){
	xtrig=0;
}


if ((offsetg!=Poffset)&&ingate){
	inputnoteoff=64<<20;
	attr_table.array[Poffset + prevstepunQ + seqlength + seqlength]=__SSAT(inputnoteoff,28)>>attr_table.GAIN;
	}

prevstep=inlet_step;
prevstepunQ=inlet_stepunQ;
prevsteprec=inlet_steprec;
Poffset=offsetg;
}



else if (off1)
{
	if (!Pnoteoff){
	inputnoteoff=64<<20;
	attr_table.array[offsetg + prevstepunQ + seqlength + seqlength + earlyshift]=__SSAT(inputnoteoff,28)>>attr_table.GAIN;Pnoteoff=1;}
inputnoteoff=0;
etrig=0;
ytrig=0;
xtrig=0;
op=0;
prevx=(-1);
prevy=(-1);
}]]></code.krate>
         <code.midihandler><![CDATA[if (status == MIDI_NOTE_ON + (attr_channel-1)) {
  innote = data1;
  invel = data2;
  ingate=1;
  ingate2=0;
}
if (status == MIDI_NOTE_OFF + (attr_channel-1)) {
	if (data1==(innote)){
		ingate=0;
	}
}]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="a919ffab-f138-4bb2-9193-1455073b35ac" name="tablestore_22" x="1792" y="812">
      <params/>
      <attribs>
         <objref attributeName="table" obj="lcxl2"/>
         <spinner attributeName="seqlength" value="64"/>
         <combo attributeName="device" selection="internal port 1"/>
      </attribs>
      <object id="patch/object" uuid="a919ffab-f138-4bb2-9193-1455073b35ac">
         <sDescription>writes and outputs 8 values to a table.</sDescription>
         <author>robert schirmer</author>
         <license>who cares</license>
         <inlets>
            <int32 name="channel"/>
            <bool32 name="play"/>
            <int32 name="offset" description="sets an offset for writing to the table"/>
            <int32 name="step"/>
            <int32 name="stepunQ"/>
         </inlets>
         <outlets>
            <int32 name="totaloffset"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <objref name="table"/>
            <spinner name="seqlength" MinValue="1" MaxValue="10000" DefaultValue="0"/>
            <combo name="device">
               <MenuEntries>
                  <string>din</string>
                  <string>usb host port 1</string>
                  <string>usb host port 2</string>
                  <string>usb host port 3</string>
                  <string>usb host port 4</string>
                  <string>internal port 1</string>
                  <string>internal port 2</string>
                  <string>usb device port 1</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_DIN, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 2</string>
                  <string>MIDI_DEVICE_USB_HOST, 3</string>
                  <string>MIDI_DEVICE_USB_HOST, 4</string>
                  <string>MIDI_DEVICE_INTERNAL, 1</string>
                  <string>MIDI_DEVICE_INTERNAL, 2</string>
                  <string>MIDI_DEVICE_USB_DEVICE, 1</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int prevchannel;
int steptrig;
int TntrigA;
int TntrigB;
int TlastnoteA;
int TlastnoteB;
int seqlength;
int seqlengthUNQ;
int voiceoffset;
int off1;
int offtrig;
int offset1;
int offsetunQ1;
int noteonA;
int noteoffA;
int noteA;
int holdnoteA;
int holdvelA;
int TnoteA;
int TvelA;
int TnoteonA;
int TnoteoffA;
int noteonB;
int noteoffB;
int noteB;
int holdnoteB;
int holdvelB;
int TnoteB;
int TvelB;
int TnoteonB;
int TnoteoffB;
int prevoffset;
int prevstep;
int prevstepunQ;]]></code.declaration>
         <code.init><![CDATA[noteonA=0;
seqlengthUNQ=(attr_seqlength*32);
seqlength=attr_seqlength;]]></code.init>
         <code.krate><![CDATA[off1= inlet_play;
if ((inlet_channel!=prevchannel)||(inlet_offset!=prevoffset)){
	if ((TntrigB>0)&&(TlastnoteB>0)){
	MidiSend3((midi_device_t) attr_device, MIDI_NOTE_OFF + (prevchannel),TlastnoteB,__USAT(TvelB,7)); TntrigB=0;}
	if ((TntrigA>0)&&(TlastnoteA>0)){
	MidiSend3((midi_device_t) attr_device, MIDI_NOTE_OFF + (prevchannel),TlastnoteA,__USAT(TvelA,7)); TntrigA=0;}
	prevchannel=inlet_channel;
}
//if (inlet_offset!=prevoffset){
//	if ((TntrigB>0)&&(TlastnoteB>0)){
//	MidiSend3((midi_device_t) attr_device, MIDI_NOTE_OFF + (inlet_channel),TlastnoteB,__USAT(TvelB,7)); TntrigB=0;}
//	if ((TntrigA>0)&&(TlastnoteA>0)){
//	MidiSend3((midi_device_t) attr_device, MIDI_NOTE_OFF + (inlet_channel),TlastnoteA,__USAT(TvelA,7)); TntrigA=0;}
//}

offset1=(inlet_offset + inlet_step);
offsetunQ1=(inlet_offset + inlet_stepunQ);
voiceoffset=(seqlength+seqlength+seqlengthUNQ);



//1
if (!off1){
TnoteA=0;
TvelA=0;
TnoteonA=0;
TnoteB=0;
TvelB=0;
TnoteonB=0;
if (offtrig==0){

if ((TntrigB>0)&&(TlastnoteB>0)){
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_OFF + (inlet_channel),TlastnoteB,__USAT(TvelB,7)); TntrigB=0;}
if ((TntrigA>0)&&(TlastnoteA>0)){
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_OFF + (inlet_channel),TlastnoteA,__USAT(TvelA,7)); TntrigA=0;}

offtrig=1;
}}





else if (off1)
{



	noteA= attr_table.array[__USAT((offset1),attr_table.LENGTHPOW)]<<attr_table.GAIN;
noteonA=attr_table.array[__USAT((offset1 + seqlength),attr_table.LENGTHPOW)]<<attr_table.GAIN;
noteoffA=attr_table.array[__USAT((offsetunQ1+ seqlength + seqlength),attr_table.LENGTHPOW)]<<attr_table.GAIN;
noteB= attr_table.array[__USAT((voiceoffset+ offset1),attr_table.LENGTHPOW)]<<attr_table.GAIN;
noteonB=attr_table.array[__USAT((voiceoffset+ offset1 + seqlength),attr_table.LENGTHPOW)]<<attr_table.GAIN;
noteoffB=attr_table.array[__USAT((voiceoffset+ offsetunQ1+ seqlength + seqlength),attr_table.LENGTHPOW)]<<attr_table.GAIN;


//voiceA*****************************************
//note
if ((inlet_step != prevstep )&&(noteA > (0) )) { 
     holdnoteA = noteA>>20;
     TnoteA = holdnoteA;
}
else {
	TnoteA = holdnoteA;
}

//vel
if ((inlet_step != prevstep )&&(noteonA> 0 )) { 
     holdvelA = noteonA>>20;
     TvelA = holdvelA;
}
else {
	TvelA = holdvelA;
}


if ((noteoffA>0)&&(inlet_stepunQ!=prevstepunQ)){
	TnoteoffA=1;}
else TnoteoffA=0;

if ((noteonA>0)&&(inlet_step!=prevstep)){
	TnoteonA=1;}
else TnoteonA=0;

//voiceB*****************************************
//note
if ((inlet_step != prevstep )&&(noteB > 0) ) { 
     holdnoteB = noteB>>20;
     TnoteB = holdnoteB;
}
else {
	TnoteB = holdnoteB;
}

//vel
if ((inlet_step != prevstep )&&(noteonB> 0 )) { 
     holdvelB = noteonB>>20;
     TvelB = holdvelB;
}
else {
	TvelB = holdvelB;
}


if ((noteoffB>0)&&(inlet_stepunQ!=prevstepunQ)){
	TnoteoffB=1;}
else TnoteoffB=0;

if ((noteonB>0)&&(inlet_step!=prevstep)){
	TnoteonB=1;}
else TnoteonB=0;


if ((TnoteonA>0) && !TntrigA) {
if ((TlastnoteB>0)&&TntrigB){	
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_OFF + (inlet_channel),TlastnoteB,__USAT(TvelB,7)); TntrigB=0;
}
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (inlet_channel),TnoteA,TvelA);  TntrigA=1;
TlastnoteA = TnoteA;
}
if ((TnoteoffA>0) && TntrigA) {MidiSend3((midi_device_t) attr_device, MIDI_NOTE_OFF + (inlet_channel),TlastnoteA,__USAT(TvelA,7)); TntrigA=0;}

if ((TnoteonB>0) && !TntrigB) {
if ((TlastnoteA>0)&&TntrigA){
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_OFF + (inlet_channel),TlastnoteA,__USAT(TvelA,7)); TntrigA=0;
}
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (inlet_channel),TnoteB,TvelB);  TntrigB=1;
TlastnoteB = TnoteB;
}
if ((TnoteoffB>0) && TntrigB) {MidiSend3((midi_device_t) attr_device, MIDI_NOTE_OFF + (inlet_channel),TlastnoteB,__USAT(TvelB,7)); TntrigB=0;}




offtrig=0;
}
prevoffset=inlet_offset;
prevstep=inlet_step;
prevstepunQ=inlet_stepunQ;
outlet_totaloffset=inlet_offset+voiceoffset+voiceoffset;]]></code.krate>
      </object>
   </patchobj>
   <obj type="logic/counter" uuid="7a141ba82230e54e5f5cd12da5dbe5a74ba854a5" name="counter_19" x="2016" y="854">
      <params>
         <int32 name="maximum" value="16"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="afa02137-c079-427d-b279-0e2aef165ccd" name="note_1" x="2114" y="896">
      <params/>
      <attribs>
         <spinner attributeName="note" value="0"/>
         <spinner attributeName="channel" value="5"/>
      </attribs>
      <object id="patch/object" uuid="afa02137-c079-427d-b279-0e2aef165ccd">
         <sDescription>Monophonic MIDI keyboard note input, gate, velocity and release velocity</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>midi_in.axh</helpPatch>
         <inlets/>
         <outlets>
            <bool32 name="gate" description="key pressed?"/>
            <bool32 name="gate2"/>
            <bool32 name="gate3"/>
            <bool32 name="gate4"/>
            <bool32 name="gate5"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <spinner name="note" MinValue="0" MaxValue="127" DefaultValue="64"/>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="0"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[uint8_t _gate;
uint8_t _gate2;
uint8_t _gate3;
uint8_t _gate4;
uint8_t _gate5;]]></code.declaration>
         <code.init><![CDATA[_gate = 0;]]></code.init>
         <code.krate><![CDATA[outlet_gate= _gate<<27;
outlet_gate2= _gate2<<27;
outlet_gate3= _gate3<<27;
outlet_gate4= _gate4<<27;
outlet_gate5= _gate5<<27;]]></code.krate>
         <code.midihandler><![CDATA[if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2)) {if (data1 == attr_note) {
   _gate = 1;
}
} else if (((status == MIDI_NOTE_ON + (attr_channel-1)) && (!data2))||          (status == MIDI_NOTE_OFF + (attr_channel-1))) {
  if (data1 == attr_note) {
    _gate = 0;
  }}

if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2)) {if (data1 == (attr_note+1)) {
   _gate2 = 1;
}
} else if (((status == MIDI_NOTE_ON + (attr_channel-1)) && (!data2))||          (status == MIDI_NOTE_OFF + (attr_channel-1))) {
  if (data1 == (attr_note+1)) {
    _gate2 = 0;
  }}

if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2)) {if (data1 == (attr_note+2)) {
   _gate3 = 1;
}
} else if (((status == MIDI_NOTE_ON + (attr_channel-1)) && (!data2))||          (status == MIDI_NOTE_OFF + (attr_channel-1))) {
  if (data1 == (attr_note+2)) {
    _gate3 = 0;
  }}

if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2)) {if (data1 == (attr_note+3)) {
   _gate4 = 1;
}
} else if (((status == MIDI_NOTE_ON + (attr_channel-1)) && (!data2))||          (status == MIDI_NOTE_OFF + (attr_channel-1))) {
  if (data1 == (attr_note+3)) {
    _gate4 = 0;
  }}

if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2)) {if (data1 == (attr_note+4)) {
   _gate5 = 1;
}
} else if (((status == MIDI_NOTE_ON + (attr_channel-1)) && (!data2))||          (status == MIDI_NOTE_OFF + (attr_channel-1))) {
  if (data1 == (attr_note+4)) {
    _gate5 = 0;
  }}]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="bd621061-a17a-41ce-9f2e-1c091f52b330" name="right_1" x="2422" y="896">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="bd621061-a17a-41ce-9f2e-1c091f52b330">
         <sDescription>outputs the state of the right-row buttons of a &apos;novation launchpad&apos;.
DOES NOT work with the &apos;LP mark 1&apos;.</sDescription>
         <author>robert schirmer</author>
         <license>BSD</license>
         <helpPatch>launchpad.axh</helpPatch>
         <inlets/>
         <outlets>
            <bool32 name="r0"/>
            <bool32 name="r1"/>
            <bool32 name="r2"/>
            <bool32 name="r3"/>
            <bool32 name="r4"/>
            <bool32 name="r5"/>
            <bool32 name="r6"/>
            <bool32 name="r7"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[bool gate [128];]]></code.declaration>
         <code.krate><![CDATA[outlet_r0 = gate[8];
outlet_r1 = gate[24];
outlet_r2 = gate[40];
outlet_r3 = gate[56];

outlet_r4 = gate[72];
outlet_r5 = gate[88];
outlet_r6 = gate[104];
outlet_r7 = gate[120];]]></code.krate>
         <code.midihandler><![CDATA[if ((status == MIDI_NOTE_ON + 0) && (data2)) gate [data1] = 1;
if (((status == MIDI_NOTE_ON + 0) && (!data2))||(status == MIDI_NOTE_OFF + 0)) gate [data1] = 0;]]></code.midihandler>
      </object>
   </patchobj>
   <obj type="logic/or 2" uuid="3805d3c84d30032a44fbdbe42d9a2988a1790a3e" name="or_4" x="2562" y="896">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/or 2" uuid="3805d3c84d30032a44fbdbe42d9a2988a1790a3e" name="or_5" x="2674" y="896">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/toggle" uuid="f42f0d3aab552c17bc78b9e65f85dc24f977503d" name="toggle_4" x="2744" y="896">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/or 2" uuid="3805d3c84d30032a44fbdbe42d9a2988a1790a3e" name="or_6" x="3024" y="896">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/flipflop" uuid="f9b15363f5ee203152e062c08a8846f0074b0ea5" name="flipflop_10" x="2520" y="980">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/and 2" uuid="c67031682f552aa0a80b23377495c51ea28a8c9c" name="and_20" x="2618" y="980">
      <params/>
      <attribs/>
   </obj>
   <obj type="phi/logic/or 4" uuid="5dc5a7c1fb7809522171638f755fead71cbe14ea" name="or_8" x="2702" y="980">
      <params/>
      <attribs/>
   </obj>
   <obj type="djrm/logic/counter2_init_start" uuid="d5936f238ab92e53ac93d5927c3b43ceef998dc1" name="counter2_init_start_2" x="2772" y="980">
      <params>
         <int32 name="maximum" value="3"/>
         <int32 name="init" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="logic/and 2" uuid="c67031682f552aa0a80b23377495c51ea28a8c9c" name="and_1" x="2940" y="980">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/flipflop" uuid="f9b15363f5ee203152e062c08a8846f0074b0ea5" name="flipflop_9" x="3024" y="980">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/flipflop" uuid="f9b15363f5ee203152e062c08a8846f0074b0ea5" name="flipflop_11" x="3122" y="980">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/and 2" uuid="c67031682f552aa0a80b23377495c51ea28a8c9c" name="and_21" x="3276" y="980">
      <params/>
      <attribs/>
   </obj>
   <obj type="phi/logic/or 4" uuid="5dc5a7c1fb7809522171638f755fead71cbe14ea" name="or_7" x="3444" y="980">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="a919ffab-f138-4bb2-9193-1455073b35ac" name="tablestore_13" x="1148" y="994">
      <params/>
      <attribs>
         <objref attributeName="table" obj="lcxl2"/>
         <spinner attributeName="seqlength" value="64"/>
      </attribs>
      <object id="patch/object" uuid="a919ffab-f138-4bb2-9193-1455073b35ac">
         <sDescription>writes and outputs 8 values to a table.</sDescription>
         <author>robert schirmer</author>
         <license>who cares</license>
         <inlets>
            <int32 name="channel"/>
            <bool32 name="rec"/>
            <int32 name="offset" description="sets an offset for writing to the table"/>
            <int32 name="stepunQ"/>
         </inlets>
         <outlets>
            <int32 name="offset"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <objref name="table"/>
            <spinner name="seqlength" MinValue="1" MaxValue="10000" DefaultValue="0"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[uint32_t i;
uint32_t ii;
int32_t _bend;
int32_t Btrig;
int32_t _press;
int channel;
int cc;
int ccv;
int innote;
int invel;
int inputnote;
int inputvel;
int inputnoteon;
int inputnoteoff;
int ingate;
int ingate2;
int inntrig;
int inytrig;
int op;
int Atrig;
int notecount;
int seqlength;
int seqlengthUNQ;
int splat;
int clear;
int ntrig;
int rtrig;
int speed;
int off1;
int recoffset1g;
int voiceoffset;
int offset;
int offset1;
int totaloffset;
int offsetg;
int offset1g;
int early;
int offsetunQ1;
int offsetunQ1g;
int noteon;
int noteoff;
int ytrig;
int xtrig;
int prevsteprec;
int prevstep;
int prevstepunQ;
int prevx;
int prevy;]]></code.declaration>
         <code.init><![CDATA[seqlengthUNQ=(attr_seqlength*32);
seqlength=attr_seqlength;
_bend=0;
_press=0;]]></code.init>
         <code.krate><![CDATA[off1= !inlet_rec;
channel=inlet_channel;
offset=inlet_offset;

//1
if (!off1){
	if(inlet_stepunQ!=prevstepunQ){
	attr_table.array[offset + inlet_stepunQ]=__SSAT(_bend,28)>>attr_table.GAIN;
	attr_table.array[offset + inlet_stepunQ + seqlengthUNQ]=__SSAT(_press,28)>>attr_table.GAIN;
	attr_table.array[offset + inlet_stepunQ + seqlengthUNQ + seqlengthUNQ]=__SSAT(cc,28)>>attr_table.GAIN;
	attr_table.array[offset + inlet_stepunQ + seqlengthUNQ + seqlengthUNQ + seqlengthUNQ]=__SSAT(ccv,28)>>attr_table.GAIN;
	prevstepunQ=inlet_stepunQ;
	}
}


else if (off1)
{
	_bend=0;
	_press=0;
	cc=0;
	ccv=0;
}

outlet_offset=inlet_offset+seqlengthUNQ+seqlengthUNQ+seqlengthUNQ+seqlengthUNQ;]]></code.krate>
         <code.midihandler><![CDATA[if (status == MIDI_PITCH_BEND + (channel)) {  _bend = ((int)((data2<<7)+data1)-0x2000)<<14;
}
if (status == MIDI_CHANNEL_PRESSURE + (channel)) {  _press = (data1)<<20;
}
if (status == (channel) + MIDI_CONTROL_CHANGE) {
  ccv = data2<<20;
  cc = data1<<20;
}]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="a919ffab-f138-4bb2-9193-1455073b35ac" name="tablestore_14" x="1288" y="994">
      <params/>
      <attribs>
         <objref attributeName="table" obj="lcxl2"/>
         <spinner attributeName="seqlength" value="64"/>
         <combo attributeName="device" selection="internal port 1"/>
      </attribs>
      <object id="patch/object" uuid="a919ffab-f138-4bb2-9193-1455073b35ac">
         <sDescription>writes and outputs 8 values to a table.</sDescription>
         <author>robert schirmer</author>
         <license>who cares</license>
         <inlets>
            <int32 name="channel"/>
            <bool32 name="play"/>
            <int32 name="offset" description="sets an offset for writing to the table"/>
            <int32 name="stepunQ"/>
         </inlets>
         <outlets>
            <int32 name="totaloffset"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <objref name="table"/>
            <spinner name="seqlength" MinValue="1" MaxValue="10000" DefaultValue="0"/>
            <combo name="device">
               <MenuEntries>
                  <string>din</string>
                  <string>usb host port 1</string>
                  <string>usb host port 2</string>
                  <string>usb host port 3</string>
                  <string>usb host port 4</string>
                  <string>internal port 1</string>
                  <string>internal port 2</string>
                  <string>usb device port 1</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_DIN, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 2</string>
                  <string>MIDI_DEVICE_USB_HOST, 3</string>
                  <string>MIDI_DEVICE_USB_HOST, 4</string>
                  <string>MIDI_DEVICE_INTERNAL, 1</string>
                  <string>MIDI_DEVICE_INTERNAL, 2</string>
                  <string>MIDI_DEVICE_USB_DEVICE, 1</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int prevchannel;
int steptrigger;
int seqlength;
int seqlengthUNQ;
int off1;
int offtrig;
int offsetunQ1;
int bend;
int bendA;
int bendB;
int touch;
int cc;
int ccv;
int prevbend;
int prevbendB;
int prevtouch;
int prevcc;
int prevccv;
int prevoffset;
int prevstepunQ;]]></code.declaration>
         <code.init><![CDATA[seqlengthUNQ=(attr_seqlength*32);
seqlength=attr_seqlength;
bendB=64;
bendA=0;
bend=0;
prevbendB=64;]]></code.init>
         <code.krate><![CDATA[off1= inlet_play;
if (inlet_channel!=prevchannel){
	if (prevbendB!=64){
	MidiSend3((midi_device_t) attr_device , MIDI_PITCH_BEND + (inlet_channel),0,64);prevbendB=64;
	}
	if (touch>0){
	MidiSend2((midi_device_t) attr_device, MIDI_CHANNEL_PRESSURE + (inlet_channel),0>>20);
	}
	prevchannel=inlet_channel;
}


offsetunQ1=(inlet_offset + inlet_stepunQ);

if (inlet_offset!=prevoffset){
	if (prevbendB!=64){
MidiSend3((midi_device_t) attr_device , MIDI_PITCH_BEND + (inlet_channel),0,64);prevbendB=64;
}
if (touch>0){
MidiSend2((midi_device_t) attr_device, MIDI_CHANNEL_PRESSURE + (inlet_channel),0>>20);
}
prevoffset=inlet_offset;
}

if (!off1){

if (offtrig==0){
//TnoteoffA=1;
//TnoteoffB=1;
if (prevbendB!=64){
MidiSend3((midi_device_t) attr_device , MIDI_PITCH_BEND + (inlet_channel),0,64);prevbendB=64;
}
if (touch>0){
MidiSend2((midi_device_t) attr_device, MIDI_CHANNEL_PRESSURE + (inlet_channel),0>>20);
}
offtrig=1;
}
bendB=64;
bendA=0;
bend=0;
touch=0;
}





else if (off1)
{
	if ((inlet_stepunQ==0)&&!steptrigger){
	if (prevbendB!=64){
		
	MidiSend3((midi_device_t) attr_device , MIDI_PITCH_BEND + (inlet_channel),0,64);prevbendB=64;}
	if (touch>0){
	MidiSend2((midi_device_t) attr_device, MIDI_CHANNEL_PRESSURE + (inlet_channel),0>>20);touch=0;}
	steptrigger=1;
}
if (inlet_stepunQ>0){
	steptrigger=0;
}
bend=attr_table.array[__USAT((offsetunQ1),attr_table.LENGTHPOW)]<<attr_table.GAIN;
bendA=(bend>>14)&0x7F;
bendB=(bend>>21)+64;
touch=attr_table.array[__USAT((offsetunQ1+ seqlengthUNQ),attr_table.LENGTHPOW)]<<attr_table.GAIN;
cc=attr_table.array[__USAT((offsetunQ1+ seqlengthUNQ+ seqlengthUNQ),attr_table.LENGTHPOW)]<<attr_table.GAIN;
ccv=attr_table.array[__USAT((offsetunQ1+ seqlengthUNQ+ seqlengthUNQ+ seqlengthUNQ),attr_table.LENGTHPOW)]<<attr_table.GAIN;

//pitchbend
if ((inlet_stepunQ!=prevstepunQ)&&(bendB!=prevbendB)){
MidiSend3((midi_device_t) attr_device , MIDI_PITCH_BEND + (inlet_channel),bendA,bendB);
prevbend=bend;
prevbendB=bendB;
}
//aftertouch
if ((touch!=prevtouch)&&(inlet_stepunQ!=prevstepunQ)){
MidiSend2((midi_device_t) attr_device, MIDI_CHANNEL_PRESSURE + (inlet_channel),touch>>20);
prevtouch=touch;
}
if (((ccv!=prevccv)||(cc!=prevcc))&&(inlet_stepunQ!=prevstepunQ)){
	MidiSend3((midi_device_t) attr_device, MIDI_CONTROL_CHANGE + (inlet_channel),(cc>>20),__USAT(ccv>>20,7));
	prevcc=cc;
	prevccv=ccv;
}

}

prevstepunQ=inlet_stepunQ;
outlet_totaloffset=inlet_offset+seqlengthUNQ+seqlengthUNQ+seqlengthUNQ+seqlengthUNQ;]]></code.krate>
      </object>
   </patchobj>
   <obj type="logic/counter" uuid="7a141ba82230e54e5f5cd12da5dbe5a74ba854a5" name="counter_1" x="196" y="1078">
      <params>
         <int32 name="maximum" value="4"/>
      </params>
      <attribs/>
   </obj>
   <obj type="logic/counter" uuid="7a141ba82230e54e5f5cd12da5dbe5a74ba854a5" name="counter_3" x="364" y="1078">
      <params>
         <int32 name="maximum" value="4"/>
      </params>
      <attribs/>
   </obj>
   <obj type="timer/delayedpulse" uuid="3f05ee534ca67755fb20c7437f9e4de3d4c2f73d" name="delayedpulse_2" x="518" y="1078">
      <params>
         <frac32.s.map name="delay" value="-29.0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="3108" y="1078" text="faders"/>
   <comment type="patch/comment" x="3276" y="1078" text="row 3"/>
   <comment type="patch/comment" x="3416" y="1078" text="row2"/>
   <comment type="patch/comment" x="3570" y="1078" text="row1"/>
   <patchobj type="patch/object" uuid="09b6a84b-168f-4096-89c1-21fa9b144e17" name="table_1" x="2954" y="1092">
      <params>
         <int32 name="offset" value="0"/>
         <bool32.tgl name="active" value="1"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="lcxl3"/>
         <spinner attributeName="startcc" value="0"/>
         <spinner attributeName="length" value="127"/>
         <spinner attributeName="channel" value="13"/>
      </attribs>
      <object id="patch/object" uuid="09b6a84b-168f-4096-89c1-21fa9b144e17">
         <sDescription>writes midi controler data to a table.set the start of the range of the controlers to read out with &apos;startcc&apos;,the length of the range with &apos;length&apos;.
the data is written to the table starting at &apos;offset&apos;.</sDescription>
         <author>robert schirmer</author>
         <license>BSD</license>
         <helpPatch>launchpad.axh</helpPatch>
         <rotatedParams>true</rotatedParams>
         <inlets>
            <int32 name="offset"/>
            <int32 name="startcc"/>
            <bool32.risingfalling name="active"/>
         </inlets>
         <outlets>
            <bool32.pulse name="chtrig" description="pulse if any cc value changes"/>
            <int32 name="index" description="index written to"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="offset">
               <MinValue i="0"/>
               <MaxValue i="1000000"/>
            </int32>
            <bool32.tgl name="active"/>
         </params>
         <attribs>
            <objref name="table"/>
            <spinner name="startcc" MinValue="0" MaxValue="127" DefaultValue="0"/>
            <spinner name="length" MinValue="1" MaxValue="128" DefaultValue="1"/>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="1"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int8_t cc;
int32_t cv;
int32_t cBv;
int32_t prevcv;

uint32_t offset;
uint8_t prevcc;

uint8_t end;
uint8_t start;

bool chtrig;]]></code.declaration>
         <code.init><![CDATA[prevcv=  0;
prevcc = 0;
chtrig = 0;
cv=0;
cBv=0;]]></code.init>
         <code.krate><![CDATA[start = attr_startcc + inlet_startcc;
end = start + attr_length;
offset = (inlet_offset + param_offset);
if (cv==127){cBv=(0x07FFFFFF);}
else if (cv<127){cBv=cv << 20;}	

if (((cc >= start) && (cc < end)) && (inlet_active || param_active)) {

if ((cv != prevcv)||(cc != prevcc)){
	outlet_index = (cc - start)+ offset;
      attr_table.array[(cc - start) + offset]= ((cBv) >>attr_table.GAIN);
      prevcv = cv; 
      prevcc = cc;
      chtrig = 1;   
   }  

   outlet_chtrig = chtrig;
  chtrig = 0;
}]]></code.krate>
         <code.midihandler><![CDATA[if (status == (attr_channel-1) + MIDI_CONTROL_CHANGE) {cc = data1;cv = data2;}]]></code.midihandler>
      </object>
   </patchobj>
   <comment type="patch/comment" x="2996" y="1092" text="cplay"/>
   <obj type="rbrt/data/tableread 8" uuid="e91f7d4e-591f-49b4-8277-241cf4661605" name="tableread_1" x="3108" y="1092">
      <params>
         <int32 name="offset" value="77"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="lcxl3"/>
      </attribs>
   </obj>
   <obj type="rbrt/data/tableread 8" uuid="e91f7d4e-591f-49b4-8277-241cf4661605" name="tableread_2" x="3262" y="1092">
      <params>
         <int32 name="offset" value="49"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="lcxl3"/>
      </attribs>
   </obj>
   <obj type="rbrt/data/tableread 8" uuid="e91f7d4e-591f-49b4-8277-241cf4661605" name="tableread_3" x="3402" y="1092">
      <params>
         <int32 name="offset" value="29"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="lcxl3"/>
      </attribs>
   </obj>
   <obj type="rbrt/data/tableread 8" uuid="e91f7d4e-591f-49b4-8277-241cf4661605" name="tableread_4" x="3570" y="1092">
      <params>
         <int32 name="offset" value="13"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="lcxl3"/>
      </attribs>
   </obj>
   <obj type="sss/math/8x smooth" uuid="25534188-95f4-4c0a-8bc0-08b96998bf2e" name="8x_1" x="3766" y="1092">
      <params>
         <frac32.u.map name="time" value="12.0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="4256" y="1106" text="1 play release"/>
   <comment type="patch/comment" x="4396" y="1106" text="2 play release"/>
   <comment type="patch/comment" x="4578" y="1106" text="1filter env depth"/>
   <obj type="conv/unipolar2bipolar" uuid="efc8ee28c508740c5edf7995eaaa07a6d6818e5e" name="unipolar2bipolar_15" x="4256" y="1120">
      <params/>
      <attribs/>
   </obj>
   <obj type="conv/unipolar2bipolar" uuid="efc8ee28c508740c5edf7995eaaa07a6d6818e5e" name="unipolar2bipolar_11" x="4396" y="1120">
      <params/>
      <attribs/>
   </obj>
   <obj type="conv/unipolar2bipolar" uuid="efc8ee28c508740c5edf7995eaaa07a6d6818e5e" name="unipolar2bipolar_21" x="4578" y="1120">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="362bba45-b602-47d1-98e6-6f45444272e6" name="==_2" x="294" y="1134">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="362bba45-b602-47d1-98e6-6f45444272e6">
         <sDescription>equal</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>math.axh</helpPatch>
         <inlets>
            <int32 name="in1" description="in1"/>
         </inlets>
         <outlets>
            <bool32 name="out" description="out"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out= inlet_in1==0;]]></code.krate>
      </object>
   </patchobj>
   <obj type="logic/or 2" uuid="3805d3c84d30032a44fbdbe42d9a2988a1790a3e" name="or_1" x="392" y="1148">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="ee21d310-2236-42da-8354-a4bf71b16726" name="pulselength_1" x="462" y="1148">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="ee21d310-2236-42da-8354-a4bf71b16726">
         <sDescription>Generates a single pulse after a rising edge on trigger input. A new trigger before the pulse finishes at the output, extends the pulse.</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>pulselength.axh</helpPatch>
         <inlets>
            <bool32.rising name="trig" description="trigger"/>
         </inlets>
         <outlets>
            <bool32 name="pulse" description="pulse output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t val;
int ntrig;
]]></code.declaration>
         <code.init><![CDATA[val = 0;
ntrig = 0;
]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig > 0) && !ntrig) {
  val = 1 << 30;
  ntrig = 1;
  outlet_pulse = 1;
}
else {
  if (!(inlet_trig > 0))
    ntrig = 0;
  if (val>0) {
    int32_t t;
    MTOF(-0xFEA00000,t);
     val -= t>>3;
     if (val<=0) outlet_pulse = 0;
     else outlet_pulse = 1;
  } else outlet_pulse = 0;
}]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="4256" y="1162" text="1 playattck"/>
   <comment type="patch/comment" x="4396" y="1162" text="2 play attack"/>
   <comment type="patch/comment" x="4578" y="1162" text="2 filter env depth"/>
   <obj type="conv/unipolar2bipolar" uuid="efc8ee28c508740c5edf7995eaaa07a6d6818e5e" name="unipolar2bipolar_6" x="4256" y="1176">
      <params/>
      <attribs/>
   </obj>
   <obj type="conv/unipolar2bipolar" uuid="efc8ee28c508740c5edf7995eaaa07a6d6818e5e" name="unipolar2bipolar_7" x="4396" y="1176">
      <params/>
      <attribs/>
   </obj>
   <obj type="conv/unipolar2bipolar" uuid="efc8ee28c508740c5edf7995eaaa07a6d6818e5e" name="unipolar2bipolar_19" x="4578" y="1176">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="196" y="1190" text="clock"/>
   <obj type="logic/or 2" uuid="3805d3c84d30032a44fbdbe42d9a2988a1790a3e" name="or_9" x="196" y="1204">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/counter" uuid="7a141ba82230e54e5f5cd12da5dbe5a74ba854a5" name="counter_4" x="280" y="1204">
      <params>
         <int32 name="maximum" value="2"/>
      </params>
      <attribs/>
   </obj>
   <obj type="logic/flipflop toggle" uuid="195e489e5fc3d275944b0de56c7a91c8641ea22a" name="flipflop_3" x="392" y="1204">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/==" uuid="deaf0d36642c57876c4101e86f8a0b6a06021ab2" name="==_1" x="84" y="1274">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/and 2" uuid="c67031682f552aa0a80b23377495c51ea28a8c9c" name="and_5" x="168" y="1274">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="6e6f8527-d9fd-4702-ab54-0f201a36da67" name="b_3" x="252" y="1274">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="6e6f8527-d9fd-4702-ab54-0f201a36da67">
         <sDescription>Generates a single pulse after a rising edge on trigger input. A new trigger before the pulse finishes at the output, extends the pulse.</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>pulselength.axh</helpPatch>
         <inlets>
            <bool32.rising name="trig" description="trigger"/>
         </inlets>
         <outlets>
            <bool32 name="pulse" description="pulse output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int ntrig;]]></code.declaration>
         <code.init><![CDATA[ntrig = 0;]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig > 0) && !ntrig) {
  ntrig = 1;
  outlet_pulse = 1;
}
else outlet_pulse=0;
if (!(inlet_trig > 0))
{
    ntrig = 0;
  }]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="3794" y="1274" text="1 mod env depth"/>
   <comment type="patch/comment" x="3934" y="1274" text="1 mod env attack"/>
   <comment type="patch/comment" x="4088" y="1274" text="2 mod env attack"/>
   <comment type="patch/comment" x="4228" y="1274" text="2 mod env depth"/>
   <comment type="patch/comment" x="4382" y="1274" text="fact1 filter cut"/>
   <comment type="patch/comment" x="4522" y="1274" text="fact2 filter cut"/>
   <comment type="patch/comment" x="4648" y="1274" text="fact1 rate"/>
   <comment type="patch/comment" x="4774" y="1274" text="fact2 rate"/>
   <obj type="conv/unipolar2bipolar" uuid="efc8ee28c508740c5edf7995eaaa07a6d6818e5e" name="unipolar2bipolar_20" x="3794" y="1288">
      <params/>
      <attribs/>
   </obj>
   <obj type="conv/unipolar2bipolar" uuid="efc8ee28c508740c5edf7995eaaa07a6d6818e5e" name="unipolar2bipolar_16" x="3934" y="1288">
      <params/>
      <attribs/>
   </obj>
   <obj type="conv/unipolar2bipolar" uuid="efc8ee28c508740c5edf7995eaaa07a6d6818e5e" name="unipolar2bipolar_17" x="4088" y="1288">
      <params/>
      <attribs/>
   </obj>
   <obj type="conv/unipolar2bipolar" uuid="efc8ee28c508740c5edf7995eaaa07a6d6818e5e" name="unipolar2bipolar_22" x="4228" y="1288">
      <params/>
      <attribs/>
   </obj>
   <obj type="conv/unipolar2bipolar" uuid="efc8ee28c508740c5edf7995eaaa07a6d6818e5e" name="unipolar2bipolar_23" x="4368" y="1288">
      <params/>
      <attribs/>
   </obj>
   <obj type="conv/unipolar2bipolar" uuid="efc8ee28c508740c5edf7995eaaa07a6d6818e5e" name="unipolar2bipolar_24" x="4508" y="1288">
      <params/>
      <attribs/>
   </obj>
   <obj type="conv/unipolar2bipolar" uuid="efc8ee28c508740c5edf7995eaaa07a6d6818e5e" name="unipolar2bipolar_12" x="4648" y="1288">
      <params/>
      <attribs/>
   </obj>
   <obj type="conv/unipolar2bipolar" uuid="efc8ee28c508740c5edf7995eaaa07a6d6818e5e" name="unipolar2bipolar_8" x="4774" y="1288">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="196" y="1330" text="track 3 lights"/>
   <comment type="patch/comment" x="546" y="1330" text="track 3 lights"/>
   <patchobj type="patch/object" uuid="410c588c-3f3a-406a-b965-e9f359a10624" name="launch_1" x="154" y="1344">
      <params>
         <int32 name="offset" value="0"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="lcxl2"/>
         <combo attributeName="device" selection="usb host port / LP"/>
         <combo attributeName="coloron" selection="green W"/>
         <combo attributeName="coloroff" selection="off"/>
         <spinner attributeName="channel" value="1"/>
         <spinner attributeName="column" value="0"/>
      </attribs>
      <object id="patch/object" uuid="410c588c-3f3a-406a-b965-e9f359a10624">
         <sDescription>visual feedback of table data for midi controllers</sDescription>
         <author>Robert Schirmer</author>
         <license>BSD</license>
         <helpPatch>launchpad.axh</helpPatch>
         <rotatedParams>true</rotatedParams>
         <inlets>
            <int32 name="offset" description="offset in the table to read from"/>
            <bool32.rising name="redraw"/>
         </inlets>
         <outlets>
            <int32 name="offset" description="offset through"/>
            <int32 name="start" description="start through"/>
            <int32 name="coloron"/>
            <int32 name="coloroff"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="offset">
               <MinValue i="0"/>
               <MaxValue i="10000000"/>
            </int32>
         </params>
         <attribs>
            <objref name="table" description="name of the table to display"/>
            <combo name="device">
               <MenuEntries>
                  <string>usb host port / LP</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_USB_HOST, 9</string>
               </CEntries>
            </combo>
            <combo name="coloron">
               <MenuEntries>
                  <string>off</string>
                  <string>red W</string>
                  <string>red M</string>
                  <string>red S</string>
                  <string>orange W</string>
                  <string>orange S</string>
                  <string>green W</string>
                  <string>green M</string>
                  <string>green S</string>
                  <string>lime 1 W</string>
                  <string>lime 1 S</string>
                  <string>lime 2</string>
                  <string>yellow W</string>
                  <string>yellow M</string>
                  <string>yellow S</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>18</string>
                  <string>35</string>
                  <string>16</string>
                  <string>32</string>
                  <string>48</string>
                  <string>33</string>
                  <string>50</string>
                  <string>49</string>
                  <string>17</string>
                  <string>34</string>
                  <string>51</string>
               </CEntries>
            </combo>
            <combo name="coloroff">
               <MenuEntries>
                  <string>off</string>
                  <string>red W</string>
                  <string>red M</string>
                  <string>red S</string>
                  <string>orange W</string>
                  <string>orange S</string>
                  <string>green W</string>
                  <string>green M</string>
                  <string>green S</string>
                  <string>lime 1 W</string>
                  <string>lime 1 S</string>
                  <string>lime 2</string>
                  <string>yellow W</string>
                  <string>yellow M</string>
                  <string>yellow S</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>18</string>
                  <string>35</string>
                  <string>16</string>
                  <string>32</string>
                  <string>48</string>
                  <string>33</string>
                  <string>50</string>
                  <string>49</string>
                  <string>17</string>
                  <string>34</string>
                  <string>51</string>
               </CEntries>
            </combo>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="9"/>
            <spinner name="column" MinValue="0" MaxValue="7" DefaultValue="0"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
int rtrig;
uint8_t map[127];
int i;
int vt;
int trigt;
int prevt[64];
int plength;


uint32_t offset;]]></code.declaration>
         <code.init><![CDATA[{ 
  int i;
  for(i=0;i<7;i++) prevt[i]= -666 ;}

  { 
  int i;
  for(i=0;i<8;i++) 

  map[0] = 0;
map[1] = 16;
map[2] = 32;
map[3] = 48;
map[4] = 64;
map[5] = 80;
map[6] = 96;
//map[7] = 112;
}]]></code.init>
         <code.krate><![CDATA[//coloron = inlet_coloron + attr_coloron;


offset = param_offset + inlet_offset;


//redraw
if (inlet_redraw > 0)
  { 
  int ii;
  for(ii=0;ii<8;ii++) prevt[ii]= -666 ;}
  
  { 
  int ii;
  for(ii=0;ii<7;ii++) 

  map[0] = 0+attr_column;
map[1] = 16+attr_column;
map[2] = 32+attr_column;
map[3] = 48+attr_column;
map[4] = 64+attr_column;
map[5] = 80+attr_column;
map[6] = 96+attr_column;
//map[7] = 112+attr_column;
}




    
//display steps

{ 
  i += 1;
  if (i == (7)) i = 0; 
  vt = attr_table.array[__USAT((offset + (i)),attr_table.LENGTHPOW)]<<attr_table.GAIN;
if (prevt[i] != vt ) trigt = 0;
prevt[i] = vt;
if (vt && (!trigt)) {
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (attr_channel-1)   ,map[(i)],(attr_coloron));  trigt=1;
}
if ((!vt) && (!trigt)){
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (attr_channel-1)  ,map[(i)],(attr_coloroff));  trigt=1;
}
 }




outlet_coloron = attr_coloron;
outlet_coloroff = attr_coloroff;
outlet_offset = offset;]]></code.krate>
      </object>
   </patchobj>
   <obj type="logic/flipflop" uuid="f9b15363f5ee203152e062c08a8846f0074b0ea5" name="flipflop_5" x="406" y="1344">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="b40a4170-891d-4fc1-a6a6-b93c8206156a" name="launch_5" x="504" y="1344">
      <params/>
      <attribs>
         <objref attributeName="table" obj="lcxl2"/>
         <combo attributeName="device" selection="usb host port / LP"/>
         <combo attributeName="color" selection="green S"/>
         <spinner attributeName="channel" value="1"/>
         <spinner attributeName="column" value="0"/>
      </attribs>
      <object id="patch/object" uuid="b40a4170-891d-4fc1-a6a6-b93c8206156a">
         <sDescription>display a step counter on a midi controller</sDescription>
         <author>Robert Schirmer</author>
         <license>BSD</license>
         <helpPatch>launchpad.axh</helpPatch>
         <rotatedParams>true</rotatedParams>
         <inlets>
            <int32 name="offset" description="offset in the table to read from"/>
            <int32 name="barcount"/>
            <int32 name="start" description="display start on the LP"/>
            <bool32 name="clear"/>
            <bool32 name="wait"/>
            <bool32 name="rec"/>
            <bool32 name="play"/>
            <bool32 name="stop"/>
            <int32 name="coloron" description="color on"/>
            <int32 name="coloroff" description="color off"/>
            <int32 name="color" description="step color modulation"/>
            <int32 name="step" description="current step"/>
            <bool32 name="active" description="active??"/>
            <bool32.rising name="redraw"/>
            <bool32 name="trigger"/>
         </inlets>
         <outlets/>
         <displays/>
         <params/>
         <attribs>
            <objref name="table" description="table to display"/>
            <combo name="device">
               <MenuEntries>
                  <string>usb host port / LP</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_USB_HOST, 1</string>
               </CEntries>
            </combo>
            <combo name="color">
               <MenuEntries>
                  <string>off</string>
                  <string>red W</string>
                  <string>red M</string>
                  <string>red S</string>
                  <string>orange W</string>
                  <string>orange S</string>
                  <string>green W</string>
                  <string>green M</string>
                  <string>green S</string>
                  <string>lime 1 W</string>
                  <string>lime 1 S</string>
                  <string>lime 2</string>
                  <string>yellow W</string>
                  <string>yellow M</string>
                  <string>yellow S</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>18</string>
                  <string>35</string>
                  <string>16</string>
                  <string>32</string>
                  <string>48</string>
                  <string>33</string>
                  <string>50</string>
                  <string>49</string>
                  <string>17</string>
                  <string>34</string>
                  <string>51</string>
               </CEntries>
            </combo>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="9"/>
            <spinner name="column" MinValue="0" MaxValue="7" DefaultValue="0"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int color;
int strig;
int prevcolor;
int stoptrig;
int ntrig;
int rtrig;
int full;
int prev;
int32_t map[126];
int32_t v;]]></code.declaration>
         <code.init><![CDATA[{ 
  int i;
  for(i=0;i<8;i++) 

  map[0] = 0+attr_column;
map[1] = 16+attr_column;
map[2] = 32+attr_column;
map[3] = 48+attr_column;
map[4] = 64+attr_column;
map[5] = 80+attr_column;
map[6] = 96+attr_column;
map[7] = 112+attr_column;

}
strig=1;]]></code.init>
         <code.krate><![CDATA[if (inlet_wait){color=17;}
if (inlet_barcount==0){
	if (inlet_rec){color=1;}}
else if(inlet_barcount>0){
	if ((inlet_rec)&&(!inlet_wait)){color=1;}	
}
if ((inlet_play)&&(!inlet_wait)) {
	if((inlet_trigger>0)&&(!inlet_clear)){
	color=attr_color;}
	if((inlet_trigger>0)&&(inlet_clear)){
	color=3;}
	else if (!(inlet_trigger>0)){
	color=inlet_coloron;}
}

full = attr_table.array[__USAT((inlet_offset + inlet_step),attr_table.LENGTHPOW)]<<attr_table.GAIN ;
if ((!inlet_wait)&&(!inlet_rec)&&(!inlet_play)){
	if (full){
	color=inlet_coloron;
	}
	else if (!full){
	color=0;
	}
	}




if (inlet_active){ 
	rtrig = 0;

if (((color!=prevcolor)||(inlet_redraw>0))&&!ntrig){
	if (inlet_step<7){
	MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (attr_channel-1) ,map[inlet_step + inlet_start],(color));}
	else if (inlet_step==7){
		if (inlet_wait>0){
		MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (attr_channel-1) ,map[prev + inlet_start],(17));}
		else if (!inlet_wait)
		{
			v = attr_table.array[__USAT((inlet_offset + (prev)),attr_table.LENGTHPOW)]<<attr_table.GAIN ;
			if (v){
			MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (attr_channel-1) ,map[prev + inlet_start],(16));
			}
			else if (!v){
			MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (attr_channel-1) ,map[prev + inlet_start],(0));
			}
		}
	}
	prevcolor=color;
	ntrig=1;
	}

if (!inlet_trigger){ntrig=0;}


if ((inlet_step  != prev)&&(inlet_step<7)) {
  v = attr_table.array[__USAT((inlet_offset + (prev)),attr_table.LENGTHPOW)]<<attr_table.GAIN ;
  if (v) MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (attr_channel-1) ,map[(prev  + inlet_start)],inlet_coloron);
     	else
     	MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (attr_channel-1) ,map[(prev + inlet_start)],inlet_coloroff);
prev = inlet_step;
}

}]]></code.krate>
      </object>
   </patchobj>
   <obj type="const/i" uuid="e202f44b2df17ae0b3e663b98ea6b14c8ff00408" name="i_13" x="1106" y="1344">
      <params/>
      <attribs>
         <spinner attributeName="value" value="145161"/>
      </attribs>
   </obj>
   <comment type="patch/comment" x="1106" y="1414" text="track 4 lights"/>
   <obj type="math/==" uuid="deaf0d36642c57876c4101e86f8a0b6a06021ab2" name="==_3" x="840" y="1428">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/and 2" uuid="c67031682f552aa0a80b23377495c51ea28a8c9c" name="and_9" x="910" y="1428">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="f997e173-90de-45b4-818f-725146a07cb2" name="b_4" x="980" y="1428">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="f997e173-90de-45b4-818f-725146a07cb2">
         <sDescription>Generates a single pulse after a rising edge on trigger input. A new trigger before the pulse finishes at the output, extends the pulse.</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>pulselength.axh</helpPatch>
         <inlets>
            <bool32.rising name="trig" description="trigger"/>
         </inlets>
         <outlets>
            <bool32 name="pulse" description="pulse output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int ntrig;]]></code.declaration>
         <code.init><![CDATA[ntrig = 0;]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig > 0) && !ntrig) {
  ntrig = 1;
  outlet_pulse = 1;
}
else outlet_pulse=0;
if (!(inlet_trig > 0))
{
    ntrig = 0;
  }]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="410c588c-3f3a-406a-b965-e9f359a10624" name="launch_2" x="1106" y="1428">
      <params>
         <int32 name="offset" value="0"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="lcxl2"/>
         <combo attributeName="device" selection="usb host port / LP"/>
         <combo attributeName="coloron" selection="green W"/>
         <combo attributeName="coloroff" selection="off"/>
         <spinner attributeName="channel" value="1"/>
         <spinner attributeName="column" value="1"/>
      </attribs>
      <object id="patch/object" uuid="410c588c-3f3a-406a-b965-e9f359a10624">
         <sDescription>visual feedback of table data for midi controllers</sDescription>
         <author>Robert Schirmer</author>
         <license>BSD</license>
         <helpPatch>launchpad.axh</helpPatch>
         <rotatedParams>true</rotatedParams>
         <inlets>
            <int32 name="offset" description="offset in the table to read from"/>
            <bool32.rising name="redraw"/>
         </inlets>
         <outlets>
            <int32 name="offset" description="offset through"/>
            <int32 name="start" description="start through"/>
            <int32 name="coloron"/>
            <int32 name="coloroff"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="offset">
               <MinValue i="0"/>
               <MaxValue i="10000000"/>
            </int32>
         </params>
         <attribs>
            <objref name="table" description="name of the table to display"/>
            <combo name="device">
               <MenuEntries>
                  <string>usb host port / LP</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_USB_HOST, 9</string>
               </CEntries>
            </combo>
            <combo name="coloron">
               <MenuEntries>
                  <string>off</string>
                  <string>red W</string>
                  <string>red M</string>
                  <string>red S</string>
                  <string>orange W</string>
                  <string>orange S</string>
                  <string>green W</string>
                  <string>green M</string>
                  <string>green S</string>
                  <string>lime 1 W</string>
                  <string>lime 1 S</string>
                  <string>lime 2</string>
                  <string>yellow W</string>
                  <string>yellow M</string>
                  <string>yellow S</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>18</string>
                  <string>35</string>
                  <string>16</string>
                  <string>32</string>
                  <string>48</string>
                  <string>33</string>
                  <string>50</string>
                  <string>49</string>
                  <string>17</string>
                  <string>34</string>
                  <string>51</string>
               </CEntries>
            </combo>
            <combo name="coloroff">
               <MenuEntries>
                  <string>off</string>
                  <string>red W</string>
                  <string>red M</string>
                  <string>red S</string>
                  <string>orange W</string>
                  <string>orange S</string>
                  <string>green W</string>
                  <string>green M</string>
                  <string>green S</string>
                  <string>lime 1 W</string>
                  <string>lime 1 S</string>
                  <string>lime 2</string>
                  <string>yellow W</string>
                  <string>yellow M</string>
                  <string>yellow S</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>18</string>
                  <string>35</string>
                  <string>16</string>
                  <string>32</string>
                  <string>48</string>
                  <string>33</string>
                  <string>50</string>
                  <string>49</string>
                  <string>17</string>
                  <string>34</string>
                  <string>51</string>
               </CEntries>
            </combo>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="9"/>
            <spinner name="column" MinValue="0" MaxValue="7" DefaultValue="0"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
int rtrig;
uint8_t map[127];
int i;
int vt;
int trigt;
int prevt[64];
int plength;


uint32_t offset;]]></code.declaration>
         <code.init><![CDATA[{ 
  int i;
  for(i=0;i<7;i++) prevt[i]= -666 ;}

  { 
  int i;
  for(i=0;i<8;i++) 

  map[0] = 0;
map[1] = 16;
map[2] = 32;
map[3] = 48;
map[4] = 64;
map[5] = 80;
map[6] = 96;
//map[7] = 112;
}]]></code.init>
         <code.krate><![CDATA[//coloron = inlet_coloron + attr_coloron;


offset = param_offset + inlet_offset;


//redraw
if (inlet_redraw > 0)
  { 
  int ii;
  for(ii=0;ii<8;ii++) prevt[ii]= -666 ;}
  
  { 
  int ii;
  for(ii=0;ii<7;ii++) 

  map[0] = 0+attr_column;
map[1] = 16+attr_column;
map[2] = 32+attr_column;
map[3] = 48+attr_column;
map[4] = 64+attr_column;
map[5] = 80+attr_column;
map[6] = 96+attr_column;
//map[7] = 112+attr_column;
}




    
//display steps

{ 
  i += 1;
  if (i == (7)) i = 0; 
  vt = attr_table.array[__USAT((offset + (i)),attr_table.LENGTHPOW)]<<attr_table.GAIN;
if (prevt[i] != vt ) trigt = 0;
prevt[i] = vt;
if (vt && (!trigt)) {
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (attr_channel-1)   ,map[(i)],(attr_coloron));  trigt=1;
}
if ((!vt) && (!trigt)){
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (attr_channel-1)  ,map[(i)],(attr_coloroff));  trigt=1;
}
 }




outlet_coloron = attr_coloron;
outlet_coloroff = attr_coloroff;
outlet_offset = offset;]]></code.krate>
      </object>
   </patchobj>
   <obj type="logic/flipflop" uuid="f9b15363f5ee203152e062c08a8846f0074b0ea5" name="flipflop_6" x="1344" y="1428">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="b40a4170-891d-4fc1-a6a6-b93c8206156a" name="launch_8" x="1442" y="1428">
      <params/>
      <attribs>
         <objref attributeName="table" obj="lcxl2"/>
         <combo attributeName="device" selection="usb host port / LP"/>
         <combo attributeName="color" selection="green S"/>
         <spinner attributeName="channel" value="1"/>
         <spinner attributeName="column" value="1"/>
      </attribs>
      <object id="patch/object" uuid="b40a4170-891d-4fc1-a6a6-b93c8206156a">
         <sDescription>display a step counter on a midi controller</sDescription>
         <author>Robert Schirmer</author>
         <license>BSD</license>
         <helpPatch>launchpad.axh</helpPatch>
         <rotatedParams>true</rotatedParams>
         <inlets>
            <int32 name="offset" description="offset in the table to read from"/>
            <int32 name="barcount"/>
            <int32 name="start" description="display start on the LP"/>
            <bool32 name="clear"/>
            <bool32 name="wait"/>
            <bool32 name="rec"/>
            <bool32 name="play"/>
            <bool32 name="stop"/>
            <int32 name="coloron" description="color on"/>
            <int32 name="coloroff" description="color off"/>
            <int32 name="color" description="step color modulation"/>
            <int32 name="step" description="current step"/>
            <bool32 name="active" description="active??"/>
            <bool32.rising name="redraw"/>
            <bool32 name="trigger"/>
         </inlets>
         <outlets/>
         <displays/>
         <params/>
         <attribs>
            <objref name="table" description="table to display"/>
            <combo name="device">
               <MenuEntries>
                  <string>usb host port / LP</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_USB_HOST, 1</string>
               </CEntries>
            </combo>
            <combo name="color">
               <MenuEntries>
                  <string>off</string>
                  <string>red W</string>
                  <string>red M</string>
                  <string>red S</string>
                  <string>orange W</string>
                  <string>orange S</string>
                  <string>green W</string>
                  <string>green M</string>
                  <string>green S</string>
                  <string>lime 1 W</string>
                  <string>lime 1 S</string>
                  <string>lime 2</string>
                  <string>yellow W</string>
                  <string>yellow M</string>
                  <string>yellow S</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>18</string>
                  <string>35</string>
                  <string>16</string>
                  <string>32</string>
                  <string>48</string>
                  <string>33</string>
                  <string>50</string>
                  <string>49</string>
                  <string>17</string>
                  <string>34</string>
                  <string>51</string>
               </CEntries>
            </combo>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="9"/>
            <spinner name="column" MinValue="0" MaxValue="7" DefaultValue="0"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int color;
int strig;
int prevcolor;
int stoptrig;
int ntrig;
int rtrig;
int full;
int prev;
int32_t map[126];
int32_t v;]]></code.declaration>
         <code.init><![CDATA[{ 
  int i;
  for(i=0;i<8;i++) 

  map[0] = 0+attr_column;
map[1] = 16+attr_column;
map[2] = 32+attr_column;
map[3] = 48+attr_column;
map[4] = 64+attr_column;
map[5] = 80+attr_column;
map[6] = 96+attr_column;
map[7] = 112+attr_column;

}
strig=1;]]></code.init>
         <code.krate><![CDATA[if (inlet_wait){color=17;}
if (inlet_barcount==0){
	if (inlet_rec){color=1;}}
else if(inlet_barcount>0){
	if ((inlet_rec)&&(!inlet_wait)){color=1;}	
}
if ((inlet_play)&&(!inlet_wait)) {
	if((inlet_trigger>0)&&(!inlet_clear)){
	color=attr_color;}
	if((inlet_trigger>0)&&(inlet_clear)){
	color=3;}
	else if (!(inlet_trigger>0)){
	color=inlet_coloron;}
}

full = attr_table.array[__USAT((inlet_offset + inlet_step),attr_table.LENGTHPOW)]<<attr_table.GAIN ;
if ((!inlet_wait)&&(!inlet_rec)&&(!inlet_play)){
	if (full){
	color=inlet_coloron;
	}
	else if (!full){
	color=0;
	}
	}




if (inlet_active){ 
	rtrig = 0;

if (((color!=prevcolor)||(inlet_redraw>0))&&!ntrig){
	if (inlet_step<7){
	MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (attr_channel-1) ,map[inlet_step + inlet_start],(color));}
	else if (inlet_step==7){
		if (inlet_wait>0){
		MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (attr_channel-1) ,map[prev + inlet_start],(17));}
		else if (!inlet_wait)
		{
			v = attr_table.array[__USAT((inlet_offset + (prev)),attr_table.LENGTHPOW)]<<attr_table.GAIN ;
			if (v){
			MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (attr_channel-1) ,map[prev + inlet_start],(16));
			}
			else if (!v){
			MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (attr_channel-1) ,map[prev + inlet_start],(0));
			}
		}
	}
	prevcolor=color;
	ntrig=1;
	}

if (!inlet_trigger){ntrig=0;}


if ((inlet_step  != prev)&&(inlet_step<7)) {
  v = attr_table.array[__USAT((inlet_offset + (prev)),attr_table.LENGTHPOW)]<<attr_table.GAIN ;
  if (v) MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (attr_channel-1) ,map[(prev  + inlet_start)],inlet_coloron);
     	else
     	MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON + (attr_channel-1) ,map[(prev + inlet_start)],inlet_coloroff);
prev = inlet_step;
}

}]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="3374" y="1428" text="clear loop"/>
   <obj type="rbrt/launchpad/right disp" uuid="515d095e-931a-4bff-a560-f99140e1fcb6" name="right_2" x="3542" y="1428">
      <params/>
      <attribs>
         <combo attributeName="device" selection="usb host port / LP"/>
         <spinner attributeName="button" value="0"/>
         <combo attributeName="on" selection="red S"/>
         <combo attributeName="off" selection="off"/>
      </attribs>
   </obj>
   <obj type="rbrt/launchpad/right disp" uuid="515d095e-931a-4bff-a560-f99140e1fcb6" name="right_3____tmp" x="3682" y="1428">
      <params/>
      <attribs>
         <combo attributeName="device" selection="usb host port / LP"/>
         <spinner attributeName="button" value="1"/>
         <combo attributeName="on" selection="orange S"/>
         <combo attributeName="off" selection="orange W"/>
      </attribs>
   </obj>
   <patchobj type="patch/object" uuid="c1bb9137-28a9-43b3-8365-6b6fc1cb6162" name="tcopy_4" x="3374" y="1442">
      <params>
         <int32 name="range" value="1048576"/>
         <bool32.tgl name="splat" value="0"/>
         <bool32.tgl name="clear" value="1"/>
      </params>
      <attribs>
         <objref attributeName="src" obj="rec"/>
         <objref attributeName="dst" obj="rec"/>
         <spinner attributeName="speed" value="16"/>
      </attribs>
      <object id="patch/object" uuid="c1bb9137-28a9-43b3-8365-6b6fc1cb6162">
         <sDescription>copy the elements of a table from table &apos;src&apos; to table &apos;dst&apos;
the length of the area to copy is defined by &apos;range&apos;,
the read offset is defined by inlet&apos;src&apos; and the write offset by &apos;dst&apos;
&apos;speed&apos; sets the copying speed in terms of audio-rate (16 is really fast!)
if &apos;splat&apos; is enabled,tcopy will preserve the original contents of the destination table.
if &apos;clear&apos; is enabled,tcopy will clear the contents of the table.</sDescription>
         <author>Robert Schirmer</author>
         <license>BSD</license>
         <helpPatch>data.axh</helpPatch>
         <inlets>
            <bool32.rising name="trig" description="start copying"/>
         </inlets>
         <outlets/>
         <displays/>
         <params>
            <int32 name="range">
               <MinValue i="1"/>
               <MaxValue i="2097152"/>
            </int32>
            <bool32.tgl name="splat" description="add to src contents"/>
            <bool32.tgl name="clear" description="clear dst"/>
         </params>
         <attribs>
            <objref name="src" description="name of the source -table"/>
            <objref name="dst" description="name of the destination - table"/>
            <spinner name="speed" MinValue="1" MaxValue="16" DefaultValue="1"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[uint32_t i;
uint32_t ii;
int ntrig;
int rtrig;

int speed;
uint32_t src;
uint32_t dst;
uint32_t range;
uint32_t block;]]></code.declaration>
         <code.krate><![CDATA[speed = attr_speed << 4;
src = 0;
dst = 0;
range = param_range;

block  = (range / speed) * speed;



if ((inlet_trig)&& (!ntrig)){ ntrig = 1;i = 0;rtrig = 0;}
if ((i == range) && (!inlet_trig)) {ntrig = 0;i = 0;}


//copy n chunks of size 'speed'
if (ntrig && (i < block)){ 
	{ 
  for(ii=0;ii<speed;ii++)
  attr_dst.array[(i + ii + dst)]= (( attr_src.array[(i + ii + src)] + (attr_dst.array[(i + ii + dst)] * param_splat)) * (!param_clear));
  }
  i += speed;	
}

//copy what's left
if (i == block) rtrig = 1; 

if ((ntrig && rtrig) && (i < (range))){ 
	attr_dst.array[(i + dst)]= (( attr_src.array[(i + src)] + (attr_dst.array[(i + dst)] * param_splat)) * (!param_clear));
   i += 1;  
 }]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="686" y="1512" text="master play &amp; unchanging lights"/>
   <comment type="patch/comment" x="938" y="1512" text="track 4 lights"/>
   <patchobj type="patch/object" uuid="2eed6504-95b2-41a7-be75-2a8fd3be310d" name="top_2" x="686" y="1526">
      <params/>
      <attribs>
         <combo attributeName="device" selection="usb host port / LP"/>
         <spinner attributeName="button" value="7"/>
         <combo attributeName="on" selection="green S"/>
         <combo attributeName="off" selection="green W"/>
      </attribs>
      <object id="patch/object" uuid="2eed6504-95b2-41a7-be75-2a8fd3be310d">
         <sDescription>sets a top row button on the &apos;launchpad&apos; to the defined color</sDescription>
         <author>robert schirmer</author>
         <license>BSD</license>
         <helpPatch>launchpad.axh</helpPatch>
         <inlets>
            <bool32 name="active"/>
            <bool32.risingfalling name="on"/>
            <bool32 name="coloron"/>
         </inlets>
         <outlets/>
         <displays/>
         <params/>
         <attribs>
            <combo name="device">
               <MenuEntries>
                  <string>usb host port / LP</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_USB_HOST, 1</string>
               </CEntries>
            </combo>
            <spinner name="button" MinValue="0" MaxValue="7" DefaultValue="0"/>
            <combo name="on">
               <MenuEntries>
                  <string>off</string>
                  <string>red W</string>
                  <string>red M</string>
                  <string>red S</string>
                  <string>orange W</string>
                  <string>orange S</string>
                  <string>green W</string>
                  <string>green M</string>
                  <string>green S</string>
                  <string>lime 1 W</string>
                  <string>lime 1 S</string>
                  <string>lime 2</string>
                  <string>yellow W</string>
                  <string>yellow M</string>
                  <string>yellow S</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>18</string>
                  <string>35</string>
                  <string>16</string>
                  <string>32</string>
                  <string>48</string>
                  <string>33</string>
                  <string>50</string>
                  <string>49</string>
                  <string>17</string>
                  <string>34</string>
                  <string>51</string>
               </CEntries>
            </combo>
            <combo name="off">
               <MenuEntries>
                  <string>off</string>
                  <string>red W</string>
                  <string>red M</string>
                  <string>red S</string>
                  <string>orange W</string>
                  <string>orange S</string>
                  <string>green W</string>
                  <string>green M</string>
                  <string>green S</string>
                  <string>lime 1 W</string>
                  <string>lime 1 S</string>
                  <string>lime 2</string>
                  <string>yellow W</string>
                  <string>yellow M</string>
                  <string>yellow S</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>18</string>
                  <string>35</string>
                  <string>16</string>
                  <string>32</string>
                  <string>48</string>
                  <string>33</string>
                  <string>50</string>
                  <string>49</string>
                  <string>17</string>
                  <string>34</string>
                  <string>51</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[uint8_t b;
uint8_t prevb;
int coloron;
int ntrig;
uint8_t map[31];
int i;
int length;]]></code.declaration>
         <code.init><![CDATA[MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON+0, (112), 17);
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON+0, (113), 17);]]></code.init>
         <code.krate><![CDATA[if (inlet_active){
	if (inlet_coloron) {coloron=3;}
else if (!inlet_on){coloron=attr_on;}

b  = (inlet_on)?(coloron):(attr_off);
}
else if (!inlet_active){
	b=attr_off;
}
if ((b != prevb ) && (!ntrig))
{ MidiSend3((midi_device_t) attr_device, MIDI_CONTROL_CHANGE, (104 + attr_button), b);
ntrig = 1; prevb=b;}
else ntrig = 0;]]></code.krate>
      </object>
   </patchobj>
   <obj type="table/alloc 32b sdram" uuid="1a4546b7b52747ea765093ac97444601c44721e8" name="rec" x="1638" y="1638">
      <params/>
      <attribs>
         <combo attributeName="size" selection="1048576"/>
         <text attributeName="init">
            <sText><![CDATA[]]></sText>
         </text>
      </attribs>
   </obj>
   <comment type="patch/comment" x="1932" y="1680" text="dry level"/>
   <comment type="patch/comment" x="2058" y="1680" text="loop record"/>
   <obj type="audio/in left" uuid="d40e60b7641fe75af4d7c91b45bb038aacafc52e" name="in_2" x="1694" y="1708">
      <params/>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_1" x="1918" y="1708">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="9abd3a82-ea0f-49bb-b301-f0aa1df616ce" name="lrec_1" x="2030" y="1708">
      <params>
         <frac32.s.map name="attack" value="-64.0"/>
         <bool32.tgl name="hard" value="0"/>
         <frac32.s.map name="release" value="-26.0"/>
         <bool32.tgl name="nofade" value="0"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="rec"/>
      </attribs>
      <object id="patch/object" uuid="9abd3a82-ea0f-49bb-b301-f0aa1df616ce">
         <sDescription>records audio to a table with nice fade-ins and -outs.
the table can be divided into 1,2,4 or 8 slots.
when &apos;sync&apos; is enabled,recording will be synced to phase of the signal connected to &apos;pos&apos;,
and after &apos;rec&apos; is zero,recording will continue until the starting point is reached.
after recording is done,the length if the recording in samples is sent out,
as well as the length of the recording (in fraction of the table&apos;s size).
meanwhile,the input signal is overdubbed and faded out ,so NO CLICKS!
set the length of the fade-out/overdub period with &apos;release&apos;,
the length of the fade-in of the recording with &apos;attack&apos;.</sDescription>
         <author>Robert Schirmer</author>
         <license>BSD</license>
         <helpPatch>loop_multi.axh</helpPatch>
         <inlets>
            <frac32buffer name="wave" description="audio in"/>
            <bool32.risingfalling name="rec" description="record,set tempo"/>
            <bool32.risingfalling name="sync"/>
         </inlets>
         <outlets>
            <frac32.positive name="offset" description="offset inside the table"/>
            <bool32 name="rec" description="recording state,pre - fadeout"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.kdecaytime.exp name="attack" description="fade-in time">
               <DefaultValue v="-64.0"/>
            </frac32.s.map.kdecaytime.exp>
            <bool32.tgl name="hard" description="if &apos;hard&apos; is on,there will be NO fade-in"/>
            <frac32.s.map.kdecaytime.exp name="release" description="fade-out time">
               <DefaultValue v="0.0"/>
            </frac32.s.map.kdecaytime.exp>
            <bool32.tgl name="nofade" description="disable fades"/>
         </params>
         <attribs>
            <objref name="table" description="table to record to "/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[bool rec;
uint32_t recpos;
uint32_t offset;
uint32_t rec_offset;
uint32_t rec_max;
uint8_t shift;
uint32_t start;
uint32_t starthold;
bool mode;

bool recstate;
uint32_t shold;
uint32_t rhold;
int32_t env;

int32_t _ap;
int32_t phase;]]></code.declaration>
         <code.init><![CDATA[rec_max = attr_table.LENGTH >> 0;
shift =     (27-attr_table.LENGTHPOW);]]></code.init>
         <code.krate><![CDATA[if ((inlet_rec) && !rec) {
	 recpos = 0;
      rec = 1;
      recstate = 1;
      start = 0x00000000;
      shold = 1 << 27;
      rhold = 1 << 27;
      starthold = 0;
      mode = inlet_sync;
      offset = 0x00000000;
      rec_offset = (__USAT(offset,27)>>(27-attr_table.LENGTHPOW));
     } 

//fades
if (!param_nofade){
   if (rec) env = (param_hard) ? (1<<27) : (1<<27) - (___SMMUL((1<<27)-env,param_attack)<<1);
   else env = ___SMMUL(env,param_release)<<1;
  recstate = env;
}else {recstate = rec;env = rec<<27;}
       
  //rec stopped-> wait for rollover if sync is on 
if ((!inlet_rec) && rec) {
 	if (mode)	{
 		phase = (0x00000000 - start) & ((1<<27)-1);
         if ((phase - _ap) <= 0)  {rec = 0;shold = recpos - 16;rhold =shold << shift;recpos = 0;starthold = start;} 
         _ap = phase;
        } 
        else {rec = 0;shold = recpos;rhold =shold << shift;recpos = 0;starthold = 0;}
   }

        outlet_rec = rec;
        outlet_offset = offset;]]></code.krate>
         <code.srate><![CDATA[//record   

if (recstate) {
 if ((recpos >= rec_max)||(recpos >= shold)) recpos = 0;
           	
 if (rec) attr_table.array[recpos + rec_offset] = 
 __SSAT((___SMMUL((inlet_wave),env)<<5),28 )>>attr_table.GAIN;
              else attr_table.array[recpos + rec_offset] = 
(__SSAT((___SMMUL((inlet_wave),env)<<5),28 ) + (attr_table.array [recpos + rec_offset] << attr_table.GAIN))>>attr_table.GAIN;

 recpos ++;    
}]]></code.srate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="658" y="1722" text="metronom"/>
   <comment type="patch/comment" x="2702" y="1722" text="loop play"/>
   <comment type="patch/comment" x="2982" y="1722" text="loop overdub"/>
   <comment type="patch/comment" x="3080" y="1722" text="avoid clipping when recording"/>
   <patchobj type="patch/object" uuid="7238340b-e114-4fb5-91bb-2fce4ed1b381" name="ldrive_1" x="2702" y="1736">
      <params/>
      <attribs>
         <objref attributeName="table" obj="rec"/>
      </attribs>
      <object id="patch/object" uuid="7238340b-e114-4fb5-91bb-2fce4ed1b381">
         <sDescription>drives a phasor (saw-wave) for reading/writing data</sDescription>
         <author>robert schirmer</author>
         <license>BSD</license>
         <helpPatch>ldrive.axh</helpPatch>
         <inlets>
            <frac32.positive name="offset" description="offset inside the table"/>
            <frac32.positive name="startpoint" description="position inside range on reset"/>
            <frac32.positive name="loopstart" description="loopstart inside range"/>
            <frac32.bipolar name="speed" description="speed modulation"/>
            <bool32.risingfalling name="play" description="toggle playback"/>
            <bool32.rising name="r2offset" description="reset to &apos;offset&apos;"/>
            <bool32.rising name="r2start" description="reset to &apos;startpoint&apos;"/>
         </inlets>
         <outlets>
            <frac32buffer.positive name="pos" description="relative position inside table"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <objref name="table"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int32_t index;
bool rrs;
bool rro;
uint8_t shift;

int ntrig;

int32_t t_speed;
int32_t re;
int32_t rs;

int32_t start;
int32_t loopstart;
int32_t R;
int32_t lrange;
int32_t lstart;

uint32_t count;
bool add;
bool play;
bool mode;]]></code.declaration>
         <code.init><![CDATA[shift =     (27-attr_table.LENGTHPOW);
R=64;]]></code.init>
         <code.krate><![CDATA[loopstart = ___SMMUL(0x07FFFFFF,inlet_loopstart)<<5;
add = 0x07FFFFFF;
//scale ranges up 8 times to achieve decent resolution for parameter speed
lrange = 0x07FFFFFF << 3;
lstart = loopstart << 3;
start = ___SMMUL(0x07FFFFFF,inlet_startpoint)<< 8;
t_speed =  (((0x07FFFFFF) << 3) >> attr_table.LENGTHPOW) + ((0x07FFFFFF) > 0);


 play = inlet_play;
      if (inlet_r2start && (!rrs)) {
         index = start;
         rrs = 1;
         count = 0;
      }
      if (inlet_r2offset && (!rro)) {
         index = 0;
         rro = 1;
         count = 0;
      }
      if (!inlet_r2offset) rro = 0;
      if (!inlet_r2start) rrs = 0;

      if (!0x07FFFFFF) play = 0;]]></code.krate>
         <code.srate><![CDATA[if (t_speed > 0){
      if (index >= lrange){index = lstart;count += add;} 
      } 
      else{
      if (index <= lstart){ index = lrange;count +=add;}  
          }    

if (play) {outlet_pos =  __USAT(((index >> 3) + inlet_offset),27);index += t_speed;}
else outlet_pos = 1 << 27;]]></code.srate>
      </object>
   </patchobj>
   <obj type="table/read interp" uuid="42918ec2255011ae3787cc5488c9b29980d796a8" name="read_1" x="2842" y="1736">
      <params/>
      <attribs>
         <objref attributeName="table" obj="rec"/>
      </attribs>
   </obj>
   <obj type="rbrt/looper/ldub" uuid="5902f84f-1523-451f-bddb-7f12c8ced857" name="ldub_1" x="2982" y="1736">
      <params>
         <frac32.u.map name="feedback" value="64.0"/>
         <frac32.s.map name="attack" value="-63.0"/>
         <bool32.tgl name="hard" value="0"/>
         <frac32.s.map name="release" value="0.0"/>
         <bool32.tgl name="nofade" value="0"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="rec"/>
      </attribs>
   </obj>
   <obj type="math/*" uuid="c16a625a661f40e4b359db604dcd00b3befcdbe3" name="*_1" x="3122" y="1736">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_1" x="3192" y="1736">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/inv" uuid="2bd44b865d3b63ff9b80862242bf5be779e3ad5" name="inv_3" x="2282" y="1778">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="86c7c03f-c197-4d9f-9dc7-d4d9bd5a1a30" name="b_9" x="2366" y="1778">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="86c7c03f-c197-4d9f-9dc7-d4d9bd5a1a30">
         <sDescription>Generates a single pulse after a rising edge on trigger input. A new trigger before the pulse finishes at the output, extends the pulse.</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>pulselength.axh</helpPatch>
         <inlets>
            <bool32.rising name="trig" description="trigger"/>
         </inlets>
         <outlets>
            <bool32 name="pulse" description="pulse output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int ntrig;]]></code.declaration>
         <code.init><![CDATA[ntrig = 0;]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig > 0) && !ntrig) {
  ntrig = 1;
  outlet_pulse = 1;
}
else outlet_pulse=0;
if (!(inlet_trig > 0))
{
    ntrig = 0;
  }]]></code.krate>
      </object>
   </patchobj>
   <comment type="patch/comment" x="2433" y="1832" text="play"/>
   <obj type="logic/or 2" uuid="3805d3c84d30032a44fbdbe42d9a2988a1790a3e" name="or_14" x="2254" y="1848">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/or 2" uuid="3805d3c84d30032a44fbdbe42d9a2988a1790a3e" name="or_10" x="2338" y="1848">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/flipflop toggle" uuid="195e489e5fc3d275944b0de56c7a91c8641ea22a" name="flipflop_7" x="2408" y="1848">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/or 2" uuid="3805d3c84d30032a44fbdbe42d9a2988a1790a3e" name="or_2" x="2534" y="1848">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/and 2" uuid="c67031682f552aa0a80b23377495c51ea28a8c9c" name="and_18" x="2618" y="1848">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="3570" y="1862" text="fact1 pitch"/>
   <comment type="patch/comment" x="4032" y="1862" text="fact2 pitch"/>
   <patchobj type="patch/object" uuid="df0922f6-ac1e-4c37-b796-35254b0f1b41" name="scale_1" x="3570" y="1876">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="df0922f6-ac1e-4c37-b796-35254b0f1b41">
         <sDescription>Maps 0..64 to a..b</sDescription>
         <author>Johannes Elliesen</author>
         <license>BSD</license>
         <inlets>
            <frac32.positive name="c" description="control"/>
         </inlets>
         <outlets>
            <frac32 name="o" description="output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[{
      int64_t a = (int64_t)0x04300000 * inlet_c;
      a += (int64_t)0x3ECCCCC * ((128<<20)-inlet_c);
      outlet_o= a>>27;
   }]]></code.krate>
      </object>
   </patchobj>
   <obj type="conv/unipolar2bipolar" uuid="efc8ee28c508740c5edf7995eaaa07a6d6818e5e" name="unipolar2bipolar_13" x="3640" y="1876">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="8527221d-6ba4-4b76-a00e-5ccee8989c21" name="i_5" x="3766" y="1876">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="8527221d-6ba4-4b76-a00e-5ccee8989c21">
         <sDescription>positive integer control</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets>
            <int32 name="in"/>
         </inlets>
         <outlets>
            <int32.positive name="out" description="output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out= inlet_in*12;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="df0922f6-ac1e-4c37-b796-35254b0f1b41" name="scale_2" x="4032" y="1876">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="df0922f6-ac1e-4c37-b796-35254b0f1b41">
         <sDescription>Maps 0..64 to a..b</sDescription>
         <author>Johannes Elliesen</author>
         <license>BSD</license>
         <inlets>
            <frac32.positive name="c" description="control"/>
         </inlets>
         <outlets>
            <frac32 name="o" description="output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[{
      int64_t a = (int64_t)0x04300000 * inlet_c;
      a += (int64_t)0x3ECCCCC * ((128<<20)-inlet_c);
      outlet_o= a>>27;
   }]]></code.krate>
      </object>
   </patchobj>
   <obj type="conv/unipolar2bipolar" uuid="efc8ee28c508740c5edf7995eaaa07a6d6818e5e" name="unipolar2bipolar_9" x="4102" y="1876">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="8527221d-6ba4-4b76-a00e-5ccee8989c21" name="i_6" x="4228" y="1876">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="8527221d-6ba4-4b76-a00e-5ccee8989c21">
         <sDescription>positive integer control</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets>
            <int32 name="in"/>
         </inlets>
         <outlets>
            <int32.positive name="out" description="output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out= inlet_in*12;]]></code.krate>
      </object>
   </patchobj>
   <obj type="rbrt/patching/loadbang" uuid="45d1f29d-ac62-4e5b-86f8-2201d2f6c689" name="loadbang_4" x="2184" y="1918">
      <params/>
      <attribs/>
   </obj>
   <obj type="phi/logic/or 4" uuid="5dc5a7c1fb7809522171638f755fead71cbe14ea" name="or_3" x="2324" y="1918">
      <params/>
      <attribs/>
   </obj>
   <obj type="rbrt/launchpad/right disp" uuid="515d095e-931a-4bff-a560-f99140e1fcb6" name="right_4" x="3150" y="1932">
      <params/>
      <attribs>
         <combo attributeName="device" selection="usb host port / LP"/>
         <spinner attributeName="button" value="2"/>
         <combo attributeName="on" selection="green S"/>
         <combo attributeName="off" selection="green W"/>
      </attribs>
   </obj>
   <comment type="patch/comment" x="3570" y="1960" text="fact1 stretch"/>
   <comment type="patch/comment" x="4130" y="1960" text="fact 2 stretch"/>
   <patchobj type="patch/object" uuid="df0922f6-ac1e-4c37-b796-35254b0f1b41" name="scale_3" x="3486" y="1974">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="df0922f6-ac1e-4c37-b796-35254b0f1b41">
         <sDescription>Maps 0..64 to a..b</sDescription>
         <author>Johannes Elliesen</author>
         <license>BSD</license>
         <inlets>
            <frac32.positive name="c" description="control"/>
         </inlets>
         <outlets>
            <frac32 name="o" description="output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[{
      int64_t a = (int64_t)0x04300000 * inlet_c;
      a += (int64_t)0x3ECCCCC * ((128<<20)-inlet_c);
      outlet_o= a>>27;
   }]]></code.krate>
      </object>
   </patchobj>
   <obj type="conv/unipolar2bipolar" uuid="efc8ee28c508740c5edf7995eaaa07a6d6818e5e" name="unipolar2bipolar_14" x="3570" y="1974">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="8527221d-6ba4-4b76-a00e-5ccee8989c21" name="i_8" x="3710" y="1974">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="8527221d-6ba4-4b76-a00e-5ccee8989c21">
         <sDescription>positive integer control</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets>
            <int32 name="in"/>
         </inlets>
         <outlets>
            <int32.positive name="out" description="output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out= inlet_in*12;]]></code.krate>
      </object>
   </patchobj>
   <obj type="math/+" uuid="b94a9b8e9adcb7d18868c0ee808a9b211b65578d" name="+_2" x="3794" y="1974">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="df0922f6-ac1e-4c37-b796-35254b0f1b41" name="scale_4" x="4046" y="1974">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="df0922f6-ac1e-4c37-b796-35254b0f1b41">
         <sDescription>Maps 0..64 to a..b</sDescription>
         <author>Johannes Elliesen</author>
         <license>BSD</license>
         <inlets>
            <frac32.positive name="c" description="control"/>
         </inlets>
         <outlets>
            <frac32 name="o" description="output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[{
      int64_t a = (int64_t)0x04300000 * inlet_c;
      a += (int64_t)0x3ECCCCC * ((128<<20)-inlet_c);
      outlet_o= a>>27;
   }]]></code.krate>
      </object>
   </patchobj>
   <obj type="conv/unipolar2bipolar" uuid="efc8ee28c508740c5edf7995eaaa07a6d6818e5e" name="unipolar2bipolar_10" x="4130" y="1974">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="8527221d-6ba4-4b76-a00e-5ccee8989c21" name="i_12" x="4270" y="1974">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="8527221d-6ba4-4b76-a00e-5ccee8989c21">
         <sDescription>positive integer control</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets>
            <int32 name="in"/>
         </inlets>
         <outlets>
            <int32.positive name="out" description="output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out= inlet_in*12;]]></code.krate>
      </object>
   </patchobj>
   <obj type="math/+" uuid="b94a9b8e9adcb7d18868c0ee808a9b211b65578d" name="+_7" x="4340" y="1974">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="fb3dbbfc-4256-4001-afcb-095e1a73d66d" name="note_16" x="952" y="2100">
      <params/>
      <attribs>
         <spinner attributeName="channel" value="1"/>
      </attribs>
      <object id="patch/object" uuid="fb3dbbfc-4256-4001-afcb-095e1a73d66d">
         <sDescription>Monophonic MIDI keyboard note input, gate, velocity and release velocity</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>midi_in.axh</helpPatch>
         <inlets/>
         <outlets>
            <bool32 name="gate" description="key pressed?"/>
            <bool32 name="Bgate"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="0"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[uint8_t _gate;
uint8_t _Bgate;]]></code.declaration>
         <code.init><![CDATA[_gate = 0;]]></code.init>
         <code.krate><![CDATA[outlet_gate= _gate<<27;
outlet_Bgate= _Bgate<<27;]]></code.krate>
         <code.midihandler><![CDATA[//if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2)) {
//   _gate = 1;
//
//} else if (((status == MIDI_NOTE_ON + (attr_channel-1)) && (!data2))||          (status == MIDI_NOTE_OFF + (attr_channel-1))) {

//    _gate = 0;
  
//} 
if (status == (attr_channel-1) + MIDI_CONTROL_CHANGE) {
	if (data1==106){
  _gate = data2;
	}
	if (data1==107){
  _Bgate = data2;
	}
}]]></code.midihandler>
      </object>
   </patchobj>
   <obj type="const/i" uuid="e202f44b2df17ae0b3e663b98ea6b14c8ff00408" name="i_11" x="1064" y="2100">
      <params/>
      <attribs>
         <spinner attributeName="value" value="150"/>
      </attribs>
   </obj>
   <patchobj type="patch/object" uuid="9bd5cd86-529c-4fb0-88ab-f5ee0c3b8762" name="step_1____tmp___" x="1148" y="2100">
      <params>
         <frac32.u.map name="value" value="64.0"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="lcxl3"/>
      </attribs>
      <object id="patch/object" uuid="9bd5cd86-529c-4fb0-88ab-f5ee0c3b8762">
         <sDescription>toggles an element of a table : if the element at index == 0,the element is set to the dial &apos;value&apos;.
if the element &gt; 0 ,the element is set to 0.</sDescription>
         <author>Robert Schirmer</author>
         <license>BSD</license>
         <helpPatch>step_seq.axh</helpPatch>
         <inlets>
            <int32.positive name="offset" description="offset in the table"/>
            <int32.positive name="index" description="write index"/>
            <bool32.rising name="toggle" description="toggle the table&apos;s content at &apos;index&apos; "/>
         </inlets>
         <outlets>
            <frac32 name="value"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="value" description="value if index is set to &apos;high&apos;" noLabel="true">
               <DefaultValue v="64.0"/>
            </frac32.u.map>
         </params>
         <attribs>
            <objref name="table"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
bool op;]]></code.declaration>
         <code.krate><![CDATA[if ((inlet_toggle>0) && !ntrig) {
      ntrig=1;
      op = attr_table.array[(inlet_index + inlet_offset)];
      op = !op ;
         attr_table.array[(inlet_index + inlet_offset)]= (op * (__SSAT(((param_value)),28)>>attr_table.GAIN));
         
   }
   if (!(inlet_toggle>0)) {
   	ntrig=0;
   }
outlet_value= attr_table.array[__USAT((inlet_index+ inlet_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;]]></code.krate>
      </object>
   </patchobj>
   <obj type="const/i" uuid="e202f44b2df17ae0b3e663b98ea6b14c8ff00408" name="i_15" x="1372" y="2100">
      <params/>
      <attribs>
         <spinner attributeName="value" value="160"/>
      </attribs>
   </obj>
   <patchobj type="patch/object" uuid="9bd5cd86-529c-4fb0-88ab-f5ee0c3b8762" name="step_1____tmp__" x="1456" y="2100">
      <params>
         <frac32.u.map name="value" value="64.0"/>
      </params>
      <attribs>
         <objref attributeName="table" obj="lcxl3"/>
      </attribs>
      <object id="patch/object" uuid="9bd5cd86-529c-4fb0-88ab-f5ee0c3b8762">
         <sDescription>toggles an element of a table : if the element at index == 0,the element is set to the dial &apos;value&apos;.
if the element &gt; 0 ,the element is set to 0.</sDescription>
         <author>Robert Schirmer</author>
         <license>BSD</license>
         <helpPatch>step_seq.axh</helpPatch>
         <inlets>
            <int32.positive name="offset" description="offset in the table"/>
            <int32.positive name="index" description="write index"/>
            <bool32.rising name="toggle" description="toggle the table&apos;s content at &apos;index&apos; "/>
         </inlets>
         <outlets>
            <frac32 name="value"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map name="value" description="value if index is set to &apos;high&apos;" noLabel="true">
               <DefaultValue v="64.0"/>
            </frac32.u.map>
         </params>
         <attribs>
            <objref name="table"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
bool op;]]></code.declaration>
         <code.krate><![CDATA[if ((inlet_toggle>0) && !ntrig) {
      ntrig=1;
      op = attr_table.array[(inlet_index + inlet_offset)];
      op = !op ;
         attr_table.array[(inlet_index + inlet_offset)]= (op * (__SSAT(((param_value)),28)>>attr_table.GAIN));
         
   }
   if (!(inlet_toggle>0)) {
   	ntrig=0;
   }
outlet_value= attr_table.array[__USAT((inlet_index+ inlet_offset),attr_table.LENGTHPOW)]<<attr_table.GAIN;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="adef9b0f-d36f-4e7e-acc0-cc9020c77af3" name="keyb_9" x="1834" y="2100">
      <params/>
      <attribs>
         <spinner attributeName="channel" value="14"/>
      </attribs>
      <object id="patch/object" uuid="adef9b0f-d36f-4e7e-acc0-cc9020c77af3">
         <sDescription>Monophonic MIDI keyboard note input, gate, velocity and release velocity</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>midi_in.axh</helpPatch>
         <inlets>
            <bool32 name="clear"/>
            <bool32 name="bate"/>
         </inlets>
         <outlets>
            <bool32 name="direction"/>
            <bool32 name="overwrite"/>
            <int32 name="pitchshift"/>
            <bool32 name="gate2" description="key pressed, retrigger on legato"/>
            <int32 name="note"/>
            <bool32 name="gate"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="1"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int8_t _note;
int8_t pitchshift;
int32_t direction;
int32_t overwrite;
int32_t _gate;
int32_t _gate2;
int bate;
int ntrig;]]></code.declaration>
         <code.init><![CDATA[_gate = 0;
pitchshift=0;
_note=-28;]]></code.init>
         <code.krate><![CDATA[outlet_pitchshift= pitchshift;
outlet_direction=direction;
outlet_overwrite=overwrite;
outlet_note=_note+28;

if (!inlet_bate){
	if (ntrig){
		MidiSend3((midi_device_t) MIDI_DEVICE_USB_HOST, 1 , MIDI_CONTROL_CHANGE, (106), 16);
		MidiSend3((midi_device_t) MIDI_DEVICE_USB_HOST, 1 , MIDI_NOTE_ON, (56), 0);
	ntrig=0;	
	}
outlet_gate2= _gate2;
}

else if (inlet_bate){
	outlet_gate2= bate;
	if (!ntrig){
		MidiSend3((midi_device_t) MIDI_DEVICE_USB_HOST, 1 , MIDI_CONTROL_CHANGE, (106), 1);
		MidiSend3((midi_device_t) MIDI_DEVICE_USB_HOST, 1 , MIDI_NOTE_ON, (56), 1);
		ntrig=1;
	}
}
outlet_gate=_gate2;
_gate2 = _gate;]]></code.krate>
         <code.midihandler><![CDATA[if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2)) {
if ((data1>35)&&(data1<40)){pitchshift=-12;}		
if ((data1>39)&&(data1<44)){pitchshift=0;}
if ((data1>43)&&(data1<48)){pitchshift=12;}
if ((data1>47)&&(data1<52)){pitchshift=24;}
if ((data1==36)||(data1==37)||(data1==40)||(data1==41)||(data1==44)||(data1==45)||(data1==48)||(data1==49)) {direction=0;}
if ((data1==38)||(data1==39)||(data1==42)||(data1==43)||(data1==46)||(data1==47)||(data1==50)||(data1==51)) {direction=1;}

if ((data1==36)||(data1==38)||(data1==40)||(data1==42)||(data1==44)||(data1==46)||(data1==48)||(data1==50)) {overwrite=0;}
if ((data1==37)||(data1==39)||(data1==41)||(data1==43)||(data1==45)||(data1==47)||(data1==49)||(data1==51)) {overwrite=1;}
  _note = data1-64;
  _gate = 1<<27;
  _gate2 = 0;
} else if (((status == MIDI_NOTE_ON + (attr_channel-1)) && (!data2))||
          (status == MIDI_NOTE_OFF + (attr_channel-1))) {
  if (_note == data1-64) {
    _gate = 0;
    _note = data1-64;
  }
} 

if (status == 12 + MIDI_CONTROL_CHANGE) {
  if ((data1==100)&&data2){
  	bate=1;
  }
  else if ((data1==100)&&!data2){
  	bate=0;
  }
  
}]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="c8ce26a1-1552-494a-94aa-26fb839ba19d" name="step_3" x="1974" y="2100">
      <params/>
      <attribs>
         <combo attributeName="device" selection="usb host port / LP"/>
         <combo attributeName="color" selection="green S"/>
         <combo attributeName="colo" selection="green W"/>
         <combo attributeName="corner" selection="topright"/>
      </attribs>
      <object id="patch/object" uuid="c8ce26a1-1552-494a-94aa-26fb839ba19d">
         <sDescription>display a step counter on a novation launchpad</sDescription>
         <author>Robert Schirmer</author>
         <license>BSD</license>
         <helpPatch>launchpad.axh</helpPatch>
         <rotatedParams>true</rotatedParams>
         <inlets>
            <int32 name="step" description="current step"/>
            <bool32 name="active" description="active??"/>
         </inlets>
         <outlets/>
         <displays/>
         <params/>
         <attribs>
            <combo name="device">
               <MenuEntries>
                  <string>usb host port / LP</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_USB_HOST, 1</string>
               </CEntries>
            </combo>
            <combo name="color">
               <MenuEntries>
                  <string>off</string>
                  <string>red W</string>
                  <string>red M</string>
                  <string>red S</string>
                  <string>orange W</string>
                  <string>orange S</string>
                  <string>green W</string>
                  <string>green M</string>
                  <string>green S</string>
                  <string>lime 1 W</string>
                  <string>lime 1 S</string>
                  <string>lime 2</string>
                  <string>yellow W</string>
                  <string>yellow M</string>
                  <string>yellow S</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>18</string>
                  <string>35</string>
                  <string>16</string>
                  <string>32</string>
                  <string>48</string>
                  <string>33</string>
                  <string>50</string>
                  <string>49</string>
                  <string>17</string>
                  <string>34</string>
                  <string>51</string>
               </CEntries>
            </combo>
            <combo name="colo">
               <MenuEntries>
                  <string>off</string>
                  <string>red W</string>
                  <string>red M</string>
                  <string>red S</string>
                  <string>orange W</string>
                  <string>orange S</string>
                  <string>green W</string>
                  <string>green M</string>
                  <string>green S</string>
                  <string>lime 1 W</string>
                  <string>lime 1 S</string>
                  <string>lime 2</string>
                  <string>yellow W</string>
                  <string>yellow M</string>
                  <string>yellow S</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>18</string>
                  <string>35</string>
                  <string>16</string>
                  <string>32</string>
                  <string>48</string>
                  <string>33</string>
                  <string>50</string>
                  <string>49</string>
                  <string>17</string>
                  <string>34</string>
                  <string>51</string>
               </CEntries>
            </combo>
            <combo name="corner">
               <MenuEntries>
                  <string>topleft</string>
                  <string>topright</string>
                  <string>bottomleft</string>
                  <string>bottomright</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>4</string>
                  <string>64</string>
                  <string>68</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
int rtrig;
int prev;
int i;
int32_t map[16];
int32_t v;]]></code.declaration>
         <code.init><![CDATA[{ 
  int i;
  for(i=0;i<16;i++) 

  map[0] = 48+attr_corner;
map[1] = 48+attr_corner+1;
map[2] = 48+attr_corner+2;
map[3] = 48+attr_corner+3;
map[4] = 32+attr_corner;
map[5] = 32+attr_corner+1;
map[6] = 32+attr_corner+2;
map[7] = 32+attr_corner+3;
map[8] = 16+attr_corner;
map[9] = 16+attr_corner+1;
map[10] = 16+attr_corner+2;
map[11] = 16+attr_corner+3;
map[12] = 0+attr_corner;
map[13] = 0+attr_corner+1;
map[14] = 0+attr_corner+2;
map[15] = 0+attr_corner+3;

}
rtrig=1;]]></code.init>
         <code.krate><![CDATA[if (i < 16){
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON ,map[i],attr_colo);

i += 1;
  }
  else i = 666;
if (inlet_active){rtrig=1;}

if (rtrig) {MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON ,map[(inlet_step)],(attr_color));}

if (inlet_step  != prev) {
  MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON ,map[(inlet_step)],(attr_color));
  MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON ,map[(prev)],attr_colo);
prev = inlet_step;
}




rtrig = 0;]]></code.krate>
      </object>
   </patchobj>
   <obj type="conv/unipolar2bipolar" uuid="efc8ee28c508740c5edf7995eaaa07a6d6818e5e" name="unipolar2bipolar_1" x="2114" y="2100">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/-c" uuid="bc70bed87e5405985ade03f4806b9450609a9093" name="-c_1" x="2254" y="2100">
      <params>
         <frac32.u.map name="c" value="32.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="rbrt/math/&gt;&gt; i c" uuid="14229bad-f41f-40ed-b5dd-c74e31a347c1" name="&gt;&gt;_2" x="2324" y="2100">
      <params>
         <int32 name="shift" value="1"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/+1" uuid="13c1a4574bb81783beb8839e81782b9a34e3fc17" name="+1_1" x="2436" y="2100">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="b163b37f-c57d-476b-8bbf-46df81d9e6da" name="&gt;=_1" x="2520" y="2100">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="b163b37f-c57d-476b-8bbf-46df81d9e6da">
         <sDescription>greater than or equal</sDescription>
         <author>Phil Julian</author>
         <license>CC0</license>
         <inlets>
            <int32 name="in1" description="in1"/>
         </inlets>
         <outlets>
            <bool32 name="out" description="out"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out= inlet_in1>=32;]]></code.krate>
      </object>
   </patchobj>
   <obj type="timer/delayedpulsem" uuid="edae71bda6092aa94232876fd3f8a107bdb9ebcf" name="delayedpulsem_1" x="2618" y="2100">
      <params>
         <frac32.s.map name="delay" value="8.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="logic/counter" uuid="7a141ba82230e54e5f5cd12da5dbe5a74ba854a5" name="counter_2" x="2744" y="2100">
      <params>
         <int32 name="maximum" value="65536"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="bcb13cf5-25b6-4e39-bd38-6fa9b4f11297" name="b_7" x="2898" y="2100">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="bcb13cf5-25b6-4e39-bd38-6fa9b4f11297">
         <sDescription>Generates a single pulse after a rising edge on trigger input. A new trigger before the pulse finishes at the output, extends the pulse.</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>pulselength.axh</helpPatch>
         <inlets>
            <bool32.rising name="trig" description="trigger"/>
         </inlets>
         <outlets>
            <bool32 name="pulse" description="pulse output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int ntrig;]]></code.declaration>
         <code.init><![CDATA[ntrig = 0;]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig > 0) && !ntrig) {
  ntrig = 1;
  outlet_pulse = 1;
}
else outlet_pulse=0;
if (!(inlet_trig > 0))
{
    ntrig = 0;
  }]]></code.krate>
      </object>
   </patchobj>
   <obj type="math/==" uuid="deaf0d36642c57876c4101e86f8a0b6a06021ab2" name="==_4" x="2996" y="2100">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="bcb13cf5-25b6-4e39-bd38-6fa9b4f11297" name="b_2" x="3080" y="2100">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="bcb13cf5-25b6-4e39-bd38-6fa9b4f11297">
         <sDescription>Generates a single pulse after a rising edge on trigger input. A new trigger before the pulse finishes at the output, extends the pulse.</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>pulselength.axh</helpPatch>
         <inlets>
            <bool32.rising name="trig" description="trigger"/>
         </inlets>
         <outlets>
            <bool32 name="pulse" description="pulse output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int ntrig;]]></code.declaration>
         <code.init><![CDATA[ntrig = 0;]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig > 0) && !ntrig) {
  ntrig = 1;
  outlet_pulse = 1;
}
else outlet_pulse=0;
if (!(inlet_trig > 0))
{
    ntrig = 0;
  }]]></code.krate>
      </object>
   </patchobj>
   <obj type="mux/mux 2" uuid="e1c92bc92f4d191bfadf0efeae4503b458a4e440" name="mux_3" x="3234" y="2100">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="2409cd96-1ab2-4749-8784-7794aa0e4f2f" name="flipflop_1" x="3318" y="2100">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="2409cd96-1ab2-4749-8784-7794aa0e4f2f">
         <sDescription>flipflop</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>logic.axh</helpPatch>
         <inlets>
            <bool32.rising name="set" description="set"/>
            <bool32.rising name="reset" description="reset"/>
         </inlets>
         <outlets>
            <bool32 name="o" description="output"/>
            <bool32 name="trigdel"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int p_set;
   int p_reset;
   int op;
   int i;
   int itrig;]]></code.declaration>
         <code.init><![CDATA[p_set = 0;
p_reset = 0;
op = 0;]]></code.init>
         <code.krate><![CDATA[outlet_trigdel=0;
if ((inlet_set>0) && !p_set) {op = 1; p_set=1;outlet_trigdel=1;}
if ((inlet_reset>0) && !p_reset) {op = 0; p_reset=1;}
if (!(inlet_set>0)) p_set=0;
if (!(inlet_reset>0)) p_reset=0;
outlet_o= (op<<27);]]></code.krate>
      </object>
   </patchobj>
   <obj type="logic/xor 2" uuid="7902b0001a2672a9008b3882d3681ec3e33fec74" name="xor_1" x="3444" y="2100">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/and 2" uuid="c67031682f552aa0a80b23377495c51ea28a8c9c" name="and_2" x="2940" y="2170">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/or 2" uuid="3805d3c84d30032a44fbdbe42d9a2988a1790a3e" name="or_15" x="3024" y="2170">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="adef9b0f-d36f-4e7e-acc0-cc9020c77af3" name="keyb_11" x="3136" y="2198">
      <params/>
      <attribs>
         <spinner attributeName="channel" value="4"/>
      </attribs>
      <object id="patch/object" uuid="adef9b0f-d36f-4e7e-acc0-cc9020c77af3">
         <sDescription>Monophonic MIDI keyboard note input, gate, velocity and release velocity</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>midi_in.axh</helpPatch>
         <inlets>
            <bool32 name="clear"/>
            <bool32 name="bate"/>
         </inlets>
         <outlets>
            <bool32 name="direction"/>
            <bool32 name="overwrite"/>
            <int32 name="pitchshift"/>
            <bool32 name="gate2" description="key pressed, retrigger on legato"/>
            <int32 name="note"/>
            <bool32 name="gate"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <spinner name="channel" MinValue="1" MaxValue="16" DefaultValue="1"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int8_t _note;
int8_t pitchshift;
int32_t direction;
int32_t overwrite;
int32_t _gate;
int32_t _gate2;
int bate;
int ntrig;]]></code.declaration>
         <code.init><![CDATA[_gate = 0;
pitchshift=0;
_note=-28;]]></code.init>
         <code.krate><![CDATA[outlet_pitchshift= pitchshift;
outlet_direction=direction;
outlet_overwrite=overwrite;
outlet_note=_note+28;

if (!inlet_bate){
	if (ntrig){
		MidiSend3((midi_device_t) MIDI_DEVICE_USB_HOST, 1 , MIDI_CONTROL_CHANGE, (107), 16);
		MidiSend3((midi_device_t) MIDI_DEVICE_USB_HOST, 1 , MIDI_NOTE_ON, (120), 0);
	ntrig=0;	
	}
outlet_gate2= _gate2;
}

else if (inlet_bate){
	outlet_gate2= bate;
	if (!ntrig){
		MidiSend3((midi_device_t) MIDI_DEVICE_USB_HOST, 1 , MIDI_CONTROL_CHANGE, (107), 1);
		MidiSend3((midi_device_t) MIDI_DEVICE_USB_HOST, 1 , MIDI_NOTE_ON, (120), 1);
		ntrig=1;
	}
}
outlet_gate=_gate2;
_gate2 = _gate;]]></code.krate>
         <code.midihandler><![CDATA[if ((status == MIDI_NOTE_ON + (attr_channel-1)) && (data2)) {
if ((data1>35)&&(data1<40)){pitchshift=-12;}		
if ((data1>39)&&(data1<44)){pitchshift=0;}
if ((data1>43)&&(data1<48)){pitchshift=12;}
if ((data1>47)&&(data1<52)){pitchshift=24;}
if ((data1==36)||(data1==37)||(data1==40)||(data1==41)||(data1==44)||(data1==45)||(data1==48)||(data1==49)) {direction=0;}
if ((data1==38)||(data1==39)||(data1==42)||(data1==43)||(data1==46)||(data1==47)||(data1==50)||(data1==51)) {direction=1;}

if ((data1==36)||(data1==38)||(data1==40)||(data1==42)||(data1==44)||(data1==46)||(data1==48)||(data1==50)) {overwrite=0;}
if ((data1==37)||(data1==39)||(data1==41)||(data1==43)||(data1==45)||(data1==47)||(data1==49)||(data1==51)) {overwrite=1;}
  _note = data1-64;
  _gate = 1<<27;
  _gate2 = 0;
} else if (((status == MIDI_NOTE_ON + (attr_channel-1)) && (!data2))||
          (status == MIDI_NOTE_OFF + (attr_channel-1))) {
  if (_note == data1-64) {
    _gate = 0;
    _note = data1-64;
  }
} 

if (status == 12 + MIDI_CONTROL_CHANGE) {
  if ((data1==101)&&data2){
  	bate=1;
  }
  else if ((data1==101)&&!data2){
  	bate=0;
  }
  
}]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="c8ce26a1-1552-494a-94aa-26fb839ba19d" name="step_8" x="3290" y="2198">
      <params/>
      <attribs>
         <combo attributeName="device" selection="usb host port / LP"/>
         <combo attributeName="color" selection="red S"/>
         <combo attributeName="colo" selection="red W"/>
         <combo attributeName="corner" selection="bottomright"/>
      </attribs>
      <object id="patch/object" uuid="c8ce26a1-1552-494a-94aa-26fb839ba19d">
         <sDescription>display a step counter on a novation launchpad</sDescription>
         <author>Robert Schirmer</author>
         <license>BSD</license>
         <helpPatch>launchpad.axh</helpPatch>
         <rotatedParams>true</rotatedParams>
         <inlets>
            <int32 name="step" description="current step"/>
            <bool32 name="active" description="active??"/>
         </inlets>
         <outlets/>
         <displays/>
         <params/>
         <attribs>
            <combo name="device">
               <MenuEntries>
                  <string>usb host port / LP</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_USB_HOST, 1</string>
               </CEntries>
            </combo>
            <combo name="color">
               <MenuEntries>
                  <string>off</string>
                  <string>red W</string>
                  <string>red M</string>
                  <string>red S</string>
                  <string>orange W</string>
                  <string>orange S</string>
                  <string>green W</string>
                  <string>green M</string>
                  <string>green S</string>
                  <string>lime 1 W</string>
                  <string>lime 1 S</string>
                  <string>lime 2</string>
                  <string>yellow W</string>
                  <string>yellow M</string>
                  <string>yellow S</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>18</string>
                  <string>35</string>
                  <string>16</string>
                  <string>32</string>
                  <string>48</string>
                  <string>33</string>
                  <string>50</string>
                  <string>49</string>
                  <string>17</string>
                  <string>34</string>
                  <string>51</string>
               </CEntries>
            </combo>
            <combo name="colo">
               <MenuEntries>
                  <string>off</string>
                  <string>red W</string>
                  <string>red M</string>
                  <string>red S</string>
                  <string>orange W</string>
                  <string>orange S</string>
                  <string>green W</string>
                  <string>green M</string>
                  <string>green S</string>
                  <string>lime 1 W</string>
                  <string>lime 1 S</string>
                  <string>lime 2</string>
                  <string>yellow W</string>
                  <string>yellow M</string>
                  <string>yellow S</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>18</string>
                  <string>35</string>
                  <string>16</string>
                  <string>32</string>
                  <string>48</string>
                  <string>33</string>
                  <string>50</string>
                  <string>49</string>
                  <string>17</string>
                  <string>34</string>
                  <string>51</string>
               </CEntries>
            </combo>
            <combo name="corner">
               <MenuEntries>
                  <string>topleft</string>
                  <string>topright</string>
                  <string>bottomleft</string>
                  <string>bottomright</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>4</string>
                  <string>64</string>
                  <string>68</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int ntrig;
int rtrig;
int prev;
int i;
int32_t map[16];
int32_t v;]]></code.declaration>
         <code.init><![CDATA[{ 
  int i;
  for(i=0;i<16;i++) 

  map[0] = 48+attr_corner;
map[1] = 48+attr_corner+1;
map[2] = 48+attr_corner+2;
map[3] = 48+attr_corner+3;
map[4] = 32+attr_corner;
map[5] = 32+attr_corner+1;
map[6] = 32+attr_corner+2;
map[7] = 32+attr_corner+3;
map[8] = 16+attr_corner;
map[9] = 16+attr_corner+1;
map[10] = 16+attr_corner+2;
map[11] = 16+attr_corner+3;
map[12] = 0+attr_corner;
map[13] = 0+attr_corner+1;
map[14] = 0+attr_corner+2;
map[15] = 0+attr_corner+3;

}
rtrig=1;]]></code.init>
         <code.krate><![CDATA[if (i < 16){
MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON ,map[i],attr_colo);

i += 1;
  }
  else i = 666;
if (inlet_active){rtrig=1;}

if (rtrig) {MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON ,map[(inlet_step)],(attr_color));}

if (inlet_step  != prev) {
  MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON ,map[(inlet_step)],(attr_color));
  MidiSend3((midi_device_t) attr_device, MIDI_NOTE_ON ,map[(prev)],attr_colo);
prev = inlet_step;
}




rtrig = 0;]]></code.krate>
      </object>
   </patchobj>
   <obj type="conv/unipolar2bipolar" uuid="efc8ee28c508740c5edf7995eaaa07a6d6818e5e" name="unipolar2bipolar_2" x="3444" y="2198">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/-c" uuid="bc70bed87e5405985ade03f4806b9450609a9093" name="-c_2" x="3584" y="2198">
      <params>
         <frac32.u.map name="c" value="32.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="rbrt/math/&gt;&gt; i c" uuid="14229bad-f41f-40ed-b5dd-c74e31a347c1" name="&gt;&gt;_3____tmp" x="3654" y="2198">
      <params>
         <int32 name="shift" value="1"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/+1" uuid="13c1a4574bb81783beb8839e81782b9a34e3fc17" name="+1_2" x="3794" y="2198">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="0e046559-d6be-483d-8f0c-229da07227ff" name="&gt;=_2" x="3864" y="2198">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="0e046559-d6be-483d-8f0c-229da07227ff">
         <sDescription>greater than or equal</sDescription>
         <author>Phil Julian</author>
         <license>CC0</license>
         <inlets>
            <int32 name="in1" description="in1"/>
         </inlets>
         <outlets>
            <bool32 name="out" description="out"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out= inlet_in1>=32;]]></code.krate>
      </object>
   </patchobj>
   <obj type="timer/delayedpulsem" uuid="edae71bda6092aa94232876fd3f8a107bdb9ebcf" name="delayedpulsem_2" x="3962" y="2198">
      <params>
         <frac32.s.map name="delay" value="17.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="logic/counter" uuid="7a141ba82230e54e5f5cd12da5dbe5a74ba854a5" name="counter_5" x="4088" y="2198">
      <params>
         <int32 name="maximum" value="65536"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="bcb13cf5-25b6-4e39-bd38-6fa9b4f11297" name="b_5" x="4270" y="2198">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="bcb13cf5-25b6-4e39-bd38-6fa9b4f11297">
         <sDescription>Generates a single pulse after a rising edge on trigger input. A new trigger before the pulse finishes at the output, extends the pulse.</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>pulselength.axh</helpPatch>
         <inlets>
            <bool32.rising name="trig" description="trigger"/>
         </inlets>
         <outlets>
            <bool32 name="pulse" description="pulse output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int ntrig;]]></code.declaration>
         <code.init><![CDATA[ntrig = 0;]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig > 0) && !ntrig) {
  ntrig = 1;
  outlet_pulse = 1;
}
else outlet_pulse=0;
if (!(inlet_trig > 0))
{
    ntrig = 0;
  }]]></code.krate>
      </object>
   </patchobj>
   <obj type="math/==" uuid="deaf0d36642c57876c4101e86f8a0b6a06021ab2" name="==_5" x="4368" y="2198">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="bcb13cf5-25b6-4e39-bd38-6fa9b4f11297" name="b_6" x="4452" y="2198">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="bcb13cf5-25b6-4e39-bd38-6fa9b4f11297">
         <sDescription>Generates a single pulse after a rising edge on trigger input. A new trigger before the pulse finishes at the output, extends the pulse.</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>pulselength.axh</helpPatch>
         <inlets>
            <bool32.rising name="trig" description="trigger"/>
         </inlets>
         <outlets>
            <bool32 name="pulse" description="pulse output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int ntrig;]]></code.declaration>
         <code.init><![CDATA[ntrig = 0;]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig > 0) && !ntrig) {
  ntrig = 1;
  outlet_pulse = 1;
}
else outlet_pulse=0;
if (!(inlet_trig > 0))
{
    ntrig = 0;
  }]]></code.krate>
      </object>
   </patchobj>
   <obj type="mux/mux 2" uuid="e1c92bc92f4d191bfadf0efeae4503b458a4e440" name="mux_6" x="4620" y="2198">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="2409cd96-1ab2-4749-8784-7794aa0e4f2f" name="flipflop_4" x="4704" y="2198">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="2409cd96-1ab2-4749-8784-7794aa0e4f2f">
         <sDescription>flipflop</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>logic.axh</helpPatch>
         <inlets>
            <bool32.rising name="set" description="set"/>
            <bool32.rising name="reset" description="reset"/>
         </inlets>
         <outlets>
            <bool32 name="o" description="output"/>
            <bool32 name="trigdel"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int p_set;
   int p_reset;
   int op;
   int i;
   int itrig;]]></code.declaration>
         <code.init><![CDATA[p_set = 0;
p_reset = 0;
op = 0;]]></code.init>
         <code.krate><![CDATA[outlet_trigdel=0;
if ((inlet_set>0) && !p_set) {op = 1; p_set=1;outlet_trigdel=1;}
if ((inlet_reset>0) && !p_reset) {op = 0; p_reset=1;}
if (!(inlet_set>0)) p_set=0;
if (!(inlet_reset>0)) p_reset=0;
outlet_o= (op<<27);]]></code.krate>
      </object>
   </patchobj>
   <obj type="logic/xor 2" uuid="7902b0001a2672a9008b3882d3681ec3e33fec74" name="xor_2" x="4830" y="2198">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/and 2" uuid="c67031682f552aa0a80b23377495c51ea28a8c9c" name="and_3" x="4480" y="2310">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/or 2" uuid="3805d3c84d30032a44fbdbe42d9a2988a1790a3e" name="or_16" x="4564" y="2310">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="2464" y="2338" text="env dpth 2"/>
   <patchobj type="patch/object" uuid="62161b41-7575-41f1-ac22-b308e8b13662" name="d_1" x="1974" y="2352">
      <params>
         <frac32.s.map name="d" value="0.0"/>
      </params>
      <attribs/>
      <object id="patch/object" uuid="62161b41-7575-41f1-ac22-b308e8b13662">
         <sDescription>decay envelope, linear ramp</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>env.axh</helpPatch>
         <inlets>
            <bool32.rising name="trig" description="trigger"/>
            <frac32.bipolar name="d"/>
         </inlets>
         <outlets>
            <frac32.positive name="env" description="envelope output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.klineartime.exp name="d" noLabel="true"/>
         </params>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t val;
int ntrig;]]></code.declaration>
         <code.init><![CDATA[val = 0;
ntrig = 0;]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig > 0) && !ntrig) {
  val = 1 << 27;
  ntrig = 1;
}
else {
  if (!(inlet_trig > 0))
    ntrig = 0;
  int32_t t;
  MTOF(-param_d - inlet_d,t);
  val -= t>>6;
  if (val < 0)
    val = 0;
}
outlet_env = val;]]></code.krate>
      </object>
   </patchobj>
   <obj type="drj/math/inv_pos" uuid="ae23d42592d86ae7d7f2202cb1124490774d118a" name="inv_pos_2" x="2086" y="2352">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="88a7c606-20b5-41f7-bffd-4a18f4ed4403" name="i_3" x="2198" y="2352">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="88a7c606-20b5-41f7-bffd-4a18f4ed4403">
         <sDescription>constant</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>i.axh</helpPatch>
         <inlets/>
         <outlets>
            <int32 name="out" description="output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_out= 12;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="3ed534b6-af21-4535-84d0-2a123971de90" name="*_11" x="2296" y="2352">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="3ed534b6-af21-4535-84d0-2a123971de90">
         <sDescription>multiply</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>math.axh</helpPatch>
         <inlets>
            <frac32 name="a" description="input"/>
            <frac32 name="b" description="input"/>
         </inlets>
         <outlets>
            <frac32 name="result" description="output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_result= ___SMMUL(inlet_a<<3,inlet_b<<2);]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="dad70618-dab9-4d93-a907-3a0544bd916e" name="*_12" x="2380" y="2352">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="dad70618-dab9-4d93-a907-3a0544bd916e">
         <sDescription>multiply</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>math.axh</helpPatch>
         <inlets>
            <frac32 name="a" description="input"/>
            <frac32 name="b" description="input"/>
         </inlets>
         <outlets>
            <frac32 name="result" description="output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_result= ___SMMUL(inlet_a<<3,inlet_b<<2);
]]></code.krate>
      </object>
   </patchobj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_16" x="2464" y="2352">
      <params/>
      <attribs/>
   </obj>
   <obj type="conv/to f" uuid="bdd08445689602ce174689ccb6be085f627d9892" name="to_2" x="2534" y="2352">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_8" x="2604" y="2352">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="44553fdc8628c67ab535845ed1be304ad6c9553b" name="+_3" x="2660" y="2352">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="44553fdc8628c67ab535845ed1be304ad6c9553b" name="+_9" x="2744" y="2352">
      <params/>
      <attribs/>
   </obj>
   <obj type="TSG/math/limit" uuid="96549a9d-cf2a-4b5c-b9b1-58b08745c3fe" name="limit_1" x="2828" y="2352">
      <params/>
      <attribs>
         <spinner attributeName="max" value="64"/>
         <spinner attributeName="min" value="-64"/>
      </attribs>
   </obj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_9" x="2926" y="2352">
      <params/>
      <attribs/>
   </obj>
   <obj type="drj/math/sum3" uuid="93cb11244907aed86ae7d7f2274d118a23d46692" name="sum3_3" x="2982" y="2352">
      <params/>
      <attribs/>
   </obj>
   <obj type="drj/math/sum3" uuid="93cb11244907aed86ae7d7f2274d118a23d46692" name="sum3_2" x="3080" y="2352">
      <params/>
      <attribs/>
   </obj>
   <obj type="TSG/math/limit" uuid="96549a9d-cf2a-4b5c-b9b1-58b08745c3fe" name="limit_3" x="3178" y="2352">
      <params/>
      <attribs>
         <spinner attributeName="max" value="64"/>
         <spinner attributeName="min" value="-64"/>
      </attribs>
   </obj>
   <comment type="patch/comment" x="4032" y="2380" text="env dpth 3"/>
   <patchobj type="patch/object" uuid="98ced638-3096-495d-a677-8f8eeed1af51" name="d_2" x="3528" y="2394">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="98ced638-3096-495d-a677-8f8eeed1af51">
         <sDescription>decay envelope, linear ramp</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>env.axh</helpPatch>
         <inlets>
            <bool32.rising name="trig" description="trigger"/>
            <frac32.bipolar name="d"/>
         </inlets>
         <outlets>
            <frac32.positive name="env" description="envelope output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t val;
int ntrig;]]></code.declaration>
         <code.init><![CDATA[val = 0;
ntrig = 0;]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig > 0) && !ntrig) {
  val = 1 << 27;
  ntrig = 1;
}
else {
  if (!(inlet_trig > 0))
    ntrig = 0;
  int32_t t;
  MTOF(-inlet_d,t);
  val -= t>>6;
  if (val < 0)
    val = 0;
}
outlet_env = val;]]></code.krate>
      </object>
   </patchobj>
   <obj type="drj/math/inv_pos" uuid="ae23d42592d86ae7d7f2202cb1124490774d118a" name="inv_pos_3" x="3640" y="2394">
      <params/>
      <attribs/>
   </obj>
   <obj type="const/i" uuid="e202f44b2df17ae0b3e663b98ea6b14c8ff00408" name="i_4" x="3766" y="2394">
      <params/>
      <attribs>
         <spinner attributeName="value" value="12"/>
      </attribs>
   </obj>
   <patchobj type="patch/object" uuid="3ed534b6-af21-4535-84d0-2a123971de90" name="*_13" x="3878" y="2394">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="3ed534b6-af21-4535-84d0-2a123971de90">
         <sDescription>multiply</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>math.axh</helpPatch>
         <inlets>
            <frac32 name="a" description="input"/>
            <frac32 name="b" description="input"/>
         </inlets>
         <outlets>
            <frac32 name="result" description="output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.krate><![CDATA[outlet_result= ___SMMUL(inlet_a<<3,inlet_b<<2);]]></code.krate>
      </object>
   </patchobj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_14" x="3962" y="2394">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_15" x="4032" y="2394">
      <params/>
      <attribs/>
   </obj>
   <obj type="conv/to f" uuid="bdd08445689602ce174689ccb6be085f627d9892" name="to_1" x="4102" y="2394">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_10" x="4172" y="2394">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="44553fdc8628c67ab535845ed1be304ad6c9553b" name="+_5" x="4228" y="2394">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="44553fdc8628c67ab535845ed1be304ad6c9553b" name="+_10" x="4298" y="2394">
      <params/>
      <attribs/>
   </obj>
   <obj type="TSG/math/limit" uuid="96549a9d-cf2a-4b5c-b9b1-58b08745c3fe" name="limit_2" x="4382" y="2394">
      <params/>
      <attribs>
         <spinner attributeName="max" value="64"/>
         <spinner attributeName="min" value="-64"/>
      </attribs>
   </obj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_7" x="4480" y="2394">
      <params/>
      <attribs/>
   </obj>
   <obj type="drj/math/sum3" uuid="93cb11244907aed86ae7d7f2274d118a23d46692" name="sum3_4" x="4550" y="2394">
      <params/>
      <attribs/>
   </obj>
   <obj type="drj/math/sum3" uuid="93cb11244907aed86ae7d7f2274d118a23d46692" name="sum3_1" x="4648" y="2394">
      <params/>
      <attribs/>
   </obj>
   <obj type="TSG/math/limit" uuid="96549a9d-cf2a-4b5c-b9b1-58b08745c3fe" name="limit_4" x="4732" y="2394">
      <params/>
      <attribs>
         <spinner attributeName="max" value="64"/>
         <spinner attributeName="min" value="-64"/>
      </attribs>
   </obj>
   <comment type="patch/comment" x="2758" y="2450" text="factotum sequence play matrix 1"/>
   <comment type="patch/comment" x="4508" y="2478" text="dry"/>
   <comment type="patch/comment" x="4746" y="2478" text="loop"/>
   <obj type="logic/or 2" uuid="3805d3c84d30032a44fbdbe42d9a2988a1790a3e" name="or_11" x="4200" y="2492">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/inv" uuid="2bd44b865d3b63ff9b80862242bf5be779e3ad5" name="inv_2" x="4270" y="2492">
      <params/>
      <attribs/>
   </obj>
   <obj type="env/ahd" uuid="2139369d6de2ba5ddf76e602d1d25df653ca9eed" name="ahd_7" x="4354" y="2492">
      <params>
         <frac32.s.map name="a" value="-64.0"/>
         <frac32.s.map name="d" value="-64.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_19" x="4452" y="2492">
      <params/>
      <attribs/>
   </obj>
   <obj type="drj/math/inv_pos" uuid="ae23d42592d86ae7d7f2202cb1124490774d118a" name="inv_pos_5" x="4508" y="2492">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="44553fdc8628c67ab535845ed1be304ad6c9553b" name="+_13" x="4620" y="2492">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_17" x="4690" y="2492">
      <params/>
      <attribs/>
   </obj>
   <obj type="drj/math/inv_pos" uuid="ae23d42592d86ae7d7f2202cb1124490774d118a" name="inv_pos_4" x="4746" y="2492">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="44553fdc8628c67ab535845ed1be304ad6c9553b" name="+_12" x="4844" y="2492">
      <params/>
      <attribs/>
   </obj>
   <obj type="rbrt/launchpad/top disp" uuid="53640b5e-2345-494e-9be6-6130e20986e2" name="top_3" x="2352" y="2590">
      <params/>
      <attribs>
         <combo attributeName="device" selection="usb host port / LP"/>
         <spinner attributeName="button" value="0"/>
         <combo attributeName="on" selection="yellow S"/>
         <combo attributeName="off" selection="yellow W"/>
      </attribs>
   </obj>
   <patchobj type="patch/object" uuid="96719bd5-cb1b-4858-a080-d0c855b4d731" name="top_4" x="2478" y="2590">
      <params/>
      <attribs>
         <combo attributeName="device" selection="usb host port / LP"/>
         <spinner attributeName="button" value="1"/>
         <combo attributeName="on" selection="yellow S"/>
         <combo attributeName="off" selection="yellow W"/>
      </attribs>
      <object id="patch/object" uuid="96719bd5-cb1b-4858-a080-d0c855b4d731">
         <sDescription>sets a top row button on the &apos;launchpad&apos; to the defined color</sDescription>
         <author>robert schirmer</author>
         <license>BSD</license>
         <helpPatch>launchpad.axh</helpPatch>
         <inlets>
            <bool32.risingfalling name="on"/>
            <int32 name="coloron"/>
            <int32 name="coloroff"/>
            <bool32.rising name="redraw"/>
         </inlets>
         <outlets/>
         <displays/>
         <params/>
         <attribs>
            <combo name="device">
               <MenuEntries>
                  <string>usb host port / LP</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_USB_HOST, 1</string>
               </CEntries>
            </combo>
            <spinner name="button" MinValue="0" MaxValue="7" DefaultValue="0"/>
            <combo name="on">
               <MenuEntries>
                  <string>off</string>
                  <string>red W</string>
                  <string>red M</string>
                  <string>red S</string>
                  <string>orange W</string>
                  <string>orange S</string>
                  <string>green W</string>
                  <string>green M</string>
                  <string>green S</string>
                  <string>lime 1 W</string>
                  <string>lime 1 S</string>
                  <string>lime 2</string>
                  <string>yellow W</string>
                  <string>yellow M</string>
                  <string>yellow S</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>18</string>
                  <string>35</string>
                  <string>16</string>
                  <string>32</string>
                  <string>48</string>
                  <string>33</string>
                  <string>50</string>
                  <string>49</string>
                  <string>17</string>
                  <string>34</string>
                  <string>51</string>
               </CEntries>
            </combo>
            <combo name="off">
               <MenuEntries>
                  <string>off</string>
                  <string>red W</string>
                  <string>red M</string>
                  <string>red S</string>
                  <string>orange W</string>
                  <string>orange S</string>
                  <string>green W</string>
                  <string>green M</string>
                  <string>green S</string>
                  <string>lime 1 W</string>
                  <string>lime 1 S</string>
                  <string>lime 2</string>
                  <string>yellow W</string>
                  <string>yellow M</string>
                  <string>yellow S</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>18</string>
                  <string>35</string>
                  <string>16</string>
                  <string>32</string>
                  <string>48</string>
                  <string>33</string>
                  <string>50</string>
                  <string>49</string>
                  <string>17</string>
                  <string>34</string>
                  <string>51</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[uint8_t b;
uint8_t prevb;
int ntrig;]]></code.declaration>
         <code.krate><![CDATA[b  = (inlet_on)?(attr_on+inlet_coloron):(attr_off + inlet_coloroff);
if (((b != prevb ) || (inlet_redraw > 0)) && (!ntrig))
{ MidiSend3((midi_device_t) attr_device, MIDI_CONTROL_CHANGE, (104 + attr_button), b);ntrig = 1; prevb=b;}
else ntrig = 0;]]></code.krate>
      </object>
   </patchobj>
   <obj type="env/ahd lin m" uuid="f9b46834ce96425064b4ed7f53ad8b91ea1ac0ef" name="ahd_5" x="3094" y="2660">
      <params>
         <frac32.s.map name="a" value="0.0"/>
         <frac32.s.map name="d" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="9f8e652d-4d97-44af-8f01-c662619a1418" name="ahd_4" x="3332" y="2660">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="9f8e652d-4d97-44af-8f01-c662619a1418">
         <sDescription>attack/hold/decay envelope, linear ramps</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>env.axh</helpPatch>
         <inlets>
            <bool32.risingfalling name="trig" description="trigger"/>
         </inlets>
         <outlets>
            <frac32.positive name="env" description="envelope output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t val;]]></code.declaration>
         <code.init><![CDATA[val = 0;]]></code.init>
         <code.krate><![CDATA[if (inlet_trig > 0) {
  int32_t t;
  MTOF(-0xF8000000,t);
  val += t>>6;
}
else {
  int32_t t;
  MTOF(-0xF8000000,t);
  val -= t>>6;
}
val = __USAT(val,27);
outlet_env = val;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="465615f7-7510-462b-b405-932433ea739c" name="ahd_6" x="3822" y="2660">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="465615f7-7510-462b-b405-932433ea739c">
         <sDescription>attack/hold/decay envelope, linear ramps, modulation inputs, extended range</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>env.axh</helpPatch>
         <inlets>
            <bool32.risingfalling name="trig" description="trigger"/>
            <frac32.bipolar name="a" description="attack time"/>
            <frac32.bipolar name="d" description="decay time"/>
         </inlets>
         <outlets>
            <frac32.positive name="env" description="envelope output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t val;]]></code.declaration>
         <code.init><![CDATA[val = 0;]]></code.init>
         <code.krate><![CDATA[if (inlet_trig > 0) {
  int32_t t;
  int32_t at = inlet_a;
  MTOF(-at,t);
  val += t>>6;
}
else {
  int32_t t;
  int32_t dt = inlet_d;
  MTOF(-dt,t);
  val -= t>>6;
}
val = __USAT(val,27);
outlet_env = val;]]></code.krate>
      </object>
   </patchobj>
   <obj type="env/ahd lin" uuid="4ed5fd29254747e71db6d1d4caa20a89a41740f0" name="ahd_1" x="2730" y="2674">
      <params>
         <frac32.s.map name="a" value="-64.0"/>
         <frac32.s.map name="d" value="-64.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_2" x="3962" y="2674">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_3" x="4116" y="2674">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="4340" y="2674" text="dry"/>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_18" x="4438" y="2674">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="4508" y="2674" text="looplevel"/>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_4" x="2828" y="2688">
      <params/>
      <attribs/>
   </obj>
   <obj type="sss/delay/Factotum" uuid="978d597e-b90a-49b5-bff2-81589ba76968" name="Factotum_1" x="2954" y="2688">
      <params>
         <int32 name="fade" value="10"/>
         <frac32.u.map name="phase" value="0.0"/>
         <frac32.u.map name="length" value="64.0"/>
         <int32.hradio name="dir" value="2"/>
         <frac32.s.map name="playspeed" value="0.0"/>
         <frac32.s.map name="pitchshift" value="0.0"/>
         <frac32.s.map name="stretch" value="0.0"/>
         <frac32.s.map name="rate" value="0.0"/>
         <frac32.u.map name="window" value="64.0"/>
         <frac32.s.map name="shiftsize" value="0.0"/>
         <int32 name="ratedivisor" value="0"/>
         <int32 name="qnt" value="0"/>
         <int32 name="step1" value="1"/>
         <int32 name="step2" value="1"/>
         <bool32.tgl name="overwrite" value="0"/>
         <frac32.s.map name="feedback" value="64.0"/>
         <frac32.u.map name="dry" value="0.0"/>
         <frac32.u.map name="wet" value="64.0"/>
      </params>
      <attribs>
         <combo attributeName="size" selection="524288 (10.9s)"/>
      </attribs>
   </obj>
   <patchobj type="patch/object" uuid="e96f43af-9a95-4129-9006-767e9a92f031" name="lp_3" x="3192" y="2688">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="e96f43af-9a95-4129-9006-767e9a92f031">
         <sDescription>Low pass filter, state-variable type</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>filter.axh</helpPatch>
         <inlets>
            <frac32buffer name="in" description="filter input"/>
            <frac32.bipolar name="pitch"/>
            <frac32.positive name="reso"/>
         </inlets>
         <outlets>
            <frac32buffer name="out" description="filter output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t low;
int32_t band;]]></code.declaration>
         <code.init><![CDATA[low = 0;
band = 0;]]></code.init>
         <code.krate><![CDATA[int32_t damp = (0x80<<24) - (inlet_reso<<4);
damp = ___SMMUL(damp,damp);
int32_t alpha;
int32_t freq;
MTOFEXTENDED(inlet_pitch,alpha);
SINE2TINTERP(alpha,freq);]]></code.krate>
         <code.srate><![CDATA[int32_t in1 = inlet_in;
int32_t notch = inlet_in - (___SMMUL(damp,band)<<1);
low = low + (___SMMUL(freq,band)<<1);
int32_t high  = notch - low;
band = (___SMMUL(freq,high)<<1) + band;// - drive*band*band*band;
int32_t out1 = low;
outlet_out = out1;]]></code.srate>
      </object>
   </patchobj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_5" x="3444" y="2688">
      <params/>
      <attribs/>
   </obj>
   <obj type="sss/delay/Factotum" uuid="978d597e-b90a-49b5-bff2-81589ba76968" name="Factotum_2" x="3514" y="2688">
      <params>
         <int32 name="fade" value="10"/>
         <frac32.u.map name="phase" value="0.0"/>
         <frac32.u.map name="length" value="64.0"/>
         <int32.hradio name="dir" value="2"/>
         <frac32.s.map name="playspeed" value="0.0"/>
         <frac32.s.map name="pitchshift" value="0.0"/>
         <frac32.s.map name="stretch" value="0.0"/>
         <frac32.s.map name="rate" value="0.0"/>
         <frac32.u.map name="window" value="64.0"/>
         <frac32.s.map name="shiftsize" value="0.0"/>
         <int32 name="ratedivisor" value="0"/>
         <int32 name="qnt" value="0"/>
         <int32 name="step1" value="1"/>
         <int32 name="step2" value="1"/>
         <bool32.tgl name="overwrite" value="0"/>
         <frac32.s.map name="feedback" value="64.0"/>
         <frac32.u.map name="dry" value="0.0"/>
         <frac32.u.map name="wet" value="64.0"/>
      </params>
      <attribs>
         <combo attributeName="size" selection="524288 (10.9s)"/>
      </attribs>
   </obj>
   <patchobj type="patch/object" uuid="9081fbd1-55d9-492b-a120-9867c3a99fea" name="lp_4" x="3654" y="2688">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="9081fbd1-55d9-492b-a120-9867c3a99fea">
         <sDescription>Low pass filter, state-variable type</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>filter.axh</helpPatch>
         <inlets>
            <frac32buffer name="in" description="filter input"/>
            <frac32.bipolar name="pitch"/>
            <frac32.positive name="reso"/>
         </inlets>
         <outlets>
            <frac32buffer name="out" description="filter output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t low;
int32_t band;]]></code.declaration>
         <code.init><![CDATA[low = 0;
band = 0;]]></code.init>
         <code.krate><![CDATA[int32_t damp = (0x80<<24) - (inlet_reso<<4);
damp = ___SMMUL(damp,damp);
int32_t alpha;
int32_t freq;
MTOFEXTENDED(inlet_pitch,alpha);
SINE2TINTERP(alpha,freq);]]></code.krate>
         <code.srate><![CDATA[int32_t in1 = inlet_in;
int32_t notch = inlet_in - (___SMMUL(damp,band)<<1);
low = low + (___SMMUL(freq,band)<<1);
int32_t high  = notch - low;
band = (___SMMUL(freq,high)<<1) + band;// - drive*band*band*band;
int32_t out1 = low;
outlet_out = out1;]]></code.srate>
      </object>
   </patchobj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_13" x="4032" y="2688">
      <params/>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_14" x="4186" y="2688">
      <params/>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_6" x="4340" y="2688">
      <params/>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_11" x="4508" y="2688">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="faedbea4612d9bd3644d6d3bf31946d848a70e19" name="+_4" x="4578" y="2688">
      <params/>
      <attribs/>
   </obj>
   <obj type="drj/math/sum3" uuid="93cb11244902274d118a237aed86ae7d7fd46107" name="sum3_5" x="4662" y="2688">
      <params/>
      <attribs/>
   </obj>
   <obj type="audio/out left" uuid="b11a3c09b2fdd575ea8212f2ce7743d5269253b1" name="out_3" x="4774" y="2688">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="27a4893e-93bb-4a7c-b41c-0b02da02cbed" name="keyb_3" x="770" y="2982">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="27a4893e-93bb-4a7c-b41c-0b02da02cbed">
         <sDescription>Monophonic MIDI keyboard note input, gate, velocity and release velocity</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>midi_in.axh</helpPatch>
         <inlets/>
         <outlets>
            <bool32 name="gate" description="key pressed?"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[uint8_t _gate;
int ccv;]]></code.declaration>
         <code.init><![CDATA[_gate = 0;
]]></code.init>
         <code.krate><![CDATA[if (ccv&&_gate){
	outlet_gate=1;
}
else outlet_gate=0;]]></code.krate>
         <code.midihandler><![CDATA[if ((status == MIDI_NOTE_ON + 8) && (data2)) {
	if (data1 == 108) {
   _gate = 1;
}
	if (data1 == 107) {
   ccv = 1;
}
}
 else if (((status == MIDI_NOTE_ON + 8) && (!data2))||          (status == MIDI_NOTE_OFF + 8)) {
  
    _gate = 0;
    ccv=0;
  
}]]></code.midihandler>
      </object>
   </patchobj>
   <obj type="string/c" uuid="4aa90a90c435a742ddfa152d232883fc5b2f1b3" name="c_1" x="882" y="2982">
      <params/>
      <attribs>
         <table attributeName="str" table="/granVBX"/>
      </attribs>
   </obj>
   <obj type="table/save" uuid="3e4108b607d56d9e1cd10abb898b58eea11e53b2" name="save_1" x="1036" y="2982">
      <params/>
      <attribs>
         <objref attributeName="table" obj="lcxl2"/>
      </attribs>
   </obj>
   <obj type="timer/delayedpulse" uuid="3f05ee534ca67755fb20c7437f9e4de3d4c2f73d" name="delayedpulse_1" x="1176" y="2982">
      <params>
         <frac32.s.map name="delay" value="27.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="string/c" uuid="4aa90a90c435a742ddfa152d232883fc5b2f1b3" name="c_2" x="1526" y="2982">
      <params/>
      <attribs>
         <table attributeName="str" table="/granVBsX"/>
      </attribs>
   </obj>
   <obj type="table/save" uuid="3e4108b607d56d9e1cd10abb898b58eea11e53b2" name="save_2" x="1680" y="2982">
      <params/>
      <attribs>
         <objref attributeName="table" obj="lcxl3"/>
      </attribs>
   </obj>
   <patchobj type="patch/object" uuid="42628074-283f-4e6f-9e2d-c6c38fd448f5" name="delayedpulseduration_2" x="1232" y="3122">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="42628074-283f-4e6f-9e2d-c6c38fd448f5">
         <sDescription>Generates a pulse with a duration after a delay after a rising edge on trigger input. A new trigger before the pulse arrives at the output, will cancel the previous trigger. Extended range.</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>timer.axh</helpPatch>
         <inlets>
            <bool32.rising name="trig" description="trigger"/>
         </inlets>
         <outlets>
            <bool32 name="pulse" description="pulse output"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[int32_t val;
int ntrig;]]></code.declaration>
         <code.init><![CDATA[val = 0;
ntrig = 0;]]></code.init>
         <code.krate><![CDATA[if ((inlet_trig > 0) && !ntrig) {
  val = 1 << 30;
  ntrig = 1;
  outlet_pulse = 0;
}
else {
  if (!(inlet_trig > 0))
    ntrig = 0;
  if (val>0) {
    int32_t t;
    MTOF(-0x03000000,t);
     val -= t>>3;
     if (val<=0) {
         outlet_pulse = 1;
         val = -1 << 30;
     } else outlet_pulse = 0;
  } else if (val<0) {
    int32_t t;
    MTOF(-0x02A00000,t);
     val += t>>3;
     if (val>=0) {         outlet_pulse = 0;
         val = 0;
     } else outlet_pulse = 1;
  } else outlet_pulse = 0;
}]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="27a4893e-93bb-4a7c-b41c-0b02da02cbed" name="keyb_4" x="1442" y="3164">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="27a4893e-93bb-4a7c-b41c-0b02da02cbed">
         <sDescription>Monophonic MIDI keyboard note input, gate, velocity and release velocity</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>midi_in.axh</helpPatch>
         <inlets/>
         <outlets>
            <bool32 name="gate" description="key pressed?"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <includes/>
         <code.declaration><![CDATA[uint8_t _gate;
int ccv;]]></code.declaration>
         <code.init><![CDATA[_gate = 0;
]]></code.init>
         <code.krate><![CDATA[if (ccv&&_gate){
	outlet_gate=1;
}
else outlet_gate=0;]]></code.krate>
         <code.midihandler><![CDATA[if ((status == MIDI_NOTE_ON + 8) && (data2)) {if (data1 == 108) {
   _gate = 1;
}
} else if (((status == MIDI_NOTE_ON + 8) && (!data2))||          (status == MIDI_NOTE_OFF + 8)) {
  if (data1 == 108) {
    _gate = 0;
  }
} 
if ((status == 8 + MIDI_CONTROL_CHANGE)&&(data1 == 107)) { ccv = data2;}]]></code.midihandler>
      </object>
   </patchobj>
   <obj type="patch/load" uuid="634bf1f8c313920d7f19fc402ba937fd1ee27802" name="load_3" x="1526" y="3164">
      <params/>
      <attribs>
         <table attributeName="filename" table="/init malcolm upload/patch.bin"/>
      </attribs>
   </obj>
   <obj type="table/load" uuid="600cc22c6734d23a82620da1a14e78782a7e168e" name="load_6" x="1232" y="3248">
      <params/>
      <attribs>
         <objref attributeName="table" obj="rec"/>
      </attribs>
   </obj>
   <obj type="string/c" uuid="4aa90a90c435a742ddfa152d232883fc5b2f1b3" name="c_8" x="784" y="3262">
      <params/>
      <attribs>
         <table attributeName="str" table="/loopm"/>
      </attribs>
   </obj>
   <obj type="table/save" uuid="3e4108b607d56d9e1cd10abb898b58eea11e53b2" name="save_5" x="1008" y="3262">
      <params/>
      <attribs>
         <objref attributeName="table" obj="rec"/>
      </attribs>
   </obj>
   <nets>
      <net>
         <source obj="lrec_1" outlet="offset"/>
         <dest obj="ldrive_1" inlet="offset"/>
      </net>
      <net>
         <source obj="ldrive_1" outlet="pos"/>
         <dest obj="ldub_1" inlet="phase"/>
         <dest obj="read_1" inlet="a"/>
      </net>
      <net>
         <source obj="read_1" outlet="o"/>
         <dest obj="*_1" inlet="a"/>
      </net>
      <net>
         <source obj="and_18" outlet="o"/>
         <dest obj="ldub_1" inlet="overdub"/>
      </net>
      <net>
         <source obj="lrec_1" outlet="rec"/>
         <dest obj="inv_3" inlet="i"/>
         <dest obj="or_2" inlet="i1"/>
      </net>
      <net>
         <source obj="or_2" outlet="o"/>
         <dest obj="ldrive_1" inlet="play"/>
         <dest obj="ldrive_1" inlet="r2offset"/>
      </net>
      <net>
         <source obj="or_3" outlet="o"/>
         <dest obj="or_14" inlet="i2"/>
      </net>
      <net>
         <source obj="inv_3" outlet="o"/>
         <dest obj="b_9" inlet="trig"/>
      </net>
      <net>
         <source obj="flipflop_7" outlet="o"/>
         <dest obj="and_18" inlet="i1"/>
         <dest obj="or_2" inlet="i2"/>
         <dest obj="*_1" inlet="b"/>
         <dest obj="right_4" inlet="on"/>
      </net>
      <net>
         <source obj="flipflop_9" outlet="o"/>
         <dest obj="or_3" inlet="i1"/>
         <dest obj="right_2" inlet="on"/>
         <dest obj="and_1" inlet="i2"/>
         <dest obj="lrec_1" inlet="rec"/>
      </net>
      <net>
         <source obj="and_20" outlet="o"/>
         <dest obj="flipflop_9" inlet="set"/>
         <dest obj="flipflop_10" inlet="reset"/>
         <dest obj="or_8" inlet="i1"/>
      </net>
      <net>
         <source obj="counter2_init_start_2" outlet="c"/>
         <dest obj="and_1" inlet="i1"/>
         <dest obj="or_7" inlet="i2"/>
      </net>
      <net>
         <source obj="flipflop_10" outlet="o"/>
         <dest obj="and_20" inlet="i2"/>
      </net>
      <net>
         <source obj="or_4" outlet="o"/>
         <dest obj="flipflop_10" inlet="set"/>
      </net>
      <net>
         <source obj="flipflop_11" outlet="o"/>
         <dest obj="and_21" inlet="i2"/>
      </net>
      <net>
         <source obj="or_7" outlet="o"/>
         <dest obj="ldrive_1" inlet="r2start"/>
      </net>
      <net>
         <source obj="or_6" outlet="o"/>
         <dest obj="flipflop_11" inlet="set"/>
      </net>
      <net>
         <source obj="toggle_4" outlet="o"/>
         <dest obj="and_18" inlet="i2"/>
         <dest obj="right_3____tmp" inlet="on"/>
      </net>
      <net>
         <source obj="right_1" outlet="r2"/>
         <dest obj="or_6" inlet="i1"/>
      </net>
      <net>
         <source obj="*_1" outlet="result"/>
         <dest obj="vca_11" inlet="a"/>
         <dest obj="+_1" inlet="in1"/>
      </net>
      <net>
         <source obj="vca_1" outlet="o"/>
         <dest obj="ldub_1" inlet="wave"/>
         <dest obj="vca_6" inlet="a"/>
         <dest obj="lrec_1" inlet="wave"/>
      </net>
      <net>
         <source obj="in_2" outlet="wave"/>
         <dest obj="vca_1" inlet="a"/>
         <dest obj="+_1" inlet="in2"/>
      </net>
      <net>
         <source obj="vca_11" outlet="o"/>
         <dest obj="sum3_5" inlet="in2"/>
      </net>
      <net>
         <source obj="counter_19" outlet="c"/>
         <dest obj="and_20" inlet="i1"/>
         <dest obj="and_21" inlet="i1"/>
         <dest obj="counter2_init_start_2" inlet="inc"/>
      </net>
      <net>
         <source obj="c_8" outlet="out"/>
         <dest obj="save_5" inlet="filename"/>
         <dest obj="load_6" inlet="filename"/>
      </net>
      <net>
         <source obj="delayedpulseduration_2" outlet="pulse"/>
         <dest obj="load_6" inlet="trig"/>
      </net>
      <net>
         <source obj="right_1" outlet="r0"/>
         <dest obj="or_4" inlet="i1"/>
      </net>
      <net>
         <source obj="note_1" outlet="gate5"/>
         <dest obj="or_4" inlet="i2"/>
      </net>
      <net>
         <source obj="or_5" outlet="o"/>
         <dest obj="toggle_4" inlet="trig"/>
      </net>
      <net>
         <source obj="right_1" outlet="r1"/>
         <dest obj="or_5" inlet="i1"/>
      </net>
      <net>
         <source obj="note_1" outlet="gate4"/>
         <dest obj="or_5" inlet="i2"/>
      </net>
      <net>
         <source obj="note_1" outlet="gate3"/>
         <dest obj="or_6" inlet="i2"/>
      </net>
      <net>
         <source obj="note_1" outlet="gate"/>
         <dest obj="or_3" inlet="i4"/>
      </net>
      <net>
         <source obj="note_1" outlet="gate2"/>
         <dest obj="tcopy_4" inlet="trig"/>
      </net>
      <net>
         <source obj="loadbang_4" outlet="pulse"/>
         <dest obj="or_3" inlet="i2"/>
         <dest obj="delayedpulseduration_2" inlet="trig"/>
      </net>
      <net>
         <source obj="keyb_11" outlet="gate2"/>
         <dest obj="delayedpulsem_2" inlet="trig"/>
         <dest obj="counter_5" inlet="r"/>
         <dest obj="b_5" inlet="trig"/>
      </net>
      <net>
         <source obj="flipflop_1" outlet="o"/>
         <dest obj="xor_1" inlet="i2"/>
      </net>
      <net>
         <source obj="Factotum_2" outlet="out"/>
         <dest obj="lp_4" inlet="in"/>
      </net>
      <net>
         <source obj="vca_13" outlet="o"/>
         <dest obj="+_4" inlet="in1"/>
      </net>
      <net>
         <source obj="vca_14" outlet="o"/>
         <dest obj="+_4" inlet="in2"/>
      </net>
      <net>
         <source obj="keyb_9" outlet="direction"/>
         <dest obj="Factotum_1" inlet="dir"/>
      </net>
      <net>
         <source obj="keyb_9" outlet="overwrite"/>
         <dest obj="Factotum_1" inlet="overwrite"/>
      </net>
      <net>
         <source obj="ahd_1" outlet="env"/>
         <dest obj="vca_4" inlet="v"/>
      </net>
      <net>
         <source obj="ahd_4" outlet="env"/>
         <dest obj="vca_5" inlet="v"/>
      </net>
      <net>
         <source obj="vca_5" outlet="o"/>
         <dest obj="Factotum_2" inlet="in"/>
      </net>
      <net>
         <source obj="keyb_9" outlet="gate2"/>
         <dest obj="delayedpulsem_1" inlet="trig"/>
         <dest obj="counter_2" inlet="r"/>
         <dest obj="b_7" inlet="trig"/>
      </net>
      <net>
         <source obj="*_2" outlet="result"/>
         <dest obj="vca_13" inlet="v"/>
      </net>
      <net>
         <source obj="ahd_5" outlet="env"/>
         <dest obj="*_2" inlet="b"/>
      </net>
      <net>
         <source obj="*_3" outlet="result"/>
         <dest obj="vca_14" inlet="v"/>
      </net>
      <net>
         <source obj="ahd_6" outlet="env"/>
         <dest obj="*_3" inlet="b"/>
      </net>
      <net>
         <source obj="lp_3" outlet="out"/>
         <dest obj="vca_13" inlet="a"/>
      </net>
      <net>
         <source obj="lp_4" outlet="out"/>
         <dest obj="vca_14" inlet="a"/>
      </net>
      <net>
         <source obj="*_8" outlet="result"/>
         <dest obj="+_3" inlet="in1"/>
      </net>
      <net>
         <source obj="sum3_3" outlet="out"/>
         <dest obj="Factotum_1" inlet="stretch"/>
      </net>
      <net>
         <source obj="*_10" outlet="result"/>
         <dest obj="+_5" inlet="in1"/>
      </net>
      <net>
         <source obj="+_5" outlet="out"/>
         <dest obj="+_10" inlet="in2"/>
      </net>
      <net>
         <source obj="sum3_4" outlet="out"/>
         <dest obj="Factotum_2" inlet="stretch"/>
      </net>
      <net>
         <source obj="vca_6" outlet="o"/>
         <dest obj="sum3_5" inlet="in1"/>
      </net>
      <net>
         <source obj="unipolar2bipolar_8" outlet="o"/>
         <dest obj="Factotum_2" inlet="rate"/>
      </net>
      <net>
         <source obj="unipolar2bipolar_9" outlet="o"/>
         <dest obj="i_6" inlet="in"/>
      </net>
      <net>
         <source obj="unipolar2bipolar_11" outlet="o"/>
         <dest obj="ahd_6" inlet="d"/>
      </net>
      <net>
         <source obj="unipolar2bipolar_12" outlet="o"/>
         <dest obj="Factotum_1" inlet="rate"/>
      </net>
      <net>
         <source obj="keyb_9" outlet="pitchshift"/>
         <dest obj="to_2" inlet="i"/>
      </net>
      <net>
         <source obj="unipolar2bipolar_13" outlet="o"/>
         <dest obj="i_5" inlet="in"/>
      </net>
      <net>
         <source obj="unipolar2bipolar_15" outlet="o"/>
         <dest obj="ahd_5" inlet="d"/>
      </net>
      <net>
         <source obj="to_1" outlet="o"/>
         <dest obj="*_10" inlet="a"/>
      </net>
      <net>
         <source obj="*_7" outlet="result"/>
         <dest obj="sum3_4" inlet="in1"/>
      </net>
      <net>
         <source obj="to_2" outlet="o"/>
         <dest obj="*_8" inlet="a"/>
      </net>
      <net>
         <source obj="*_9" outlet="result"/>
         <dest obj="sum3_3" inlet="in1"/>
      </net>
      <net>
         <source obj="unipolar2bipolar_6" outlet="o"/>
         <dest obj="ahd_5" inlet="a"/>
      </net>
      <net>
         <source obj="unipolar2bipolar_7" outlet="o"/>
         <dest obj="ahd_6" inlet="a"/>
      </net>
      <net>
         <source obj="inv_pos_2" outlet="out"/>
         <dest obj="*_16" inlet="b"/>
         <dest obj="*_12" inlet="b"/>
      </net>
      <net>
         <source obj="*_12" outlet="result"/>
         <dest obj="+_9" inlet="in1"/>
      </net>
      <net>
         <source obj="d_1" outlet="env"/>
         <dest obj="inv_pos_2" inlet="in"/>
      </net>
      <net>
         <source obj="+_9" outlet="out"/>
         <dest obj="limit_1" inlet="i"/>
      </net>
      <net>
         <source obj="*_11" outlet="result"/>
         <dest obj="*_12" inlet="a"/>
      </net>
      <net>
         <source obj="unipolar2bipolar_20" outlet="o"/>
         <dest obj="*_11" inlet="b"/>
      </net>
      <net>
         <source obj="i_3" outlet="out"/>
         <dest obj="*_11" inlet="a"/>
      </net>
      <net>
         <source obj="unipolar2bipolar_16" outlet="o"/>
         <dest obj="d_1" inlet="d"/>
      </net>
      <net>
         <source obj="inv_pos_3" outlet="out"/>
         <dest obj="*_14" inlet="b"/>
         <dest obj="*_15" inlet="b"/>
      </net>
      <net>
         <source obj="*_14" outlet="result"/>
         <dest obj="+_10" inlet="in1"/>
      </net>
      <net>
         <source obj="d_2" outlet="env"/>
         <dest obj="inv_pos_3" inlet="in"/>
      </net>
      <net>
         <source obj="+_10" outlet="out"/>
         <dest obj="limit_2" inlet="i"/>
      </net>
      <net>
         <source obj="*_13" outlet="result"/>
         <dest obj="*_14" inlet="a"/>
      </net>
      <net>
         <source obj="unipolar2bipolar_22" outlet="o"/>
         <dest obj="*_13" inlet="b"/>
      </net>
      <net>
         <source obj="i_4" outlet="out"/>
         <dest obj="*_13" inlet="a"/>
      </net>
      <net>
         <source obj="unipolar2bipolar_17" outlet="o"/>
         <dest obj="d_2" inlet="d"/>
      </net>
      <net>
         <source obj="+_3" outlet="out"/>
         <dest obj="+_9" inlet="in2"/>
      </net>
      <net>
         <source obj="limit_1" outlet="o"/>
         <dest obj="sum3_2" inlet="in2"/>
         <dest obj="*_9" inlet="a"/>
         <dest obj="Factotum_1" inlet="pitchshift"/>
      </net>
      <net>
         <source obj="limit_2" outlet="o"/>
         <dest obj="sum3_1" inlet="in2"/>
         <dest obj="*_7" inlet="a"/>
         <dest obj="Factotum_2" inlet="pitchshift"/>
      </net>
      <net>
         <source obj="limit_3" outlet="o"/>
         <dest obj="lp_3" inlet="pitch"/>
      </net>
      <net>
         <source obj="sum3_1" outlet="out"/>
         <dest obj="limit_4" inlet="i"/>
      </net>
      <net>
         <source obj="*_15" outlet="result"/>
         <dest obj="sum3_1" inlet="in3"/>
         <dest obj="sum3_4" inlet="in3"/>
      </net>
      <net>
         <source obj="*_16" outlet="result"/>
         <dest obj="sum3_2" inlet="in3"/>
         <dest obj="sum3_3" inlet="in3"/>
      </net>
      <net>
         <source obj="scale_1" outlet="o"/>
         <dest obj="unipolar2bipolar_13" inlet="i"/>
      </net>
      <net>
         <source obj="i_5" outlet="out"/>
         <dest obj="+_3" inlet="in2"/>
         <dest obj="+_2" inlet="in2"/>
      </net>
      <net>
         <source obj="scale_2" outlet="o"/>
         <dest obj="unipolar2bipolar_9" inlet="i"/>
      </net>
      <net>
         <source obj="i_6" outlet="out"/>
         <dest obj="+_5" inlet="in2"/>
         <dest obj="+_7" inlet="in2"/>
      </net>
      <net>
         <source obj="unipolar2bipolar_24" outlet="o"/>
         <dest obj="sum3_1" inlet="in1"/>
      </net>
      <net>
         <source obj="unipolar2bipolar_23" outlet="o"/>
         <dest obj="sum3_2" inlet="in1"/>
      </net>
      <net>
         <source obj="sum3_2" outlet="out"/>
         <dest obj="limit_3" inlet="i"/>
      </net>
      <net>
         <source obj="limit_4" outlet="o"/>
         <dest obj="lp_4" inlet="pitch"/>
      </net>
      <net>
         <source obj="ahd_7" outlet="env"/>
         <dest obj="*_17" inlet="a"/>
         <dest obj="*_19" inlet="a"/>
      </net>
      <net>
         <source obj="tableread_4" outlet="v4"/>
         <dest obj="*_17" inlet="b"/>
         <dest obj="inv_pos_4" inlet="in"/>
      </net>
      <net>
         <source obj="*_17" outlet="result"/>
         <dest obj="+_12" inlet="in1"/>
      </net>
      <net>
         <source obj="inv_pos_4" outlet="out"/>
         <dest obj="+_12" inlet="in2"/>
      </net>
      <net>
         <source obj="+_12" outlet="out"/>
         <dest obj="*_18" inlet="b"/>
      </net>
      <net>
         <source obj="*_18" outlet="result"/>
         <dest obj="vca_11" inlet="v"/>
      </net>
      <net>
         <source obj="or_11" outlet="o"/>
         <dest obj="inv_2" inlet="i"/>
      </net>
      <net>
         <source obj="inv_2" outlet="o"/>
         <dest obj="ahd_7" inlet="gate"/>
      </net>
      <net>
         <source obj="tableread_4" outlet="v3"/>
         <dest obj="*_19" inlet="b"/>
         <dest obj="inv_pos_5" inlet="in"/>
      </net>
      <net>
         <source obj="*_19" outlet="result"/>
         <dest obj="+_13" inlet="in1"/>
      </net>
      <net>
         <source obj="inv_pos_5" outlet="out"/>
         <dest obj="+_13" inlet="in2"/>
      </net>
      <net>
         <source obj="+_13" outlet="out"/>
         <dest obj="vca_6" inlet="v"/>
      </net>
      <net>
         <source obj="xor_2" outlet="o"/>
         <dest obj="Factotum_2" inlet="rec"/>
         <dest obj="ahd_4" inlet="trig"/>
      </net>
      <net>
         <source obj="object_3" outlet="nplaytrig"/>
         <dest obj="counter_9" inlet="r"/>
         <dest obj="counter_11" inlet="r"/>
         <dest obj="or_1" inlet="i2"/>
         <dest obj="counter_3" inlet="r"/>
         <dest obj="counter_1" inlet="r"/>
         <dest obj="counter_4" inlet="r"/>
         <dest obj="or_13" inlet="i2"/>
         <dest obj="launch_5" inlet="redraw"/>
      </net>
      <net>
         <source obj="note_3" outlet="gate"/>
         <dest obj="clk_mul_2" inlet="clk"/>
         <dest obj="clk_mul_6" inlet="clk"/>
         <dest obj="counter_14" inlet="trig"/>
         <dest obj="counter_11" inlet="trig"/>
         <dest obj="counter_12" inlet="trig"/>
         <dest obj="counter_1" inlet="trig"/>
         <dest obj="or_9" inlet="i1"/>
         <dest obj="counter_2" inlet="trig"/>
         <dest obj="counter_5" inlet="trig"/>
         <dest obj="counter_19" inlet="trig"/>
      </net>
      <net>
         <source obj="toggle_1" outlet="o"/>
         <dest obj="and_13" inlet="i1"/>
         <dest obj="and_14" inlet="i1"/>
         <dest obj="top_2" inlet="active"/>
      </net>
      <net>
         <source obj="clk_mul_2" outlet="clk"/>
         <dest obj="counter_9" inlet="trig"/>
         <dest obj="counter_13" inlet="trig"/>
         <dest obj="counter_10" inlet="trig"/>
         <dest obj="counter_18" inlet="trig"/>
      </net>
      <net>
         <source obj="counter2_init_start_3" outlet="c"/>
         <dest obj="counter_15" inlet="trig"/>
         <dest obj="counter_8" inlet="trig"/>
         <dest obj="counter_17" inlet="trig"/>
      </net>
      <net>
         <source obj="object_3" outlet="offsetnotes"/>
         <dest obj="tablestore_21" inlet="offset"/>
         <dest obj="tablestore_9" inlet="offset"/>
      </net>
      <net>
         <source obj="counter_9" outlet="o"/>
         <dest obj="tablestore_21" inlet="stepunQ"/>
         <dest obj="tablestore_9" inlet="stepunQ"/>
      </net>
      <net>
         <source obj="counter_11" outlet="o"/>
         <dest obj="tablestore_21" inlet="step"/>
         <dest obj="tablestore_9" inlet="step"/>
      </net>
      <net>
         <source obj="clk_mul_6" outlet="clk"/>
         <dest obj="counter2_init_start_3" inlet="inc"/>
      </net>
      <net>
         <source obj="and_14" outlet="o"/>
         <dest obj="object_3" inlet="pulse"/>
         <dest obj="object_4" inlet="pulse"/>
      </net>
      <net>
         <source obj="and_13" outlet="o"/>
         <dest obj="or_9" inlet="i2"/>
         <dest obj="object_3" inlet="pulseplay"/>
         <dest obj="object_4" inlet="pulseplay"/>
      </net>
      <net>
         <source obj="toggle_1" outlet="stop"/>
         <dest obj="flipflop_3" inlet="reset"/>
         <dest obj="object_3" inlet="stop"/>
         <dest obj="or_14" inlet="i1"/>
         <dest obj="object_4" inlet="stop"/>
         <dest obj="keyb_9" inlet="clear"/>
         <dest obj="keyb_11" inlet="clear"/>
         <dest obj="delayedpulse_2" inlet="trig"/>
      </net>
      <net>
         <source obj="object_3" outlet="rec"/>
         <dest obj="launch_5" inlet="rec"/>
         <dest obj="tablestore_9" inlet="rec"/>
      </net>
      <net>
         <source obj="object_3" outlet="play"/>
         <dest obj="launch_5" inlet="play"/>
         <dest obj="tablestore_21" inlet="play"/>
      </net>
      <net>
         <source obj="toggle_1" outlet="start"/>
         <dest obj="counter_15" inlet="r"/>
         <dest obj="counter_14" inlet="r"/>
         <dest obj="counter2_init_start_3" inlet="r"/>
         <dest obj="counter_13" inlet="r"/>
         <dest obj="flipflop_3" inlet="set"/>
         <dest obj="or_12" inlet="i1"/>
         <dest obj="object_3" inlet="start"/>
         <dest obj="or_10" inlet="i2"/>
         <dest obj="or_7" inlet="i3"/>
         <dest obj="or_8" inlet="i3"/>
         <dest obj="object_4" inlet="start"/>
      </net>
      <net>
         <source obj="counter_14" outlet="c"/>
         <dest obj="and_13" inlet="i2"/>
      </net>
      <net>
         <source obj="counter_15" outlet="c"/>
         <dest obj="and_14" inlet="i2"/>
      </net>
      <net>
         <source obj="note_5" outlet="gate"/>
         <dest obj="toggle_1" inlet="set"/>
      </net>
      <net>
         <source obj="note_6" outlet="gate"/>
         <dest obj="toggle_1" inlet="reset"/>
      </net>
      <net>
         <source obj="top_1" outlet="t7"/>
         <dest obj="object_3" inlet="shift"/>
         <dest obj="object_4" inlet="shift"/>
         <dest obj="tcopy_5" inlet="save"/>
      </net>
      <net>
         <source obj="i_16" outlet="out"/>
         <dest obj="object_3" inlet="barcount"/>
         <dest obj="object_4" inlet="barcount"/>
         <dest obj="launch_5" inlet="barcount"/>
         <dest obj="launch_8" inlet="barcount"/>
      </net>
      <net>
         <source obj="object_3" outlet="nrectrig"/>
         <dest obj="counter_8" inlet="r"/>
      </net>
      <net>
         <source obj="counter_13" outlet="o"/>
         <dest obj="tablestore_10" inlet="Qstep"/>
         <dest obj="tablestore_9" inlet="Qstep"/>
      </net>
      <net>
         <source obj="counter_8" outlet="o"/>
         <dest obj="tablestore_9" inlet="steprec"/>
      </net>
      <net>
         <source obj="object_4" outlet="nplaytrig"/>
         <dest obj="counter_10" inlet="r"/>
         <dest obj="counter_12" inlet="r"/>
         <dest obj="or_13" inlet="i3"/>
         <dest obj="launch_8" inlet="redraw"/>
      </net>
      <net>
         <source obj="object_4" outlet="nrectrig"/>
         <dest obj="counter_17" inlet="r"/>
      </net>
      <net>
         <source obj="object_4" outlet="offsetnotes"/>
         <dest obj="tablestore_22" inlet="offset"/>
         <dest obj="tablestore_10" inlet="offset"/>
      </net>
      <net>
         <source obj="counter_10" outlet="o"/>
         <dest obj="tablestore_22" inlet="stepunQ"/>
         <dest obj="tablestore_10" inlet="stepunQ"/>
      </net>
      <net>
         <source obj="counter_12" outlet="o"/>
         <dest obj="tablestore_22" inlet="step"/>
         <dest obj="tablestore_10" inlet="step"/>
      </net>
      <net>
         <source obj="counter_17" outlet="o"/>
         <dest obj="tablestore_10" inlet="steprec"/>
      </net>
      <net>
         <source obj="counter_1" outlet="c"/>
         <dest obj="counter_3" inlet="trig"/>
      </net>
      <net>
         <source obj="object_3" outlet="clipslot"/>
         <dest obj="==_1" inlet="in2"/>
         <dest obj="step_1____tmp__" inlet="index"/>
         <dest obj="step_1____tmp___" inlet="index"/>
         <dest obj="step_1____tmp_____" inlet="index"/>
         <dest obj="launch_5" inlet="step"/>
      </net>
      <net>
         <source obj="counter_3" outlet="o"/>
         <dest obj="==_2" inlet="in1"/>
      </net>
      <net>
         <source obj="pulselength_1" outlet="pulse"/>
         <dest obj="launch_5" inlet="clear"/>
         <dest obj="launch_8" inlet="clear"/>
         <dest obj="top_2" inlet="coloron"/>
      </net>
      <net>
         <source obj="==_2" outlet="out"/>
         <dest obj="or_1" inlet="i1"/>
      </net>
      <net>
         <source obj="or_1" outlet="o"/>
         <dest obj="pulselength_1" inlet="trig"/>
      </net>
      <net>
         <source obj="counter_4" outlet="c"/>
         <dest obj="flipflop_3" inlet="trig"/>
      </net>
      <net>
         <source obj="or_9" outlet="o"/>
         <dest obj="counter_4" inlet="trig"/>
      </net>
      <net>
         <source obj="flipflop_3" outlet="o"/>
         <dest obj="launch_5" inlet="trigger"/>
         <dest obj="launch_8" inlet="trigger"/>
         <dest obj="top_2" inlet="on"/>
      </net>
      <net>
         <source obj="launch_1" outlet="offset"/>
         <dest obj="launch_5" inlet="offset"/>
      </net>
      <net>
         <source obj="launch_1" outlet="start"/>
         <dest obj="launch_5" inlet="start"/>
      </net>
      <net>
         <source obj="b_3" outlet="pulse"/>
         <dest obj="flipflop_5" inlet="reset"/>
         <dest obj="launch_1" inlet="redraw"/>
      </net>
      <net>
         <source obj="flipflop_5" outlet="o"/>
         <dest obj="launch_5" inlet="active"/>
      </net>
      <net>
         <source obj="==_1" outlet="out"/>
         <dest obj="and_5" inlet="i1"/>
      </net>
      <net>
         <source obj="object_4" outlet="clipslot"/>
         <dest obj="==_3" inlet="in2"/>
         <dest obj="step_1____tmp____" inlet="index"/>
         <dest obj="launch_8" inlet="step"/>
      </net>
      <net>
         <source obj="b_4" outlet="pulse"/>
         <dest obj="flipflop_6" inlet="reset"/>
         <dest obj="launch_2" inlet="redraw"/>
      </net>
      <net>
         <source obj="flipflop_6" outlet="o"/>
         <dest obj="launch_8" inlet="active"/>
      </net>
      <net>
         <source obj="==_3" outlet="out"/>
         <dest obj="and_9" inlet="i1"/>
      </net>
      <net>
         <source obj="i_13" outlet="out"/>
         <dest obj="launch_2" inlet="offset"/>
      </net>
      <net>
         <source obj="and_5" outlet="o"/>
         <dest obj="b_3" inlet="trig"/>
      </net>
      <net>
         <source obj="and_9" outlet="o"/>
         <dest obj="b_4" inlet="trig"/>
      </net>
      <net>
         <source obj="delayedpulse_2" outlet="pulse"/>
         <dest obj="launch_5" inlet="stop"/>
         <dest obj="launch_8" inlet="stop"/>
      </net>
      <net>
         <source obj="object_3" outlet="clearslot"/>
         <dest obj="==_1" inlet="in1"/>
      </net>
      <net>
         <source obj="object_3" outlet="cliptrigger"/>
         <dest obj="flipflop_5" inlet="set"/>
      </net>
      <net>
         <source obj="object_3" outlet="cleartrigger"/>
         <dest obj="and_5" inlet="i2"/>
      </net>
      <net>
         <source obj="object_3" outlet="wait"/>
         <dest obj="launch_5" inlet="wait"/>
      </net>
      <net>
         <source obj="object_4" outlet="clearslot"/>
         <dest obj="==_3" inlet="in1"/>
      </net>
      <net>
         <source obj="object_4" outlet="cliptrigger"/>
         <dest obj="flipflop_6" inlet="set"/>
      </net>
      <net>
         <source obj="object_4" outlet="wait"/>
         <dest obj="launch_8" inlet="wait"/>
      </net>
      <net>
         <source obj="object_4" outlet="rec"/>
         <dest obj="tablestore_10" inlet="rec"/>
         <dest obj="launch_8" inlet="rec"/>
      </net>
      <net>
         <source obj="object_4" outlet="play"/>
         <dest obj="tablestore_22" inlet="play"/>
         <dest obj="launch_8" inlet="play"/>
      </net>
      <net>
         <source obj="object_4" outlet="cleartrigger"/>
         <dest obj="and_9" inlet="i2"/>
      </net>
      <net>
         <source obj="note_7" outlet="gate"/>
         <dest obj="or_12" inlet="i2"/>
      </net>
      <net>
         <source obj="counter_18" outlet="o"/>
         <dest obj="tablestore_13" inlet="stepunQ"/>
         <dest obj="tablestore_14" inlet="stepunQ"/>
         <dest obj="tablestore_12" inlet="stepunQ"/>
         <dest obj="tablestore_11" inlet="stepunQ"/>
      </net>
      <net>
         <source obj="tablestore_21" outlet="totaloffset"/>
         <dest obj="tablestore_12" inlet="offset"/>
         <dest obj="tablestore_11" inlet="offset"/>
      </net>
      <net>
         <source obj="i_1" outlet="out"/>
         <dest obj="step_1____tmp_____" inlet="offset"/>
      </net>
      <net>
         <source obj="step_1____tmp_____" outlet="value"/>
         <dest obj="inv_4" inlet="i"/>
         <dest obj="top_3" inlet="on"/>
         <dest obj="tablestore_12" inlet="play"/>
      </net>
      <net>
         <source obj="inv_4" outlet="o"/>
         <dest obj="tablestore_11" inlet="rec"/>
      </net>
      <net>
         <source obj="unipolar2bipolar_21" outlet="o"/>
         <dest obj="*_16" inlet="a"/>
      </net>
      <net>
         <source obj="unipolar2bipolar_19" outlet="o"/>
         <dest obj="*_15" inlet="a"/>
      </net>
      <net>
         <source obj="note_9" outlet="gate"/>
         <dest obj="note_10" inlet="trig"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v0"/>
         <dest obj="8x_1" inlet="in1"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v1"/>
         <dest obj="8x_1" inlet="in2"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v2"/>
         <dest obj="8x_1" inlet="in3"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v3"/>
         <dest obj="8x_1" inlet="in4"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v4"/>
         <dest obj="8x_1" inlet="in5"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v5"/>
         <dest obj="8x_1" inlet="in6"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v6"/>
         <dest obj="lp_3" inlet="reso"/>
      </net>
      <net>
         <source obj="tableread_1" outlet="v7"/>
         <dest obj="lp_4" inlet="reso"/>
      </net>
      <net>
         <source obj="tableread_2" outlet="v0"/>
         <dest obj="unipolar2bipolar_12" inlet="i"/>
      </net>
      <net>
         <source obj="tableread_2" outlet="v4"/>
         <dest obj="unipolar2bipolar_8" inlet="i"/>
      </net>
      <net>
         <source obj="tableread_2" outlet="v1"/>
         <dest obj="scale_1" inlet="c"/>
      </net>
      <net>
         <source obj="tableread_2" outlet="v5"/>
         <dest obj="scale_2" inlet="c"/>
      </net>
      <net>
         <source obj="tableread_2" outlet="v6"/>
         <dest obj="scale_4" inlet="c"/>
      </net>
      <net>
         <source obj="tableread_3" outlet="v0"/>
         <dest obj="*_8" inlet="b"/>
      </net>
      <net>
         <source obj="tableread_3" outlet="v1"/>
         <dest obj="*_9" inlet="b"/>
      </net>
      <net>
         <source obj="tableread_4" outlet="v0"/>
         <dest obj="unipolar2bipolar_20" inlet="i"/>
      </net>
      <net>
         <source obj="tableread_4" outlet="v1"/>
         <dest obj="unipolar2bipolar_21" inlet="i"/>
      </net>
      <net>
         <source obj="tableread_4" outlet="v5"/>
         <dest obj="unipolar2bipolar_22" inlet="i"/>
      </net>
      <net>
         <source obj="tableread_4" outlet="v6"/>
         <dest obj="unipolar2bipolar_19" inlet="i"/>
      </net>
      <net>
         <source obj="tableread_3" outlet="v3"/>
         <dest obj="unipolar2bipolar_15" inlet="i"/>
      </net>
      <net>
         <source obj="tableread_3" outlet="v2"/>
         <dest obj="unipolar2bipolar_6" inlet="i"/>
      </net>
      <net>
         <source obj="tableread_3" outlet="v4"/>
         <dest obj="*_10" inlet="b"/>
      </net>
      <net>
         <source obj="tableread_3" outlet="v5"/>
         <dest obj="*_7" inlet="b"/>
      </net>
      <net>
         <source obj="tableread_3" outlet="v7"/>
         <dest obj="unipolar2bipolar_11" inlet="i"/>
      </net>
      <net>
         <source obj="tableread_3" outlet="v6"/>
         <dest obj="unipolar2bipolar_7" inlet="i"/>
      </net>
      <net>
         <source obj="tableread_4" outlet="v2"/>
         <dest obj="unipolar2bipolar_16" inlet="i"/>
      </net>
      <net>
         <source obj="tableread_4" outlet="v7"/>
         <dest obj="unipolar2bipolar_17" inlet="i"/>
      </net>
      <net>
         <source obj="&gt;=_1" outlet="out"/>
         <dest obj="mux_3" inlet="s"/>
      </net>
      <net>
         <source obj="counter_2" outlet="o"/>
         <dest obj="==_4" inlet="in1"/>
      </net>
      <net>
         <source obj="tableread_2" outlet="v3"/>
         <dest obj="-c_1" inlet="in"/>
         <dest obj="unipolar2bipolar_1" inlet="i"/>
         <dest obj="&gt;=_1" inlet="in1"/>
      </net>
      <net>
         <source obj="+1_1" outlet="result"/>
         <dest obj="==_4" inlet="in2"/>
      </net>
      <net>
         <source obj="-c_1" outlet="out"/>
         <dest obj="&gt;&gt;_2" inlet="in"/>
      </net>
      <net>
         <source obj="&gt;&gt;_2" outlet="out"/>
         <dest obj="+1_1" inlet="a"/>
      </net>
      <net>
         <source obj="delayedpulsem_1" outlet="pulse"/>
         <dest obj="mux_3" inlet="i1"/>
      </net>
      <net>
         <source obj="unipolar2bipolar_1" outlet="o"/>
         <dest obj="delayedpulsem_1" inlet="delay"/>
      </net>
      <net>
         <source obj="==_4" outlet="out"/>
         <dest obj="b_2" inlet="trig"/>
      </net>
      <net>
         <source obj="b_2" outlet="pulse"/>
         <dest obj="mux_3" inlet="i2"/>
      </net>
      <net>
         <source obj="&gt;=_2" outlet="out"/>
         <dest obj="mux_6" inlet="s"/>
      </net>
      <net>
         <source obj="counter_5" outlet="o"/>
         <dest obj="==_5" inlet="in1"/>
      </net>
      <net>
         <source obj="tableread_2" outlet="v7"/>
         <dest obj="-c_2" inlet="in"/>
         <dest obj="unipolar2bipolar_2" inlet="i"/>
         <dest obj="&gt;=_2" inlet="in1"/>
      </net>
      <net>
         <source obj="+1_2" outlet="result"/>
         <dest obj="==_5" inlet="in2"/>
      </net>
      <net>
         <source obj="-c_2" outlet="out"/>
         <dest obj="&gt;&gt;_3____tmp" inlet="in"/>
      </net>
      <net>
         <source obj="&gt;&gt;_3____tmp" outlet="out"/>
         <dest obj="+1_2" inlet="a"/>
      </net>
      <net>
         <source obj="mux_6" outlet="o"/>
         <dest obj="flipflop_4" inlet="reset"/>
      </net>
      <net>
         <source obj="delayedpulsem_2" outlet="pulse"/>
         <dest obj="mux_6" inlet="i1"/>
      </net>
      <net>
         <source obj="unipolar2bipolar_2" outlet="o"/>
         <dest obj="delayedpulsem_2" inlet="delay"/>
      </net>
      <net>
         <source obj="==_5" outlet="out"/>
         <dest obj="b_6" inlet="trig"/>
      </net>
      <net>
         <source obj="b_6" outlet="pulse"/>
         <dest obj="mux_6" inlet="i2"/>
      </net>
      <net>
         <source obj="keyb_1" outlet="note"/>
         <dest obj="note_12" inlet="note"/>
      </net>
      <net>
         <source obj="keyb_1" outlet="gate"/>
         <dest obj="note_12" inlet="trig"/>
      </net>
      <net>
         <source obj="keyb_1" outlet="velocity"/>
         <dest obj="note_12" inlet="velo"/>
      </net>
      <net>
         <source obj="i_9" outlet="out"/>
         <dest obj="tablestore_21" inlet="channel"/>
      </net>
      <net>
         <source obj="i_14" outlet="out"/>
         <dest obj="tablestore_13" inlet="channel"/>
         <dest obj="tablestore_14" inlet="channel"/>
         <dest obj="tablestore_12" inlet="channel"/>
      </net>
      <net>
         <source obj="i_20" outlet="out"/>
         <dest obj="tablestore_22" inlet="channel"/>
      </net>
      <net>
         <source obj="and_21" outlet="o"/>
         <dest obj="flipflop_11" inlet="reset"/>
         <dest obj="or_7" inlet="i1"/>
         <dest obj="flipflop_7" inlet="trig"/>
         <dest obj="or_8" inlet="i2"/>
      </net>
      <net>
         <source obj="or_8" outlet="o"/>
         <dest obj="counter2_init_start_2" inlet="r"/>
      </net>
      <net>
         <source obj="and_1" outlet="o"/>
         <dest obj="flipflop_9" inlet="reset"/>
      </net>
      <net>
         <source obj="or_12" outlet="o"/>
         <dest obj="counter_19" inlet="r"/>
         <dest obj="or_13" inlet="i1"/>
      </net>
      <net>
         <source obj="note_14" outlet="gate"/>
         <dest obj="step_1____tmp_____" inlet="toggle"/>
      </net>
      <net>
         <source obj="c_1" outlet="out"/>
         <dest obj="save_1" inlet="filename"/>
      </net>
      <net>
         <source obj="c_2" outlet="out"/>
         <dest obj="save_2" inlet="filename"/>
      </net>
      <net>
         <source obj="keyb_4" outlet="gate"/>
         <dest obj="load_3" inlet="trig"/>
      </net>
      <net>
         <source obj="tablestore_11" outlet="offset"/>
         <dest obj="tablestore_13" inlet="offset"/>
         <dest obj="tablestore_14" inlet="offset"/>
      </net>
      <net>
         <source obj="or_13" outlet="o"/>
         <dest obj="counter_18" inlet="r"/>
      </net>
      <net>
         <source obj="i_10" outlet="out"/>
         <dest obj="step_1____tmp____" inlet="offset"/>
      </net>
      <net>
         <source obj="note_15" outlet="gate"/>
         <dest obj="step_1____tmp____" inlet="toggle"/>
      </net>
      <net>
         <source obj="step_1____tmp____" outlet="value"/>
         <dest obj="inv_5" inlet="i"/>
         <dest obj="tablestore_14" inlet="play"/>
         <dest obj="top_4" inlet="on"/>
      </net>
      <net>
         <source obj="inv_5" outlet="o"/>
         <dest obj="tablestore_13" inlet="rec"/>
      </net>
      <net>
         <source obj="keyb_9" outlet="note"/>
         <dest obj="step_3" inlet="step"/>
      </net>
      <net>
         <source obj="or_10" outlet="o"/>
         <dest obj="flipflop_7" inlet="set"/>
      </net>
      <net>
         <source obj="b_9" outlet="pulse"/>
         <dest obj="or_10" inlet="i1"/>
      </net>
      <net>
         <source obj="or_14" outlet="o"/>
         <dest obj="flipflop_7" inlet="reset"/>
      </net>
      <net>
         <source obj="keyb_3" outlet="gate"/>
         <dest obj="save_1" inlet="trig"/>
         <dest obj="save_2" inlet="trig"/>
         <dest obj="delayedpulse_1" inlet="trig"/>
      </net>
      <net>
         <source obj="delayedpulse_1" outlet="pulse"/>
         <dest obj="save_5" inlet="trig"/>
      </net>
      <net>
         <source obj="launch_7" outlet="note"/>
         <dest obj="step_2" inlet="step"/>
         <dest obj="tcopy_5" inlet="snapshot"/>
      </net>
      <net>
         <source obj="launch_7" outlet="gate"/>
         <dest obj="tcopy_5" inlet="trig"/>
      </net>
      <net>
         <source obj="+_2" outlet="out"/>
         <dest obj="sum3_3" inlet="in2"/>
      </net>
      <net>
         <source obj="+_7" outlet="out"/>
         <dest obj="sum3_4" inlet="in2"/>
      </net>
      <net>
         <source obj="scale_3" outlet="o"/>
         <dest obj="unipolar2bipolar_14" inlet="i"/>
      </net>
      <net>
         <source obj="unipolar2bipolar_14" outlet="o"/>
         <dest obj="i_8" inlet="in"/>
      </net>
      <net>
         <source obj="i_8" outlet="out"/>
         <dest obj="+_2" inlet="in1"/>
      </net>
      <net>
         <source obj="scale_4" outlet="o"/>
         <dest obj="unipolar2bipolar_10" inlet="i"/>
      </net>
      <net>
         <source obj="i_12" outlet="out"/>
         <dest obj="+_7" inlet="in1"/>
      </net>
      <net>
         <source obj="unipolar2bipolar_10" outlet="o"/>
         <dest obj="i_12" inlet="in"/>
      </net>
      <net>
         <source obj="tableread_2" outlet="v2"/>
         <dest obj="scale_3" inlet="c"/>
      </net>
      <net>
         <source obj="vca_4" outlet="o"/>
         <dest obj="Factotum_1" inlet="in"/>
      </net>
      <net>
         <source obj="Factotum_1" outlet="out"/>
         <dest obj="lp_3" inlet="in"/>
      </net>
      <net>
         <source obj="sum3_5" outlet="out"/>
         <dest obj="out_3" inlet="wave"/>
      </net>
      <net>
         <source obj="note_16" outlet="Bgate"/>
         <dest obj="step_1____tmp__" inlet="toggle"/>
      </net>
      <net>
         <source obj="8x_1" outlet="out1"/>
         <dest obj="vca_1" inlet="v"/>
      </net>
      <net>
         <source obj="8x_1" outlet="out2"/>
         <dest obj="*_18" inlet="a"/>
      </net>
      <net>
         <source obj="8x_1" outlet="out3"/>
         <dest obj="*_2" inlet="a"/>
      </net>
      <net>
         <source obj="8x_1" outlet="out4"/>
         <dest obj="*_3" inlet="a"/>
      </net>
      <net>
         <source obj="8x_1" outlet="out5"/>
         <dest obj="unipolar2bipolar_23" inlet="i"/>
      </net>
      <net>
         <source obj="8x_1" outlet="out6"/>
         <dest obj="unipolar2bipolar_24" inlet="i"/>
      </net>
      <net>
         <source obj="keyb_5" outlet="note"/>
         <dest obj="note_13" inlet="note"/>
      </net>
      <net>
         <source obj="keyb_5" outlet="velocity"/>
         <dest obj="note_13" inlet="velo"/>
      </net>
      <net>
         <source obj="keyb_5" outlet="gate"/>
         <dest obj="note_13" inlet="trig"/>
      </net>
      <net>
         <source obj="keyb_11" outlet="direction"/>
         <dest obj="Factotum_2" inlet="dir"/>
      </net>
      <net>
         <source obj="keyb_11" outlet="overwrite"/>
         <dest obj="Factotum_2" inlet="overwrite"/>
      </net>
      <net>
         <source obj="keyb_11" outlet="pitchshift"/>
         <dest obj="to_1" inlet="i"/>
      </net>
      <net>
         <source obj="keyb_11" outlet="note"/>
         <dest obj="step_8" inlet="step"/>
      </net>
      <net>
         <source obj="i_11" outlet="out"/>
         <dest obj="step_1____tmp___" inlet="offset"/>
      </net>
      <net>
         <source obj="note_16" outlet="gate"/>
         <dest obj="step_1____tmp___" inlet="toggle"/>
      </net>
      <net>
         <source obj="i_15" outlet="out"/>
         <dest obj="step_1____tmp__" inlet="offset"/>
      </net>
      <net>
         <source obj="keyb_9" outlet="gate"/>
         <dest obj="or_11" inlet="i2"/>
         <dest obj="ahd_5" inlet="trig"/>
         <dest obj="d_1" inlet="trig"/>
         <dest obj="and_2" inlet="i1"/>
      </net>
      <net>
         <source obj="launch_1" outlet="coloron"/>
         <dest obj="launch_5" inlet="coloron"/>
      </net>
      <net>
         <source obj="launch_1" outlet="coloroff"/>
         <dest obj="launch_5" inlet="coloroff"/>
      </net>
      <net>
         <source obj="launch_2" outlet="offset"/>
         <dest obj="launch_8" inlet="offset"/>
      </net>
      <net>
         <source obj="launch_2" outlet="start"/>
         <dest obj="launch_8" inlet="start"/>
      </net>
      <net>
         <source obj="launch_2" outlet="coloron"/>
         <dest obj="launch_8" inlet="coloron"/>
         <dest obj="launch_8" inlet="coloroff"/>
      </net>
      <net>
         <source obj="keyb_11" outlet="gate"/>
         <dest obj="or_11" inlet="i1"/>
         <dest obj="and_3" inlet="i1"/>
         <dest obj="d_2" inlet="trig"/>
         <dest obj="ahd_6" inlet="trig"/>
      </net>
      <net>
         <source obj="+_1" outlet="out"/>
         <dest obj="vca_5" inlet="a"/>
         <dest obj="vca_4" inlet="a"/>
      </net>
      <net>
         <source obj="+_4" outlet="out"/>
         <dest obj="sum3_5" inlet="in3"/>
      </net>
      <net>
         <source obj="mux_3" outlet="o"/>
         <dest obj="flipflop_1" inlet="reset"/>
      </net>
      <net>
         <source obj="step_1____tmp__" outlet="value"/>
         <dest obj="keyb_11" inlet="bate"/>
         <dest obj="and_3" inlet="i2"/>
      </net>
      <net>
         <source obj="step_1____tmp___" outlet="value"/>
         <dest obj="keyb_9" inlet="bate"/>
         <dest obj="and_2" inlet="i2"/>
      </net>
      <net>
         <source obj="xor_1" outlet="o"/>
         <dest obj="ahd_1" inlet="trig"/>
         <dest obj="Factotum_1" inlet="rec"/>
      </net>
      <net>
         <source obj="flipflop_1" outlet="trigdel"/>
         <dest obj="xor_1" inlet="i1"/>
         <dest obj="or_15" inlet="i1"/>
      </net>
      <net>
         <source obj="and_2" outlet="o"/>
         <dest obj="or_15" inlet="i2"/>
      </net>
      <net>
         <source obj="and_3" outlet="o"/>
         <dest obj="or_16" inlet="i2"/>
      </net>
      <net>
         <source obj="flipflop_4" outlet="o"/>
         <dest obj="xor_2" inlet="i2"/>
      </net>
      <net>
         <source obj="flipflop_4" outlet="trigdel"/>
         <dest obj="xor_2" inlet="i1"/>
         <dest obj="or_16" inlet="i1"/>
      </net>
      <net>
         <source obj="or_16" outlet="o"/>
         <dest obj="Factotum_2" inlet="sync"/>
      </net>
      <net>
         <source obj="or_15" outlet="o"/>
         <dest obj="Factotum_1" inlet="sync"/>
      </net>
      <net>
         <source obj="b_5" outlet="pulse"/>
         <dest obj="flipflop_4" inlet="set"/>
      </net>
      <net>
         <source obj="b_7" outlet="pulse"/>
         <dest obj="flipflop_1" inlet="set"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
      <MidiChannel>7</MidiChannel>
      <NPresets>0</NPresets>
      <NPresetEntries>0</NPresetEntries>
      <NModulationSources>0</NModulationSources>
      <NModulationTargetsPerSource>0</NModulationTargetsPerSource>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>-8</x>
      <y>-8</y>
      <width>1616</width>
      <height>876</height>
   </windowPos>
</patch-1.0>