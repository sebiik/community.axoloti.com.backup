<objdefs appVersion="1.0.12">
   <obj.normal id="dead chorus" uuid="563915ef-998b-46a2-971c-a030156325f5">
      <license>GPL</license>
      <inlets>
         <frac32buffer name="in"/>
         <frac32.positive name="rate"/>
         <frac32.positive name="depth"/>
      </inlets>
      <outlets>
         <frac32buffer name="out"/>
         <frac32.positive name="lfo"/>
         <frac32.bipolar name="lfo2"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map name="rate"/>
         <frac32.u.map name="depth"/>
      </params>
      <attribs>
         <combo name="size">
            <MenuEntries>
               <string>256 (5.33ms)</string>
               <string>512 (10.66ms)</string>
               <string>1024 (21.33ms)</string>
               <string>2048 (42.66ms)</string>
               <string>4096 (85.33ms)</string>
               <string>8192 (170ms)</string>
               <string>16384 (341ms)</string>
               <string>32768 (682ms)</string>
               <string>65536 (1.36s)</string>
               <string>131072 (2.73s)</string>
               <string>262144 (5.46s)</string>
               <string>524288 (10.9s)</string>
               <string>1048576 (21.8s)</string>
               <string>2097152 (43.7s)</string>
            </MenuEntries>
            <CEntries>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
               <string>14</string>
               <string>15</string>
               <string>16</string>
               <string>17</string>
               <string>18</string>
               <string>19</string>
               <string>20</string>
               <string>21</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[// From delay write sdram //
static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
int16_t *array;
uint32_t writepos;

//LFO
uint32_t Phase;]]></code.declaration>
      <code.init><![CDATA[// From delay write sdram //
static int16_t _array[attr_poly][1<<attr_size]  __attribute__ ((section (".sdram")));   //alloc space on sdram
array = &_array[parent->polyIndex][0];
   int i;
   writepos = 0;
   for(i=0;i<LENGTH;i++) array[i] = 0;    //buffer increments

Phase = 0;                 //lfo phase init]]></code.init>
      <code.krate><![CDATA[int lfoB;                                      //bipolar lfo
uint32_t depth = inlet_depth;


   {      int32_t freq;                        //LFO sin
      MTOFEXTENDED(param_rate,freq);
      Phase += freq>>2;
      int32_t r;
      SINE2TINTERP(Phase,r)
      lfoB= (r>>4);
   }


int32_t lfoU = (lfoB>>1)+(1<<26);       	 //bipolar to unipolar

int32_t rd = lfoU * 0.2;                     //here we scale the sin wave, used 0.2 a bookmark for later, also need to offset the wave and i am also struggling with that

outlet_lfo = rd;                             //being used to test if the code works...rd = rate * depth

//outlet_out = lfoU * depth;]]></code.krate>
      <code.srate><![CDATA[// From delay write sdram //
  writepos = (writepos + 1)&LENGTHMASK;
   array[writepos] = __SSAT(inlet_in>>14,16);

// delay/read interp //      
      //uint32_t tmp_d =  rd;
      //uint32_t tmp_d =  __USAT(param_time + inlet_time,27);               //original code
      uint32_t tmp_d =  __USAT(param_rate + inlet_rate,27);                 //cant work out where the read pos is taken from so cant + lfo value < not here
      //uint32_t tmp_di = (writepos * rd) - (tmp_d>>(27-LENGTHPOW));        //tried lfo * signal here but not right
      uint32_t tmp_di = writepos - (tmp_d>>(27-LENGTHPOW));
      uint32_t tmp_w1 = (tmp_d<<(LENGTHPOW +3)) & 0x3FFFFFFF;
      uint32_t tmp_w2 = (1<<30) - tmp_w1;
      int32_t tmp_a1 = array[tmp_di&LENGTHMASK]<<16;
      int32_t tmp_a2 = array[(tmp_di+1)&LENGTHMASK]<<16;
      int32_t tmp_r = ___SMMUL(tmp_a1,tmp_w1);
      tmp_r = ___SMMLA(tmp_a2,tmp_w2,tmp_r);
      outlet_out= tmp_r;]]></code.srate>
   </obj.normal>
</objdefs>