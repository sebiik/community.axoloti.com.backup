<patch-1.0 appVersion="1.0.12">
   <obj type="ctrl/i" uuid="a3786816db6ea5bc6ac4193a5cccdb2c83b83496" name="song" x="70" y="112">
      <params>
         <int32 name="value" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="load" x="126" y="112">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="save" x="196" y="112">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="string/indexed" uuid="a28740deef67c39ffc65bd0f341a47c9b196f46" name="indexed_1" x="294" y="112">
      <params/>
      <attribs>
         <table attributeName="prefix" table="0:/track"/>
         <table attributeName="suffix" table=".tab"/>
      </attribs>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="copy to next" x="70" y="182">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="copy from" x="140" y="182">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/i" uuid="a3786816db6ea5bc6ac4193a5cccdb2c83b83496" name="from" x="210" y="182">
      <params>
         <int32 name="value" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="table/load" uuid="600cc22c6734d23a82620da1a14e78782a7e168e" name="load_1" x="294" y="196">
      <params/>
      <attribs>
         <objref attributeName="table" obj="songtable"/>
      </attribs>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="play" x="70" y="266">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="pause" x="140" y="266">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="stop" x="210" y="266">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="table/save" uuid="3e4108b607d56d9e1cd10abb898b58eea11e53b2" name="save_1" x="294" y="280">
      <params/>
      <attribs>
         <objref attributeName="table" obj="songtable"/>
      </attribs>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="reset" x="70" y="322">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="tempo" x="140" y="322">
      <params>
         <frac32.s.map name="value" value="-47.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/i" uuid="a3786816db6ea5bc6ac4193a5cccdb2c83b83496" name="reset to part" x="70" y="378">
      <params>
         <int32 name="value" value="0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="0d31138b-39d7-4cee-b3f6-628800dddc3c" name="songtable" x="70" y="448">
      <params>
         <int32 name="part" value="10"/>
         <int32 name="preset" value="1"/>
         <int32 name="nominator" value="4"/>
         <int32 name="denominator" value="6"/>
         <int32 name="measures" value="4"/>
         <int32 name="bars" value="1"/>
         <bool32.tgl name="loopback" value="0"/>
         <int32 name="loop2part" value="1"/>
         <int32 name="loops" value="1"/>
         <int32 name="lastpart" value="10"/>
         <bool32.tgl name="loopparts" value="0"/>
      </params>
      <attribs>
         <combo attributeName="size" selection="1024"/>
      </attribs>
      <object id="patch/object" uuid="0d31138b-39d7-4cee-b3f6-628800dddc3c">
         <sDescription>(USE WITH THE MODULE: patt/songtracker)
a songtracker to create songs
a song is divided into parts where each part is divided in bars, bars in measures and measures in steps.
Each part has it&apos;s own settings for:
-nominator (steps in measure)
-denominator (rate within the measure based on main tempo)
-amount of measures within a bar
-amount of bars within the part
-whether the part loops back to another part (repeating several parts as a whole)
-which part to loop back to
-how many times this loop has to be performed before going further to the next part after the loop. (don&apos;t loop back within another loop, otherwise it will loop endlessly)

the remaining controls set the last part of the song and whether the song will repeat after the last part has been played

These two modules should be able to setup whole songs (hopefully)</sDescription>
         <author>Remco van der Most</author>
         <license>BSD</license>
         <helpPatch>table.axh</helpPatch>
         <inlets>
            <bool32 name="copy2next" description="copies the current part to the next part (useful for quick polyrhythmic variations)"/>
            <bool32 name="copyfrom" description="copies the part selected with the &quot;from&quot; input to the current input."/>
            <int32 name="from" description="selects the part to copy from"/>
            <bool32 name="update" description="when triggered, updates the controls to the internal array (eg. when you load a song from SDcard-&gt;connect load button to this input)"/>
         </inlets>
         <outlets/>
         <displays>
            <int32.label name="length"/>
         </displays>
         <params>
            <int32 name="part" description="selects part in the song to edit">
               <MinValue i="1"/>
               <MaxValue i="128"/>
            </int32>
            <int32 name="preset" description="selects a preset for this part">
               <MinValue i="1"/>
               <MaxValue i="128"/>
            </int32>
            <int32 name="nominator" description="selects the amount of steps per measure for this part">
               <MinValue i="1"/>
               <MaxValue i="128"/>
            </int32>
            <int32 name="denominator" description="selects the rate of the measure for this part (measure can be understood as the &quot;beat&quot;, denominator sets division of this &quot;beat&quot;)">
               <MinValue i="1"/>
               <MaxValue i="128"/>
            </int32>
            <int32 name="measures" description="selects the amount of measures per bar for this part">
               <MinValue i="1"/>
               <MaxValue i="128"/>
            </int32>
            <int32 name="bars" description="selects the amount of bars for this part">
               <MinValue i="1"/>
               <MaxValue i="128"/>
            </int32>
            <bool32.tgl name="loopback" description="when high and the loopmax hasn&apos;t been reach yet, sends the song back to the selected part"/>
            <int32 name="loop2part" description="selects the part to which the song has to return when this part has ended">
               <MinValue i="1"/>
               <MaxValue i="128"/>
            </int32>
            <int32 name="loops" description="selects how many times the parts must loop before continuing to the next part">
               <MinValue i="1"/>
               <MaxValue i="128"/>
            </int32>
            <int32 name="lastpart" description="selects the last part of the song">
               <MinValue i="1"/>
               <MaxValue i="128"/>
            </int32>
            <bool32.tgl name="loopparts" description="when high, restarts the song at start position. When low, song stops playing after the last part has been played"/>
         </params>
         <attribs>
            <combo name="size">
               <MenuEntries>
                  <string>2</string>
                  <string>4</string>
                  <string>8</string>
                  <string>16</string>
                  <string>32</string>
                  <string>64</string>
                  <string>128</string>
                  <string>256</string>
                  <string>512</string>
                  <string>1024</string>
                  <string>2048</string>
                  <string>4096</string>
                  <string>8192</string>
                  <string>16384</string>
                  <string>32768</string>
                  <string>65536</string>
                  <string>131072</string>
                  <string>262144</string>
                  <string>524288</string>
                  <string>1048576</string>
                  <string>2097152</string>
                  <string>4194304</string>
               </MenuEntries>
               <CEntries>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>4</string>
                  <string>5</string>
                  <string>6</string>
                  <string>7</string>
                  <string>8</string>
                  <string>9</string>
                  <string>10</string>
                  <string>11</string>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
                  <string>16</string>
                  <string>17</string>
                  <string>18</string>
                  <string>19</string>
                  <string>20</string>
                  <string>21</string>
                  <string>22</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[static const uint32_t LENGTHPOW = (attr_size);
static const uint32_t LENGTH = (1<<attr_size);
static const uint32_t LENGTHMASK = ((1<<attr_size)-1);
static const uint32_t BITS = 8;
static const uint32_t GAIN = 20;
int8_t *array;
int part,i,max;
bool upd,DO,loop,copy,from;
int32_t total,ptotal;]]></code.declaration>
         <code.init><![CDATA[static int8_t _array[LENGTH<<3] __attribute__ ((section (".sdram")));
array = &_array[0];

//  for(i=0;i<LENGTH<<3;i++){ array[i]=0;
//}

part=8;
DO=0;]]></code.init>
         <code.krate><![CDATA[if(inlet_update&&!upd){upd=1;
DO=1;
}
else if(upd&&!inlet_update){upd=0;}



if((!((param_part-1<<3)==part))||DO){
	part=param_part-1<<3;
	for(i=0;i<8;i++){
	PExParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_preset+i],array[part+i]+(!(i==5)?1:0),0xFFFD);
	}
	if(DO){DO=0;}
}

if(inlet_copy2next&&!copy){
	copy=1;
	for(i=0;i<8;i++){
		array[part+i+8]=array[part+i];
	}
}
else if(copy&&!inlet_copy2next){copy=0;}

if(inlet_copyfrom&&!from){
	from=1;
	for(i=0;i<8;i++){
	array[part+i]=array[i+(inlet_from<<3)];
	}
}
else if(from&&!inlet_copyfrom){from=0;}


loop=param_loopparts;
max=param_lastpart-1;
array[part]=param_preset-1;
array[part+1]=param_nominator-1;
array[part+2]=param_denominator-1;
array[part+3]=param_measures-1;
array[part+4]=param_bars-1;
array[part+5]=param_loopback;
array[part+6]=param_loop2part-1;
array[part+7]=param_loops-1;
total=0;
for(i=0;i<8;i++){
	total+=array[part+i];
}
if((!(ptotal==total))&&(param_part>param_lastpart)){
	PExParameterChange(&parent->PExch[PARAM_INDEX_attr_legal_name_lastpart],param_part,0xFFFD);
}


ptotal=total;]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="cc7921fa-bcb4-41be-91b8-a512646fbf6c" name="counter_1" x="182" y="448">
      <params/>
      <attribs>
         <objref attributeName="memory" obj="songtable"/>
      </attribs>
      <object id="patch/object" uuid="cc7921fa-bcb4-41be-91b8-a512646fbf6c">
         <sDescription>(USE WITH MODULE: patt/songsetup)
A tracker consisting of several counters that uses the stored table of the &quot;songsetup&quot; module to play a song.

The integer outputs give the &quot;counter position&quot; or &quot;counter maximum&quot; of the respective counters.
These are seperated into:
-independent outputs for the different counters (steps/measure, measures/bar,bars/part,parts/song) and their own maximum steplength.
-combinations of 2,3 or 4 counters and their combined maximum steplength.

By controlling pattern and preset generators/controllers with these outputs, these two modules should be able to setup whole songs (hopefully)</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>counter.axh</helpPatch>
         <inlets>
            <frac32 name="tempo" description="sets tempo base (tempo of the measure, denominator sets the rate according to the amount of steps per measure based on this tempo)"/>
            <bool32.rising name="r" description="instant restart of the song while playing at the selected part"/>
            <int32 name="reset2part" description="selected part to reset to"/>
            <bool32 name="play" description="when triggered, song starts playing"/>
            <bool32 name="pause" description="when triggered, song pauses at current position until play is pressed"/>
            <bool32 name="stop" description="when triggered, song stops and is reset to start position"/>
         </inlets>
         <outlets>
            <bool32 name="run" description="goes high when sequencer is running"/>
            <bool32.pulse name="clock" description="main clock output (denominator * main tempo)"/>
            <int32 name="step" description="step position within measure"/>
            <int32 name="maxstep" description="maximum steps in the measure"/>
            <int32 name="measure" description="measure position within the bar"/>
            <int32 name="maxmeasure" description="maximum measures in the bar"/>
            <int32 name="bar" description="bar position within the part"/>
            <int32 name="maxbar" description="maximum bars in the part"/>
            <int32 name="part" description="part position within the song"/>
            <int32 name="maxparts" description="maximum pars in the song"/>
            <int32 name="preset" description="preset selection of the part"/>
            <int32 name="sm" description="position of stop+measure within bar"/>
            <int32 name="smmax" description="maximum steps in bar"/>
            <int32 name="smb" description="position of stop+measure+bar within part"/>
            <int32 name="smbmax" description="maximum steps in part"/>
            <int32 name="smbp" description="WRONG position of stop+measure+bar+part within song(difference in steps per part!)"/>
            <int32 name="smbpmax" description="WRONG maximum steps in song (difference in steps per part!)"/>
            <int32 name="mb" description="position of measure+bar within part (steps quantized to measure)"/>
            <int32 name="mbmax" description="maximumum measures in part"/>
            <int32 name="mbp" description="WRONG position of measure+bar+part within song  (difference in measures per part!)"/>
            <int32 name="mbpmax" description="WRONG maximum measures in song (difference in measures per part!)"/>
            <int32 name="bp" description="WRONG position of bar+part within song (difference in bars per part!)"/>
            <int32 name="bpmax" description="WRONG maximum bars in song (difference in bars per part!)"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <objref name="memory"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int32_t phs;
bool ntrig,rtrig,start,play,pause,stop,run;
   int i;
   int cnt[5];
int Sc;
int Sm;
int Mc;
int Mm;
int Bc;
int Bm;
int Pc;
int Pm;]]></code.declaration>
         <code.init><![CDATA[for(i=0;i<5;i++){
cnt[i]=0;
}
   ntrig = 0;
   rtrig = 0;
   start=1;
   run=0;]]></code.init>
         <code.krate><![CDATA[if(inlet_play&&!play){
	play=1;
	run=1;
}
else if(play&&!inlet_play){play=0;}

if(inlet_pause&&!pause){
	pause=1;
	run=0;
}
else if(pause&&!inlet_pause){pause=0;}
int rst=inlet_r;
if(inlet_stop&&!stop){
	stop=1;
	run=0;
	rst=1;
}
else if(stop&&!inlet_stop){stop=0;}


if ((rst>0) && !rtrig) {
for(i=0;i<5;i++){
cnt[i]=0;
}
cnt[3]=inlet_reset2part>0?inlet_reset2part-1:1;
rtrig = 1;
start=1;}
else if (!(rst>0)){
	rtrig=0;
}
int part=cnt[3]<<3;
outlet_clock=0;
if(run>0){
int32_t frq;
MTOF(inlet_tempo,frq)
frq=frq>>2;

phs+=frq*(attr_memory.array[2+part]+1);
if(phs>0){	outlet_clock=1;}
if ((phs>0) && !ntrig) {

   cnt[0] += 1;//steps cnt[0]
   if(start==1){
   	cnt[0]=0;
   	start=0;
   }
   if (cnt[0]>=(attr_memory.array[part+1]+1))
   {//measure cnt[1]
   	cnt[0] = 0;
   	cnt[1]+=1;
   	if (cnt[1]>=(attr_memory.array[part+3]+1))
   	{//bars cnt[3]
   		cnt[1]=0;
   		cnt[2]+=1;
  		if(cnt[2]>=(attr_memory.array[part+4]+1))
   		{
   			if(attr_memory.array[part+5]==0)
   			{//loopback off
   				cnt[3]+=1;
   			}
   			else
   			{//loopback on
   				if(cnt[4]<(attr_memory.array[7]+1))
   				{
   					cnt[3]=attr_memory.array[part+6];
   					cnt[4]+=1;
   				}
   				else
				{
   					cnt[3]+=1;cnt[4]=0;
   				}
   			}
   			cnt[2]=0;
   		}
   	}
   }
   ntrig=1;
}
else if
	(!(phs>0)) {ntrig=0;
}

}



if(cnt[3]>=attr_memory.max){
if(attr_memory.loop>0){
	for(i=0;i<5;i++){
		cnt[i]=0;
		start=1;
	}
}
else{run=0;
for(i=0;i<5;i++)
{
cnt[i]=0;
}
start=1;}
}
outlet_run=run;

if(run>0){
Sc=cnt[0];
Sm=attr_memory.array[part+1]+1;
Mc=cnt[1];
Mm=attr_memory.array[part+3]+1;
Bc=cnt[2];
Bm=attr_memory.array[part+4]+1;
Pc=cnt[3];
Pm=attr_memory.max;
}

outlet_step=Sc;
outlet_maxstep=Sm;
outlet_measure=Mc;
outlet_maxmeasure=Mm;
outlet_bar=Bc;
outlet_maxbar=Bm;
outlet_part=Pc;
outlet_maxparts=Pm;
outlet_preset=attr_memory.array[part];

outlet_sm=Sc+Mc*Sm;
outlet_smmax=Sm*Mm;
outlet_smb=outlet_sm+Bc*Mm*Sm;
outlet_smbmax=outlet_smmax*Bm;
outlet_smbp=outlet_smb+Pc*Bm*Mm*Sm;
outlet_smbpmax=outlet_smbmax*Pm;
outlet_mb=Mc+Bc*Mm;
outlet_mbmax=Mm*Bm;
outlet_mbp=outlet_mb+Pc*Mm*Bm;
outlet_mbpmax=outlet_mbmax*Pm;
outlet_bp=Bc+Pc*Bm;
outlet_bpmax=Bm*Pm;]]></code.krate>
      </object>
   </patchobj>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="run" x="322" y="448">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="clock" x="392" y="448">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/ibar 32" uuid="8ec034ef194146b746e2c4c1ec30350f4157d51a" name="preset" x="322" y="518">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/ibar 32" uuid="8ec034ef194146b746e2c4c1ec30350f4157d51a" name="step" x="322" y="588">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/ibar 32" uuid="8ec034ef194146b746e2c4c1ec30350f4157d51a" name="maxstep" x="322" y="644">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/ibar 32" uuid="8ec034ef194146b746e2c4c1ec30350f4157d51a" name="measure" x="322" y="714">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/ibar 32" uuid="8ec034ef194146b746e2c4c1ec30350f4157d51a" name="sm" x="714" y="714">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/ibar 32" uuid="8ec034ef194146b746e2c4c1ec30350f4157d51a" name="maxmeasure" x="322" y="770">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/ibar 32" uuid="8ec034ef194146b746e2c4c1ec30350f4157d51a" name="smmax" x="714" y="770">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/ibar 32" uuid="8ec034ef194146b746e2c4c1ec30350f4157d51a" name="bar" x="322" y="840">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/ibar 32" uuid="8ec034ef194146b746e2c4c1ec30350f4157d51a" name="smb" x="714" y="840">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/ibar 32" uuid="8ec034ef194146b746e2c4c1ec30350f4157d51a" name="mb" x="1106" y="840">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/ibar 32" uuid="8ec034ef194146b746e2c4c1ec30350f4157d51a" name="maxbar" x="322" y="896">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/ibar 32" uuid="8ec034ef194146b746e2c4c1ec30350f4157d51a" name="smbmax" x="714" y="896">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/ibar 32" uuid="8ec034ef194146b746e2c4c1ec30350f4157d51a" name="mbmax" x="1106" y="896">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/ibar 32" uuid="8ec034ef194146b746e2c4c1ec30350f4157d51a" name="part" x="322" y="966">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/ibar 32" uuid="8ec034ef194146b746e2c4c1ec30350f4157d51a" name="smbp" x="714" y="966">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/ibar 32" uuid="8ec034ef194146b746e2c4c1ec30350f4157d51a" name="mbp" x="1106" y="966">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/ibar 32" uuid="8ec034ef194146b746e2c4c1ec30350f4157d51a" name="bp" x="1498" y="966">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/ibar 32" uuid="8ec034ef194146b746e2c4c1ec30350f4157d51a" name="maxpart" x="322" y="1022">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/ibar 32" uuid="8ec034ef194146b746e2c4c1ec30350f4157d51a" name="smbpmax" x="714" y="1022">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/ibar 32" uuid="8ec034ef194146b746e2c4c1ec30350f4157d51a" name="mbpmax" x="1106" y="1022">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/ibar 32" uuid="8ec034ef194146b746e2c4c1ec30350f4157d51a" name="bpmax" x="1498" y="1022">
      <params/>
      <attribs/>
   </obj>
   <nets>
      <net>
         <source obj="counter_1" outlet="step"/>
         <dest obj="step" inlet="in"/>
      </net>
      <net>
         <source obj="tempo" outlet="out"/>
         <dest obj="counter_1" inlet="tempo"/>
      </net>
      <net>
         <source obj="counter_1" outlet="measure"/>
         <dest obj="measure" inlet="in"/>
      </net>
      <net>
         <source obj="counter_1" outlet="bar"/>
         <dest obj="bar" inlet="in"/>
      </net>
      <net>
         <source obj="counter_1" outlet="preset"/>
         <dest obj="preset" inlet="in"/>
      </net>
      <net>
         <source obj="counter_1" outlet="sm"/>
         <dest obj="sm" inlet="in"/>
      </net>
      <net>
         <source obj="counter_1" outlet="smbp"/>
         <dest obj="smbp" inlet="in"/>
      </net>
      <net>
         <source obj="counter_1" outlet="smb"/>
         <dest obj="smb" inlet="in"/>
      </net>
      <net>
         <source obj="counter_1" outlet="part"/>
         <dest obj="part" inlet="in"/>
      </net>
      <net>
         <source obj="indexed_1" outlet="out"/>
         <dest obj="save_1" inlet="filename"/>
         <dest obj="load_1" inlet="filename"/>
      </net>
      <net>
         <source obj="save" outlet="o"/>
         <dest obj="save_1" inlet="trig"/>
      </net>
      <net>
         <source obj="load" outlet="o"/>
         <dest obj="load_1" inlet="trig"/>
         <dest obj="songtable" inlet="update"/>
      </net>
      <net>
         <source obj="counter_1" outlet="maxstep"/>
         <dest obj="maxstep" inlet="in"/>
      </net>
      <net>
         <source obj="counter_1" outlet="maxmeasure"/>
         <dest obj="maxmeasure" inlet="in"/>
      </net>
      <net>
         <source obj="counter_1" outlet="maxbar"/>
         <dest obj="maxbar" inlet="in"/>
      </net>
      <net>
         <source obj="reset" outlet="o"/>
         <dest obj="counter_1" inlet="r"/>
      </net>
      <net>
         <source obj="play" outlet="o"/>
         <dest obj="counter_1" inlet="play"/>
      </net>
      <net>
         <source obj="stop" outlet="o"/>
         <dest obj="counter_1" inlet="stop"/>
      </net>
      <net>
         <source obj="pause" outlet="o"/>
         <dest obj="counter_1" inlet="pause"/>
      </net>
      <net>
         <source obj="counter_1" outlet="maxparts"/>
         <dest obj="maxpart" inlet="in"/>
      </net>
      <net>
         <source obj="counter_1" outlet="smmax"/>
         <dest obj="smmax" inlet="in"/>
      </net>
      <net>
         <source obj="counter_1" outlet="smbmax"/>
         <dest obj="smbmax" inlet="in"/>
      </net>
      <net>
         <source obj="counter_1" outlet="smbpmax"/>
         <dest obj="smbpmax" inlet="in"/>
      </net>
      <net>
         <source obj="counter_1" outlet="run"/>
         <dest obj="run" inlet="in"/>
      </net>
      <net>
         <source obj="counter_1" outlet="clock"/>
         <dest obj="clock" inlet="in"/>
      </net>
      <net>
         <source obj="counter_1" outlet="mb"/>
         <dest obj="mb" inlet="in"/>
      </net>
      <net>
         <source obj="counter_1" outlet="mbmax"/>
         <dest obj="mbmax" inlet="in"/>
      </net>
      <net>
         <source obj="counter_1" outlet="mbp"/>
         <dest obj="mbp" inlet="in"/>
      </net>
      <net>
         <source obj="counter_1" outlet="mbpmax"/>
         <dest obj="mbpmax" inlet="in"/>
      </net>
      <net>
         <source obj="counter_1" outlet="bp"/>
         <dest obj="bp" inlet="in"/>
      </net>
      <net>
         <source obj="counter_1" outlet="bpmax"/>
         <dest obj="bpmax" inlet="in"/>
      </net>
      <net>
         <source obj="copy to next" outlet="o"/>
         <dest obj="songtable" inlet="copy2next"/>
      </net>
      <net>
         <source obj="copy from" outlet="o"/>
         <dest obj="songtable" inlet="copyfrom"/>
      </net>
      <net>
         <source obj="from" outlet="out"/>
         <dest obj="songtable" inlet="from"/>
      </net>
      <net>
         <source obj="song" outlet="out"/>
         <dest obj="indexed_1" inlet="index"/>
      </net>
      <net>
         <source obj="reset to part" outlet="out"/>
         <dest obj="counter_1" inlet="reset2part"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>-8</x>
      <y>-8</y>
      <width>1818</width>
      <height>1096</height>
   </windowPos>
</patch-1.0>