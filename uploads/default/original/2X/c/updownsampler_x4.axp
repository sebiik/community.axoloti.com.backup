<patch-1.0 appVersion="1.0.10">
   <comment type="patch/comment" x="14" y="0" text="In DEVELOPMENT!"/>
   <comment type="patch/comment" x="14" y="28" text="4-fold up/down sampling for alias-reduced non-linear effects"/>
   <obj type="midi/in/keyb" uuid="53b04874696932f38aceaa168bd5d9efb743716d" name="keyb_1" x="14" y="56">
      <params/>
      <attribs/>
   </obj>
   <obj type="lfo/sine" uuid="75f7330c26a13953215dccc3b7b9008545c9daa9" name="sine_3" x="14" y="154">
      <params>
         <frac32.s.map name="pitch" value="6.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="mix/mix 1" uuid="26fb1fe4ed25d8bc2ac4a3f91ab6b80ed6d9d4fa" name="mix_1" x="126" y="154">
      <params>
         <frac32.u.map name="gain1" value="0.3"/>
      </params>
      <attribs/>
   </obj>
   <obj type="osc/sine" uuid="6e094045cca76a9dbf7ebfa72e44e4700d2b3ba" name="sine_2" x="238" y="154">
      <params>
         <frac32.s.map name="pitch" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="ctrl/i radio 4 v" uuid="b610704137c90b0e43464440b84bfb4fb7d2bb30" name="source" x="364" y="238">
      <params>
         <int32.vradio name="value" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="osc/saw" uuid="739ecc36017ef3249479b8f01716b8bbfba9abc1" name="saw_1" x="238" y="266">
      <params>
         <frac32.s.map name="pitch" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="462" y="280" text="sine"/>
   <comment type="patch/comment" x="462" y="294" text="saw"/>
   <comment type="patch/comment" x="462" y="308" text="input"/>
   <obj type="mux/mux 3" uuid="8e20982407718ae2b4e3cd55c79b04e53bb23457" name="mux_1" x="364" y="350">
      <params/>
      <attribs/>
   </obj>
   <obj type="audio/in left" uuid="d40e60b7641fe75af4d7c91b45bb038aacafc52e" name="in_1" x="266" y="378">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="266" y="490" text="BOX-OF-TRICKS, select one..."/>
   <obj type="math/*c" uuid="7a66f52a9594e7e9eb31328ea725cb3641a80b55" name="*c_1" x="56" y="518">
      <params>
         <frac32.u.map name="amp" value="4.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/+c" uuid="8a7195df16f4695260af58e8072c656181925b4d" name="bias" x="182" y="518">
      <params>
         <frac32.u.map name="c" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="b0682c5d-374d-4701-85a9-4f14776b0fe0" name="sine_1" x="294" y="518">
      <params>
         <frac32.s.map name="pitch" value="17.499999523162842"/>
      </params>
      <attribs>
         <combo attributeName="mode" selection="asym hardclip"/>
      </attribs>
      <object id="patch/object" uuid="b0682c5d-374d-4701-85a9-4f14776b0fe0">
         <sDescription>sine wave oscillator</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>osc.axh</helpPatch>
         <inlets>
            <frac32buffer name="in" description="input"/>
         </inlets>
         <outlets>
            <frac32buffer.bipolar name="out" description="output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.pitch name="pitch" noLabel="true"/>
         </params>
         <attribs>
            <combo name="mode">
               <MenuEntries>
                  <string>osc test</string>
                  <string>passthru</string>
                  <string>sym hardclip</string>
                  <string>asym hardclip</string>
                  <string>softclip</string>
                  <string>sine ringmod</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>4</string>
                  <string>5</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[uint32_t Phase;

int64_t fir16down4(int16_t *in) {
	// int32_t in[8] really is packed int16_t in[16]
	// assuming it is word-aligned

	static const int taps = 16;

// half of 16 tap symmetrical filter
	static const int16_t f16coefs[taps/2]={
		-2229, -655, 1898, 5819,
		13320, 17997, 22052, 24381
	};
		
	int32_t *coeffPtr = (int32_t *)&f16coefs[0];
	int32_t *x_ptr = (int32_t *)&in[0];
	int32_t *x_rev_ptr = (int32_t *)&in[14];
	// symmetric 16 tap, 16 bit FIR
	int64_t sum0 = 0;
	int32_t c_0_1 = *coeffPtr++;
	int32_t c_2_3 = *coeffPtr++;
	int32_t x_0_1 = *x_ptr; x_ptr++;
	int32_t x_2_3 = *x_ptr; x_ptr++;
	int32_t x_14_15 = *x_rev_ptr; x_rev_ptr--;
	int32_t x_12_13 = *x_rev_ptr; x_rev_ptr--;
	sum0  = __SMLALD(x_0_1, c_0_1, sum0); 
	// sum0 = x0*c0 + x1*c1
	sum0  = __SMLALDX(x_14_15, c_0_1, sum0);
	// sum0 = x0*c0 + x1*c1 + x30*c1 + x31*c0
	sum0  = __SMLALD(x_2_3, c_2_3, sum0); 
	// sum0 = x0*c0 + x1*c1 + x14*c1 + x15*c0 + x2*c2 + x3*c3 
	sum0  = __SMLALDX(x_12_13, c_2_3, sum0);
	// sum0 = x0*c0 + x1*c1 + x14*c1 + x15*c0 + x2*c2 + x3*c3 + x28*c3 + x29*c2
	int32_t c_4_5 = *coeffPtr++;
	int32_t c_6_7 = *coeffPtr++;
	int32_t x_4_5 = *x_ptr; x_ptr++;
	int32_t x_6_7 = *x_ptr; x_ptr++;
	int32_t x_10_11 = *x_rev_ptr; x_rev_ptr--;
	int32_t x_8_9 = *x_rev_ptr; x_rev_ptr--;
	sum0  = __SMLALD(x_4_5, c_4_5, sum0);
	sum0  = __SMLALDX(x_10_11, c_4_5, sum0);
	sum0  = __SMLALD(x_6_7, c_6_7, sum0);
	sum0  = __SMLALDX(x_8_9, c_6_7, sum0);
/*
	LogTextMessage("c0 : %08x",x_0_1);
	LogTextMessage("c2 : %08x",x_2_3);
	LogTextMessage("c4 : %08x",x_4_5);
	LogTextMessage("c6 : %08x",x_6_7);
	LogTextMessage("c8 : %08x",x_8_9);
	LogTextMessage("c10 : %08x",x_10_11);
	LogTextMessage("c12 : %08x",x_12_13);
	LogTextMessage("c14 : %08x",x_14_15);
*/
	return sum0;
}

void fir16up4(int16_t *in, int32_t *out){
// 4-way polyphase

	static const int16_t f16p_coefs[16] = {
		5185, 16838, 8692, -2053,
		2352, 15191, 12264, 572,
		572, 12264, 15191, 2352,
		-2053, 8692, 16838, 5185
	};
	int32_t *x_ptr = (int32_t *)&in[0];
	int32_t *coeffPtr = (int32_t *)&f16p_coefs[0];
	int32_t x_0_1 = *x_ptr++;
	int32_t x_2_3 = *x_ptr++;
	int64_t sum0, sum1, sum2, sum3;
	int32_t c_0_1 = *coeffPtr++;
	sum0 = __SMUAD(x_0_1, c_0_1);
	int32_t c_2_3 = *coeffPtr++;
	sum0 = __SMLALD(x_2_3, c_2_3, sum0);
	int32_t c_4_5 = *coeffPtr++;
	sum1 = __SMUAD(x_0_1, c_4_5);
	int32_t c_6_7 = *coeffPtr++;
	sum1 = __SMLALD(x_2_3, c_6_7, sum1);
	int32_t c_8_9 = *coeffPtr++;
	sum2 = __SMUAD(x_0_1, c_8_9);
	int32_t c_10_11 = *coeffPtr++;
	sum2 = __SMLALD(x_2_3, c_10_11, sum2);
	int32_t c_12_13 = *coeffPtr++;
	sum3 = __SMUAD(x_0_1, c_12_13);
	int32_t c_14_15 = *coeffPtr++;
	sum3 = __SMLALD(x_2_3, c_14_15, sum3);
	// 16 taps, ~22 cycles, 1.38 cycles/tap
	*out = sum0; out++;
	*out = sum1; out++;
	*out = sum2; out++;
	*out = sum3; out++;
}

void test(){

	int16_t buf[64];
	int i;
	for(i=0;i<64;i++){
		buf[i]=0;
	}
	buf[9] = 1;
/*
	for(i=0;i<40;i++){
		int32_t r = fir16down4(&buf[i]);
		LogTextMessage("%d : %d",i,r);
	}
*/
	int32_t r4[4];
	for(i=0;i<10;i++){
		fir16up4(&buf[i],&r4[0]);
		LogTextMessage("%d : %d",i,r4[0]);
		LogTextMessage("%d : %d",i,r4[1]);
		LogTextMessage("%d : %d",i,r4[2]);
		LogTextMessage("%d : %d",i,r4[3]);
	}
	
}

int16_t buf_in[BUFSIZE+4];
int32_t buf_x4[BUFSIZE*4];
int16_t buf_x4_processed[BUFSIZE*4 + BUFSIZE];]]></code.declaration>
         <code.init><![CDATA[Phase = 0;
test();]]></code.init>
         <code.krate><![CDATA[int32_t freq;
   MTOFEXTENDED(param_pitch,freq);

freq = freq>>2;

int i;
// archive 4 samples of input history for upsampling filter
for(i=0;i<4;i++){
	buf_in[i]=buf_in[BUFSIZE+i];
}
// reduce to 16bit/sample
for(i=0;i<BUFSIZE;i++){
	buf_in[i+4] = __SSAT(inlet_in[i]>>12,16); 
}
// upsample
for(i=0;i<BUFSIZE;i++){
	fir16up4(&buf_in[i], &buf_x4[i*4]);
}
// archive 16 samples of history for downsampling filter
for(i=0;i<16;i++){
	buf_x4_processed[i]=buf_x4_processed[BUFSIZE*4+i];
}

int16_t *out_x4_p = &buf_x4_processed[16];
int32_t *buf_x4_p = &buf_x4[0];
// now process at 4x samplerate
for(i=0;i<4*BUFSIZE;i++){
	int32_t in_x4 = *buf_x4_p++;

	// oscillator test
	if (attr_mode == 0) {
		Phase += freq;
		int32_t r;
		int32_t p2 = Phase;
		SINE2TINTERP(p2,r)
		*out_x4_p++ = r>>16;
	} else if (attr_mode == 1) {
	// passthrough
		*out_x4_p++ = in_x4>>16;
	} else if (attr_mode == 2) {
	// symmetric hard clip distortion
		*out_x4_p++ = __SSAT(in_x4,26)>>12;
	} else if (attr_mode == 3) {
	// asymmetric hard clip distortion
		*out_x4_p++ = __USAT(in_x4,25)>>11;
	} else if (attr_mode == 4) {
	// softclip
		int32_t ts = __SSAT(in_x4,28);
		int32_t tsq31 = ts<<3;
		int32_t tsq31p3 = ___SMMUL(tsq31,___SMMUL(tsq31,tsq31));
		*out_x4_p++ = (ts + (ts>>1) - (tsq31p3))>>13;
	} else if (attr_mode == 5) {
	// sine ringmod
		Phase += freq;
		int32_t r;
		int32_t p2 = Phase;
		SINE2TINTERP(p2,r)
		*out_x4_p++ = ___SMMUL(r,in_x4)>>16;
	}
}

for(i=0;i<BUFSIZE;i++){
	outlet_out[i] = fir16down4(&buf_x4_processed[i*4])>>5;
//	fir16up4(&buf_in[i], &buf_x4[16 + i*4]);
}]]></code.krate>
      </object>
   </patchobj>
   <obj type="math/*c" uuid="7a66f52a9594e7e9eb31328ea725cb3641a80b55" name="*c_2" x="448" y="518">
      <params>
         <frac32.u.map name="amp" value="64.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="audio/out stereo" uuid="a1ca7a567f535acc21055669829101d3ee7f0189" name="out_1" x="560" y="518">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/scope 128 b trig" uuid="11747dcd1dc9afe4919f537c861fb18b80b4e4e" name="scope_3" x="182" y="644">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/scope 128 b trig" uuid="11747dcd1dc9afe4919f537c861fb18b80b4e4e" name="scope_1" x="336" y="644">
      <params/>
      <attribs/>
   </obj>
   <nets>
      <net>
         <source obj="sine_1" outlet="out"/>
         <dest obj="scope_1" inlet="in"/>
         <dest obj="*c_2" inlet="in"/>
      </net>
      <net>
         <source obj="bias" outlet="out"/>
         <dest obj="sine_1" inlet="in"/>
      </net>
      <net>
         <source obj="mix_1" outlet="out"/>
         <dest obj="sine_2" inlet="pitch"/>
         <dest obj="saw_1" inlet="pitch"/>
      </net>
      <net>
         <source obj="*c_1" outlet="out"/>
         <dest obj="scope_3" inlet="in"/>
         <dest obj="bias" inlet="in"/>
      </net>
      <net>
         <source obj="in_1" outlet="wave"/>
         <dest obj="mux_1" inlet="i2"/>
      </net>
      <net>
         <source obj="*c_2" outlet="out"/>
         <dest obj="out_1" inlet="left"/>
         <dest obj="out_1" inlet="right"/>
      </net>
      <net>
         <source obj="mux_1" outlet="o"/>
         <dest obj="*c_1" inlet="in"/>
      </net>
      <net>
         <source obj="saw_1" outlet="wave"/>
         <dest obj="mux_1" inlet="i1"/>
      </net>
      <net>
         <source obj="sine_2" outlet="wave"/>
         <dest obj="mux_1" inlet="i0"/>
      </net>
      <net>
         <source obj="source" outlet="out"/>
         <dest obj="mux_1" inlet="s"/>
      </net>
      <net>
         <source obj="sine_3" outlet="wave"/>
         <dest obj="mix_1" inlet="in1"/>
      </net>
      <net>
         <source obj="keyb_1" outlet="note"/>
         <dest obj="mix_1" inlet="bus_in"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>127</x>
      <y>45</y>
      <width>1090</width>
      <height>1055</height>
   </windowPos>
</patch-1.0>