<patch-1.0 appVersion="1.0.10">
   <obj type="table/alloc 16b sdram" uuid="6d8eb0fd68f404cb5d14e7d4c8c146c8ccf09da1" name="slicesbuf" x="14" y="14">
      <params/>
      <attribs>
         <combo attributeName="size" selection="524288"/>
         <text attributeName="init">
            <sText><![CDATA[for(int i = 0; i < LENGTH; i++){
	array[i] = 0;
}
]]></sText>
         </text>
      </attribs>
   </obj>
   <obj type="table/alloc 32b sdram" uuid="1a4546b7b52747ea765093ac97444601c44721e8" name="slicesind" x="140" y="14">
      <params/>
      <attribs>
         <combo attributeName="size" selection="64"/>
         <text attributeName="init">
            <sText><![CDATA[for(int i = 0; i < LENGTH; i++){
	array[i] = 0;
}
]]></sText>
         </text>
      </attribs>
   </obj>
   <obj type="table/alloc 32b sdram" uuid="1a4546b7b52747ea765093ac97444601c44721e8" name="evtbuf" x="266" y="14">
      <params/>
      <attribs>
         <combo attributeName="size" selection="64"/>
         <text attributeName="init">
            <sText><![CDATA[]]></sText>
         </text>
      </attribs>
   </obj>
   <obj type="ctrl/i radio 16 h" uuid="75b78d9270bc08741651a7b7acae0fb789172fca" name="i_2" x="504" y="14">
      <params>
         <int32.hradio name="value" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="table/read" uuid="65eb8d0f6a3344638de94c9882999b9af15510d0" name="read_1" x="714" y="14">
      <params/>
      <attribs>
         <objref attributeName="table" obj="evtbuf"/>
      </attribs>
   </obj>
   <obj type="disp/hex" uuid="87617898f70d90033f8add921438bf0d11721fdd" name="hex_1" x="854" y="14">
      <params/>
      <attribs/>
   </obj>
   <obj type="ctrl/i radio 16 h" uuid="75b78d9270bc08741651a7b7acae0fb789172fca" name="i_3" x="420" y="112">
      <params>
         <int32.hradio name="value" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="logic/change" uuid="96e39ae624c3f3c952cec4a95e1986ee0104f718" name="change_1" x="630" y="112">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="e0631b14-a178-462d-9a53-af8b7b93cc7a" name="play_2" x="728" y="112">
      <params/>
      <attribs>
         <objref attributeName="slicesbuffer" obj="slicesbuf"/>
         <objref attributeName="slicesindex" obj="slicesind"/>
      </attribs>
      <object id="patch/object" uuid="e0631b14-a178-462d-9a53-af8b7b93cc7a">
         <sDescription>play audio from table (non-transposed), starting from position</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>table.axh</helpPatch>
         <inlets>
            <bool32.rising name="start" description="start playback"/>
            <int32 name="nslice"/>
         </inlets>
         <outlets>
            <frac32buffer name="wave" description="wave"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <objref name="slicesbuffer"/>
            <objref name="slicesindex"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int pstart;
int pos;
int end;]]></code.declaration>
         <code.init><![CDATA[pos = 0;
pstart = 0;
end = 0;]]></code.init>
         <code.krate><![CDATA[if ((inlet_start>0) && !pstart) {
   pstart = 1;
   if(inlet_nslice < attr_slicesindex.array[0]) {
      if(inlet_nslice == 0) {
         pos = 0;
   	    end = attr_slicesindex.array[1];
      } else {
      	pos = attr_slicesindex.array[inlet_nslice];
      	end = attr_slicesindex.array[inlet_nslice+1];
      }
   }
} else if (!(inlet_start>0)) {
   pstart = 0;
}]]></code.krate>
         <code.srate><![CDATA[if (pos<end)
   outlet_wave = attr_slicesbuffer.array[pos++]<<attr_slicesbuffer.GAIN;
else outlet_wave = 0;]]></code.srate>
      </object>
   </patchobj>
   <obj type="mix/mix 2 g" uuid="221f038da51943034a75e442c90624fcebfe6112" name="mix_1" x="966" y="112">
      <params>
         <frac32.u.map name="gain1" value="32.0"/>
         <frac32.u.map name="gain2" value="32.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="audio/out stereo" uuid="a1ca7a567f535acc21055669829101d3ee7f0189" name="out_1" x="1078" y="112">
      <params/>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_2" x="252" y="182">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="audio/in left" uuid="d40e60b7641fe75af4d7c91b45bb038aacafc52e" name="in_1" x="0" y="238">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/gain" uuid="62b1c1a6337c7c8f6aec96408a432477b113cfa0" name="gain_1" x="70" y="238">
      <params>
         <frac32.u.map name="amp" value="10.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="disp/vu" uuid="6899a21ca2efcb3f63aa03ed7f61b5fe5a92e871" name="vu_1" x="168" y="238">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="83e2f688-3873-45de-b879-8ab79efe3999" name="beatslicer_1" x="252" y="238">
      <params/>
      <attribs>
         <objref attributeName="slicesbuffer" obj="slicesbuf"/>
         <objref attributeName="slicesindex" obj="slicesind"/>
      </attribs>
      <object id="patch/object" uuid="83e2f688-3873-45de-b879-8ab79efe3999">
         <sDescription>description</sDescription>
         <author>Jérôme Burlando</author>
         <license>BSD</license>
         <helpPatch>beatslicer.axh</helpPatch>
         <inlets>
            <frac32buffer name="in"/>
            <bool32.rising name="reset"/>
            <frac32 name="attack"/>
            <frac32 name="decay"/>
            <frac32 name="silence"/>
         </inlets>
         <outlets>
            <bool32.pulse name="detection"/>
            <frac32 name="diff"/>
            <frac32 name="rms"/>
         </outlets>
         <displays>
            <bool32 name="detection"/>
         </displays>
         <params/>
         <attribs>
            <objref name="slicesbuffer"/>
            <objref name="slicesindex"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[static const uint8_t FRAME_SIZE = 64;		// Frame size (energy is calculated on 1 frame, etc.)
static const uint8_t NB_CHUNK_FRAME = 4;	// 16 samples for k-rate call, then 4 calls for a 64 samples frame
static const uint8_t INITTIMER = 128;		// Nb frames while attack or silence detection are desactived
static const uint32_t HANINC = 33554432;	// Increment of the half hanning window use for fadein and fadeout : MAX_INT / 2 / FRAME_SIZE
static const uint32_t HANMID = 2147483648;	// Index of the middle of the hanning window
static const uint32_t LOG2_10 = 404035620;	// 10 / log2(10) in fixed point Q27

uint8_t preset = 0;						// Used for rising edge logic on reset inlet
uint32_t si = 0;						// slice buffer current index
uint32_t sii = 1;						// slice index current index
uint32_t rms = 0;						// root mean square value of the current frame
uint16_t timer = 0;						// A simple timer, for mask consecutive attack detection
uint8_t crosscheck = 0;					// true <==> zero crossing check activate
uint32_t zerocrosspoint = 0;				// zero crossing index in wave table
int32_t twoframe[2 * FRAME_SIZE];			// Buffer used for temporary continuous recording
uint8_t tfi = 0;						// Two frame buffer index
uint8_t curchunk = 0;					// Current chunk number
uint8_t detect = 0;						// Detection status : 1 => store slice in slicebuffer
int32_t peakenvelope = 0;				// Current envelope value expressed in decibel
int32_t diff = 0;						// For attackstep calibration output
int32_t attack = 0;						// [user] Decibel absolute threshold for attack test
int32_t decay = 0;						// [user] Threshold for attack detection on difference of previous peakenvelope and current peakenvelope
int32_t silence = 0;					// [user] Decibel threshold for silence test
uint32_t radius = 130685889;				// (uint32_t) (exp(-1.33333333f / 1000) * (1<<27));
uint8_t trig = 0;

// For display a value each second : if(!calib_cpt) LogTextMessage("val : %d", val);

/* Take a frac32 value and return the equivalent value in logarithmic scale 
 * From axoloti "log" object. 
 */
int32_t logscale(int32_t in) {
	Float_t f;
	f.f = in;
	int32_t r1 = ((f.parts.exponent&0x7F)-18) << 24;
	int32_t r3 = logt[f.parts.mantissa>>15]<<10;
	return r1 + r3;
}

/* Convert rms power value to decibel unit */
int32_t rmstodb(int32_t rms) {
	
	int32_t y = logscale(rms); 		// 16 + 8 * log2(x)
	return ___SMMUL(y - 16, LOG2_10);	// decibel = 10 * log10(power / power_ref) 
								// <=> 10 * log2(x) / log2(10) with power_ref == 1 (1 << 27)
}

/*  Apply an half Hanning window on the begin of the recorded sample (2 frames)
 *  Hanning is full range (input in range 0..MAX_INT).
 *  Start on the begin of the hanning window and finish on the middle the hanning window. 
 */
void insert_twoframe(void) {
	int32_t s = 0;
	uint32_t phase = 0;
	int8_t tfitmp = tfi;
	int32_t r;
	int8_t i;
	
	for(i = 0; i < FRAME_SIZE; i++){
		HANNING2TINTERP(phase, r)
		/* "<< 5" to complete ___SMMUL operation (fixed point choice contraint)
		 * ">> 4" => just a copy of the hanning window axoloti object. Why not >> 5 ? I don't understand.
		 */
		s = ___SMMUL(twoframe[tfitmp++], r >> 4) << 5;
		attr_slicesbuffer.array[si++] = __SSAT(s,28)>>attr_slicesbuffer.GAIN;
		tfitmp %= FRAME_SIZE * 2;
		phase += HANINC;
	}
	for(i = 0; i < FRAME_SIZE; i++){
		s = twoframe[tfitmp++];
		attr_slicesbuffer.array[si++] = __SSAT(s,28)>>attr_slicesbuffer.GAIN;
		tfitmp %= FRAME_SIZE * 2;
	}
}

/*  Apply an half Hanning window on the end of the recorded sample (2 frames)
 *  Hanning is full range (input in range 0..MAX_INT).
 *  Start on the middle of the hanning window and finish on the end the hanning window. 
 */
void fadeout(uint32_t cuepoint) {
	/* MAX_INT / 2 => hanning window is full range (input in range 0..MAX_INT).
	 *  Start on the middle of the hanning window. */
	uint32_t phase = HANMID; 
	int32_t r;
	int32_t s;
     for(int i = cuepoint - (2 * FRAME_SIZE); i < cuepoint; i++){
     	HANNING2TINTERP(phase, r)
     	s = ___SMMUL(attr_slicesbuffer.array[i], r >> 4) << 5; // see "insert_twoframe"
     	attr_slicesbuffer.array[i] = __SSAT(s,28)>>attr_slicesbuffer.GAIN;
     	phase += (HANINC / 2); // HANINC is a FRAMESIZE increment. Fadeout apply a fadeout on 2 frames.
     }

     /* Store cuepoint */
     if(sii < attr_slicesindex.LENGTH){
     	attr_slicesindex.array[0] = sii;
     	attr_slicesindex.array[sii++] = cuepoint;
     }
}

void detection() {
	int32_t peakenvelope_tmp = peakenvelope;
	rms >>= 2; // rms = rms << 5 (to complete last ___SMMLA operation) and >> 7 (/ 128) for the mean value
	int32_t decibel = rms > 1 ? rmstodb(rms) : 0; // rmstodb produce bad value with a very little value of rms
	diff = decibel - peakenvelope_tmp;
	
	// New slice detection
	if((decibel > attack) && (diff > decay) && !(timer > 0)) {
		trig = 1;
		if(!(detect)) {
			insert_twoframe();
			detect = 1;
          } else {
          	fadeout(zerocrosspoint);
          }
          timer = INITTIMER; // To avoid closed detections 
	}
	peakenvelope_tmp = ___SMMUL(radius, peakenvelope_tmp) << 5; // << 5 (to complete ___SMMUL operation
	if(decibel > peakenvelope_tmp) peakenvelope_tmp = decibel;

	// Silence detection
	if(detect && !(timer > 0) && (peakenvelope_tmp < silence)) {
		detect = 0;
		fadeout(si);
	}
     peakenvelope = peakenvelope_tmp;
}]]></code.declaration>
         <code.krate><![CDATA[/**************/
/* Parameters */
/**************/

attack = inlet_attack; 
decay = inlet_decay;	
silence = inlet_silence;

/****************/
/* Record logic */
/****************/

int32_t s = 0;
int32_t prev_s = 0;
static uint32_t zerocrosspoint_tmp = 0;
trig = 0;

if(inlet_reset>0 && !preset) {
	preset = 1;
	si = 0;
	sii = 1;
	attr_slicesindex.array[0] = 0;
} else if(!(inlet_reset>0)) {
	preset = 0;
}

if(timer > 0) timer--;

for(int i = 0; i < BUFSIZE; i++){
	s = inlet_in[i];
	if(detect){
		if(crosscheck && (prev_s * s < 0)){
			zerocrosspoint_tmp = si;
			crosscheck = 0;
		}
		attr_slicesbuffer.array[si++] = __SSAT(s,28)>>attr_slicesbuffer.GAIN;
	} else {
		twoframe[tfi++] = s;
	}
	rms = __USAT(___SMMLA(s, s, rms), 27); // rms += s * s (must apply "<< 5" in order to exactly have the sum of square)
	prev_s = s;
}

tfi %= 2 * FRAME_SIZE;
if(curchunk == NB_CHUNK_FRAME - 1){
	crosscheck = 1;
	detection(); // Attack and decay to zero detection
	zerocrosspoint = zerocrosspoint_tmp;
	rms = 0;
}
curchunk++;
curchunk %= NB_CHUNK_FRAME;

/************************/
/* Displays and outputs */
/************************/
disp_detection = detect;
outlet_detection = trig;
outlet_rms = peakenvelope;
outlet_diff = diff;]]></code.krate>
      </object>
   </patchobj>
   <obj type="disp/hex" uuid="87617898f70d90033f8add921438bf0d11721fdd" name="hex_5" x="420" y="238">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/max" uuid="12440f9565ca6f036f087665b49fb708062e90d0" name="max_2" x="490" y="238">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/hex" uuid="87617898f70d90033f8add921438bf0d11721fdd" name="hex_7" x="560" y="238">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/hex" uuid="87617898f70d90033f8add921438bf0d11721fdd" name="hex_6" x="420" y="294">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/max" uuid="12440f9565ca6f036f087665b49fb708062e90d0" name="max_1" x="490" y="294">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/hex" uuid="87617898f70d90033f8add921438bf0d11721fdd" name="hex_8" x="560" y="294">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/&lt;&lt;" uuid="b03d8d8009c0480be0ccb29ed65933a82fa4a80f" name="&lt;&lt;_1" x="476" y="350">
      <params/>
      <attribs>
         <spinner attributeName="shift" value="2"/>
      </attribs>
   </obj>
   <obj type="disp/dial b" uuid="9ffed04e6a3052d9001eda83bae7024cb6d17037" name="dial_4" x="560" y="350">
      <params/>
      <attribs/>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_1" x="14" y="392">
      <params>
         <frac32.u.map name="value" value="18.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/&gt;&gt;" uuid="d883beaf50b7aae4803ed9941e8f123e87e1e3aa" name="&gt;&gt;_1" x="84" y="392">
      <params/>
      <attribs>
         <spinner attributeName="shift" value="6"/>
      </attribs>
   </obj>
   <obj type="disp/hex" uuid="87617898f70d90033f8add921438bf0d11721fdd" name="hex_2" x="168" y="392">
      <params/>
      <attribs/>
   </obj>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_3" x="14" y="476">
      <params>
         <frac32.s.map name="value" value="9.99999999999999"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/&gt;&gt;" uuid="d883beaf50b7aae4803ed9941e8f123e87e1e3aa" name="&gt;&gt;_3" x="84" y="476">
      <params/>
      <attribs>
         <spinner attributeName="shift" value="3"/>
      </attribs>
   </obj>
   <obj type="disp/hex" uuid="87617898f70d90033f8add921438bf0d11721fdd" name="hex_4" x="168" y="476">
      <params/>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_1" x="364" y="504">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="aa723858-3dcb-4ba8-bfb0-1ccc6c8aeca9" name="object_1" x="448" y="504">
      <params>
         <bool32.tgl name="record" value="0"/>
         <bool32.tgl name="auto" value="1"/>
      </params>
      <attribs>
         <objref attributeName="evtbuffer" obj="evtbuf"/>
      </attribs>
      <object id="patch/object" uuid="aa723858-3dcb-4ba8-bfb0-1ccc6c8aeca9">
         <inlets>
            <bool32.rising name="evt"/>
         </inlets>
         <outlets>
            <bool32 name="record"/>
         </outlets>
         <displays>
            <bool32 name="record"/>
         </displays>
         <params>
            <bool32.tgl name="record"/>
            <bool32.tgl name="auto"/>
         </params>
         <attribs>
            <objref name="evtbuffer"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int prec;
int record_on;
int pevt;
int record_start;
int evt_index;
int timer;]]></code.declaration>
         <code.init><![CDATA[prec = 0;
record_on = 0;
pevt = 0;
record_start = 0;
evt_index = 1;
timer = 0;]]></code.init>
         <code.krate><![CDATA[if(param_record > 0 && !prec) {
	prec = 1;
	record_on = 1;
} else if(!(param_record > 0) && prec) {
	prec = 0;
	record_on = 0;
	record_start = 0;
	attr_evtbuffer.array[0] = timer;
	evt_index = 1;
	timer = 0;
}

if(param_auto) {
	if(record_on && !record_start && (inlet_evt > 0) && !pevt) {
		pevt = 1;
		record_start = 1;
		attr_evtbuffer.array[evt_index++] = timer;
		evt_index %= attr_evtbuffer.LENGTH;
	} else if(!(inlet_evt > 0)) {
		pevt = 0;
	}	
} else {
	if(record_on && !record_start) {
		record_start = 1;
	}
}

if(record_start && (inlet_evt > 0) && !pevt) {
	pevt = 1;
	attr_evtbuffer.array[evt_index++] = timer;
	evt_index %= attr_evtbuffer.LENGTH;
} else if(!(inlet_evt > 0)) {
	pevt = 0;
}

if(record_start) timer++;

disp_record = record_start;
outlet_record = record_start;]]></code.krate>
      </object>
   </patchobj>
   <obj type="logic/inv" uuid="2bd44b865d3b63ff9b80862242bf5be779e3ad5" name="inv_1" x="602" y="504">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="0522a020-c335-411c-8e3a-8568cbaea4b0" name="object_2" x="672" y="504">
      <params>
         <frac32.u.map name="ratio" value="15.5"/>
      </params>
      <attribs>
         <objref attributeName="evtbuffer" obj="evtbuf"/>
      </attribs>
      <object id="patch/object" uuid="0522a020-c335-411c-8e3a-8568cbaea4b0">
         <inlets>
            <bool32.risingfalling name="start"/>
         </inlets>
         <outlets>
            <bool32.pulse name="trig"/>
            <int32 name="nslice"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map.ratio name="ratio"/>
         </params>
         <attribs>
            <objref name="evtbuffer"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int pstart;
int play;
int timer;
int evt_index;]]></code.declaration>
         <code.init><![CDATA[pstart = 0;
play = 0;
timer = 0;
evt_index = 1;]]></code.init>
         <code.krate><![CDATA[if((inlet_start > 0) && !pstart) {
	pstart = 1;
	if(attr_evtbuffer.array[0] != 0) play = 1;
} else if(!(inlet_start > 0) && pstart) {
	pstart = 0;
	play = 0;
	timer = 0;
	evt_index = 1;
}

if(play) {
	if(timer == (int)(attr_evtbuffer.array[evt_index] * ((float)(param_ratio >> 21) / 32))) {
		outlet_nslice = evt_index - 1;
		evt_index++;
		outlet_trig = 1;
	} else {
		outlet_trig = 0;
	}
	timer++;
	if(timer > (int)(attr_evtbuffer.array[0] * ((float)(param_ratio >> 21) / 32))) {
		timer = 0;
		evt_index = 1;
	}
} else {
	outlet_trig = 0;
}]]></code.krate>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="e0631b14-a178-462d-9a53-af8b7b93cc7a" name="play_1" x="826" y="504">
      <params/>
      <attribs>
         <objref attributeName="slicesbuffer" obj="slicesbuf"/>
         <objref attributeName="slicesindex" obj="slicesind"/>
      </attribs>
      <object id="patch/object" uuid="e0631b14-a178-462d-9a53-af8b7b93cc7a">
         <sDescription>play audio from table (non-transposed), starting from position</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>table.axh</helpPatch>
         <inlets>
            <bool32.rising name="start" description="start playback"/>
            <int32 name="nslice"/>
         </inlets>
         <outlets>
            <frac32buffer name="wave" description="wave"/>
         </outlets>
         <displays/>
         <params/>
         <attribs>
            <objref name="slicesbuffer"/>
            <objref name="slicesindex"/>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int pstart;
int pos;
int end;]]></code.declaration>
         <code.init><![CDATA[pos = 0;
pstart = 0;
end = 0;]]></code.init>
         <code.krate><![CDATA[if ((inlet_start>0) && !pstart) {
   pstart = 1;
   if(inlet_nslice < attr_slicesindex.array[0]) {
      if(inlet_nslice == 0) {
         pos = 0;
   	    end = attr_slicesindex.array[1];
      } else {
      	pos = attr_slicesindex.array[inlet_nslice];
      	end = attr_slicesindex.array[inlet_nslice+1];
      }
   }
} else if (!(inlet_start>0)) {
   pstart = 0;
}]]></code.krate>
         <code.srate><![CDATA[if (pos<end)
   outlet_wave = attr_slicesbuffer.array[pos++]<<attr_slicesbuffer.GAIN;
else outlet_wave = 0;]]></code.srate>
      </object>
   </patchobj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="dial_2" x="14" y="560">
      <params>
         <frac32.u.map name="value" value="0.14999961853027344"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/&gt;&gt;" uuid="d883beaf50b7aae4803ed9941e8f123e87e1e3aa" name="&gt;&gt;_2" x="84" y="560">
      <params/>
      <attribs>
         <spinner attributeName="shift" value="18"/>
      </attribs>
   </obj>
   <obj type="disp/hex" uuid="87617898f70d90033f8add921438bf0d11721fdd" name="hex_3" x="168" y="560">
      <params/>
      <attribs/>
   </obj>
   <nets>
      <net>
         <source obj="in_1" outlet="wave"/>
         <dest obj="gain_1" inlet="in"/>
      </net>
      <net>
         <source obj="i_2" outlet="out"/>
         <dest obj="read_1" inlet="a"/>
      </net>
      <net>
         <source obj="read_1" outlet="o"/>
         <dest obj="hex_1" inlet="in"/>
      </net>
      <net>
         <source obj="gain_1" outlet="out"/>
         <dest obj="vu_1" inlet="in"/>
         <dest obj="beatslicer_1" inlet="in"/>
         <dest obj="mix_1" inlet="bus_in"/>
      </net>
      <net>
         <source obj="button_2" outlet="o"/>
         <dest obj="beatslicer_1" inlet="reset"/>
      </net>
      <net>
         <source obj="beatslicer_1" outlet="diff"/>
         <dest obj="hex_5" inlet="in"/>
         <dest obj="max_2" inlet="in1"/>
      </net>
      <net>
         <source obj="beatslicer_1" outlet="rms"/>
         <dest obj="hex_6" inlet="in"/>
         <dest obj="max_1" inlet="in1"/>
      </net>
      <net>
         <source obj="dial_1" outlet="out"/>
         <dest obj="&gt;&gt;_1" inlet="a"/>
      </net>
      <net>
         <source obj="&gt;&gt;_1" outlet="result"/>
         <dest obj="hex_2" inlet="in"/>
         <dest obj="beatslicer_1" inlet="attack"/>
      </net>
      <net>
         <source obj="dial_3" outlet="out"/>
         <dest obj="&gt;&gt;_3" inlet="a"/>
      </net>
      <net>
         <source obj="&gt;&gt;_3" outlet="result"/>
         <dest obj="hex_4" inlet="in"/>
         <dest obj="beatslicer_1" inlet="decay"/>
      </net>
      <net>
         <source obj="dial_2" outlet="out"/>
         <dest obj="&gt;&gt;_2" inlet="a"/>
      </net>
      <net>
         <source obj="&gt;&gt;_2" outlet="result"/>
         <dest obj="hex_3" inlet="in"/>
         <dest obj="beatslicer_1" inlet="silence"/>
      </net>
      <net>
         <source obj="max_1" outlet="out"/>
         <dest obj="max_1" inlet="in2"/>
         <dest obj="hex_8" inlet="in"/>
      </net>
      <net>
         <source obj="max_2" outlet="out"/>
         <dest obj="max_2" inlet="in2"/>
         <dest obj="hex_7" inlet="in"/>
         <dest obj="&lt;&lt;_1" inlet="a"/>
      </net>
      <net>
         <source obj="&lt;&lt;_1" outlet="result"/>
         <dest obj="dial_4" inlet="in"/>
      </net>
      <net>
         <source obj="inv_1" outlet="o"/>
         <dest obj="object_2" inlet="start"/>
      </net>
      <net>
         <source obj="object_1" outlet="record"/>
         <dest obj="inv_1" inlet="i"/>
      </net>
      <net>
         <source obj="object_2" outlet="trig"/>
         <dest obj="play_1" inlet="start"/>
      </net>
      <net>
         <source obj="object_2" outlet="nslice"/>
         <dest obj="play_1" inlet="nslice"/>
      </net>
      <net>
         <source obj="change_1" outlet="trig"/>
         <dest obj="play_2" inlet="start"/>
      </net>
      <net>
         <source obj="i_3" outlet="out"/>
         <dest obj="play_2" inlet="nslice"/>
         <dest obj="change_1" inlet="in"/>
      </net>
      <net>
         <source obj="play_1" outlet="wave"/>
         <dest obj="mix_1" inlet="in2"/>
      </net>
      <net>
         <source obj="play_2" outlet="wave"/>
         <dest obj="mix_1" inlet="in1"/>
      </net>
      <net>
         <source obj="mix_1" outlet="out"/>
         <dest obj="out_1" inlet="right"/>
         <dest obj="out_1" inlet="left"/>
      </net>
      <net>
         <source obj="button_1" outlet="o"/>
         <dest obj="object_1" inlet="evt"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>49</x>
      <y>24</y>
      <width>1317</width>
      <height>744</height>
   </windowPos>
</patch-1.0>