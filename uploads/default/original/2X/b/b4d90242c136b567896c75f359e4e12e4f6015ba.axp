<patch-1.0 appVersion="1.0.12">
   <obj type="lfo/square" uuid="de6909eb64db13af5b43f979a4c130024b3a4793" name="square_1" x="294" y="0">
      <params>
         <frac32.s.map name="pitch" value="4.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="sss/logic/ABchance" uuid="cc33a53f-8a7d-4833-9b38-7bff3e3f0cdb" name="ABchance_1" x="672" y="0">
      <params>
         <frac32.u.map name="Bchance" value="15.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="sss/logic/ABchance" uuid="cc33a53f-8a7d-4833-9b38-7bff3e3f0cdb" name="ABchance_2" x="784" y="0">
      <params>
         <frac32.u.map name="Bchance" value="17.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="sss/logic/ABchance" uuid="cc33a53f-8a7d-4833-9b38-7bff3e3f0cdb" name="ABchance_3" x="896" y="0">
      <params>
         <frac32.u.map name="Bchance" value="10.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="sss/logic/ABchance" uuid="cc33a53f-8a7d-4833-9b38-7bff3e3f0cdb" name="ABchance_4" x="1008" y="0">
      <params>
         <frac32.u.map name="Bchance" value="21.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="sss/logic/ABchance" uuid="cc33a53f-8a7d-4833-9b38-7bff3e3f0cdb" name="ABchance_5" x="1120" y="0">
      <params>
         <frac32.u.map name="Bchance" value="10.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="sss/logic/ABchance" uuid="cc33a53f-8a7d-4833-9b38-7bff3e3f0cdb" name="ABchance_7" x="1274" y="0">
      <params>
         <frac32.u.map name="Bchance" value="9.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="sss/logic/ABchance" uuid="cc33a53f-8a7d-4833-9b38-7bff3e3f0cdb" name="ABchance_8" x="1386" y="0">
      <params>
         <frac32.u.map name="Bchance" value="15.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="sss/logic/ABchance" uuid="cc33a53f-8a7d-4833-9b38-7bff3e3f0cdb" name="ABchance_9" x="1498" y="0">
      <params>
         <frac32.u.map name="Bchance" value="10.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="sss/logic/ABchance" uuid="cc33a53f-8a7d-4833-9b38-7bff3e3f0cdb" name="ABchance_10" x="1610" y="0">
      <params>
         <frac32.u.map name="Bchance" value="10.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="sss/logic/ABchance" uuid="cc33a53f-8a7d-4833-9b38-7bff3e3f0cdb" name="ABchance_6" x="490" y="14">
      <params>
         <frac32.u.map name="Bchance" value="20.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="logic/flipflop toggle" uuid="195e489e5fc3d275944b0de56c7a91c8641ea22a" name="flipflop_1" x="672" y="98">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/flipflop toggle" uuid="195e489e5fc3d275944b0de56c7a91c8641ea22a" name="flipflop_2" x="784" y="98">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/flipflop toggle" uuid="195e489e5fc3d275944b0de56c7a91c8641ea22a" name="flipflop_3" x="896" y="98">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/flipflop toggle" uuid="195e489e5fc3d275944b0de56c7a91c8641ea22a" name="flipflop_4" x="1008" y="98">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/flipflop toggle" uuid="195e489e5fc3d275944b0de56c7a91c8641ea22a" name="flipflop_5" x="1120" y="98">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/flipflop toggle" uuid="195e489e5fc3d275944b0de56c7a91c8641ea22a" name="flipflop_6" x="1274" y="98">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/flipflop toggle" uuid="195e489e5fc3d275944b0de56c7a91c8641ea22a" name="flipflop_7" x="1386" y="98">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/flipflop toggle" uuid="195e489e5fc3d275944b0de56c7a91c8641ea22a" name="flipflop_8" x="1498" y="98">
      <params/>
      <attribs/>
   </obj>
   <obj type="logic/flipflop toggle" uuid="195e489e5fc3d275944b0de56c7a91c8641ea22a" name="flipflop_9" x="1610" y="98">
      <params/>
      <attribs/>
   </obj>
   <obj type="sss/logic/countExt" uuid="44ed9668-63af-48f8-a018-99db931c5e37" name="countExt_2" x="238" y="126">
      <params>
         <int32 name="max" value="16"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="b94a9b8e9adcb7d18868c0ee808a9b211b65578d" name="+_1" x="784" y="168">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="b94a9b8e9adcb7d18868c0ee808a9b211b65578d" name="+_2" x="896" y="168">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="b94a9b8e9adcb7d18868c0ee808a9b211b65578d" name="+_3" x="1008" y="168">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="b94a9b8e9adcb7d18868c0ee808a9b211b65578d" name="+_4" x="1120" y="168">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/i" uuid="5e35fd0c62d81e70017289250cf28edd26e19e4a" name="voices" x="1190" y="168">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="b94a9b8e9adcb7d18868c0ee808a9b211b65578d" name="+_5" x="1386" y="168">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="b94a9b8e9adcb7d18868c0ee808a9b211b65578d" name="+_6" x="1498" y="168">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+" uuid="b94a9b8e9adcb7d18868c0ee808a9b211b65578d" name="+_7" x="1610" y="168">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/i" uuid="5e35fd0c62d81e70017289250cf28edd26e19e4a" name="voices_" x="1680" y="168">
      <params/>
      <attribs/>
   </obj>
   <obj type="sss/logic/countExt" uuid="44ed9668-63af-48f8-a018-99db931c5e37" name="countExt_1" x="154" y="210">
      <params>
         <int32 name="max" value="16"/>
      </params>
      <attribs/>
   </obj>
   <obj type="sss/patt/rndPattF16" uuid="96a0c4fd-2482-44de-98f4-157dcccfd35f" name="rndPattF16_1" x="280" y="210">
      <params>
         <frac32.u.map name="repeat" value="64.0"/>
         <frac32.u.map name="chance" value="9.0"/>
         <frac32.u.map name="change" value="46.0"/>
         <frac32.u.map name="nonMemChance" value="3.5"/>
         <frac32.u.map name="nonMemChange" value="52.0"/>
         <frac32.u.map name="freeze" value="0.0"/>
         <frac32.u.map name="maxFreeze" value="0.0"/>
         <frac32.u.map name="difference" value="0.0"/>
         <frac32.u.map name="errorChance" value="3.0"/>
         <frac32.u.map name="errorSize" value="3.5"/>
         <frac32.u.map name="glidechance" value="0.0"/>
         <frac32.u.map name="gliderate" value="0.0"/>
      </params>
      <attribs>
         <combo attributeName="maxlength" selection="16"/>
         <combo attributeName="start" selection="rnd"/>
      </attribs>
   </obj>
   <obj type="sss/math/8xScaling" uuid="670fd501-ccc9-449f-8fdf-2d19c198675a" name="8xScaling_1" x="406" y="210">
      <params>
         <int32 name="Max1" value="12"/>
         <int32 name="Min1" value="-36"/>
         <int32 name="Max2" value="12"/>
         <int32 name="Min2" value="-36"/>
         <int32 name="Max3" value="12"/>
         <int32 name="Min3" value="-36"/>
         <int32 name="Max4" value="12"/>
         <int32 name="Min4" value="-36"/>
         <int32 name="Max5" value="12"/>
         <int32 name="Min5" value="-36"/>
         <int32 name="Max6" value="-17"/>
         <int32 name="Min6" value="-40"/>
         <int32 name="Max7" value="-21"/>
         <int32 name="Min7" value="-39"/>
         <int32 name="Max8" value="-17"/>
         <int32 name="Min8" value="-39"/>
      </params>
      <attribs/>
   </obj>
   <obj type="sss/math/8xScaling" uuid="670fd501-ccc9-449f-8fdf-2d19c198675a" name="8xScaling_2" x="518" y="210">
      <params>
         <int32 name="Max1" value="64"/>
         <int32 name="Min1" value="19"/>
         <int32 name="Max2" value="64"/>
         <int32 name="Min2" value="20"/>
         <int32 name="Max3" value="64"/>
         <int32 name="Min3" value="21"/>
         <int32 name="Max4" value="64"/>
         <int32 name="Min4" value="20"/>
         <int32 name="Max5" value="64"/>
         <int32 name="Min5" value="21"/>
         <int32 name="Max6" value="64"/>
         <int32 name="Min6" value="16"/>
         <int32 name="Max7" value="64"/>
         <int32 name="Min7" value="28"/>
         <int32 name="Max8" value="64"/>
         <int32 name="Min8" value="32"/>
      </params>
      <attribs/>
   </obj>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="bool_1" x="714" y="224">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="bool_2" x="826" y="224">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="bool_3" x="938" y="224">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="bool_4" x="1050" y="224">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="bool_5" x="1162" y="224">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="bool_6" x="1316" y="224">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="bool_7" x="1428" y="224">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="bool_8" x="1540" y="224">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/bool" uuid="a0ee71d48208b71752cbb8c05e55145106ef3946" name="bool_9" x="1652" y="224">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="994" y="364" text="let&apos;s generate some random midi notes"/>
   <obj type="sss/harmony/major" uuid="871a0d5a-fa97-4662-86e4-51d6b85c6f04" name="major_1" x="742" y="434">
      <params/>
      <attribs/>
   </obj>
   <obj type="sss/harmony/major" uuid="871a0d5a-fa97-4662-86e4-51d6b85c6f04" name="major_2" x="854" y="434">
      <params/>
      <attribs/>
   </obj>
   <obj type="sss/harmony/major" uuid="871a0d5a-fa97-4662-86e4-51d6b85c6f04" name="major_3" x="966" y="434">
      <params/>
      <attribs/>
   </obj>
   <obj type="sss/harmony/major" uuid="871a0d5a-fa97-4662-86e4-51d6b85c6f04" name="major_4" x="1078" y="434">
      <params/>
      <attribs/>
   </obj>
   <obj type="sss/harmony/major" uuid="871a0d5a-fa97-4662-86e4-51d6b85c6f04" name="major_5" x="1190" y="434">
      <params/>
      <attribs/>
   </obj>
   <obj type="sss/harmony/major" uuid="871a0d5a-fa97-4662-86e4-51d6b85c6f04" name="major_6" x="1344" y="434">
      <params/>
      <attribs/>
   </obj>
   <obj type="sss/harmony/major" uuid="871a0d5a-fa97-4662-86e4-51d6b85c6f04" name="major_7" x="1456" y="434">
      <params/>
      <attribs/>
   </obj>
   <obj type="sss/harmony/major" uuid="871a0d5a-fa97-4662-86e4-51d6b85c6f04" name="major_8" x="1568" y="434">
      <params/>
      <attribs/>
   </obj>
   <obj type="sss/harmony/major" uuid="871a0d5a-fa97-4662-86e4-51d6b85c6f04" name="major_9" x="1680" y="434">
      <params/>
      <attribs/>
   </obj>
   <obj type="midi/intern/note" uuid="8181e221d6ee6b2c63e7dbdbf20f69de43c232bf" name="note_1" x="742" y="504">
      <params/>
      <attribs>
         <spinner attributeName="channel" value="3"/>
      </attribs>
   </obj>
   <obj type="midi/intern/note" uuid="8181e221d6ee6b2c63e7dbdbf20f69de43c232bf" name="note_2" x="854" y="504">
      <params/>
      <attribs>
         <spinner attributeName="channel" value="3"/>
      </attribs>
   </obj>
   <obj type="midi/intern/note" uuid="8181e221d6ee6b2c63e7dbdbf20f69de43c232bf" name="note_4" x="966" y="504">
      <params/>
      <attribs>
         <spinner attributeName="channel" value="3"/>
      </attribs>
   </obj>
   <obj type="midi/intern/note" uuid="8181e221d6ee6b2c63e7dbdbf20f69de43c232bf" name="note_5" x="1078" y="504">
      <params/>
      <attribs>
         <spinner attributeName="channel" value="3"/>
      </attribs>
   </obj>
   <obj type="midi/intern/note" uuid="8181e221d6ee6b2c63e7dbdbf20f69de43c232bf" name="note_6" x="1190" y="504">
      <params/>
      <attribs>
         <spinner attributeName="channel" value="3"/>
      </attribs>
   </obj>
   <obj type="midi/intern/note" uuid="8181e221d6ee6b2c63e7dbdbf20f69de43c232bf" name="note_3" x="1344" y="504">
      <params/>
      <attribs>
         <spinner attributeName="channel" value="4"/>
      </attribs>
   </obj>
   <obj type="midi/intern/note" uuid="8181e221d6ee6b2c63e7dbdbf20f69de43c232bf" name="note_7" x="1456" y="504">
      <params/>
      <attribs>
         <spinner attributeName="channel" value="4"/>
      </attribs>
   </obj>
   <obj type="midi/intern/note" uuid="8181e221d6ee6b2c63e7dbdbf20f69de43c232bf" name="note_8" x="1568" y="504">
      <params/>
      <attribs>
         <spinner attributeName="channel" value="4"/>
      </attribs>
   </obj>
   <obj type="midi/intern/note" uuid="8181e221d6ee6b2c63e7dbdbf20f69de43c232bf" name="note_9" x="1680" y="504">
      <params/>
      <attribs>
         <spinner attributeName="channel" value="4"/>
      </attribs>
   </obj>
   <obj type="logic/latch" uuid="14750683752bd43205826430adb7168dae3cc2c" name="latch_1" x="476" y="784">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="7bf525d5-e4ad-4602-8b74-1e8ac2d1e076" name="mono note priority_1" x="546" y="784">
      <params>
         <int32.hradio name="priority" value="0"/>
      </params>
      <attribs>
         <combo attributeName="midichannel_in" selection="3"/>
         <combo attributeName="device_out" selection="internal port 1"/>
         <combo attributeName="midichannel_out" selection="2"/>
      </attribs>
      <object id="patch/object" uuid="7bf525d5-e4ad-4602-8b74-1e8ac2d1e076">
         <sDescription>Module that controls the voice allocation for mono functionality
This module goes into the main patch, receives your polyphonic midi data and saves/removes them to/from the table at notes on/off respectively.
Then sends the right midi off&amp;on messages to close the currently playing voice and start a new voice that is still held over midi (but not playing yet/anymore).

The receiving midi modules can either be in the main patch or in a patcher container when selecting internal midi. BUT! 
Be careful not to send your midi to the same channel the module is receiving it&apos;s data! This creates a midi loop that crashes the axoloti!
When sending out over external midi device, host or usb, you can select any output channel.

4 priority modes:
-0: last/newest note priority: always play last played note, but if this one goes off, it takes the next last note that is still being held.
-1: lowest note priority: always play the lowest note that is currently played. When this note goes off, it takes the next lowest note.
-2: highest note priority: always play the highest note that is currently played. When this note goes off, it takes the next highest note.
-3: loudest note priority: always play the note with the highest velocity that is currently played. When this note goes off, it takes the next highest velocity. Follow the loudest screamers!</sDescription>
         <author>Remco van der Most</author>
         <license>BSD</license>
         <helpPatch>midi_in.axh</helpPatch>
         <inlets>
            <int32 name="priority" description="0=last,1=lowest,2=highest,3=loudest. Note priority updates only when notes on/off are generated."/>
         </inlets>
         <outlets/>
         <displays/>
         <params>
            <int32.hradio name="priority" description="last,lowest,highest,loudest">
               <MaxValue i="4"/>
            </int32.hradio>
         </params>
         <attribs>
            <combo name="midichannel_in">
               <MenuEntries>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>4</string>
                  <string>5</string>
                  <string>6</string>
                  <string>7</string>
                  <string>8</string>
                  <string>9</string>
                  <string>10</string>
                  <string>11</string>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
                  <string>16</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>4</string>
                  <string>5</string>
                  <string>6</string>
                  <string>7</string>
                  <string>8</string>
                  <string>9</string>
                  <string>10</string>
                  <string>11</string>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
               </CEntries>
            </combo>
            <combo name="device_out">
               <MenuEntries>
                  <string>din</string>
                  <string>usb host port 1</string>
                  <string>usb host port 2</string>
                  <string>usb host port 3</string>
                  <string>usb host port 4</string>
                  <string>internal port 1</string>
                  <string>internal port 2</string>
                  <string>usb device port 1</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_DIN, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 2</string>
                  <string>MIDI_DEVICE_USB_HOST, 3</string>
                  <string>MIDI_DEVICE_USB_HOST, 4</string>
                  <string>MIDI_DEVICE_INTERNAL, 1</string>
                  <string>MIDI_DEVICE_INTERNAL, 2</string>
                  <string>MIDI_DEVICE_USB_DEVICE, 1</string>
               </CEntries>
            </combo>
            <combo name="midichannel_out">
               <MenuEntries>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>4</string>
                  <string>5</string>
                  <string>6</string>
                  <string>7</string>
                  <string>8</string>
                  <string>9</string>
                  <string>10</string>
                  <string>11</string>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
                  <string>16</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>4</string>
                  <string>5</string>
                  <string>6</string>
                  <string>7</string>
                  <string>8</string>
                  <string>9</string>
                  <string>10</string>
                  <string>11</string>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int8_t note[16];
int8_t vel[16];
int8_t cnote;
int8_t cvel;
int8_t cpos;
int8_t total;
int priority;]]></code.declaration>
         <code.init><![CDATA[for(int i=0;i<16;i++)
{
	note[i]=-1;
	vel[i]=-1;
}
cnote=-1;
cvel=-1;
cpos=-1;
total=0;]]></code.init>
         <code.krate><![CDATA[priority=(param_priority+inlet_priority)&3;;]]></code.krate>
         <code.midihandler><![CDATA[if ((status == MIDI_NOTE_ON + attr_midichannel__in) && (data2))
{
	int pos=0;
	while(vel[pos]>0)//check for unused voice (up to 16 voices in memory)
	{
		pos+=1;
		if(pos==16)//if table is full
		{
			for(int i=0;i<15;i++)//remove oldest note in the table and shift other notes 1 down
			{
				note[i]=note[i+1];
				vel[i]=vel[i+1];
			}
			note[15]=data1;//add the new note at the end of the list
			vel[15]=data2;
			;break;
		}
		
	}
	if(pos<16)
	{
		note[pos]=data1;
		vel[pos]=data2;
		total+=1;
		total=total>16?16:total;
	}
	pos=__USAT(pos,4);
	switch(priority)//select priority mode
	{
		case 0://last note priority
		if((!(cnote==data1)))
		{
			if(!(cnote==-1))
			{
			PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_OFF + attr_midichannel__out,cnote,cvel);
			}
			cnote=data1;
			cvel=data2;
			cpos=pos;
			PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_ON + attr_midichannel__out,data1,data2);
			
		}
		;break;
		case 1:
					if((data1<cnote)||(cnote==-1))
					{
						if(cnote>(-1))
						{
							PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_OFF + attr_midichannel__out,cnote,cvel);
						}
						cnote=data1;
						cvel=data2;
						cpos=pos;
						PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_ON + attr_midichannel__out,data1,data2);
					}
		;break;
		case 2:
					if(data1>cnote)
					{
						if(cnote>(-1))
						{
							PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_OFF + attr_midichannel__out,cnote,cvel);
						}
						cnote=data1;
						cvel=data2;
						cpos=pos;
						PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_ON + attr_midichannel__out,data1,data2);
					}
		;break;
		case 3:
					if(data2>cvel)
					{
						if(cnote>(-1))
						{
							PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_OFF + attr_midichannel__out,cnote,cvel);
						}
						cnote=data1;
						cvel=data2;
						cpos=pos;
						PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_ON + attr_midichannel__out,data1,data2);
					}
		;break;
	}
	
}
else if
(((status == MIDI_NOTE_ON + attr_midichannel__in) && (!data2))||(status == MIDI_NOTE_OFF + attr_midichannel__in))
{
	int rem=0;
	for(int i=0;i<16;i++)
	{
		if(note[i]==data1)
		{
			rem=1;
			for(int j=i;j<15;j++)
			{
				note[j]=note[j+1];
				vel[j]=vel[j+1];
			}
			note[15]=-1;
			vel[15]=-1;
			;break;
		}
	}
	
		switch(priority)
		{
			case 0:
					if(data1==cnote)
					{
						PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_OFF + attr_midichannel__out,data1,data2);
						cpos=__USAT(total-1,8);
						if(cpos>0)
						{
							cpos-=1;
							cnote=note[cpos];
							cvel=vel[cpos];
							total-=1;
							PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_ON + attr_midichannel__out,cnote,cvel);
						}
						else if(cpos==0)
						{
							total=0;
							cpos=-1;
							cnote=-1;
							cvel=-1;
						}
					}
					else if(rem)
					{
						cpos-=1;
						total-=1;
					}
			;break;
			case 1:
					if(data1==cnote)
					{
						PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_OFF + attr_midichannel__out,data1,data2);
						total-=1;
					
					if(total>0)
					{
					int min=128;
					int ps=0;
					for(int i=0;i<16;i++)
					{
						if((note[i]<min)&&(note[i]>=0))
						{
							min=note[i];
							ps=i;
						}
					}
					cpos=ps;
					cnote=note[cpos];
					cvel=vel[cpos];
					PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_ON + attr_midichannel__out,cnote,cvel);
					}
					else
					{
						cnote=-1;
						cvel=-1;
						cpos=-1;
					}
					}
					else if(rem)
					{
						total-=1;
					}
			;break;
			case 2:
					if(data1==cnote)
					{
						PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_OFF + attr_midichannel__out,data1,data2);
						total-=1;
					
					if(total>0)
					{
					int max=-1;
					int ps=0;
					for(int i=0;i<16;i++)
					{
						if((note[i]>max)&&(note[i]>=0))
						{
							max=note[i];
							ps=i;
						}
					}
					cpos=ps;
					cnote=note[cpos];
					cvel=vel[cpos];
					PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_ON + attr_midichannel__out,cnote,cvel);
					}
					else
					{
						cnote=-1;
						cvel=-1;
						cpos=-1;
					}
					}
					else if(rem)
					{
						total-=1;
					}
			;break;
			case 3:
					if(data1==cnote)
					{
						PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_OFF + attr_midichannel__out,data1,data2);
						total-=1;
					
					if(total>0)
					{
					int max=-1;
					int ps=0;
					for(int i=0;i<16;i++)
					{
						if((vel[i]>max)&&(vel[i]>=0))
						{
							max=vel[i];
							ps=i;
						}
					}
					cpos=ps;
					cnote=note[cpos];
					cvel=vel[cpos];
					PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_ON + attr_midichannel__out,cnote,cvel);
					}
					else
					{
						cnote=-1;
						cvel=-1;
						cpos=-1;
					}
					}
					else if(rem)
					{
						total-=1;
					}
			;break;
			
		}
	
	
}
else if((status == attr_midichannel__in + MIDI_CONTROL_CHANGE)&&(data1 == MIDI_C_ALL_NOTES_OFF))
{
	PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_CONTROL_CHANGE + (attr_midichannel__out),MIDI_C_ALL_NOTES_OFF,0);
  	for(int i=0;i<16;i++)
  	{
  		vel[i]=0;
  	}
}]]></code.midihandler>
      </object>
   </patchobj>
   <patcher type="patch/patcher" uuid="80074c45-8b38-4c0d-87fe-4cb56311800e" name="patcher_1" x="686" y="784">
      <params>
         <frac32.u.map name="detune" value="0.5"/>
         <frac32.s.map name="sine_1" value="0.0"/>
         <frac32.s.map name="adsr_1:a" value="-64.0"/>
         <frac32.s.map name="adsr_1:d" value="11.0"/>
         <frac32.u.map name="adsr_1:s" value="36.0"/>
         <frac32.s.map name="adsr_1:r" value="33.0"/>
         <frac32.u.map name="*c_1" value="31.5"/>
      </params>
      <attribs>
         <combo attributeName="poly" selection="6"/>
         <combo attributeName="midichannel" selection="2"/>
         <combo attributeName="mididevice" selection="omni"/>
         <combo attributeName="midiport" selection="omni"/>
      </attribs>
      <subpatch appVersion="1.0.12">
         <obj type="midi/in/keyb" uuid="53b04874696932f38aceaa168bd5d9efb743716d" name="keyb_1" x="14" y="56">
            <params/>
            <attribs/>
         </obj>
         <obj type="rand/uniform f trig" uuid="223873125a332e3b8a82795a3eef167993adb086" name="uniform_1" x="112" y="84">
            <params/>
            <attribs/>
         </obj>
         <obj type="mix/mix 1 sq" uuid="868f78de01eb3fd44200549837330c2eeef8e002" name="detune" x="224" y="84">
            <params>
               <frac32.u.map name="gain1" onParent="true" value="0.5"/>
            </params>
            <attribs/>
         </obj>
         <obj type="osc/sine" uuid="6e094045cca76a9dbf7ebfa72e44e4700d2b3ba" name="sine_1" x="322" y="84">
            <params>
               <frac32.s.map name="pitch" onParent="true" value="0.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="env/adsr" uuid="d1dbcc5fa6f87b98a6a91c87fd44acee5e690bac" name="adsr_1" x="224" y="210">
            <params>
               <frac32.s.map name="a" onParent="true" value="-64.0"/>
               <frac32.s.map name="d" onParent="true" value="-1.0"/>
               <frac32.u.map name="s" onParent="true" value="34.5"/>
               <frac32.s.map name="r" onParent="true" value="28.0"/>
            </params>
            <attribs/>
         </obj>
         <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_1" x="322" y="210">
            <params/>
            <attribs/>
         </obj>
         <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_1" x="406" y="210">
            <params/>
            <attribs/>
         </obj>
         <obj type="math/*c" uuid="7a66f52a9594e7e9eb31328ea725cb3641a80b55" name="*c_1" x="518" y="266">
            <params>
               <frac32.u.map name="amp" onParent="true" value="46.5"/>
            </params>
            <attribs/>
         </obj>
         <obj type="patch/outlet a" uuid="abd8c5fd3b0524a6630f65cad6dc27f6c58e2a3e" name="outlet_1" x="616" y="266">
            <params/>
            <attribs/>
         </obj>
         <nets>
            <net>
               <source obj="keyb_1" outlet="note"/>
               <dest obj="detune" inlet="bus_in"/>
            </net>
            <net>
               <source obj="sine_1" outlet="wave"/>
               <dest obj="vca_1" inlet="a"/>
            </net>
            <net>
               <source obj="adsr_1" outlet="env"/>
               <dest obj="*_1" inlet="a"/>
            </net>
            <net>
               <source obj="vca_1" outlet="o"/>
               <dest obj="*c_1" inlet="in"/>
            </net>
            <net>
               <source obj="keyb_1" outlet="velocity"/>
               <dest obj="*_1" inlet="b"/>
            </net>
            <net>
               <source obj="*_1" outlet="result"/>
               <dest obj="vca_1" inlet="v"/>
            </net>
            <net>
               <source obj="*c_1" outlet="out"/>
               <dest obj="outlet_1" inlet="outlet"/>
            </net>
            <net>
               <source obj="keyb_1" outlet="gate2"/>
               <dest obj="adsr_1" inlet="gate"/>
               <dest obj="uniform_1" inlet="trig"/>
            </net>
            <net>
               <source obj="detune" outlet="out"/>
               <dest obj="sine_1" inlet="pitch"/>
            </net>
            <net>
               <source obj="uniform_1" outlet="rand"/>
               <dest obj="detune" inlet="in1"/>
            </net>
         </nets>
         <settings>
            <subpatchmode>polyphonic</subpatchmode>
            <MidiChannel>2</MidiChannel>
            <HasMidiChannelSelector>true</HasMidiChannelSelector>
            <NPresets>8</NPresets>
            <NPresetEntries>32</NPresetEntries>
            <NModulationSources>8</NModulationSources>
            <NModulationTargetsPerSource>8</NModulationTargetsPerSource>
            <Author></Author>
         </settings>
         <notes><![CDATA[]]></notes>
         <windowPos>
            <x>0</x>
            <y>0</y>
            <width>747</width>
            <height>576</height>
         </windowPos>
      </subpatch>
   </patcher>
   <obj type="logic/latch" uuid="14750683752bd43205826430adb7168dae3cc2c" name="latch_2" x="840" y="784">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="7bf525d5-e4ad-4602-8b74-1e8ac2d1e076" name="mono note priority_2" x="938" y="784">
      <params>
         <int32.hradio name="priority" value="3"/>
      </params>
      <attribs>
         <combo attributeName="midichannel_in" selection="4"/>
         <combo attributeName="device_out" selection="internal port 1"/>
         <combo attributeName="midichannel_out" selection="1"/>
      </attribs>
      <object id="patch/object" uuid="7bf525d5-e4ad-4602-8b74-1e8ac2d1e076">
         <sDescription>Module that controls the voice allocation for mono functionality
This module goes into the main patch and sends</sDescription>
         <author>Remco van der Most</author>
         <license>BSD</license>
         <helpPatch>midi_in.axh</helpPatch>
         <inlets>
            <int32 name="priority" description="0=last,1=lowest,2=highest,3=loudest. Note priority updates only when notes on/off are generated."/>
         </inlets>
         <outlets/>
         <displays/>
         <params>
            <int32.hradio name="priority" description="last,lowest,highest,loudest">
               <MaxValue i="4"/>
            </int32.hradio>
         </params>
         <attribs>
            <combo name="midichannel_in">
               <MenuEntries>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>4</string>
                  <string>5</string>
                  <string>6</string>
                  <string>7</string>
                  <string>8</string>
                  <string>9</string>
                  <string>10</string>
                  <string>11</string>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
                  <string>16</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>4</string>
                  <string>5</string>
                  <string>6</string>
                  <string>7</string>
                  <string>8</string>
                  <string>9</string>
                  <string>10</string>
                  <string>11</string>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
               </CEntries>
            </combo>
            <combo name="device_out">
               <MenuEntries>
                  <string>din</string>
                  <string>usb host port 1</string>
                  <string>usb host port 2</string>
                  <string>usb host port 3</string>
                  <string>usb host port 4</string>
                  <string>internal port 1</string>
                  <string>internal port 2</string>
                  <string>usb device port 1</string>
               </MenuEntries>
               <CEntries>
                  <string>MIDI_DEVICE_DIN, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 1</string>
                  <string>MIDI_DEVICE_USB_HOST, 2</string>
                  <string>MIDI_DEVICE_USB_HOST, 3</string>
                  <string>MIDI_DEVICE_USB_HOST, 4</string>
                  <string>MIDI_DEVICE_INTERNAL, 1</string>
                  <string>MIDI_DEVICE_INTERNAL, 2</string>
                  <string>MIDI_DEVICE_USB_DEVICE, 1</string>
               </CEntries>
            </combo>
            <combo name="midichannel_out">
               <MenuEntries>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>4</string>
                  <string>5</string>
                  <string>6</string>
                  <string>7</string>
                  <string>8</string>
                  <string>9</string>
                  <string>10</string>
                  <string>11</string>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
                  <string>16</string>
               </MenuEntries>
               <CEntries>
                  <string>0</string>
                  <string>1</string>
                  <string>2</string>
                  <string>3</string>
                  <string>4</string>
                  <string>5</string>
                  <string>6</string>
                  <string>7</string>
                  <string>8</string>
                  <string>9</string>
                  <string>10</string>
                  <string>11</string>
                  <string>12</string>
                  <string>13</string>
                  <string>14</string>
                  <string>15</string>
               </CEntries>
            </combo>
         </attribs>
         <includes/>
         <code.declaration><![CDATA[int8_t note[16];
int8_t vel[16];
int8_t cnote;
int8_t cvel;
int8_t cpos;
int8_t total;
int priority;]]></code.declaration>
         <code.init><![CDATA[for(int i=0;i<16;i++)
{
	note[i]=-1;
	vel[i]=-1;
}
cnote=-1;
cvel=-1;
cpos=-1;
total=0;]]></code.init>
         <code.krate><![CDATA[priority=(param_priority+inlet_priority)&3;;]]></code.krate>
         <code.midihandler><![CDATA[if ((status == MIDI_NOTE_ON + attr_midichannel__in) && (data2))
{
	int pos=0;
	while(vel[pos]>0)//check for unused voice (up to 16 voices in memory)
	{
		pos+=1;
		if(pos==16)//if table is full
		{
			for(int i=0;i<15;i++)//remove oldest note in the table and shift other notes 1 down
			{
				note[i]=note[i+1];
				vel[i]=vel[i+1];
			}
			note[15]=data1;//add the new note at the end of the list
			vel[15]=data2;
			;break;
		}
		
	}
	if(pos<16)
	{
		note[pos]=data1;
		vel[pos]=data2;
		total+=1;
		total=total>16?16:total;
	}
	pos=__USAT(pos,4);
	switch(priority)//select priority mode
	{
		case 0://last note priority
		if((!(cnote==data1)))
		{
			if(!(cnote==-1))
			{
			PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_OFF + attr_midichannel__out,cnote,cvel);
			}
			cnote=data1;
			cvel=data2;
			cpos=pos;
			PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_ON + attr_midichannel__out,data1,data2);
			
		}
		;break;
		case 1:
					if((data1<cnote)||(cnote==-1))
					{
						if(cnote>(-1))
						{
							PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_OFF + attr_midichannel__out,cnote,cvel);
						}
						cnote=data1;
						cvel=data2;
						cpos=pos;
						PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_ON + attr_midichannel__out,data1,data2);
					}
		;break;
		case 2:
					if(data1>cnote)
					{
						if(cnote>(-1))
						{
							PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_OFF + attr_midichannel__out,cnote,cvel);
						}
						cnote=data1;
						cvel=data2;
						cpos=pos;
						PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_ON + attr_midichannel__out,data1,data2);
					}
		;break;
		case 3:
					if(data2>cvel)
					{
						if(cnote>(-1))
						{
							PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_OFF + attr_midichannel__out,cnote,cvel);
						}
						cnote=data1;
						cvel=data2;
						cpos=pos;
						PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_ON + attr_midichannel__out,data1,data2);
					}
		;break;
	}
	
}
else if
(((status == MIDI_NOTE_ON + attr_midichannel__in) && (!data2))||(status == MIDI_NOTE_OFF + attr_midichannel__in))
{
	int rem=0;
	for(int i=0;i<16;i++)
	{
		if(note[i]==data1)
		{
			rem=1;
			for(int j=i;j<15;j++)
			{
				note[j]=note[j+1];
				vel[j]=vel[j+1];
			}
			note[15]=-1;
			vel[15]=-1;
			;break;
		}
	}
	
		switch(priority)
		{
			case 0:
					if(data1==cnote)
					{
						PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_OFF + attr_midichannel__out,data1,data2);
						cpos=__USAT(total-1,8);
						if(cpos>0)
						{
							cpos-=1;
							cnote=note[cpos];
							cvel=vel[cpos];
							total-=1;
							PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_ON + attr_midichannel__out,cnote,cvel);
						}
						else if(cpos==0)
						{
							total=0;
							cpos=-1;
							cnote=-1;
							cvel=-1;
						}
					}
					else if(rem)
					{
						cpos-=1;
						total-=1;
					}
			;break;
			case 1:
					if(data1==cnote)
					{
						PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_OFF + attr_midichannel__out,data1,data2);
						total-=1;
					
					if(total>0)
					{
					int min=128;
					int ps=0;
					for(int i=0;i<16;i++)
					{
						if((note[i]<min)&&(note[i]>=0))
						{
							min=note[i];
							ps=i;
						}
					}
					cpos=ps;
					cnote=note[cpos];
					cvel=vel[cpos];
					PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_ON + attr_midichannel__out,cnote,cvel);
					}
					else
					{
						cnote=-1;
						cvel=-1;
						cpos=-1;
					}
					}
					else if(rem)
					{
						total-=1;
					}
			;break;
			case 2:
					if(data1==cnote)
					{
						PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_OFF + attr_midichannel__out,data1,data2);
						total-=1;
					
					if(total>0)
					{
					int max=-1;
					int ps=0;
					for(int i=0;i<16;i++)
					{
						if((note[i]>max)&&(note[i]>=0))
						{
							max=note[i];
							ps=i;
						}
					}
					cpos=ps;
					cnote=note[cpos];
					cvel=vel[cpos];
					PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_ON + attr_midichannel__out,cnote,cvel);
					}
					else
					{
						cnote=-1;
						cvel=-1;
						cpos=-1;
					}
					}
					else if(rem)
					{
						total-=1;
					}
			;break;
			case 3:
					if(data1==cnote)
					{
						PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_OFF + attr_midichannel__out,data1,data2);
						total-=1;
					
					if(total>0)
					{
					int max=-1;
					int ps=0;
					for(int i=0;i<16;i++)
					{
						if((vel[i]>max)&&(vel[i]>=0))
						{
							max=vel[i];
							ps=i;
						}
					}
					cpos=ps;
					cnote=note[cpos];
					cvel=vel[cpos];
					PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_NOTE_ON + attr_midichannel__out,cnote,cvel);
					}
					else
					{
						cnote=-1;
						cvel=-1;
						cpos=-1;
					}
					}
					else if(rem)
					{
						total-=1;
					}
			;break;
			
		}
	
	
}
else if((status == attr_midichannel__in + MIDI_CONTROL_CHANGE)&&(data1 == MIDI_C_ALL_NOTES_OFF))
{
	PatchMidiInHandler((midi_device_t) attr_device__out,MIDI_CONTROL_CHANGE + (attr_midichannel__out),MIDI_C_ALL_NOTES_OFF,0);
  	for(int i=0;i<16;i++)
  	{
  		vel[i]=0;
  	}
}]]></code.midihandler>
      </object>
   </patchobj>
   <obj type="midi/in/keyb" uuid="53b04874696932f38aceaa168bd5d9efb743716d" name="keyb_1" x="1092" y="784">
      <params/>
      <attribs/>
   </obj>
   <obj type="env/adsr" uuid="d1dbcc5fa6f87b98a6a91c87fd44acee5e690bac" name="adsr_1" x="1190" y="784">
      <params>
         <frac32.s.map name="a" value="-64.0"/>
         <frac32.s.map name="d" value="23.0"/>
         <frac32.u.map name="s" value="22.5"/>
         <frac32.s.map name="r" value="3.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="osc/square medium" uuid="d8675e626c34278d4df80ca15ee965d647908d2f" name="square_2" x="1288" y="784">
      <params>
         <frac32.s.map name="pitch" value="0.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/*" uuid="922423f2db9f222aa3e5ba095778288c446da47a" name="*_1" x="1414" y="784">
      <params/>
      <attribs/>
   </obj>
   <obj type="filter/vcf3" uuid="92455c652cd098cbb682a5497baa18abbf2ef865" name="vcf3_1" x="1484" y="784">
      <params>
         <frac32.s.map name="pitch" value="-24.0"/>
         <frac32.u.map name="reso" value="45.0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="gain/vca" uuid="a9f2dcd18043e2f47364e45cb8814f63c2a37c0d" name="vca_1" x="1582" y="784">
      <params/>
      <attribs/>
   </obj>
   <obj type="mix/mix 2 sq" uuid="9b03da12a01f39ecd48d16285e7d10acb8e1267c" name="mix_1" x="1638" y="784">
      <params>
         <frac32.u.map name="gain1" value="32.0"/>
         <frac32.u.map name="gain2" value="31.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="sss/audio/StOutVol" uuid="0ca9cf1e-1ce3-469c-80da-a4a885c21246" name="StOutVol_1" x="1736" y="784">
      <params>
         <frac32.u.map name="volume" value="33.0"/>
      </params>
      <attribs/>
   </obj>
   <nets>
      <net>
         <source obj="patcher_1" outlet="outlet_1"/>
         <dest obj="mix_1" inlet="in1"/>
      </net>
      <net>
         <source obj="square_1" outlet="wave"/>
         <dest obj="ABchance_1" inlet="trig"/>
         <dest obj="ABchance_2" inlet="trig"/>
         <dest obj="ABchance_3" inlet="trig"/>
         <dest obj="ABchance_4" inlet="trig"/>
         <dest obj="ABchance_5" inlet="trig"/>
         <dest obj="ABchance_6" inlet="trig"/>
         <dest obj="countExt_2" inlet="trig"/>
         <dest obj="ABchance_7" inlet="trig"/>
         <dest obj="ABchance_8" inlet="trig"/>
         <dest obj="ABchance_9" inlet="trig"/>
         <dest obj="ABchance_10" inlet="trig"/>
      </net>
      <net>
         <source obj="ABchance_1" outlet="B"/>
         <dest obj="flipflop_1" inlet="trig"/>
      </net>
      <net>
         <source obj="flipflop_1" outlet="o"/>
         <dest obj="note_1" inlet="trig"/>
         <dest obj="+_1" inlet="in1"/>
         <dest obj="bool_1" inlet="in"/>
      </net>
      <net>
         <source obj="ABchance_2" outlet="B"/>
         <dest obj="flipflop_2" inlet="trig"/>
      </net>
      <net>
         <source obj="ABchance_3" outlet="B"/>
         <dest obj="flipflop_3" inlet="trig"/>
      </net>
      <net>
         <source obj="ABchance_4" outlet="B"/>
         <dest obj="flipflop_4" inlet="trig"/>
      </net>
      <net>
         <source obj="flipflop_2" outlet="o"/>
         <dest obj="note_2" inlet="trig"/>
         <dest obj="+_1" inlet="in2"/>
         <dest obj="bool_2" inlet="in"/>
      </net>
      <net>
         <source obj="flipflop_3" outlet="o"/>
         <dest obj="note_4" inlet="trig"/>
         <dest obj="+_2" inlet="in1"/>
         <dest obj="bool_3" inlet="in"/>
      </net>
      <net>
         <source obj="flipflop_4" outlet="o"/>
         <dest obj="note_5" inlet="trig"/>
         <dest obj="+_3" inlet="in2"/>
         <dest obj="bool_4" inlet="in"/>
      </net>
      <net>
         <source obj="ABchance_5" outlet="B"/>
         <dest obj="flipflop_5" inlet="trig"/>
      </net>
      <net>
         <source obj="flipflop_5" outlet="o"/>
         <dest obj="note_6" inlet="trig"/>
         <dest obj="+_4" inlet="in1"/>
         <dest obj="bool_5" inlet="in"/>
      </net>
      <net>
         <source obj="rndPattF16_1" outlet="o6"/>
         <dest obj="8xScaling_1" inlet="in1"/>
      </net>
      <net>
         <source obj="rndPattF16_1" outlet="o7"/>
         <dest obj="8xScaling_1" inlet="in2"/>
      </net>
      <net>
         <source obj="rndPattF16_1" outlet="o8"/>
         <dest obj="8xScaling_1" inlet="in3"/>
      </net>
      <net>
         <source obj="rndPattF16_1" outlet="o9"/>
         <dest obj="8xScaling_1" inlet="in4"/>
      </net>
      <net>
         <source obj="rndPattF16_1" outlet="o10"/>
         <dest obj="8xScaling_1" inlet="in5"/>
      </net>
      <net>
         <source obj="8xScaling_1" outlet="out1"/>
         <dest obj="major_1" inlet="pitch"/>
         <dest obj="major_9" inlet="pitch"/>
      </net>
      <net>
         <source obj="8xScaling_1" outlet="out2"/>
         <dest obj="major_2" inlet="pitch"/>
      </net>
      <net>
         <source obj="8xScaling_1" outlet="out3"/>
         <dest obj="major_3" inlet="pitch"/>
      </net>
      <net>
         <source obj="8xScaling_1" outlet="out4"/>
         <dest obj="major_4" inlet="pitch"/>
      </net>
      <net>
         <source obj="rndPattF16_1" outlet="o11"/>
         <dest obj="latch_1" inlet="i"/>
         <dest obj="8xScaling_1" inlet="in7"/>
      </net>
      <net>
         <source obj="ABchance_6" outlet="B"/>
         <dest obj="latch_1" inlet="trig"/>
         <dest obj="latch_2" inlet="trig"/>
      </net>
      <net>
         <source obj="countExt_1" outlet="o"/>
         <dest obj="rndPattF16_1" inlet="count"/>
      </net>
      <net>
         <source obj="countExt_1" outlet="max"/>
         <dest obj="rndPattF16_1" inlet="max"/>
      </net>
      <net>
         <source obj="rndPattF16_1" outlet="o1"/>
         <dest obj="8xScaling_2" inlet="in1"/>
      </net>
      <net>
         <source obj="rndPattF16_1" outlet="o2"/>
         <dest obj="8xScaling_2" inlet="in2"/>
      </net>
      <net>
         <source obj="rndPattF16_1" outlet="o4"/>
         <dest obj="8xScaling_2" inlet="in4"/>
      </net>
      <net>
         <source obj="rndPattF16_1" outlet="o5"/>
         <dest obj="8xScaling_2" inlet="in5"/>
      </net>
      <net>
         <source obj="countExt_2" outlet="c"/>
         <dest obj="countExt_1" inlet="trig"/>
      </net>
      <net>
         <source obj="major_1" outlet="note"/>
         <dest obj="note_1" inlet="note"/>
      </net>
      <net>
         <source obj="major_2" outlet="note"/>
         <dest obj="note_2" inlet="note"/>
      </net>
      <net>
         <source obj="major_3" outlet="note"/>
         <dest obj="note_4" inlet="note"/>
      </net>
      <net>
         <source obj="major_4" outlet="note"/>
         <dest obj="note_5" inlet="note"/>
      </net>
      <net>
         <source obj="major_5" outlet="note"/>
         <dest obj="note_6" inlet="note"/>
      </net>
      <net>
         <source obj="adsr_1" outlet="env"/>
         <dest obj="*_1" inlet="b"/>
      </net>
      <net>
         <source obj="mix_1" outlet="out"/>
         <dest obj="StOutVol_1" inlet="left"/>
         <dest obj="StOutVol_1" inlet="right"/>
      </net>
      <net>
         <source obj="vcf3_1" outlet="out"/>
         <dest obj="vca_1" inlet="a"/>
      </net>
      <net>
         <source obj="vca_1" outlet="o"/>
         <dest obj="mix_1" inlet="in2"/>
      </net>
      <net>
         <source obj="keyb_1" outlet="note"/>
         <dest obj="square_2" inlet="pitch"/>
      </net>
      <net>
         <source obj="square_2" outlet="wave"/>
         <dest obj="vcf3_1" inlet="in"/>
      </net>
      <net>
         <source obj="keyb_1" outlet="velocity"/>
         <dest obj="*_1" inlet="a"/>
      </net>
      <net>
         <source obj="*_1" outlet="result"/>
         <dest obj="vcf3_1" inlet="pitch"/>
         <dest obj="vca_1" inlet="v"/>
      </net>
      <net>
         <source obj="ABchance_7" outlet="B"/>
         <dest obj="flipflop_6" inlet="trig"/>
      </net>
      <net>
         <source obj="flipflop_6" outlet="o"/>
         <dest obj="note_3" inlet="trig"/>
         <dest obj="bool_6" inlet="in"/>
         <dest obj="+_5" inlet="in2"/>
      </net>
      <net>
         <source obj="ABchance_8" outlet="B"/>
         <dest obj="flipflop_7" inlet="trig"/>
      </net>
      <net>
         <source obj="ABchance_9" outlet="B"/>
         <dest obj="flipflop_8" inlet="trig"/>
      </net>
      <net>
         <source obj="flipflop_7" outlet="o"/>
         <dest obj="note_7" inlet="trig"/>
         <dest obj="+_5" inlet="in1"/>
         <dest obj="bool_7" inlet="in"/>
      </net>
      <net>
         <source obj="flipflop_8" outlet="o"/>
         <dest obj="note_8" inlet="trig"/>
         <dest obj="+_6" inlet="in2"/>
         <dest obj="bool_8" inlet="in"/>
      </net>
      <net>
         <source obj="major_6" outlet="note"/>
         <dest obj="note_3" inlet="note"/>
      </net>
      <net>
         <source obj="major_7" outlet="note"/>
         <dest obj="note_7" inlet="note"/>
      </net>
      <net>
         <source obj="major_8" outlet="note"/>
         <dest obj="note_8" inlet="note"/>
      </net>
      <net>
         <source obj="8xScaling_1" outlet="out5"/>
         <dest obj="major_5" inlet="pitch"/>
      </net>
      <net>
         <source obj="8xScaling_1" outlet="out6"/>
         <dest obj="major_6" inlet="pitch"/>
      </net>
      <net>
         <source obj="8xScaling_1" outlet="out7"/>
         <dest obj="major_7" inlet="pitch"/>
      </net>
      <net>
         <source obj="8xScaling_1" outlet="out8"/>
         <dest obj="major_8" inlet="pitch"/>
      </net>
      <net>
         <source obj="rndPattF16_1" outlet="o12"/>
         <dest obj="8xScaling_2" inlet="in6"/>
      </net>
      <net>
         <source obj="rndPattF16_1" outlet="o13"/>
         <dest obj="8xScaling_2" inlet="in7"/>
      </net>
      <net>
         <source obj="rndPattF16_1" outlet="o14"/>
         <dest obj="8xScaling_2" inlet="in8"/>
      </net>
      <net>
         <source obj="rndPattF16_1" outlet="o15"/>
         <dest obj="latch_2" inlet="i"/>
         <dest obj="8xScaling_1" inlet="in8"/>
      </net>
      <net>
         <source obj="rndPattF16_1" outlet="o16"/>
         <dest obj="8xScaling_1" inlet="in6"/>
      </net>
      <net>
         <source obj="ABchance_10" outlet="B"/>
         <dest obj="flipflop_9" inlet="trig"/>
      </net>
      <net>
         <source obj="flipflop_9" outlet="o"/>
         <dest obj="note_9" inlet="trig"/>
         <dest obj="+_7" inlet="in1"/>
         <dest obj="bool_9" inlet="in"/>
      </net>
      <net>
         <source obj="major_9" outlet="note"/>
         <dest obj="note_9" inlet="note"/>
      </net>
      <net>
         <source obj="+_1" outlet="out"/>
         <dest obj="+_2" inlet="in2"/>
      </net>
      <net>
         <source obj="+_3" outlet="out"/>
         <dest obj="+_4" inlet="in2"/>
      </net>
      <net>
         <source obj="+_2" outlet="out"/>
         <dest obj="+_3" inlet="in1"/>
      </net>
      <net>
         <source obj="+_4" outlet="out"/>
         <dest obj="voices" inlet="in"/>
      </net>
      <net>
         <source obj="+_6" outlet="out"/>
         <dest obj="+_7" inlet="in2"/>
      </net>
      <net>
         <source obj="+_5" outlet="out"/>
         <dest obj="+_6" inlet="in1"/>
      </net>
      <net>
         <source obj="+_7" outlet="out"/>
         <dest obj="voices_" inlet="in"/>
      </net>
      <net>
         <source obj="8xScaling_2" outlet="out1"/>
         <dest obj="note_1" inlet="velo"/>
      </net>
      <net>
         <source obj="8xScaling_2" outlet="out2"/>
         <dest obj="note_2" inlet="velo"/>
      </net>
      <net>
         <source obj="rndPattF16_1" outlet="o3"/>
         <dest obj="8xScaling_2" inlet="in3"/>
      </net>
      <net>
         <source obj="8xScaling_2" outlet="out3"/>
         <dest obj="note_4" inlet="velo"/>
      </net>
      <net>
         <source obj="8xScaling_2" outlet="out4"/>
         <dest obj="note_5" inlet="velo"/>
         <dest obj="note_9" inlet="velo"/>
      </net>
      <net>
         <source obj="8xScaling_2" outlet="out5"/>
         <dest obj="note_6" inlet="velo"/>
      </net>
      <net>
         <source obj="8xScaling_2" outlet="out6"/>
         <dest obj="note_3" inlet="velo"/>
      </net>
      <net>
         <source obj="8xScaling_2" outlet="out7"/>
         <dest obj="note_7" inlet="velo"/>
      </net>
      <net>
         <source obj="8xScaling_2" outlet="out8"/>
         <dest obj="note_8" inlet="velo"/>
      </net>
      <net>
         <source obj="keyb_1" outlet="gate2"/>
         <dest obj="adsr_1" inlet="gate"/>
      </net>
      <net>
         <source obj="latch_1" outlet="o"/>
         <dest obj="mono note priority_1" inlet="priority"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>-8</x>
      <y>-8</y>
      <width>1874</width>
      <height>1096</height>
   </windowPos>
</patch-1.0>