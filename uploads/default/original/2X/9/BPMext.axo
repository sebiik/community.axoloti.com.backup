<objdefs appVersion="1.0.12">
   <obj.normal id="BPMext" uuid="7b90c9ef-c596-431d-a030-cf6c78757bca">
      <sDescription>simple master clock source in BPM.
outputs pulses for beat, triplets, fourths and a variable rate multiplier.</sDescription>
      <author>Remco van der Most</author>
      <license>BSD</license>
      <helpPatch>lfo.axh</helpPatch>
      <inlets>
         <int32 name="BPM"/>
         <bool32.rising name="reset" description="reset phase"/>
         <int32 name="vari3"/>
      </inlets>
      <outlets>
         <bool32 name="beat" description="square wave"/>
         <bool32 name="trips"/>
         <bool32 name="fours"/>
         <bool32 name="32"/>
         <bool32 name="64"/>
         <bool32 name="vari1"/>
         <bool32 name="vari2"/>
         <bool32 name="vari3"/>
         <int32 name="rate3"/>
         <int32.positive name="timing"/>
         <frac32 name="delaybase"/>
         <frac32 name="ratebase"/>
      </outlets>
      <displays/>
      <params>
         <int32 name="BPM">
            <MinValue i="0"/>
            <MaxValue i="500"/>
         </int32>
         <int32 name="vari1">
            <MinValue i="1"/>
            <MaxValue i="128"/>
         </int32>
         <int32 name="vari2">
            <MinValue i="1"/>
            <MaxValue i="128"/>
         </int32>
         <int32 name="vari3">
            <MinValue i="1"/>
            <MaxValue i="128"/>
         </int32>
      </params>
      <attribs/>
      <code.declaration><![CDATA[int32_t Phase;
uint32_t r;
int rate1=3;
int rate2=4;
uint32_t freq;]]></code.declaration>
      <code.init><![CDATA[Phase = 0;
   r = 1;]]></code.init>
      <code.krate><![CDATA[{	 
	int BPM=param_BPM+inlet_BPM;
	BPM=BPM>0?BPM:1;
	
      if (inlet_reset && r) {
         Phase = 0;
         r = 0;
      } else {
         if (!inlet_reset) r = 1;
         
         freq=(uint32_t)(1<<30)/(22500/BPM);
         Phase += freq>>2;
      }
      outlet_beat= (Phase>0)?1:0;
      outlet_trips=((Phase*rate1)>0)?1:0;
      outlet_fours=((Phase*rate2)>0)?1:0;
      outlet_32=((Phase<<5)>0)?1:0;
      outlet_64=((Phase<<6)>0)?1:0;
      outlet_vari1=((Phase*param_vari1)>0)?1:0;
      outlet_vari2=((Phase*param_vari2)>0)?1:0;
      outlet_vari3=((Phase*(inlet_vari3+param_vari3))>0)?1:0;
      outlet_rate3=inlet_vari3<<4;
   }
   outlet_timing=(uint64_t)(1<<30)*(1<<17)/freq;
   outlet_delaybase=(uint64_t)(1<<30)*(1<<17)/freq;
   outlet_ratebase=freq>>2;]]></code.krate>
   </obj.normal>
</objdefs>