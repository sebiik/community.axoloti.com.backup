<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:discourse="http://www.discourse.org/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>User Guide - Axoloti Community</title>
    <link>http://community.axoloti.com/c/user-guide</link>
    <description>Topics in the &#39;User Guide&#39; category This category contains posts to help users use Axoloti, a dynamic user guide.</description>
    
      <lastBuildDate>Mon, 23 Jul 2018 03:43:46 +0000</lastBuildDate>
      <atom:link href="https://sebiik.github.io/community.axoloti.com.backup/c/user-guide.rss" rel="self" type="application/rss+xml" />
        <item>
          <title>Tutorial Video: a simple synth with 3 analog inputs!</title>
          <dc:creator><![CDATA[@Androoclops]]></dc:creator>
          <category>User Guide</category>
          <description><![CDATA[
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/androoclops">@Androoclops</a> wrote:</p>
            <blockquote>
              <p>Hey guys, I made this video today. If you're new to Axoloti it may be pretty useful to watch! <br>In this tutorial we make a synth that has three oscillators and three knobs that we can use to change the values of things in our patch </p>

<div class="lazyYT" data-youtube-id="LftIgXKuRx4" data-youtube-title="Tutorial: DIY synthesizer using an Axoloti!" data-width="480" data-height="270" data-parameters="feature=oembed&amp;wmode=opaque"></div>
            </blockquote>
            <p>Posts: 4</p>
            <p>Participants: 3</p>
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/tutorial-video-a-simple-synth-with-3-analog-inputs/4807">Read full topic</a></p>
          ]]></description>
          <link>http://community.axoloti.com/t/tutorial-video-a-simple-synth-with-3-analog-inputs/4807</link>
          <pubDate>Mon, 23 Jul 2018 03:43:46 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">community.axoloti.com-topic-4807</guid>
          <source url="http://community.axoloti.com/t/tutorial-video-a-simple-synth-with-3-analog-inputs/4807.rss">Tutorial Video: a simple synth with 3 analog inputs!</source>
        </item>
        <item>
          <title>Troubleshooting Guide</title>
          <dc:creator><![CDATA[@thetechnobear Mark Harris]]></dc:creator>
          <category>User Guide</category>
          <description><![CDATA[
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/thetechnobear">@thetechnobear</a> wrote:</p>
            <blockquote>
              <h1>Overview</h1>

<p>This guide is intended to help users troubleshoot problems with Axoloti hardware and software, this is an attempt to collect together common issues that we have seen since Axoloti has been released. <br>I hope that the community can extend this guide with relevant links to thread for common issues.<br>Note: It is <strong>intended</strong> to cover patching</p>

<p><strong>important note:</strong> this is a wiki post so regular users can edit/update it, e.g. to link to other relevant topics.<br>please keep this post concise, and rather link to other relevant posts where necessary, as users do/will not read a massive 20 page post <img src="//community.axoloti.com/images/emoji/twitter/wink.png?v=5" title=":wink:" class="emoji" alt=":wink:"> </p>

<p>If you have an issue when first installing Axoloti , it is assumed you have read, and re-read the relevant installation guide, seriously go read it again <img src="//community.axoloti.com/images/emoji/twitter/wink.png?v=5" title=":wink:" class="emoji" alt=":wink:"> </p>

<p>please also remember many users are running Axoloti on the latest version of all operating systems, so if its not working on your system... something is 'different' about your system, so our task here is to work out what.</p>

<h1>Guidelines</h1>

<p>aka, before you report an issue... <br>I know these all seem 'obvious' but you will be amazed at the number of times we see posts that miss off these items</p>

<ul>
<li>check that you are running on a 'supported platform' (see installation guide)</li>
<li>check that you are running the latest update for your operating system</li>
<li>check that you are running the latest version of java for your operating system (Java 1.8)</li>
<li>check you have the latest version of the Axoloti runtime AND patcher...   (yes there are two things to install)</li>
<li>gather all information about your setup, operating system version, java version , you need to include this in your post!</li>
<li>search the forum for similar issues, the forums now has years worth of posts from new and experienced users, installing on various platforms... its unlikely you are the first to experience a problem.</li>
<li>try to be clear on where the problem lies, and be specific</li>
<li>gather any logs, or console messages - include everything, something you may think is irrelevant , may be.<br>seriously, reading posts like 'axoloti crashes' , axoloti does not start... gives the community zero information to help them help you... the more effort you put in describing your setup, what you have tried, what you see. Also people are generally more helpful, when they see you have already done some 'legwork'</li>
<li>check your virus/firewall software, in particular has it quarantined any files</li>
<li>java can allow users to have multiple runtimes installed (common for developers in particular), check your default is set to the latest 1.8 release</li>
</ul>

<h1>Next...</h1>

<p><strong>once you have done all of the above</strong></p>

<p>Issues tend to lie in a couple of areas, and you need to narrow down where the issue is, and be able to report some simple facts.. most importantly we need to narrow down if its hardware or software issue.</p>

<h2>Axoloti Patcher</h2>

<p>If there is an issue with the patcher be clear where the issue lies</p>

<h3>Patcher not starting up/hanging</h3>

<ul>
<li>does axolotl patcher start at all, does it bring up the console window?</li>
<li>try to start patcher without Axoloti connected, does this work ?</li>
<li>try to start axoloti from command line, this gives a bunch more messages?</li>
<li>trying deleting the axoloti.pref in documents directory</li>
</ul>

<h3>Patcher does not see/will not connect to hardware</h3>

<ul>
<li>try different usb cables, one that you know carries data not just power</li>
<li>can you see any device listed in 'Select device ' in axoloti</li>
<li>use the operating system tools , to see if it can see the device</li>
<li>try to boot put Axoloti into DFU mode and use rescue flash (details in install guide) </li>
<li>see <a href="//community.axoloti.com/t/axoloti-hardware/59">'Axoloti Hardware'</a> section for more </li>
</ul>

<h3>Issues taking patches live / compilation</h3>

<ul>
<li>90% of issues here are caused by incorrect installation of the axoloti runtime, check it again <img src="//community.axoloti.com/images/emoji/twitter/wink.png?v=5" title=":wink:" class="emoji" alt=":wink:"> </li>
<li>temporarily disable your virus checker</li>
<li>check your virus software has not quarantined any files</li>
</ul>

<h3>Issues with library synchronisation, including not seeing factory objects</h3>

<ul>
<li>if you don't see any factory objects, its because Axoloti has not been able to download the Factory library.</li>
<li>you need an active internet connection during initial installation to get the libraries, see relevant posts if you want to use 'offline'</li>
<li>if you have an issue with 'synchronisation', the recommend first step, is to use File-&gt;Preferences-&gt; Libraries/Reset All. </li>
</ul>

<h2>Axoloti Hardware</h2>

<h3>Patcher runs patch, but then disconnects from hardware</h3>

<p>This can have many causes, but the key thing to determine here is... is the patch still running? i.e. has the axoloti hardware crashed whilst running your patch <strong>or</strong> has the patch just disconnected?<br>the best way to determine this is to have the patch do something that you can 'detect' even without the patch running e.g. add an oscillator, that sends a constant tone to the output , </p>

<p>some patches/functionality requires an SD card</p>

<h2>Midi Controllers</h2>

<p>There are a huge number of controllers reported working with Axoloti, see this <a>thread</a><br>the most likely reason for a controller not to work is:<br>- its not USB MIDI class compliant <br>- it has an integrated usb hub (axoloti does not currently support USB hubs)</p>

<ul>
<li>check the compatible list to see if your device is listed </li>
<li>check that its class compliant</li>
<li>connect your device when axoloti is running and connected, axoloti will report details of the device to the console.</li>
<li>if your device has a power inlet, test to see if it works when using it powered (rather than usb powered)</li>
</ul>

<h1>operating system versions</h1>

<p>The best support is always going to be on the operating system that the developers use, and they will tend to use the OS that most users are on, or are likely to be moving to soon... this typically means the latest OS but <strong>not immediatly on release</strong>   </p>

<p>new versions of operating systems, dont upgrade immediately... this is generally a bad idea, developers only have a limited number of machines to test on, and often after a new release some other (music) software is not working... so its not a great music platform.</p>

<p>old versions of operating systems, again... at some point developers have to move machines forward to support what the majority of users are on.</p>

<p>beta versions of operating systems/java etc - whilst its great getting feedback from users that axoloti is working or not, but dont expect support/fixes... there are only a few of us, and we cannot necessarily spare a machine to upgrade to the beta OS.</p>

<p>developers please take particular care, often development tools change the environment, or we run beta versions of software. this cannot reasonably be supported.</p>

<p>example: I (thetechnobear) will usually have my machines on the latest release, until a new release is made then I will upgrade one machine... then later once its obviously stable move my others e.g. on macs, I currently have all on 10.12.6... but will be upgrading one to 10.13 probably when it hits 10.13.1 or 10.13.2... then if thats successful, after a few weeks/months. I'll move the other. <br>(sometimes I might upgrade one machine earlier if I know there is an issue which needs to be fixed, but dont count on it <img src="//community.axoloti.com/images/emoji/twitter/wink.png?v=5" title=":wink:" class="emoji" alt=":wink:"> ) </p>

<h1>Links</h1>

<p>this section should contain links to useful post regarding troubleshooting particular issues.<br>(to do)</p>
            </blockquote>
            <p>Posts: 1</p>
            <p>Participants: 1</p>
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/troubleshooting-guide/3914">Read full topic</a></p>
          ]]></description>
          <link>http://community.axoloti.com/t/troubleshooting-guide/3914</link>
          <pubDate>Wed, 08 Nov 2017 13:41:16 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">community.axoloti.com-topic-3914</guid>
          <source url="http://community.axoloti.com/t/troubleshooting-guide/3914.rss">Troubleshooting Guide</source>
        </item>
        <item>
          <title>Using custom directory locations</title>
          <dc:creator><![CDATA[@thetechnobear Mark Harris]]></dc:creator>
          <category>User Guide</category>
          <description><![CDATA[
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/thetechnobear">@thetechnobear</a> wrote:</p>
            <blockquote>
              <p>Some users may need to use different directory locations for their setup, due to permissioning or using things like remote profiles.</p>

<p><strong>important note</strong><br>This is considered advanced use only, you must know how to configure for your operating system.<br>Incorrect usage <strong>will</strong> cause issues. Also it will make it difficult for others to support you, since your files will not be in the 'usual' locations, an assumption most will make. (so make sure you mention this if you are posting a problem)</p>

<p>environment variables for modifying locations are:</p>

<p><strong>axoloti_home</strong> - location of the axoloti document home, e.g. where preferences and libraries are stored</p>

<p><strong>axoloti_runtime</strong> - the location of the 'runtime applications' , e.g. compilers<br><strong>axoloti_release</strong> - the location of the axoloti application</p>

<p><strong>axoloti_firmware</strong> - location of the axoloti firmware (advanced use only)</p>

<p>note: some operating system will require you to logout/restart computer to take effect.</p>

<p>if you change any of these variables, it is recommended that the next time you start Axoloti you do it from the command line (using cmd.exe/bash/terminal etc) , as when Axoloti starts it reports issues about missing directories etc to the 'standard out'  <strong>not</strong> the Axoloti console.</p>

<p>for the location of the libraries, (factory, community), you are also able to change this in preferences, and then edit the library... once you change the local directory, you will need to do init for that library.<br>(this is not often needed, since its placed in axoloti_home, which if you having issues is most likely needed to be changes, since this is where axoloti.prefs is stored)</p>

<p>again... for <strong>most</strong> users this is unnecessary, since Axoloti by default uses recommend locations for each operating systems. so do not change unless you absolutely must... even then its probably best to ask first!</p>
            </blockquote>
            <p>Posts: 2</p>
            <p>Participants: 1</p>
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/using-custom-directory-locations/3387">Read full topic</a></p>
          ]]></description>
          <link>http://community.axoloti.com/t/using-custom-directory-locations/3387</link>
          <pubDate>Tue, 06 Jun 2017 10:56:22 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">community.axoloti.com-topic-3387</guid>
          <source url="http://community.axoloti.com/t/using-custom-directory-locations/3387.rss">Using custom directory locations</source>
        </item>
        <item>
          <title>Hacking objects 101: adding modulation inlets</title>
          <dc:creator><![CDATA[@Sputnki Filippo Tamagnini]]></dc:creator>
          <category>User Guide</category>
          <description><![CDATA[
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/sputnki">@Sputnki</a> wrote:</p>
            <blockquote>
              <p>Some users often ask contributors to <strong>add modulation inlets</strong> to their objects.<br>While a workaround exists (adding a  <strong>patch/modsource object</strong> and right-clicking on the parameter to modulate), sometimes this solution is not efficient or not available at all (see for example integer boxes).</p>

<p>What to do in one of these cases?<br>1) you can ask the contributor here on the forum to add inlets (<strong>lame</strong>!) (just kidding!!!) (not really: <strong>we are lazy</strong>) <br>2) you can <strong>HACK THE OBJECT</strong> in few steps</p>

<p>Click on the little arrow of the object you want to edit</p>

<p><img src="//community.axoloti.com/uploads/default/original/2X/a/adf493844afc976b7fa142c146c106455d14ad63.png" width="145" height="125"></p>

<p>Embed as patch/object, this way you can't do permanent disasters. <strong>DON'T EDIT OBJECT DEFINITION, UNLESS YOU'RE VERY SKILLED IN TROUBLESHOOTING C++ CODE</strong></p>

<p><img src="//community.axoloti.com/uploads/default/original/2X/7/7c7cb0193cabfcc642192e86c56f68ec8bb6ff9e.png" width="194" height="157"></p>

<p>Click on edit</p>

<p><img src="//community.axoloti.com/uploads/default/original/2X/4/49b4c322a70b54e6dcd20966fbf4566a6260d665.png" width="104" height="114"></p>

<p>Select the inlet tab on the left and then add as many inlets as you need.</p>

<p><img src="//community.axoloti.com/uploads/default/original/2X/8/8ccdcb8b525ef4e6ec5afe7f6d7200b21fb5a08d.png" width="563" height="419"></p>

<p>Give a name to such inlets, something you can remember. Do not use spaces or symbols, just letters or numbers.<br>As for the type: dials (knobs) correspond to frac32 inlets (blue). Buttons and toggles correspond to bool32 inlets. Integer boxes correspond to int32 inlets. All the other stuff is just labels on the object (you can experiment on this).<br>Also, buffered inlets refer to the audio rate stuff. It's not the case to touch those.</p>

<p><img src="//community.axoloti.com/uploads/default/original/2X/f/f469d452209e3e82ad51ed16eb716b9491b1b915.png" width="554" height="414"></p>

<p>Now the tricky part: you have to search in the k-rate and s-rate code every reference to the parameter you want to hack. You'll find stuff like <strong>param_ParameterName</strong>. <br>You have a few options here: you can add the inlet to the parameter (see the middle portion of image) or override it completely (delete param_ParameterName and substitute it with inlet_InletName) <br>Remember to add ";" at the end of rows (the code won't start otherwise).<br>If you choose to override completely a parameter you can then go in the parameters tab and delete the parameter.</p>

<p><img src="//community.axoloti.com/uploads/default/original/2X/f/fbd078051bc80df29b5225e2ab06fd42f2d7b110.png" width="543" height="408"></p>

<p>You're done!</p>

<p><img src="//community.axoloti.com/uploads/default/original/2X/2/25baeadf5dc80119eeeff7710d138cf32dc280db.png" width="115" height="138"></p>

<p>For this example i hacked ctrl/dial.</p>

<p><strong>Something can go wrong</strong> while doing this. Aside from <strong>syntax errors</strong>, there are some cases in which a parameter is bound inside a very specific <strong>range</strong>. Outside that range weird stuff might happen (pleasantly weird but also patch-crashing weird).<br>This might happen because of variable overflowing, for reading/writing arrays outside their range or for similar reasons.<br>Troubleshooting these errors is often hard and requires skill. If you don't have the skill, just be careful with what you feed into these inlets. You could use <strong>math/sat</strong> and math/satp objects as a quick fix</p>
            </blockquote>
            <p>Posts: 24</p>
            <p>Participants: 9</p>
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/hacking-objects-101-adding-modulation-inlets/2969">Read full topic</a></p>
          ]]></description>
          <link>http://community.axoloti.com/t/hacking-objects-101-adding-modulation-inlets/2969</link>
          <pubDate>Sun, 26 Feb 2017 16:13:54 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">community.axoloti.com-topic-2969</guid>
          <source url="http://community.axoloti.com/t/hacking-objects-101-adding-modulation-inlets/2969.rss">Hacking objects 101: adding modulation inlets</source>
        </item>
        <item>
          <title>Rotary Encoders</title>
          <dc:creator><![CDATA[@Gavin Gavin]]></dc:creator>
          <category>User Guide</category>
          <description><![CDATA[
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/gavin">@Gavin</a> wrote:</p>
            <blockquote>
              <p><strong>What is a Rotary Encoder,</strong><br>Also known as a “Shaft” encoder, there are many versions that operate under this name.<br>The type I am referring to here is a mechanical device that generates two switching pulses 90 deg out of phase from each other.<br>The number of pulses per revolution varies depending on brand and make etc.<br>Two common examples are,</p>

<p>The following example is the bare bones encoder. These come in 2 types, a 3 pin and 5 pin.<br>Below shows 5 pins, the extra 2 pins shown on the other side of the device, serves as a momentary switch which is activated by depressing the shaft.<br>If using this type, it is recommended to apply a simple circuit for preferred operating function.<br>(circuit shown below A, B and C for rotary function, the other 2 for switching, just omit the switching section for a 3 pin encoder)</p>

<p> <img src="//community.axoloti.com/uploads/default/original/2X/c/c84b518bb22b41f9ecfff5d00ea082b0261a12cb.png" width="265" height="241"></p>

<p><img src="//community.axoloti.com/uploads/default/original/2X/a/a12d952c2153928d8ae46598399c943076c192dd.png" width="439" height="274"></p>

<p>The following type is a 5 pin encoder already soldered onto a circuit for preferred operating function.<br>As you will see, it even shows what to plug in.</p>

<p><img src="//community.axoloti.com/uploads/default/original/2X/b/b20fe67dd57b3eb2ccc62f3f0f34734077a6aa06.png" width="288" height="205"></p>

<p>Both versions are plentiful on website online, and may even be available in your local electronics store.<br>Especially note if you require it to have the momentary switch option.</p>

<p>One difference you may notice between the two versions is the shaft design.<br>The bare bones version shows a slotted shaft with a threaded base for mounting into hardware, the soldered circuit version shows a “D” shape shaft with no threaded base, but has two mounting holes in the circuit board.<br>Be mindful of this when purchasing your items to ensure it meets your mounting requirements.</p>

<p><strong>How do they work.</strong><br>The below diagram shows the workings by depending on the direction the shaft is turned, when signal “A” received a rising edge,<br>It reads wether signal “B” is either HIGH or LOW.<br>In the diagram below, when signal “B” is HIGH, it is turning clockwise, when signal “B” is LOW, it is turning anti-clockwise,</p>

<p> <img src="//community.axoloti.com/uploads/default/original/2X/2/2ced43b53de31d039c9b0e7ea1ad25a305d0d4cb.png" width="397" height="276"></p>

<p><strong>Connecting to the Axoloti</strong><br>This connecting a rotary encoder to the Axoloti will require two digital GPIO Input pins to read the rotating value,<br>And one additional digital GPIO pin to read the momentary switch if you choose to connect one.<br>Based on the encoder and circuit images above, connections are described as follows..<br>CLK – “Clock” used to trigger the rising edge.<br>DT –  “Data” used to determine the direction delivering a HIGH or LOW signal during CLK rising edge.<br>SW – “Momentary Switch” depending on your encoder you may or may not have one.<br>+    – “Voltage Supply” With Axoloti this is 3.3v from a supply pin.<br>GND – “Ground”</p>

<p>CLK, DT and SW will each require their own digital GPIO pin, with “+” and “GND” connected as standard to 3.3v and GND pins.<br>Be mindful of using any analogue pins that you may require for any analogue readings.</p>

<p>When selecting the pin number in the GPIO digital Input object, be sure to select as “PULLDOWN”</p>

<p><strong>The Patch, Object and Code</strong><br>This section could go into various directions and create multiple debates about certain setups.<br>There are many de-bounce concepts, acceleration methods meaning the faster you turn the encoder, the higher the steps, and also many interrupt methods to support these ideas.</p>

<p>I will focus only on what appears to be the most common basic code setup which is how the object “Rotary Encoder Basic” is coded.<br><a class="attachment" href="//community.axoloti.com/uploads/default/original/2X/b/b991336103f813c511577c6e4ec81195c9faeed7.axo">Rotary Encoder Basic.axo</a> (1.1 KB)</p>

<p>Giving you the option to make whatever changes meet your needs.</p>

<p>Add the GPIO digital Input objects for the pins connected to “CLK” and “DT”<br>Object contains two inputs “trig” for the rising edge trigger, “dir” for determining the direction it is turning.<br>In the Patch, connect object connected to “CLK” to encoder object input “trig” and “DT” to “dir” respectively.</p>

<p>Contains only one output which is the current changing value weather decreasing or increasing.<br>The output can be connected to an Factory/disp/“i” object to display the value.</p>

<p>You can either modify the object used in the above explanation, or use the following code to help develop your own object.</p>

<p><em>Inlets:</em><br>Inlet_trig – (bool32.rising)<br>Inlet_dir – (bool32.rising)</p>

<p><em>Outlets:</em><br>Outlet_o – (int32)</p>

<p><em>Local Data:</em><br>int encoderPos;<br>int encoderLast;<br>int inval;</p>

<p><em>Int Code:</em><br>encoderPos = 0;<br>encoderLast = 0;<br>inval = 0; </p>

<p><em>K-rate code:</em><br>inval = inlet_trig;<br>if ((encoderLast == 0) &amp;&amp; (inval &gt; 0)) {<br>	if (inlet_dir == 0) {<br>	    	  encoderPos--;<br>	} else {<br>	    	  encoderPos++;<br>	}<br>} <br>encoderLast = inval;<br>outlet_o=encoderPos; </p>

<p><strong>Summary</strong><br>Now that you have the basic setup, you can modify to whatever meets your needs.<br>You will see over time various versions appear in my contributions once it is up and running.</p>

<p>Some things you may want to consider,<br>-        Minimums and Maximums.<br>-        How to apply presets.<br>-        Increment / Decrement size.</p>
            </blockquote>
            <p>Posts: 27</p>
            <p>Participants: 4</p>
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/rotary-encoders/2681">Read full topic</a></p>
          ]]></description>
          <link>http://community.axoloti.com/t/rotary-encoders/2681</link>
          <pubDate>Fri, 23 Dec 2016 07:29:10 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">community.axoloti.com-topic-2681</guid>
          <source url="http://community.axoloti.com/t/rotary-encoders/2681.rss">Rotary Encoders</source>
        </item>
        <item>
          <title>Coding axoloti objects</title>
          <dc:creator><![CDATA[@Sputnki Filippo Tamagnini]]></dc:creator>
          <category>User Guide</category>
          <description><![CDATA[
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/sputnki">@Sputnki</a> wrote:</p>
            <blockquote>
              <p>A pretty big subject, but i think it might be useful to shed some light for newbies:</p>

<h2>Contents</h2>

<ul>
<li><a href="#needtoknow">What do you need to know to code objects</a></li>
<li><a href="#startcoding">How do you start coding an object?</a></li>
<li><a href="#editlibrary">How do you edit a library object?</a></li>
<li><a href="#codeinout">Coding with input/output (and parameters)</a></li>
<li><a href="#localdata">Local data</a></li>
<li><a href="#initcode">Init code</a></li>
<li><a href="#kratesrate">K-rate and S-rate cycles</a></li>
<li><a href="#inletsoutlets">Inlets/Outlets</a></li>
<li><a href="#parameters">Parameters</a></li>
<li><a href="#rangeformat">Normal range and number format</a></li>
<li><a href="#elementarymath">Elementary math in axoloti</a></li>
<li><a href="#32bitvar">32bit variables</a></li>
<li><a href="#bitshifts">Bitshifts</a></li>
<li><a href="#fixedpointmath">Fixed point math</a></li>
<li><a href="#functions">Functions</a></li>
<li><a href="#assembly">Assembly functions</a></li>
<li><a href="#bitwise">Bitwise operations</a></li>
</ul>

<hr>

<h2>
<a name="needtoknow"></a>What do you need to know to code objects?</h2>

<p>Basic C/C++ knowledge. You don't necessarily need to have a PhD in C++ to code objects, but you'll definitely need to know something about statements, variables, etc..<br>Math can be really useful, also, but all depends on what you need to code.</p>

<hr>

<h2>
<a name="startcoding"></a>How do you start coding an object?</h2>

<p>Open a patch (or make a new one), create a patch/object object, click edit and you're good to go.</p>

<hr>

<h2>
<a name="editlibrary"></a>How do you edit a library object?</h2>

<p>Load the object you want to edit in a patch. Click on the arrow and edit object definition.<br>It's not a good practice to edit factory object this way: you should do embed as patch/object and then edit the embedded object with the edit button.<br>If you just need to see how an object is coded you can do it the first way, but you should be careful not to overwrite stuff. <br>If you do, don't panic: you can always delete the object from the folder and do a sync, but it's better to avoid the trouble.</p>

<hr>

<h2>
<a name="codeinout"></a>Coding with input/output (and parameters)</h2>

<p>In the left side of the object editor you can see the inlets, outlets, attributes, parameters and displays tabs. Inlets and outlets are used to interface with other objects in the patcher. Parameters and displays provide some user input/output patcher-side, attributes are similar to parameters, but can be only edited before starting the patch. <br>They're generally defined as int32_t or uint32_t variables (however, some attributes use string type, and buffered inlet/outlets are int32_t*).</p>

<p>You can access inlets, outlets, parameters and displays in init code, k-rate code°, s-rate code, and midi code. You can't access them in local data (because they're still to be declared).<br>Attributes can be accessed in local data.<br>You can read inlets, attributes or parameters in the code using the inlet_x, attr_x or param_x formulation (where x is the name of the inlet you want to read)</p>

<p><strong>Examples:</strong> <br></p>

<p></p><pre><code class="lang-auto">if (inlet_dog) dostuff();
int32_t x = inlet_dog + param_cat;
switch (attr_mice) {
{ 
case 1 : stuff1(); break;
case 2 : stuff2(); break;
}</code></pre>

<p>You get the idea.</p>

<p>You can write in outlets or displays with the outlet_x or disp_x formulation (where x is the name of the outlet or display you want to write to)</p>

<p><strong>Example:</strong><br></p>

<p></p><pre><code class="lang-auto">outlet_elephant = 5;
disp_zebra = 10;</code></pre>

<p>° Note: Inlets and outlets that contain "buffer" in the type are only accessible in s-rate code.<br>If you want to access them in k-rate code you must refer to them as arrays.</p>

<p><strong>Example (k-rate):</strong><br></p>

<p></p><pre><code class="lang-auto">outlet_blob[1] = inlet_plaff[6];</code></pre>

<hr>

<h2>
<a name="localdata"></a>Local data</h2>

<p>This section of the code is executed once, before inlets, outlets, params and displays are declared. <br>You can use this section to declare variables, constants, functions etc. You can't access i/o (because i/o does still not exist, at this point), but you can access attributes.<br><strong>Example:</strong> table/alloc 16b</p>

<hr>

<h2>
<a name="initcode"></a>Init code</h2>

<p>This code is executed once at the beginning of the patch after all inlets, outlets, parameters and displays are declared. You can therefore access i/o.<br>If you don't need this feature you can compact all the initialization code in the local data section.<br><strong>Example:</strong> filter/allpass</p>

<hr>

<h2>
<a name="kratesrate"></a>K-rate and S-rate cycles</h2>

<p>K-rate code is executed 3000 times in a second.<br>S-rate code is once for each sample  (i.e. 48000/sec)<br>This might seem strange, but s-rate is executed after k-rate. (Therefore in s-rate you can read/write in variables created in k-rate).</p>

<p>the s-rate code really is just a short hand for a k-rate equivalent, basically its just a for-loop going around each sample in the audio buffer. you can also do this yourself in the k-rate code, which sometimes is more useful. (you will see the factory objects do it quite frequently)<br>(note: this means just because an object doesnt have any code in the s-rate section , doesn't mean it doesn't run audio rate code.</p>

<p><strong>Example:</strong> osc/phasor</p>

<hr>

<h2>
<a name="inletsoutlets"></a>Inlets/Outlets</h2>

<p>They can be of four main types: bool (yellow), int (green), frac (blue), frac buffer (red)<br>They're all 32 bit integers, however.<br>Buffered i/o can be accessed in k-rate with arrays (see osc/saw cheap) or in s-rate (see osc/sine).<br>A special note about integers and fractionals: since axoloti is a microcontroller based audio platform, fractional input/output is implemented with fixed point math (Q format, you can check it on wikipedia). <br>So, what you see in the patcher as 64 (dials) is actually a much bigger number: 2^27.<br>More on types later.</p>

<hr>

<h2>
<a name="parameters"></a>Parameters</h2>

<p>There's a lot to say about parameters and very little time to do so.<br>frac32.X.map -&gt; dials. They can be unipolar (u.map) and bipolar (s.map). Their range is normally 0~2^27 for unipolar and -2^27~2^27 for bipolar, however some of them are scaled non linearly for particular applications.<br>int32 -&gt; integer parameters. Their value is what you see in the patcher.<br>bool32.mom and bool32.tgl -&gt; buttons, boolean 1/0.</p>

<hr>

<h2>
<a name="rangeformat"></a>Normal range and number format</h2>

<p>You'll sometimes read about normal range. An example of a normal range is the output of dial/b, which goes from -64 to +64 (in the ui)<br>the output of dial/p (the p stands for positive) is 0 to 64, which is a positive normal range.</p>

<p>You can see that if you multiply a dial set to 64 to some other fractional value, you'll get that same fractional value.<br>If you multiply 32 for another fractional value, you'll get as output half the value. (You can see where i'm going).</p>

<p>What happens under the hood is that 64 in the ui corresponds to a 2^27 integer (or 1&lt;&lt;27 if you like C) passed between objects, and most times it corresponds to a "real world" 1.<br>Most operations are done on this basis.</p>

<hr>

<h2>
<a name="elementarymath"></a>Elementary math in axoloti</h2>

<p></p><pre><code class="lang-auto">operation1 = a + b -c;
operation2 = d*e;
operation2 = f/g;</code></pre>

<p><strong>Examples:</strong> <br>math/+<br>math/-<br>math/* (the ones with at least one green inlet!)<br>math/divremc</p>

<p>Remember that you're working with 32bit signed variables, so you have a limited range (overflows won't break boards, but can be pretty harsh sounding).</p>

<p>You can do operations in floating point, by casting variables (it's a bit more expensive than doing integer math, but it can serve purposes)<br>Example: math/reciprocal (the integer input is cast to a float variable "inf", and then 2^48 is divided by inf. )<br>Example: math/sqrt (the float variable is used as an argument for the VSQRTF function.)</p>

<hr>

<h2>
<a name="32bitvar"></a>32bit variables</h2>

<p>They're mainly of two types: uint32_t (unsigned int) and int32_t (signed int).<br>This means that the processor works with 32 bits per variable, so you can use numbers that go from -2147483648 to 2147483647 (signed) or 0 to 4294967296 (unsigned).<br>Signed integers use two's complement representation: read about it on wikipedia, it's pretty cool: <a href="https://en.wikipedia.org/wiki/Two's_complement" rel="nofollow">https://en.wikipedia.org/wiki/Two's_complement</a><br>Another pretty interesting resource i found about the topic is this:<br><aside class="onebox whitelistedgeneric">
  <header class="source">
    <a href="http://www.computerworld.com/article/3010974/linux/whats-so-special-about-2147483648.html" target="_blank" rel="nofollow">www.computerworld.com</a>
  </header>
  <article class="onebox-body">
    <img src="http://images.techhive.com/images/article/2015/12/binary2038-100631009-primary.idge.jpg" class="thumbnail" width="620" height="413">

<h3><a href="http://www.computerworld.com/article/3010974/linux/whats-so-special-about-2147483648.html" target="_blank" rel="nofollow">What's so special about 2147483648?</a></h3>

<p>We might just run out of time!</p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
</p>

<p>Knowing the type of a variable is really important when you do bitshifts: in fact 1&lt;&lt;31 equals to 2147483648 in an unsigned int, but it also equals -2147483648, in a signed int (also, if you wonder what's 1&lt;&lt;31 like, here you have it: 10000000 00000000 00000000 00000000)</p>

<hr>

<h2>
<a name="bitshifts"></a>Bitshifts</h2>

<p>The notation a &lt;&lt; b means "bit shift left the variable a by a number b of bits"<br>So, if a = 15 ( 0000 1111 in binary) and b = 2; then a &lt;&lt; b = 0011 1100 (binary) = 60 (decimal)<br>Bitshifting left by a number of bits n it's really like multiplying by 2^n.<br>This also stands for negative numbers (since they're in two's complement notation and the processor knows that), for example 1111 0000 &lt;&lt; 3 = 1000 0000 (which is -16 * 2^3 = -128)<br>The same thing applies for right shifts: a &gt;&gt; b means "bit shift right the variable a by a number b of bits"<br>So, if a = 15 ( 0000 1111 in binary) and b = 2; then a &gt;&gt; b = 0000 0011 (binary) = 3 (decimal)<br>Which it's really like dividing by 2^n.<br>Same thing applies for negative numbers (in two's complement)</p>

<p><strong>Examples:</strong> <br>math/&lt;&lt;<br>math/&gt;&gt;</p>

<hr>

<h2>
<a name="fixedpointmath"></a>Fixed point math (also not so easy math)</h2>

<p>So, we said earlier that axoloti works with integer variables. This is due to the fact that the microprocessor works more efficiently with integer types (don't worry! there's also an fpu!).<br>If you already opened some library objects, you might have stumbled over functions like ___SMMUL or ___SMMLA.</p>

<p><em>Tools:</em></p>

<p>These are assembly functions that perform a "composite" operation all in one take, which is multiply a*b and shift right by 32 bits.<br>I'll enter in the details of these functions later, but remember some of the math you learned in high school:<br>the logarithm of a number returns the "magnitude" of that number, in a particular base.<br>Remember also one of the properties of logarithms: log(a*b) = log(a) + log(b), which you can read as "the magnitude of the product of two numbers is equal to the sum of the magnitude of those numbers"<br>So, if you multiply two 32-bit numbers (they have a magnitude of 32 maximum), you can get as result a number with a magnitude up to 64.<br>The same thing (but opposite) stands for division, so if you divide a 64 bit number (magnitude 64) by a 32bit number (magnitude 32) you'll get a number with a smaller magnitude.</p>

<p><em>Demonstration:</em></p>

<p>What defines 1 in real world? Well, if you multiply 1*1 you get 1. So, the magnitude remains the same.<br>If you want 2^27 (1&lt;&lt;27) to be your "digital world 1", you can simply perform operations in a way that retains the magnitude of (1&lt;&lt;27) X (1&lt;&lt;27) (where X is our digital world multiplication)</p>

<p>Sooo... if A and B are two 32bit variables, and the unity is represented by (1&lt;&lt;27), you can say that log2(aA X bB) = 27 when A = 1&lt;&lt;27 and B = 1&lt;&lt;27 (a and b are two coefficients to be defined)<br>We don't know what operation X is, but we know that ___SMMUL does x*y&gt;&gt;32, which is equal to x*y/(2^32)<br><em>log2(aA * bB /2^32 ) = 27</em><br><em>log2(a*2^27) + log2(b*2^27) - log2(2^32) = 27</em><br><em>log2(a) + 27 + log2(b) + 27 - 32 = 27</em><br><em>log2(a) + log2(b) = 5</em></p>

<p>In practice, to do fixed point math with the mathematical 1 corresponding to digital (1&lt;&lt;27) we have to increase the magnitude of our two numbers by 5.</p>

<p>You can do this in quite a few ways:<br></p>

<p></p><pre><code class="lang-auto">C = ___SMMUL(A&lt;&lt;2,B&lt;&lt;3);
C = ___SMMUL(A&lt;&lt;3,B&lt;&lt;2);
C = ___SMMUL(A&lt;&lt;1,B&lt;&lt;4);
C = ___SMMUL(A&lt;&lt;4,B&lt;&lt;1);
C = ___SMMUL(A,B)&lt;&lt;5;
C = ___SMMUL(A&lt;&lt;1,B)&lt;&lt;4;</code></pre>

<p>You get the idea.</p>

<p><strong>Examples:</strong> <br>math/* (the ones without green inlets)<br>math/*c</p>

<hr>

<h2>
<a name="functions"></a>Functions</h2>

<p>There isn't really a huge pool of functions that are commonly used in axoloti objects.<br>We already talked about ___SMMUL(a,b): this function belongs to a family of functions really useful to perform fixed point math (and you can really do lots of stuff with them: from simple operations, to filters, oscillators, physical modelling)</p>

<p><em>Signed multiplications:</em><br><strong>out = ___SMMUL(in1,in2)</strong> Performs a multiplication between in1 and in2 and bitshifts right by 32bits<br><strong>out = ___SMMLA(in1,in2,in3)</strong> Performs a multiplication between in1 and in2, bitshifts the result right by 32bits and adds the result to in3.<br><strong>out = ___SMMLS(in1,in2,in3)</strong> Performs a multiplication between in1 and in2, bitshifts the result right by 32bits and subtracts the result from in3.<br><strong>Examples:</strong><br>math/* (smmul)<br>mix/mix 3 sq (smmla)<br>filter/allpass (smmls)</p>

<p><em>Saturation functions</em> <br><strong>out = __SSAT(input,N)</strong> Saturates a signed input to N bits<br><strong>out = __USAT(input,N)</strong> Saturates an unsigned input to N bits<br>Important: N must be a constant number, you can't use variables in this argument. <br><strong>Examples:</strong><br>math/sat (ssat)<br>math/satp (usat)</p>

<p><em>Some particular lookup tables:</em><br><strong>SINE2TINTERP(input,output)</strong> An integer sine function. It calculates sin(input) and stores the result in output variable. It's not a mathematical sine, meaning that both the input and output are scaled: their range goes from -2^31 to 2^31<br><strong>HANNING2TINTERP(input,output)</strong> An integer hanning window function. Calculates the hanning window of the input and stores the result in output variable.<br><strong>MTOF(input,output)</strong> and <strong>MTOFEXTENDED(input,output)</strong> Are used to map a pitch to a phase increment (it's used in oscillators and filters to tune them), but you can use these functions also to drive envelopes.</p>

<p><strong>Examples:</strong><br>math/sin (sine2tinterp)<br>math/cos (sine2tinterp)<br>osc/sine (sine2tinterp)<br>math/window (hanning2tinterp)<br>conv/mtof (mtof)<br>filter/vcf3 (mtof)<br>env/ad (mtof)<br>osc/sine (mtofextended)</p>

<p><em>Floating point functions:</em><br><strong>_VSQRTF(input)</strong> calculates the square root of a float variable. <br><strong>Example:</strong> math/sqrt</p>

<hr>

<h2>
<a name="assembly"></a>Assembly functions</h2>

<p>You might wonder where do ___SMMUL, __SSAT and similar come from.<br>The answers can be found here: <a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0553a/CIHJJEIH.html" rel="nofollow">http://infocenter.arm.com/help/topic/com.arm.doc.dui0553a/CIHJJEIH.html</a> (which is the arm cortex m4 instruction set), here: <a href="https://github.com/axoloti/axoloti/blob/605c1e9a81843a6b465193e956ae3d2e94596c81/firmware/axoloti_math.h" rel="nofollow">https://github.com/axoloti/axoloti/blob/605c1e9a81843a6b465193e956ae3d2e94596c81/firmware/axoloti_math.h</a> (the definition of some of the math functions) and here: <a href="https://github.com/axoloti/axoloti/blob/605c1e9a81843a6b465193e956ae3d2e94596c81/CMSIS/Include/core_cm4_simd.h" rel="nofollow">https://github.com/axoloti/axoloti/blob/605c1e9a81843a6b465193e956ae3d2e94596c81/CMSIS/Include/core_cm4_simd.h</a> (the definition of other math functions)</p>

<p>Not all assembly functions are available to use, because they are not inserted in math.h and core_cm4_simd.h (which are those two includes i linked above), but don't worry: most of the time you can do everything with C.<br>However, sometimes you can take advantage of specific functions that do very specific operations (and it's the case of the fixed point math i mentioned above).</p>

<hr>

<h2>
<a name="bitwise"></a>## Bitwise operations</h2>

<p></p><pre><code class="lang-auto">int32_t A = 101;
int32_t B = -394;</code></pre>

<p>These two numbers correspond to the binary</p>

<pre><code>A = 00000000 00000000 00000000 01100101
B = 11111111 11111111 11111110 01110110</code></pre>

<p><strong>Bitwise negation: ~a</strong> (you can write the tilde pressing alt + 126) <br>Every bit is negated (it's switched with its opposite)<br></p>

<p></p><pre><code class="lang-auto">int32_t C = ~A;
int32_t D = ~B;</code></pre>

<p>Will output these two numbers: </p>

<pre><code>C = 11111111 11111111 11111111 10011010 = -102
D = 00000000 00000000 00000001 10001001 = 393</code></pre>

<p><strong>Bitwise and: a&amp;b</strong><br>This operation is performed between two variables (they should have the same size!)<br>An and operation between two bits outputs 1 if and only if both bits are set to 1, otherwise it will output 0:<br>0 &amp; 0 = 0<br>0 &amp; 1 = 0<br>1 &amp; 0 = 0<br>1 &amp; 1 = 1<br>This is done for every bit of the two words<br></p>

<p></p><pre><code class="lang-auto">int32_t E = A &amp; B;</code></pre>

<p>Will output </p>

<p><code>E = 00000000 00000000 00000000 01100100 = 100</code></p>

<p><strong>Bitwise or: a|b</strong><br>This operation is performed between two variables (they should have the same size!)<br>An or operation between two bits outputs 0 if and only if both bits are set to 0, otherwise it will output 1;<br>0 | 0 = 0<br>0 | 1 = 1<br>1 | 0 = 1<br>1 | 1 = 1<br>This is done for every bit of the two words<br></p>

<p></p><pre><code class="lang-auto">int32_t F = A | B;</code></pre>

<p>Will output </p>

<p><code>F = 11111111 11111111 11111110 01110111 = -393</code></p>
            </blockquote>
            <p>Posts: 5</p>
            <p>Participants: 3</p>
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/coding-axoloti-objects/2606">Read full topic</a></p>
          ]]></description>
          <link>http://community.axoloti.com/t/coding-axoloti-objects/2606</link>
          <pubDate>Mon, 05 Dec 2016 22:44:18 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">community.axoloti.com-topic-2606</guid>
          <source url="http://community.axoloti.com/t/coding-axoloti-objects/2606.rss">Coding axoloti objects</source>
        </item>
        <item>
          <title>Recovering objects for broken patches</title>
          <dc:creator><![CDATA[@thetechnobear Mark Harris]]></dc:creator>
          <category>User Guide</category>
          <description><![CDATA[
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/thetechnobear">@thetechnobear</a> wrote:</p>
            <blockquote>
              <p>a recent topic on this forum has been discussing how to cope with objects changing in the community library.</p>

<p>imagine this scenario:<br>you are using an object from the community library , and the contributor changes the way it works , or sounds.<br>such that when you sync the community library, your existing patch behaves/sound differently.<br>you have a gig tonight, so you need the patch to run again... and you dont have time to work out the impact of the changes the contributor has made, you need a fix...</p>

<p>this video details a way that you can retrieve the previous version of the object, so that patch can work again, and you can then take appropriate action.</p>

<div class="lazyYT" data-youtube-id="RE4UOyl5PkA" data-youtube-title="Axoloti: recovering objects" data-width="480" data-height="270" data-parameters="feature=oembed&amp;wmode=opaque"></div>

<p>please note this is for 1.0.11+</p>

<p>we are working on a different solution for the next major release (no date yet!), which will mean the above is unnecessary.<br>but I thought its useful to have a documented workaround for now <img src="//community.axoloti.com/images/emoji/emoji_one/slight_smile.png?v=3" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
            </blockquote>
            <p>Posts: 4</p>
            <p>Participants: 1</p>
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/recovering-objects-for-broken-patches/2533">Read full topic</a></p>
          ]]></description>
          <link>http://community.axoloti.com/t/recovering-objects-for-broken-patches/2533</link>
          <pubDate>Tue, 15 Nov 2016 18:04:21 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">community.axoloti.com-topic-2533</guid>
          <source url="http://community.axoloti.com/t/recovering-objects-for-broken-patches/2533.rss">Recovering objects for broken patches</source>
        </item>
        <item>
          <title>Running multiple versions of Axoloti</title>
          <dc:creator><![CDATA[@thetechnobear Mark Harris]]></dc:creator>
          <category>User Guide</category>
          <description><![CDATA[
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/thetechnobear">@thetechnobear</a> wrote:</p>
            <blockquote>
              <p>Axoloti supports the ability to run multiple versions of axoloti (e.g. 1.0.10 and 1.0.11) side by side.<br>(this is available for axoloti 1.0.10 and above)</p>

<p>This can be extremely useful when a new version is released, so you can check Axoloti works on your machine, before you 'commit' to upgrading. so you can run it side by side for a few days/weeks.</p>

<p>This also helps us (developers) it much better that if the new version does not work on your computer , that you keep it installed so we can work with you to resolve the issue, and ask questions (e.g. logs) ... but of course, we understand you need to have a working version available .. so its a win-win <img src="/images/emoji/emoji_one/slight_smile.png?v=2" title=":slight_smile:" class="emoji" alt=":slight_smile:"> </p>

<p>The main issue for axoloti to doing this is that it uses one 'document' folder to store its settings and also libraries, which are not 'forwards compatible' (e.g. a 1.0.9 object will work in 1.0.10 , but not in 1.0.8) </p>

<p>to solve this, we introduced 'versioned home directories'</p>

<p>so, by default, axoloti will look for its home directory in ~/Documents/axoloti ( and the windows/linux equivalent)</p>

<p>but now you can create a version specific home by placing the version number at the end, <br>(note the name convention is very important!)<br>so for 1.0.10 this would be <br>~/Documents/axoloti_1_0_10 (again, similar on windows)</p>

<h2>how do you use this.</h2>

<p>there are a number of ways, but the easiest is:</p>

<p>a) before you installed the new version (e.g. 1.0.11) first rename the application (app folder in windows), <br>so on a Mac I rename<br>Axoloti.app to Axoloti-1.0.10</p>

<p>(the name isn't actually used, as the Axoloti knows its version, but I find it useful to use the version number) </p>

<p>b) Duplicate you axoloti home folder and rename to the version number of the existing app<br>so on a mac , I rename<br>~/Documents/axoloti to ~/Documents/axoloti_1_0_10 <br>(the name is <em>critical</em>) </p>

<p>if you restart axoloti, in the console it will say something about upgrading to version home.<br>and importantly you will see the search path all now have the new folder detailed.</p>

<p>c) now you can install the new version of axoloti<br>it will use ~/Documents/Axoloti </p>

<h2>Notes:</h2>

<ul>
<li>currently the runtime is compatible with new and old versions so no extra steps are required, but this can be set in preferences if they diverged (unlikely!)</li>
<li>the version directory, is derived from the version compiled into the app (as noted in the about box etc), it is unrelated to the application name, so the application name is unimportant for this to work.</li>
<li>since the axolotis use different directories for home they are 'unconnected' so things do not get transferred.</li>
</ul>

<h2>Tips</h2>

<p>what I actually do is when I install axoloti is immediately go through steps a) and b)<br>so I now have <br>~/Documents/axoloti_1_0_10 &amp; Axoloti-1-0-10.app<br>~/Documents/axoloti_1_0_11 &amp; Axoloti-1-0-11.app<br>this just helps me keep track of what version I'm using, and also helps my testing etc.</p>

<p>the two (or more version) you use of axoloti are 'independent', this ensure things will always work.<br>so what does this mean if your are working on patching/objects</p>

<p>I would recommend you do most of your work on the version that is <strong>stable</strong>, usually the latest. as you will not be able to load a patch/object that is produced by a new version of the patcher!</p>

<p>what this means is... if you have an issue with the latest version of axoloti, keep it installed alongside the old version. <br>report the issue, and work with us to resolve the issue. but you can continue to use the old version.<br>THEN when we release a bug fix, you can install the new version, and test it, by again duplicating the axoloti home folder you have been working in (with the 'stable' version')</p>
            </blockquote>
            <p>Posts: 2</p>
            <p>Participants: 2</p>
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/running-multiple-versions-of-axoloti/2190">Read full topic</a></p>
          ]]></description>
          <link>http://community.axoloti.com/t/running-multiple-versions-of-axoloti/2190</link>
          <pubDate>Thu, 01 Sep 2016 17:11:15 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">community.axoloti.com-topic-2190</guid>
          <source url="http://community.axoloti.com/t/running-multiple-versions-of-axoloti/2190.rss">Running multiple versions of Axoloti</source>
        </item>
        <item>
          <title>Using custom firmware</title>
          <dc:creator><![CDATA[@thetechnobear Mark Harris]]></dc:creator>
          <category>User Guide</category>
          <description><![CDATA[
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/thetechnobear">@thetechnobear</a> wrote:</p>
            <blockquote>
              <h2>Overview</h2>

<p>The Axoloti application contains everything need to install a custom version of the firmware used on the board.</p>

<p>This post covers how to installing custom version of the firmware, and also how to revert the firmware to the current firmware released with the Axoloti software.</p>

<h2>Notes</h2>

<ul>
<li>Firmware is often updated with newer releases of Axoloti, so you may need to keep your custom software up to date.<br>(so if you update axoloti to a new version and your custom firmware stops working, try to recompile, and if that doesnt work, then try to revert to the factory firmware... it may be the custom firmware needs updating)</li>
<li>When you install new firmware, you always need to recompile patches (they dont change, but they just need to be re-compiled), this is important particularly important to remember if you have uploaded patches to your SD card.</li>
</ul>

<h2>Installing custom software</h2>

<p>I assume your axoloti is turned on, and working ok <img src="/images/emoji/emoji_one/smile.png?v=0" title=":smile:" class="emoji" alt=":smile:"> <br>a) place the custom firmware directory wherever you want. (I usually put it in my axoloti home folder)  </p>

<p>b) in preferences, change the <strong>firmware directory</strong>, to point to where you have placed the firmware, press ok etc.<br>(i.e. select the directory... not a file)<br><div class="lightbox-wrapper"><a data-download-href="//community.axoloti.com/uploads/default/94ca670842d43c00dfeac50d497beba67c848587" href="//community.axoloti.com/uploads/default/original/2X/9/94ca670842d43c00dfeac50d497beba67c848587.png" class="lightbox" title="Screen Shot 2016-04-12 at 01.05.10.png"><img src="//community.axoloti.com/uploads/default/optimized/2X/9/94ca670842d43c00dfeac50d497beba67c848587_1_690x136.png" width="690" height="136"><div class="meta">
<span class="filename">Screen Shot 2016-04-12 at 01.05.10.png</span><span class="informations">892x176 17.3 KB</span><span class="expand"></span>
</div></a></div></p>

<p>c) EXIT AXOLOT UI and then RESTART UI (this is needed to get the new options below)</p>

<p>d) you will get some warnings about the firmware not existing, needing to be compiled -  dont panic <img src="/images/emoji/emoji_one/smile.png?v=0" title=":smile:" class="emoji" alt=":smile:"> <br>there are now new options  on the flash menu, as below...</p>

<p> <img src="//community.axoloti.com/uploads/default/original/2X/4/478a432256f9c17fec5c9a5fba055dd2f5bc437b.png" width="503" height="273">also the title bar will say (developer)</p>

<p>e) choose Board-&gt;Firmware-&gt;Compile ... then you will see the firmware compiling, if an error , check you setup the firmware location correctly</p>

<p>f) choose Board-&gt;Firmware-&gt;Flash(User)<br>this will do the normal flashing of the axoloti board, that you are used to.</p>

<p>ok, your done... now we test the firmware to see if its working...</p>

<h2>Restoring factory firmware</h2>

<p>restoring is is trivial<br>a) select board-&gt;firmware-&gt;flash (i.e. first option)<br>b) this will automatically flash the board again with the current 'factory' firmware<br>it will also automatically, set your preferences to point back to the factory firmware <br>c) exit axoloti UI, restart UI ... the extra menu options will have magically vanished again <img src="/images/emoji/emoji_one/boom.png?v=0" title=":boom:" class="emoji" alt=":boom:"></p>

<p>Note: restoring does not delete the firmware directory, so you can easily go back to it again.</p>

<p>thats it your back to where you started...</p>

<h2>Developers</h2>

<p>The axoloti software includes all the current source for the firmware, so if you want to try it out, you don't have to go to github to get the source, you will find the firmware in the location specified in the preferences dialog. simply copy it, to a new location,<br><strong>However</strong>, since you will need to possibly update your firmware as axoloti is updated. I would strongly recommend you fork the axoloti repository, and create a new branch with your firmware changes. Then when axoloti is updated, you can pull the changes, and merge them into your branch (and obviously re-test) and release.<br>Note: for more info on git forking/merging , I refer you to the internet <img src="/images/emoji/emoji_one/wink.png?v=0" title=":wink:" class="emoji" alt=":wink:"></p>
            </blockquote>
            <p>Posts: 1</p>
            <p>Participants: 1</p>
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/using-custom-firmware/1486">Read full topic</a></p>
          ]]></description>
          <link>http://community.axoloti.com/t/using-custom-firmware/1486</link>
          <pubDate>Tue, 12 Apr 2016 09:57:17 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">community.axoloti.com-topic-1486</guid>
          <source url="http://community.axoloti.com/t/using-custom-firmware/1486.rss">Using custom firmware</source>
        </item>
        <item>
          <title>Official Pin Outs revised (work in progress)</title>
          <dc:creator><![CDATA[@Illuminate]]></dc:creator>
          <category>User Guide</category>
          <description><![CDATA[
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/illuminate">@Illuminate</a> wrote:</p>
            <blockquote>
              <p>I'll be working on revising this post here, I was going to write it in a text document but realized it would be easier for me to get all the images if I just made it here. I was looking for a a save feature so I could wait to post until complete but could not find it. So please note this is all a work in progress and NEEDS further revision/information.</p>

<h3>GPIO Overview</h3>

<p><div class="lightbox-wrapper"><a href="//community.axoloti.com/uploads/default/original/2X/2/2af0b88c77049eb54445f4d9d7c7910561c12247.jpg" class="lightbox" title="2af0b88c77049eb54445f4d9d7c7910561c12247.jpg"><img src="//community.axoloti.com/uploads/default/original/2X/2/2af0b88c77049eb54445f4d9d7c7910561c12247.jpg" width="690" height="487"><div class="meta">
<span class="filename">2af0b88c77049eb54445f4d9d7c7910561c12247.jpg</span><span class="informations">842x595</span><span class="expand"></span>
</div></a></div></p>

<h3>VDD versus VDDA versus VDDC</h3>

<ul>
<li>
<strong>VDD</strong> is the digital 3.3V supply, use it to power external logic</li>
<li>
<strong>VDDA</strong> is the analog reference for the microcontroller adc and dac  (gpio/in/analog and gpio/out/analog). It is 3.3V derived from vdd with a simple ferrite+bypass cap. If you connect potentiometers to gpio, vdda <br>is the best reference. </li>
<li>
<strong>VDDC</strong> is the supply for the audio adc/dac. Also 3.3V, but it has a separate linear regulator from +5V."  on the current schematic "AVDD of U3 seems to be connected to VDDA in the schematic, but it really is connected to VDDC, not to VDDA." </li>
</ul>

<h3>Connecting sensors/actuators directly to GPIO's:</h3>

<p><div class="lightbox-wrapper"><a href="//community.axoloti.com/uploads/default/original/1X/19565dc4d8f9ebd67b5812985ec4cdaf0a1726c9.png" class="lightbox" title="19565dc4d8f9ebd67b5812985ec4cdaf0a1726c9.png"><img src="//community.axoloti.com/uploads/default/original/1X/19565dc4d8f9ebd67b5812985ec4cdaf0a1726c9.png" width="690" height="470"><div class="meta">
<span class="filename">19565dc4d8f9ebd67b5812985ec4cdaf0a1726c9.png</span><span class="informations">2358x1609</span><span class="expand"></span>
</div></a></div></p>

<p>Recommended pots 10k-50k</p>

<p>Useful Links:<br>* <a href="http://www.axoloti.com/examples/general-input-and-output/" rel="nofollow">in and out examples</a><br>* <a href="https://github.com/HerrPaule/Euxoloti.git" rel="nofollow">Paul's Illustrator File for ins and Outs</a><br>* <a href="http://www.axoloti.com/wp-content/uploads/2013/12/axoloti-core-sch-v10.pdf" rel="nofollow">Schematics</a> (need updating see note about VDDC connected to AVDD of U3) </p>

<h3>Connecting gear with higher voltage levels, like Eurorack</h3>

<p>Circuit Examples for Ins and Outs with gear using other voltage levels. (assume I know nothing and always double check before attempting this stuff, take no responsibility for damaged gear!)</p>

<p>from <a class="mention" href="/users/kassu">@kassu</a> axolti DAC out offset and amplified for -4.95 to 5.55v</p>

<p><img src="//community.axoloti.com/uploads/default/original/2X/8/8a20420e1c3d57f4020cc090ecca6dc0453e6dcd.png" width="645" height="355"></p>

<p>inputs using rail to rail op amp to clip down to 3.3V. Note: inverts the signal.<br><div class="lightbox-wrapper"><a data-download-href="//community.axoloti.com/uploads/default/723bf038ec0941a43b6ebd3d602ddbad2fa33418" href="//community.axoloti.com/uploads/default/original/2X/7/723bf038ec0941a43b6ebd3d602ddbad2fa33418.png" class="lightbox" title="Bipolar-input-3.3V.png"><img src="//community.axoloti.com/uploads/default/optimized/2X/7/723bf038ec0941a43b6ebd3d602ddbad2fa33418_1_690x281.png" width="690" height="281"><div class="meta">
<span class="filename">Bipolar-input-3.3V.png</span><span class="informations">708x289 7.59 KB</span><span class="expand"></span>
</div></a></div></p>

<p>Note: bypass caps between + power and ground and - power and ground is very helpful when working with eurorack power especially if it is on flying by boards.</p>

<h3>The 5- and 7-pin headers (X3 and X4)</h3>

<p>They are reserved for future expansions, using them will likely conflict with official future expansions.<br>They're designed to allow linking multiple boards together, exchanging multi-channel digital audio between them. Ongoing development....</p>

<h3>What do the "R T S R T S..." pads mean?</h3>

<p>They're a sort of hack-patchbay between the actual headphone, line-out, line-in jacks and the rest of the circuit. There are two rows of pads, the row closest to the connectors connects to the connectors, the other row connects to the circuit. These two rows are connected with a small trace on the backside. By cutting that trace, you can re-purpose the on-board jack to something else, while breaking out the signal to an external connector or circuit.<br>'R' 'S' and 'T' mean ring (right), tip (left) and sleeve (ground), and the three groups correspond to headphone, line out, and line in.</p>

<p><strong>Applications:</strong><br>* <a href="//community.axoloti.com/t/add-volume-potentiometers/1134">adding volume potentiometers</a><br>* split out the stereo jacks into dual mono<br>* convert the line input jack into an expression pedal input<br>* add a true bypass circuit for stompbox applications</p>

<h3>JP1</h3>

<p>Is for in-circuit-debugging, some developers use this while developing firmware and diagnosing complex issues. <a href="//community.axoloti.com/t/low-level-firmware-debugging-via-swd/275">Setup guide</a>.</p>

<h3>JP2, JP3, Cutting the board</h3>

<p>There are some slots in the board, to make it easier to reduce the size of Axoloti Core if required. If you do not need MIDI and DC power input, Axoloti Core works without that part. Or you can re-connect both parts together. Some mounting holes line up, allowing to sandwich-mount both parts with M3 spacers.<br>Don't just break the board by bending, cut along the slots with a small iron saw, or use a sharp snap-blade knife to score the circuit board, cut many times on the same line, and develop a v-shaped groove. Cutting circuit board makes a knife dull pretty fast... Once you have developed a deep v-shaped groove, you can snap the part.<br>JP2/JP3 legend: <img src="//community.axoloti.com/uploads/default/optimized/2X/d/d3caa27d2e2236f06b06ae7589ea7c6cd868dd7c_1_367x500.png" width="367" height="500"></p>

<h3>Adding bias to connect Electret-type microphones directly</h3>

<p><a href="//community.axoloti.com/t/understanding-micbias-axo-fix/1332">discussion topic</a></p>
            </blockquote>
            <p>Posts: 2</p>
            <p>Participants: 2</p>
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/official-pin-outs-revised-work-in-progress/1284">Read full topic</a></p>
          ]]></description>
          <link>http://community.axoloti.com/t/official-pin-outs-revised-work-in-progress/1284</link>
          <pubDate>Mon, 14 Mar 2016 12:43:19 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">community.axoloti.com-topic-1284</guid>
          <source url="http://community.axoloti.com/t/official-pin-outs-revised-work-in-progress/1284.rss">Official Pin Outs revised (work in progress)</source>
        </item>
        <item>
          <title>Installing Axoloti on an &#39;Unsupported&#39; Platform</title>
          <dc:creator><![CDATA[@thetechnobear Mark Harris]]></dc:creator>
          <category>User Guide</category>
          <description><![CDATA[
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/thetechnobear">@thetechnobear</a> wrote:</p>
            <blockquote>
              <p>(THIS POST IS NOT COMPLETE YET, <br>Id be happy for contributions... intention is to outline possible issues, and the process of using on an unsupported platform<br>)</p>

<p>Axoloti is 'supported' on various versions of Windows/Mac OSX/Linux.<br>We often get questions about if, or how to run it on other platforms or versions.<br>e.g. earlier versions of windows/mac  or different Linux distros.</p>

<p>The short answer is yes it can, its cross-platform, but it involves varying degrees of effort... this post aims to highlight some of the issues, and complications, and help users decide if they wish to undertake it, and what is possibly involved.<br>(note: Im going to assume some knowledge of build tools etc)</p>

<p>First, the reason why we have supported versions.<br>The reality is, Axoloti is cross platform, notionally the same code runs on Windows/OS X/Linux, so its adaptability is already 'built-in', the 'issue' is all platforms require small adaptations (which this post will discuss).<br>only running and testing on a particular version, can we know what is required, exactly what library versions are used and their dependencies. i.e. we narrow down the possibilities immensely.<br>so this is the main reason we have supported versions... we can only test and bug fix for a certain number of setups - even the number we already support is a major effort.<br>so we understand people use different versions of Linux, and earlier versions of OSX/Windows but testing them all is impossible.</p>

<p>Ok, so the bad news, is we can offer limited support... but the good news is its quite possible, and is something the community can do and help out on. <br>so lets look at how, and what the issues are:</p>

<p>There are 4 major areas of software in the axoloti install<br>- USB support in the operating system/drivers<br>- the Patcher, the JAVA UI<br>- the software that transfers the patches (part of patcher)<br>- the cross compiler</p>

<p>if on your target platform you can install EXACTLY the same version of the above software then it should work, the troubles begin when you can't. any differences in version <strong>could (not will)</strong> mean it won't work, or some oddity, unpredictable behaviour.</p>

<p>so the way to begin, is to look at the build script for your platform (e.g. platform_linux/build.sh) , carefully look at what software is downloaded and installed (and patched!), and also the versions used.</p>

<p><strong>USB support</strong> <br>Before we even start looking at axoloti software, we must look at the software that is provided by the operating system (or 3rd parties in the case of drivers) to drive the hardware. if you cant get this working there is little/no-point continuing.</p>

<p>The Axoloti firmware supports too modes, and will in each will expose a different USB interface<br>- normal mode<br>- DFU mode</p>

<p>Normal mode<br>this exposes a composite interface comprising a class compliant MIDI interface and a 'custom' binary interface. the first is used for midi (obviously) , the later is used for communicating with the patcher UI directly e.g. transferring patches,  parameter changes)</p>

<p>DFU mode (Rescue mode) <br>this is the provided by STM, its what you get with a discovery board etc to program it.<br>this follows its own protocol, and you can use dfu-util to flash with it.<br>we call it rescue mode, and (theoretically!) its impossible to disable/corrupt it, as you are not able to override its operation (or at least none of the Axoloti code attempts to do so) <br>this software will be discussed more below</p>

<p>Nothing much more to say about this, except some platforms may need configuring in different ways to use these usb interfaces, e.g. Windows needs drivers installed, Linux needs permissions added, and a relevant kernel/user module.<br>This is probably the first thing you should check when you look to a new platform.<br>Simply, can the Axoloti be 'seen' in both modes, if not, then that is your first task!<br>(whilst dfu mode is not vital, if you start having issues, it can be invaluable when testing the firmware upload process if you have issues with java) </p>

<p><strong>Patcher - Java</strong><br>Java is cross-platform, so usually you can install it without issue (e.g. 32 or 64 bit), but there are MANY versions of Java, we support version 1.8. you may find some platforms only support earlier versions.<br>many earlier versions (must have Swing, otherwise forget it!) WILL work, as long as you accept some limitations... the java api is 'relatively' stable, which means the code will likely compile (or with minor changes) on earlier versions, but each version introduces bug fixes, in particular in the UI area. so its quite possible/likely you will get graphical anomalies - how severe and if you can work around, you will not know until you try it.<br>(and we won't add workarounds to public source, it complicates the code too much, and introduces other bugs)</p>

<p>Java and Linux<br>Linux and Java are a bit 'odd', the support is a bit patchy, with different window managers working better or worst, and there being an open-idk vs the oracle official jdk. again usually the 'oddities' and bugs appear in the UI area, often just as 'annoyances' e.g. window placement, redrawing.<br>(probably worth remembering Windows/OSX also have been through this pain in the early days, but Java/Oracle obviously had very strong incentives to fix these issues)</p>

<p><strong>Transferring Patches</strong><br>This can actually be done in two ways<br>the 'normal' way is via the Patcher, this is using external libraries in particular libusb, it uses the normal libusb library and then a java wrapper. (JNI)<br>command line tools e.g. dfu-util, which again uses libusb, this libusb needs to be patched.</p>

<p>(add some details here of difference between rescue mode and java mode and how java mode transfers to ram first ... also where failure are, and what the 'effect' is)</p>

<p><strong>Cross compiler</strong><br>The cross compiler is used for building 3 bits of software<br>- firmware <br>- boot loader<br>- patch</p>

<p>the compiler is really 2 parts, gnu make and GCC , the later is GCC for targeting the embedded arm platform (gcc comes in many variants).<br>the build is normally triggered from the java ui (via system commands, so it just sets up an environment), but can also be called from the command line. (see platform directory)</p>

<p>(more details of whats required, what can go wrong, relationship between firmware,boot loader and patch)</p>
            </blockquote>
            <p>Posts: 1</p>
            <p>Participants: 1</p>
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/installing-axoloti-on-an-unsupported-platform/861">Read full topic</a></p>
          ]]></description>
          <link>http://community.axoloti.com/t/installing-axoloti-on-an-unsupported-platform/861</link>
          <pubDate>Sun, 10 Jan 2016 13:33:34 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">community.axoloti.com-topic-861</guid>
          <source url="http://community.axoloti.com/t/installing-axoloti-on-an-unsupported-platform/861.rss">Installing Axoloti on an &#39;Unsupported&#39; Platform</source>
        </item>
        <item>
          <title>Creating AXO objects</title>
          <dc:creator><![CDATA[@alex alex]]></dc:creator>
          <category>User Guide</category>
          <description><![CDATA[
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/alex">@alex</a> wrote:</p>
            <blockquote>
              <p><strong>Objects 101</strong></p>

<p><em>Object/XML overview</em></p>

<p>An object in Axoloti is an <em>.axo</em> file, which stores the object definition (like the name, a unique ID, inlets &amp; outlets ) and some code. </p>

<p><strong>XML</strong><br>The code and object definitions are combined as an <a href="http://www.w3schools.com/xml/xml_whatis.asp" title="XM">XML</a> file and therefore every XML tag needs to be closed properly in order to function correctly. </p>

<p>XML tag with content: <img src="//community.axoloti.com/uploads/default/original/1X/bd246d24773f6b3b187c3f313e7a9a25f367364d.png" width="261" height="17"> <br>Empty XML tag: <img src="//community.axoloti.com/uploads/default/original/1X/db000f2d5f72fb9f203d472bbe1f049c8c87e048.png" width="104" height="16"> <br>Note that tags can <em>not</em> be left empty like this: <img src="//community.axoloti.com/uploads/default/original/1X/4bdf2f8fc81313a6d86b2f5af390a78043bb8966.png" width="160" height="18"> <br>Some tags may be left out, but some are mandatory.<br>An XML tag can have <em>attributes</em> . Some of the (mandatory) attributes used in Axoloti objects  are <strong>id</strong>, <strong>uuid</strong> and <strong>sha</strong>  , and in the inlets and outlets sections you'll find things like <strong>name</strong> and <strong>description</strong>,</p>

<p>In XML the <em>content</em> (= data between tags) can not contain certain characters, these are:  <strong>" ' &lt; &gt; &amp;</strong> <br>The work-around for this is to use <strong>CDATA</strong>  formatting, which means that the data in between these tags is <em>content</em> , and not part of a tag. </p>

<hr>

<p><strong>Object Skeleton</strong><br>This is a definition of a empty Axoloti object:<br></p>

<p></p><pre><code class="lang-auto">&lt;objdefs&gt;
   &lt;obj.normal 
         id="uniqueID" 
         uuid="2ae01ff03753539d9028888689654235fa199936" 
         sha="ae685c109e202b4739b3022d59a891becf60f349"&gt;
      &lt;upgradeSha&gt;26b0e9ebf07d4a6d8f04db3682899c48c85cc389&lt;/upgradeSha&gt;
      &lt;sDescription&gt;Some description&lt;/sDescription&gt;
      &lt;author&gt;AuthorName&lt;/author&gt;
      &lt;license&gt;LicenceType&lt;/license&gt;
      &lt;helpPatch&gt;helpfile.axh&lt;/helpPatch&gt;

      &lt;inlets/&gt;
      &lt;outlets/&gt;
      &lt;displays/&gt;
      &lt;params/&gt;
      &lt;attribs/&gt;
      &lt;includes/&gt;

      &lt;code.declaration&gt;&lt;![CDATA[
      ]]&gt;&lt;/code.declaration&gt;
      
      &lt;code.init&gt;&lt;![CDATA[
      ]]&gt;&lt;/code.init&gt;      

      &lt;code.krate&gt;&lt;![CDATA[
      ]]&gt;&lt;/code.krate&gt;

      &lt;code.srate&gt;&lt;![CDATA[
      ]]&gt;&lt;/code.srate&gt;

      &lt;code.midihander&gt;&lt;![CDATA[
      ]]&gt;&lt;/code.midihander&gt;
   &lt;/obj.normal&gt;
&lt;/objdefs&gt;</code></pre>

<p><strong>id</strong>: a unique name for your object. <br><strong>uuid</strong> ,  <strong>sha</strong> : a unique ID (SHA1) .  If the ID already exists , or when it has not the correct value, Axoloti will suggest the correct value when reloading the objects (File &gt; Reload Objects).</p>

<p><strong>inlets</strong> , <strong>outlets</strong> simply define the inputs and outputs of your object. </p>

<p></p><pre><code class="lang-auto">&lt;inlets&gt;
    &lt;frac32 name="in" decription="in" /&gt;
&lt;/inlets&gt;
&lt;outlets&gt;
    &lt;frac32 name="out" decription="out" /&gt;
&lt;/outlets&gt;</code></pre>

<p>Inlets and outlets have a name, can have a description and have a numeric type (tagname).</p>

<p><strong>Parameters</strong></p>

<p></p><pre><code class="lang-auto">    &lt;params&gt;
       &lt;frac32.s.map name="value"/&gt;
    &lt;/params&gt;</code></pre>

<p>generates this dial:<br><img src="//community.axoloti.com/uploads/default/original/1X/d0e9b4d382a058e0c8bd2d50472c98bf4bdebbd3.png" width="70" height="84"> </p>

<p>Some parameter types employ a "pfunction", to scale/map/warp a linear parameter space into a range (-64...64) that can be more directly used by the dsp function. </p>

<p>All parameters result in a 32 bit type.</p>

<p><strong>Displays</strong><br>The definitions in the Displays section will show up as data visualizers in the GUI, only reading back from patch to GUI. The value of a Display element can not be changed by the GUI.</p>

<p></p><pre><code class="lang-auto">&lt;displays&gt;
    &lt;frac32.s.dial name="v" noLabel="true"&gt;
&lt;/displays&gt;</code></pre>

<p><strong>attribs</strong> <br>The definitions in the Attributes section are used to define constant values or strings (like table name ) <br>Attributes are known at compile time.</p>

<p></p><pre><code class="lang-auto">&lt;attribs&gt;
   &lt;spinner name="delay" MinValue="1" MaxValue="10000" DefaultValue="100"/&gt;
&lt;/attribs&gt;</code></pre>

<p>results in :<br><img src="//community.axoloti.com/uploads/default/original/1X/edcc9da42352ffca67103855899dd39f7a96c270.png" width="81" height="26"> <br>In the code section the attribute can be used by adding the prefix attr_ , so in this example that would be <em>attr_delay</em></p>

<p><strong>Types</strong><br>int32<br>bool32<br>frac32<br>frac32buffer<br>[...]</p>

<hr>

<p><strong>Code Sections</strong><br>This is where the actual code lives. </p>

<p>There are three code sections : <br><strong>code.krate</strong>  : control rate, 3000Hz<br><strong>code.srate</strong>  : audio rate ,  48000Hz<br><strong>code.midihandler</strong><br>Code sections can be used together, or left out</p>

<blockquote><p>Sample rates are defined in the firmware <em>app/firmware/axoloti_defines.h</em><br>The sample rate is defined by the macro SAMPLERATE.<br>The number of audio samples corresponding to one control rate sample is defined by the macro BUFSIZE , so a buffersize  16 results a krate of 48000/16 = 3000.</p></blockquote>

<p>This example code simply adds the value of <em>in2</em>  to  <em>in1</em> , and send it to <em>out</em>  (3000 times per second): <br><img src="//community.axoloti.com/uploads/default/original/1X/b722c8fd81b2a9c20a9761306e269460271d9b12.png" width="360" height="55"> <br>Note that the names are prefixed with <strong>inlet_</strong> and <strong>outlet_</strong> , this means they were defined in the outlet/inlet section of the XML. </p>

<blockquote><p>If you look at existing objects, you'll notice a lot of operators. If you're not familiar with C syntax, this list might be useful: <a href="http://www.tutorialspoint.com/cprogramming/c_operators.htm" title="C operators">C operators</a>   </p></blockquote>

<p><strong>declaration , init</strong><br>Sometimes the values used in the code need to be declared and initialized.<br>This is where the <strong>code.declaration</strong> and <strong>code.init</strong> sections are for.<br><img src="//community.axoloti.com/uploads/default/original/1X/8b71aa0d8279b288ffecb0fc8a6800c5e2dbc493.png" width="251" height="146"> <br>This is code is only executed once, when the program starts.</p>

<hr>

<p>Next: <br><strong>102 creating a first object</strong></p>
            </blockquote>
            <p>Posts: 2</p>
            <p>Participants: 1</p>
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/creating-axo-objects/481">Read full topic</a></p>
          ]]></description>
          <link>http://community.axoloti.com/t/creating-axo-objects/481</link>
          <pubDate>Sun, 20 Sep 2015 17:36:24 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">community.axoloti.com-topic-481</guid>
          <source url="http://community.axoloti.com/t/creating-axo-objects/481.rss">Creating AXO objects</source>
        </item>
        <item>
          <title>Axoloti error codes</title>
          <dc:creator><![CDATA[@thetechnobear Mark Harris]]></dc:creator>
          <category>User Guide</category>
          <description><![CDATA[
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/thetechnobear">@thetechnobear</a> wrote:</p>
            <blockquote>
              <p>This topic will details error codes that you may encounter when using axoloti.</p>

<h1>Control transfer error codes</h1>

<p>When a board disconnects you will often see an error like<br>Control transfer failed: -1</p>

<p>these codes come when we write to USB (from the UI) to the board using libusb with a BulkTransfer() call.</p>

<p>the codes are:</p>

<pre><code>ERROR_IO = -1;
ERROR_INVALID_PARAM = -2;
ERROR_ACCESS = -3;
ERROR_NO_DEVICE = -4;
ERROR_NOT_FOUND = -5;
ERROR_BUSY = -6;
ERROR_TIMEOUT = -7;
ERROR_OVERFLOW = -8;
ERROR_PIPE = -9;
ERROR_INTERRUPTED = -10;
ERROR_NO_MEM = -11;
ERROR_NOT_SUPPORTED = -12;
ERROR_OTHER = -99;
ERROR_COUNT = 14;</code></pre>
            </blockquote>
            <p>Posts: 2</p>
            <p>Participants: 1</p>
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/axoloti-error-codes/402">Read full topic</a></p>
          ]]></description>
          <link>http://community.axoloti.com/t/axoloti-error-codes/402</link>
          <pubDate>Sat, 05 Sep 2015 11:18:40 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">community.axoloti.com-topic-402</guid>
          <source url="http://community.axoloti.com/t/axoloti-error-codes/402.rss">Axoloti error codes</source>
        </item>
        <item>
          <title>Uploading to the Axoloti hardware</title>
          <dc:creator><![CDATA[@thetechnobear Mark Harris]]></dc:creator>
          <category>User Guide</category>
          <description><![CDATA[
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/thetechnobear">@thetechnobear</a> wrote:</p>
            <blockquote>
              <h1>Overview</h1>

<p>In the main user guide, we mentioned that taking a patch live in the Axoloti UI will upload it to the hardware.<br>The Axoloti UI is where you <em>build</em> your patches, but it is not compulsary for <em>using</em> them.<br>In this post we will be discussing how to use patches when not connected to a computer.</p>

<h1>Uploading firmware</h1>

<h2>Live</h2>

<p>When we take a patch 'Live' we are uploading the patch to the Axoloti, and then maintaining a connection with this patch so that the UI can interact with it. e.g. by using the dials with the mouse.</p>

<p>When you open a patch and take it live, you will notice that when closing the UI, the Axoloti will continue running that patch happily.<br>(try it with a sequenced patch like the tybett demo, but it's true for synths etc. as well)</p>

<p>Of course, with the UI closed, you can't control the patch via the UI, but you can still control it from a midi keyboard or controller.</p>

<p>However, you will notice that if you remove the power from the board, and then power it up again, the patch will not restart (i.e. you will have silence).</p>

<h2>Upload to flash memory</h2>

<p>So, how about using the Axoloti board standalone? (e.g. lets say we want to use it as an FX pedal, or a synth controlled via a midi controller.)</p>

<p>To do this, first open the patch as normal (again try the tybett demo).<br>Then, rather than pressing the LIVE button, go to the Board menu and select 'upload to internal flash'.</p>

<p>At this point the patch will be uploaded to the board, and ... nothing will happen <img src="/images/emoji/emoji_one/smile.png?v=0" title=":smile:" class="emoji" alt="smile" width="64" height="64"></p>

<p>Now in order to start the patch without the GUI, power off the board, power it on again, and presto, <br>you should now hear the running patch, and it can be controlled via a midi keyboard/controller.</p>

<h2>Upload to SDCARD as startup</h2>

<p>This is basically the same as uploading to flash memory, but the patch will be stored on your (micro-)SDCARD instead.<br>It will behave the same as with the previous method, starting up as soon as you power up the board.</p>

<p>Once you uploaded a patch with "Upload to flash memory" or "Upload to SDCARD as startup", you can power cycle the board repeatedly and the patch will start each time, without the need for any computer connection.</p>

<p>So how to stop it from starting? <img src="/images/emoji/emoji_one/smile.png?v=0" title=":smile:" class="emoji" alt="smile" width="64" height="64"><br>there are two ways<br>a) connect the Axoloti UI to the board (most common, as you most likely want to upload a new patch!)<br>b) hold down button S1 as you power on the board</p>

<p>The main difference between "Upload to flash memory" and "Upload to SDCARD", is that the latter allows you to store different patches on different SDCARDs so that, depending on the SDCARD you insert, a different patch will be started. <br>By ejecting an SDCARD, the patch will stop, inserting an SDCARD while powered will load the startup patch from it.</p>

<h2>Upload to SDCARD</h2>

<p>This option allows you to upload a patch to an SDCARD, but not to be used as the startup patch.<br>Instead, the patch can then be loaded dynamically by using the patch/load object.</p>

<h2>Uploading samples to SDCARD</h2>

<p>you can also store samples on the SDCARD by using the menu Window-&gt;File Manager.</p>

<p>Note: SDCARD should be FAT formatted</p>
            </blockquote>
            <p>Posts: 1</p>
            <p>Participants: 1</p>
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/uploading-to-the-axoloti-hardware/60">Read full topic</a></p>
          ]]></description>
          <link>http://community.axoloti.com/t/uploading-to-the-axoloti-hardware/60</link>
          <pubDate>Sun, 26 Jul 2015 18:19:12 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">community.axoloti.com-topic-60</guid>
          <source url="http://community.axoloti.com/t/uploading-to-the-axoloti-hardware/60.rss">Uploading to the Axoloti hardware</source>
        </item>
        <item>
          <title>Axoloti Hardware</title>
          <dc:creator><![CDATA[@thetechnobear Mark Harris]]></dc:creator>
          <category>User Guide</category>
          <description><![CDATA[
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/thetechnobear">@thetechnobear</a> wrote:</p>
            <blockquote>
              <h1>Connectors and controls</h1>

<ul>
<li>3.5mm (1/8") mini-jack is a headphone output. Use only for headphones (headphone jack is electrically biased at 1.65V.)</li>
<li>6.35mm (1/4") Stereo connector input and output, (labeled on the backside of the circuit board).</li>
<li>5 pole DIN connectors are MIDI in- and output (labeled on the backside of the circuit board).</li>
<li>micro-sd-card (should be FAT formatted)</li>
<li>micro-usb serves connection for Axoloti software, a power source, and act as a class compliant midi device.</li>
<li>power input: 2.1mm DC socket, accepts 7-15V DC input, center positive plug. This input will take priority over power from the micro-usb socket. </li>
<li>full size USB for hosting midi devices [1]</li>
<li>2 LEDs (LED1: green, LED2: red)</li>
<li>2 micro push buttons (S1 and S2, also labeled on the bottom side)</li>
</ul>

<p>By plugging in the micro usb-connection, the board powers up automatically and will run any patch that has been uploaded to run, either from internal flash memory or as a startup patch from sdcard.</p>

<p>The initialisation starts with the two LEDs flashing alternatingly, and then stops with the green LED illuminated.</p>

<p>[1] currently, only USB class compliant midi devices are supported, see <a href="/t/usb-midi-controllers">USB Midi Controllers</a> or compatibility. These must be inserted directly into the USB host port. USB hubs are not currently supported on the host port.</p>

<h1>Clean start</h1>

<p>Usually the axoloti board will start the patch that has been uploaded to it, as it can run 'standalone'.<br>If you wish to prevent it start this patch</p>

<ul>
<li>power off the board</li>
<li>hold down S2</li>
<li>power up the board</li>
</ul>

<h1>Rescue mode (DFU)</h1>

<p>there is a special recovery mode, called DFU mode, which can be used to reprogram the board in case the normal flashing procedure fails, this is accessed by.</p>

<ul>
<li>power off the board</li>
<li>hold down switch S1... </li>
<li>power up the board - no lights will flash</li>
<li>...now you can release S1</li>
<li>go to Axoloti UI, use Flash (Rescue) </li>
</ul>

<p>Note: you can confirm its in DFU mode, by using Board -&gt; Select Device and you will see its listed as DFU.</p>

<h1>Other hardware specifications</h1>

<ul>
<li>168 MHz STMF427 microcontroller</li>
<li>3.3V signalling voltage on GPIO</li>
<li>256kb SRAM (inside the microcontroller)</li>
<li>1MB Flash (inside the microcontroller)</li>
<li>8MB SDRAM</li>
</ul>

<h1>Audio output limitation</h1>

<p><strong>(v1.0 boards only, fixed in v1.1 boards)</strong><br>from Facebook, regarding audio output, and not using mono plugs:</p>

<blockquote><p>I have discovered one issue in the board design: plugging a mono jack into the stereo output jack (shorting out the right channel) causes serious distortion in the left (mono) channel.</p></blockquote>

<p>It was generally agreed there, that this limitation was preferable to causing considerable delays. </p>

<h1>Power Supply</h1>

<p>Quote from Johannes on topic of power supplies</p>

<blockquote>
<p>The DC barrel jack input uses a switching power supply, allowing a wide input voltage range and is capable of powering a USB device connected to the USB host port that consumes 500mA (the legal maximum for USB).<br>Any supply between 7V and 15V is fine, the current it needs to deliver depends on what you plug into the USB host port. Rough ballpark figures: at 7V, 700mA is fine, at 15V, 250mA is enough. Center pin positive.<br>DC-plug center diameter should be 2.1 mm.<br>(there is also a 2.5mm plug variant, will fit too but maybe bad contact, not recommended)</p>
<p>5V on the DC barrel input is not enough. The editor will show you the actual voltage from the switching power supply. That should not be less than 4.75V.</p>
<p>You can also connect a USB cellphone/tablet-style charger to the micro-usb connector.</p>
</blockquote>
            </blockquote>
            <p>Posts: 2</p>
            <p>Participants: 1</p>
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/axoloti-hardware/59">Read full topic</a></p>
          ]]></description>
          <link>http://community.axoloti.com/t/axoloti-hardware/59</link>
          <pubDate>Thu, 23 Jul 2015 17:23:19 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>Yes</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">community.axoloti.com-topic-59</guid>
          <source url="http://community.axoloti.com/t/axoloti-hardware/59.rss">Axoloti Hardware</source>
        </item>
        <item>
          <title>Quick Start Guide</title>
          <dc:creator><![CDATA[@thetechnobear Mark Harris]]></dc:creator>
          <category>User Guide</category>
          <description><![CDATA[
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/thetechnobear">@thetechnobear</a> wrote:</p>
            <blockquote>
              <h1>Overview</h1>

<p>a few words to get you started quickly</p>

<h1>Software Installation</h1>

<p>Please read the relevant installation topic to help you install the required software to use Axoloti, they contain important information.<br><a href="//community.axoloti.com/t/installing-on-windows">Installing on Windows</a><br><a href="//community.axoloti.com/t/installing-on-mac-os-x">Installing on Mac OS X</a><br><a href="//community.axoloti.com/t/installing-on-linux" title="Installing on Linux">Installing on Linux</a></p>

<h1>Hardware installation</h1>

<ul>
<li>Plug the stereo output (marked output on underside of board) into your speakers/mixer using a stereo 1/4" TRS cable. (do not use a mono cable on v1.0 boards, see <a href="/t/axoloti-hardware">hardware notes</a>) - initially keep volume levels low!</li>
<li>Use the 1/8" mini-jack for headphones only</li>
<li>Plug a USB with a micro USB connection, from your computer into the axoloti board, this will provide both power and communication.<br><strong>many MicroUSB cables are power only and don't carry data, as they are for charging devices - these are NOT suitable for connecting to the computer</strong>
</li>
</ul>

<h1>Enjoy</h1>

<ul>
<li>start up the Axoloti software in your applications</li>
<li>load one of the demos e.g. File -&gt; Library -&gt; Demos -&gt; YouTube -&gt; Tybett</li>
<li>toggle the Live button.</li>
</ul>

<h1>Issues</h1>

<p>if you have troubles installing, please re-read the installation guide to check you have completed all steps.<br>you can also consult the topic -  <a href="/t/common-installation-problems">Common Installation Problems</a></p>

<h1>Explore</h1>

<ul>
<li>read the user guide topics, in this user guide category</li>
<li>have a look at the other resources in Axoloti to help you get started, detailed <a href="//community.axoloti.com/t/patching-resources-and-getting-started">here</a>
</li>
</ul>
            </blockquote>
            <p>Posts: 1</p>
            <p>Participants: 1</p>
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/quick-start-guide/57">Read full topic</a></p>
          ]]></description>
          <link>http://community.axoloti.com/t/quick-start-guide/57</link>
          <pubDate>Thu, 23 Jul 2015 11:10:28 +0000</pubDate>
          <discourse:topicPinned>Yes</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">community.axoloti.com-topic-57</guid>
          <source url="http://community.axoloti.com/t/quick-start-guide/57.rss">Quick Start Guide</source>
        </item>
        <item>
          <title>Installing on Linux</title>
          <dc:creator><![CDATA[@thetechnobear Mark Harris]]></dc:creator>
          <category>User Guide</category>
          <description><![CDATA[
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/thetechnobear">@thetechnobear</a> wrote:</p>
            <blockquote>
              <h1>Normal Installation</h1>

<p>To reduce size we split the application into two parts, the main axoloti application, and a runtime which contains other required files. You must download and install both initially. <br>(Usually updates will only require the main application to be downloaded and installed.)</p>

<ol>
<li>
<strong>download</strong> both <strong>application</strong> bundle and <strong>axoloti_runtime</strong><ul>
<li>go to <a href="http://github.com/axoloti/axoloti/releases">http://github.com/axoloti/axoloti/releases</a> , you will see the 'latest release'</li>
<li>download axo_runtime_linux_(version).tgz</li>
<li>download axoloti_linux_(version).deb</li>
</ul>
</li>
<li>
<p><strong>install axoloti runtime</strong></p>
<ul>
<li>unpack axo_runtime.*.tgz into user home directory e.g. cd ~ ; tar zxvf axoloti_runtime.tgz</li>
<li>you will now have a folder <strong>~/axoloti_runtime/platform_linux</strong>
</li>
</ul>
</li>
<li>
<p><strong>install application</strong> </p>
<ul>
<li>install debian package, using dpkg, e.g. sudo dpkg -i  axoloti_linux_1.012.deb</li>
<li>this will install into /opt</li>
<li>Axoloti app will be on your application menu (may be different on different distros)</li>
</ul>
</li>
<li>
<p><strong>install dependent packages</strong> </p>
<ul><li>using : sudo apt-get install -y lib32z1 lib32ncurses5 lib32bz2-1.0</li></ul>
</li>
<li>
<p><strong>grant permissions for your user to use the USB device</strong></p>
<ul>
<li>make sure the axoloti board is <strong>not</strong> connected</li>
<li>run ~/axoloti_runtime/platform_linux/add_udev_rules.sh</li>
</ul>
</li>
<li><p><strong>Connect Axoloti Core board</strong></p></li>
<li>
<strong>Run Axoloti</strong> application from your menu</li>
</ol>

<p>Thats it your done,<br>Happy patching</p>

<h2>important note</h2>

<p>It appears the runtime no longer contains valid certificates, so you will need to install the java certificates package and then do the following:<br>(this will cause an error in axoloti, see other thread below)</p>

<ul>
<li>stop axoloti ui</li>
<li>start terminal, and enter<ul><li>sudo cp /etc/ssl/certs/java/cacerts /opt/Axoloti/runtime/lib/security/cacerts</li></ul>
</li>
<li>start axoloti</li>
<li>file-&gt;preferences -&gt; reset all</li>
</ul>

<hr>

<h2>Recommended Platform</h2>

<p>Axoloti runs on many platforms and variations, but we are only able to test on limited number of platforms, if you experience issues we recommend the following, as these are our test platforms.</p>

<ul>
<li>Ubuntu Linux 14.04 LTS</li>
<li>OpenJDK Java 1.7</li>
<li>gcc-arm-none-eabi  (&gt; 4.9-2015q2), this needs 32bit libc</li>
</ul>

<h2>Developer Installation (from source)</h2>

<p>If you are a developer and would like to follow the most up to date developments, and perhaps contribute to Axoloti development you can install from the Axoloti github repo</p>

<ul>
<li>clone from github</li>
<li>run build.sh in platform_linux*</li>
<li>run ./Axoloti.sh</li>
</ul>

<p>Note: to create the bundles you will need to install the oracle java 8 Jdk</p>

<p>Notes:<br>* build.sh will install all dependent packages, and assumes these are up to date for your distribution.<br>If you have issues, please check the versions of the dependencies installed.</p>
            </blockquote>
            <p>Posts: 7</p>
            <p>Participants: 2</p>
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/installing-on-linux/56">Read full topic</a></p>
          ]]></description>
          <link>http://community.axoloti.com/t/installing-on-linux/56</link>
          <pubDate>Thu, 23 Jul 2015 10:56:55 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">community.axoloti.com-topic-56</guid>
          <source url="http://community.axoloti.com/t/installing-on-linux/56.rss">Installing on Linux</source>
        </item>
        <item>
          <title>More on Sub Patches</title>
          <dc:creator><![CDATA[@thetechnobear Mark Harris]]></dc:creator>
          <category>User Guide</category>
          <description><![CDATA[
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/thetechnobear">@thetechnobear</a> wrote:</p>
            <blockquote>
              <h1>Overview</h1>

<p>Sub patches are building block patches expected to be used in a main patch. <br>They will normally contain inlets and outlets through which the main patch can send/receive (similar to Reaktors Macros or Max Encapsulations).</p>

<p>As mentioned in the user guide, normally these subpatches are saved as sub patch files AXS, however axoloti also support 'embedded' sub patches, which are stored in the the main patch.</p>

<h1>Subpatch file (AXS)</h1>

<p>There are 2 ways that a sub-patch is loaded into a main patch</p>

<ul>
<li>direct reference relative to main patch</li>
<li>it is on the object search path </li>
</ul>

<h2>direct reference, (this is the 'preferred method')</h2>

<p>Entering ./mysubpatch into the search dialog will look for mysubpatch in same directory as the main patch.<br>You can also use ./sub/mysubpatch to look in the subdirectory sub, or ../mysubpatch to look in parent directory. This can be useful when sharing sub-patches between a few main patches.</p>

<p>(note: you should save the main (or parent) patch first so you are clear where it is located!)</p>

<h2>search path</h2>

<p>Subpatches will be searched for in the search path, and will be shown in the search window.<br>In preferences you can add new directories to the search path.</p>

<p>This is particularly useful for 'utility' patches that you might use in many patches. (you can see Axoloti does this with the FX objects)</p>

<p>The disadvantage of this is that it's more difficult to keep track of where these subpatches are being loaded from. Adding many new directories to the search path can become confusing, so don't use this for subpatches that only get used in a couple of patches.</p>

<h2>editing a subpatch</h2>

<ul>
<li>a subpatch edited whilst the parent is live, will have no effect until the patch is re-compiled and uploaded to the board</li>
<li>always use the 'edit object definition' to edit a sub patch rather than opening the sub patch from the file menu, this ensures you are editing the version on the main patch, and its effects will be propagated when you go live.</li>
</ul>

<h1>Embedded sub patches</h1>

<p>These are created using a special object called 'patcher' you can load one by using the object search frame and typing: patch/patcher</p>

<p>the advantage of these embedded patches is you don't need to save them separately, so managing them is easier.<br>the disadvantage is that they cannot be reused in other patches.</p>

<p>to edit the contents of this patcher hit the edit button, and then you will be given a patch frame as normal.<br>the difference is you do not need to save it.<br>so if you close the window, you will not be asked to save<br>this is because its contents will be saved in the main patch.<br>(so you will be asked to save the main patch if you edit the embedded patch)</p>

<p>currently (still in development!) when you update a patcher, you must press 'update' button on the patcher object on the main patch for the changes to be reflected, including seeing controls,  inlets and outlets.<br>(remember to show control, just like an sub patch file you must mark controls with 'parameter on parent' option)</p>

<h1>Sub patch mode</h1>

<p>The sub patch mode is specified in the patch settings of the sub patch, and it determines how voices are handled and mapped to midi channels</p>

<p>Sub patch modes:</p>

<ul>
<li>No  - no voicing is allocated</li>
<li>Mono - only one voice is used</li>
<li>Mono with bypass -  not implemented yet</li>
<li>Polyphonic - multiple voices , midi data is received on the channel specified, or on the parent if the midi channel attritbute is specified. this is the 'normal' polyphonic mode for most midi controllers</li>
<li>Polyphonic multichannel, this implements 'voice per channel' midi, where each voice is controlled on a different midi channel , commonly used on midi guitars and expressive controllers e.g. Haken Continuum/Eigenharp</li>
<li>Polyphonic expression, this is also a voice per channel midi mode, but support the Multidimensional Polyphonic Expression (MPE) specification, currently supported by Eigenharp, Madrona Labs Soundplane and Linnstrument. This mode should be used in conjunction with the MPE object (midi/device/mpe)</li>
</ul>
            </blockquote>
            <p>Posts: 1</p>
            <p>Participants: 1</p>
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/more-on-sub-patches/55">Read full topic</a></p>
          ]]></description>
          <link>http://community.axoloti.com/t/more-on-sub-patches/55</link>
          <pubDate>Thu, 23 Jul 2015 10:49:38 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">community.axoloti.com-topic-55</guid>
          <source url="http://community.axoloti.com/t/more-on-sub-patches/55.rss">More on Sub Patches</source>
        </item>
        <item>
          <title>Keyboard Shortcuts</title>
          <dc:creator><![CDATA[@thetechnobear Mark Harris]]></dc:creator>
          <category>User Guide</category>
          <description><![CDATA[
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/thetechnobear">@thetechnobear</a> wrote:</p>
            <blockquote>
              <h1>Patching Window</h1>

<p>N  = new object<br>C  = new comment <br>I = new inlet<br>O = new outlet<br>A = new audio object, Shift + A = new audio output stereo object<br>M = new midi object, shift + M = new midi keyb object<br>D = new display object</p>

<p>SPACE, new object<br>DELETE, delete selected object<br>CURSORS, move current object<br>CMD/CTRL+X/C/V - Cut/Copy/Paste</p>

<h1>Parameter values</h1>

<p>Parameters can be changed by:</p>

<ul>
<li>mouse for units, + shift for sub-units, +shift+ctrl for fine units (e.g 0.5,0.05,0.01)</li>
<li>arrow-up/down. shift-arrow-up/down</li>
<li>page-up/down</li>
<li>home, end</li>
<li>typing the number followed by enter</li>
</ul>

<h2>Cut/Paste Notes</h2>

<ul>
<li>object creation/pasting is done at current mouse position </li>
<li>copy/paste a number of objects will retain their connections together (but not to anything not contained in the selection)</li>
<li>you can also cut n paste between patches, including help files etc... useful for common constructions.</li>
</ul>
            </blockquote>
            <p>Posts: 1</p>
            <p>Participants: 1</p>
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/keyboard-shortcuts/54">Read full topic</a></p>
          ]]></description>
          <link>http://community.axoloti.com/t/keyboard-shortcuts/54</link>
          <pubDate>Thu, 23 Jul 2015 10:44:47 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">community.axoloti.com-topic-54</guid>
          <source url="http://community.axoloti.com/t/keyboard-shortcuts/54.rss">Keyboard Shortcuts</source>
        </item>
        <item>
          <title>Compilation failures</title>
          <dc:creator><![CDATA[@thetechnobear Mark Harris]]></dc:creator>
          <category>User Guide</category>
          <description><![CDATA[
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/thetechnobear">@thetechnobear</a> wrote:</p>
            <blockquote>
              <h1>Overview</h1>

<p>Errors that might occur when you take a patch live, you will see a RED error message at the bottom:<br>Compiling patch failed (~Documents/axoloti/mypatches/test.axp ) </p>

<p>If you then look a few lines up, will see the cause of the error, listed before are the common ones and how to resolve.</p>

<h1>Errors</h1>

<h2>CCMSRAM overflowed by 85792 bytes</h2>

<p>The Axoloti board has a finite amount of memory (like us all) called SRAM. If you compile a patch that uses too much, it will give the above error (number will be different).<br>This is caused by allocating too much space for things like delay lines/tables.<br>FIX: reduce delay line/table sizes and try again, or move them to SDRAM of which there is much more!<br>(you will find sdram variants of most  write objects)</p>

<h2>sdram overflowed by 971520 bytes</h2>

<p>Like above, the Axoloti has a finite amount of SDRAM (though much more than SRAM), if you compile a patch that uses too much it will give the above error (number will be different)<br>This is caused by allocating too much space for things like delay lines/tables.<br>FIX: reduce delay line/table sizes and try again.</p>

<h2>Finding the origin of other compilation errors</h2>

<p>Often the error message will point out which object is causing the compilation error. Here is how to recognize this:</p>

<pre><code>In member function void rootc::instanceread__1::dsp(int32_t, int32_t (&amp;)[16], int):
C:\Users\jtaelman\Documents\axoloti/build/xpatch.cpp:54:29: error: class rootc has no member named instancesdfdsafd_i</code></pre>

<p>This error points to an object with instance name "read_1". In this particular case it refers to a non-existing object.</p>
            </blockquote>
            <p>Posts: 1</p>
            <p>Participants: 1</p>
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/compilation-failures/53">Read full topic</a></p>
          ]]></description>
          <link>http://community.axoloti.com/t/compilation-failures/53</link>
          <pubDate>Thu, 23 Jul 2015 10:42:31 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">community.axoloti.com-topic-53</guid>
          <source url="http://community.axoloti.com/t/compilation-failures/53.rss">Compilation failures</source>
        </item>
        <item>
          <title>Using precious resources</title>
          <dc:creator><![CDATA[@thetechnobear Mark Harris]]></dc:creator>
          <category>User Guide</category>
          <description><![CDATA[
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/thetechnobear">@thetechnobear</a> wrote:</p>
            <blockquote>
              <h1>Overview</h1>

<p>The axoloti board is a powerful board, but like everything it has only a finite amount of memory and processing power.</p>

<p>The good news is axoloti is also very flexible, so there are lots of ways to get to similar results!</p>

<p>Here are some tips about how to best make use of the resources it has.</p>

<h2>General</h2>

<p>Dont get too worried about 'optimisation' when creating a patch, its better to make it understandable and functioning initial - but try to keep it efficient as you build it.</p>

<p>Keep it tidy, especially when it gets big... this will mean if you need to 'refactor' it later to make it more efficient, it will be easier.  Use subpatches, to encapsulate functionality, so later blocks can be optimised.</p>

<p>An obvious statement, but 'nothing in life is free' (ok, not true, but hey) ... every object has a cost, in memory (sram) and probably CPU - so when things get tight, reduce the number of objects ... this might need a change in approach.</p>

<h1>Memory</h1>

<p>SRAM is very precious on the Axoloti (used by table/write delay/write) , there is much more SDRAM available, </p>

<h2>use SDRAM alternatives of objects where possible (usually have sdram in the name).</h2>

<p>e.g. use table/alloc 8b sdram rather than table/alloc 8b </p>

<p>tables, use the appropriate size... don't allocate more space than you need, and use 8bit forms if you only need 8bit data (e.g. -127 to 127) , start with the smallest size, and if you need more later, allocate then.</p>

<h2>Delays/Reverbs:</h2>

<p>we all like long delays, but the longer the delay the more memory it uses, so try trimming back delay/reverb times to conserve memory... Consider different configurations e.g. a short delay per voice, and then a longer global delay for all voices.</p>

<h2>Presets/Entries per preset, modulation sources/targets (in patch / settings)</h2>

<p>the defaults for these are 8/32/8/8 ... these are good defaults.<br>but if you start using lots of sub-patches (and instances of sub-patches), these will start consuming alot of memory.<br>so get into the habit (especially with 'utility sub-patches' of reducing these to the minimum value you need...<br>e.g. if your only 3 presets, set it to 3... you can always increase later.<br>for many sub-patches you can set these  all to zero!!! </p>

<h1>Concise patches</h1>

<p>with DSP processing, the emphasis is on speed of execution, since an audio buffer must be processed to a strict deadline to avoid an audio dropout.<br>to do this Axoloti generates code which is all 'inlined', this means that rather than reusing code and calling functions, it will often just copy the code. this means alot of memory is used for the program, so making concise patches can reduce memory usage considerably.</p>

<h1>Feedback connection</h1>

<p>Connections which are executed on the next k-cycle cost sram. Ensure you know where these exist in your path and remove where not required. (they are also a huge source of bugs)<br>If your not sure about what these are , read about Execution Order in the user guide.</p>

<h2>CPU</h2>

<h1>Per voice patches</h1>

<p>When using polyphonic subpatches it's tempting to simply allocate 16 voices - just in case!<br>but it's worth considering how many voices you really need...<br>Remember, each voice often has independent filters/envelopes all of which consume CPU to be processed. Additionally if you include things like delays, these are also using memory.</p>

<p>Tips are:<br>- allocate as many voices as you need (and no more)<br>- FX, consider carefully (especially reverb/delays) which need to be per voice, and which could be global (in the main patch)</p>

<h1>Patch algorithms</h1>

<p>Implementing an idea as a patch/object in axoloti can often be done in many different ways. each having different characteristics e.g. flexibility, performance , memory requirements.... sometimes you will need to trade these off against each other. so if you find that a particular patch is too CPU intensive consider other approaches, using approximations or pre-calculation (e.g. in another thread).</p>

<h1>Attributes vs Parameters/Inlets</h1>

<p>Its tempting to use controls for everything in a patch, so it can be changed 'on the fly' when Live. BUT this does have a cost. if instead you use a constant (e.g. const/i) then this is just hardcoded into the patch when you go live. This means less memory usage, but also means its subject to the compilers optimiser.</p>

<p>consider the following<br></p>

<p></p><pre><code class="lang-auto">if(param==true) {
// 100 lines of my finest code
}</code></pre>

<p>vs<br></p>

<p></p><pre><code class="lang-auto">if(attrib==true) {
// 100 lines of my finest code
}</code></pre>

<p>in the first example, the extra code will be included even if you never have param set to true and this condition is checked every time the code is called. whereas with an attribute the code is completely stripped, and the condition is never checked at runtime<br>its a contrived example to illustrate the point.... which is attributes are cool <img src="//community.axoloti.com/images/emoji/emoji_one/slight_smile.png?v=3" title=":slight_smile:" class="emoji" alt=":slight_smile:"> </p>

<p>(we are considering an enhancement which will make this a bit easier for end users to control i.e. marking parameters are 'fixed for runtime')</p>

<h1>Custom objects</h1>

<p>If you are a C coder, then for some areas of your patch you may want to consider creating a custom (embedded) object.<br>In particular, graphical patching environments are great for most tasks, as they are easy to update , but something are just easier in code e.g. long strings of boolean comparisons.<br>note: this wont always bring improvements even if the patch looks 'complicated', its likely the compilers optimiser will compress it down.  (this is why converting a subpatch to an object is unlikely to give you any performance gains)</p>

<h1>Finally....</h1>

<p>Axoloti hardware is also quite modular...<br>if you cant do you sequencer, synth and special effects on one board, then perhaps consider getting another axoloti core board. you can then feed midi/audio between the boards, and spread the memory and cpu across these boards.<br>(there are also plans in the future to have digital i/o between multiple boards, so midi / audio doesnt have to go through the external ports ... no timescales on this, but for now you can use USB/Midi DIN and the audio jacks)<br>What I like about this (Ive bought a few axoloti boards <img src="//community.axoloti.com/images/emoji/emoji_one/wink.png?v=3" title=":wink:" class="emoji" alt=":wink:">) is Axoloti is so flexibly having a few lying around is great either to be used together or connected to different pieces of synth hardware <img src="//community.axoloti.com/images/emoji/emoji_one/slight_smile.png?v=3" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
            </blockquote>
            <p>Posts: 1</p>
            <p>Participants: 1</p>
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/using-precious-resources/52">Read full topic</a></p>
          ]]></description>
          <link>http://community.axoloti.com/t/using-precious-resources/52</link>
          <pubDate>Thu, 23 Jul 2015 10:41:05 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">community.axoloti.com-topic-52</guid>
          <source url="http://community.axoloti.com/t/using-precious-resources/52.rss">Using precious resources</source>
        </item>
        <item>
          <title>About the User Guide category</title>
          <dc:creator><![CDATA[@thetechnobear Mark Harris]]></dc:creator>
          <category>User Guide</category>
          <description><![CDATA[
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/thetechnobear">@thetechnobear</a> wrote:</p>
            <blockquote>
              <p>This category contains posts to help users use Axoloti, a dynamic user guide.</p>

<p>This category is moderated, with posts representing different topics/chapters of a user guide.</p>

<p>The intention is that the community will extend this user guide, by introducing new topics that other members of the community will find useful, in addition communities members can edit existing topics either for correction, elaboration or extend. (because they all topics are marked as 'wiki posts')</p>

<p>new topics<br>any user with level 2 (member) or above  can post in this category.<br>(if you would like to contribute and are not level 2 yet, please PM me and I can raise your level)</p>

<p>once a new topic is create, a moderator will then checks its correct to be in the user guide (i.e. not accidentally been place here), and then will mark the initial post as a wiki, allowing others too edit.</p>

<p><strong>important note</strong><br>do not edit a topic, if you think it may be currently edited, discourse does not have any 'locking' on edit so changes can be lost if user edit in parallel.<br>in practice I've only encountered this a couple of times, but its 'possible'..<br>my recommendation is therefore:<br>- don't edit a post if someone else has been editing recently. (say last 30 minutes), as they may still be working on it.<br>- try to edit in 'short sessions' , so you dont overwrite changes are have made, because you have been working on a copy from 30 minutes ago.</p>
            </blockquote>
            <p>Posts: 1</p>
            <p>Participants: 1</p>
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/about-the-user-guide-category/51">Read full topic</a></p>
          ]]></description>
          <link>http://community.axoloti.com/t/about-the-user-guide-category/51</link>
          <pubDate>Thu, 23 Jul 2015 10:33:58 +0000</pubDate>
          <discourse:topicPinned>Yes</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">community.axoloti.com-topic-51</guid>
          <source url="http://community.axoloti.com/t/about-the-user-guide-category/51.rss">About the User Guide category</source>
        </item>
        <item>
          <title>Axoloti User Guide</title>
          <dc:creator><![CDATA[@thetechnobear Mark Harris]]></dc:creator>
          <category>User Guide</category>
          <description><![CDATA[
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/thetechnobear">@thetechnobear</a> wrote:</p>
            <blockquote>
              <h1>Overview</h1>

<p>Axoloti consists of both hardware and software which work together to provide a virtual modular environment.<br>With the Axoloti software we can create 'patches' which are uploaded to the Axoloti hardware and then run on the hardware.</p>

<p>When we upload these patches to the Axoloti board, we are actually uploading native code for the hardware and not interpreting these patches on the board. <br>This means it runs very efficiently, close to the efficiency you would get if you wrote the code specifically for the hardware!</p>

<p>Although this particular document concentrates on the Axoloti software, once the 'patch' is uploaded to the board, the Axoloti board can run completely independently, no computer or other controller is required.</p>

<p>You can find more information about the hardware in another post in this "User Guide" </p>

<p>More topics from the user guide can be found in the <a href="//community.axoloti.com/c/user-guide">Axoloti User Guide Forum</a></p>

<h1>Learning Axoloti</h1>

<p>Axoloti is fairly simple to use, especially if you are used to graphical patching languages.<br>This topic covers the basic of how to use the computer side of axoloti 'the GUI', and an introduction into some of the aspects you will encounter.</p>

<p>After reading this, we would recommend you open each of the tutorial patches ( File -&gt; Library-&gt; Factory -&gt; Tutorials)  to get an understanding of how to patch your own objects. From there, you can start looking at the factory demo which are more complex. <br>This should give you a basic understanding of how to get started creating your own patches, from there you can look at community patches, and of course ask questions here on the forum.</p>

<p>Many users like to have a more 'tutorial book' approach, and we are lucky that such a book has been independently produced by a community member <a class="mention" href="/users/janvantomme">@janvantomme</a> , which many users have commented is a great place to start - you can read more about this book, and feed back from users here <a href="//community.axoloti.com/t/getting-started-with-axoloti-the-book">Getting started with Axoloti book</a> . </p>

<h1>Axoloti GUI</h1>

<p>The main focus of the Axoloti GUI is to allow the user to connect to the Axoloti hardware, build patches and upload these patches to the hardware.<br>To do this there are two main windows, the console window and the patch window. <br>There is always one console window, but you can have many patch windows open.</p>

<h1>Console Window</h1>

<p>The console window shows information about the axoloti board that is connected, and various log messages.<br>Assuming your axoloti board is connected, the first thing you will want to do is to ensure it is connected.<br>(after the first time, it will automatically connect when you start Axoloti)</p>

<p>First, use the 'Board Menu' and select 'Select Device', and you will see one (or more) Axoloti boards that are available for connection (if not, check your USB cables). Select the device, and press ok.<br>Now you can use the 'connect' button on the Console window, it will print 'connected' in the log, as well as the current firmware version.<br>This console window also shows the current firmware revision on the board, this is covered in the "Firmware vs Patch" post in the user guide.</p>

<p>Note: see how connected was in RED, this shows an important log message, often errors that need the users attention.</p>

<p>We will be looking at the console window more, when we discuss transferring patches to the Axoloti board.</p>

<h1>Patch Window</h1>

<p>This is where the fun starts, as this is where we create our synths, sequencers, or what ever else is in our imagination.<br>Lets start by looking at a patch to see what we can do....</p>

<p>Use the File menu, and you can see there are options to create a new patch, open patch... and also a Library menu, which contains tutorials and demos.<br>So lets start with a demo. </p>

<h2>Loading a demo</h2>

<p>in the console window's File menu, use:<br>File -&gt; Library -&gt; demos -&gt; youtube -&gt;tybett</p>

<p>This will open a patch with with the Tybett demo that has been shown on YouTube.<br>It might look complicated, but you will soon get accustomed to what is going on, and we are only here to see a few important things.</p>

<p>With this patch window we can see lots of objects all connected by wires, more on this later.<br>the most important thing about the patch window though is there are two modes.</p>

<p>Edit Mode - (light background) , allows you to edit the patch.<br>Live mode - (dark background) the patch is running on the Axoloti board, and you can control the parameters.</p>

<p>When you open a patch, you always start in Edit mode.</p>

<h1>Live Mode</h1>

<p>Lets start with some sound!  (assuming you have the output jack connected to your speakers/mixer)</p>

<p><strong>Important Note</strong> When you use a patch that you have not used before, or you have only just created <strong>always</strong> start with the gain on your headphones/mixer/speakers LOW and turn it up gradually. Different patches can have different volume levels and you don't want to damage your speakers/hearing!</p>

<p>ok, so to send this patch to the Axoloti board  - you can press the Live checkbox.<br>as this is a patch using a sequencer, you will instantly hear sound.</p>

<p>Importantly you will see the background has changed colour to dark grey, this clearly indicates the patch is Live, and running on the Axoloti board.</p>

<p>In Live mode, you can change the parameters that are on the screen.<br>have a go, in the top right, you will see a box labelled LFO/Square, this object is controlling the tempo of this patch, you can use the mouse to control the dial in the box,  by clicking on the dial with the mouse, and then moving up or down.  (This can also be controlled via MIDI, but more on that later!)</p>

<p>Also in Live mode you can use the preset recalls buttons at the top to change between different sets of saved presets, which are different groups of parameters values. (more later!)</p>

<p>Note: when in  LIVE mode, you cannot edit the patch in any way (including moving objects). (<br>as it is already loaded and running on the axoloti board) , to edit it you must leave LIVE mode.<br>Also can only have one patch running on a particular board at a time.</p>

<p>Engaging live mode generates compatible code from the patch, compiles the code, uploads the binary and starts the binary on the board. In live mode, only parameters can be changed. Connections, execution order, location, attributes,... are all frozen. <br>Currently midi mapping, and modulation can be adjusted in live mode, but those changes are only in effect until after engaging live mode again.</p>

<p>Leaving Live mode, easy... just click the Live checkbox again <br>(you will see you can also press CTRL/CMD +E as a shortcut for entering/leaving Live mode)</p>

<h1>Edit Mode</h1>

<p>Ok before we start editing lets get a little familiar with what a patch is...</p>

<p>The boxes are referred to as 'objects', and are like modules in a modular synth.<br>objects contain inlets to connect to, and outlets to connect to other objects by using  virtual wires or connections.</p>

<h2>Objects</h2>

<p>Each objects has:</p>

<ul>
<li>titlebar, containing the kind of object</li>
<li>instance name, the name you give it (a default is generated) Note: duplicate names in a patch are illegal.</li>
<li>inlets: colored circles on the left side</li>
<li>outlets colored squares on the right side</li>
<li>attributes values that can only be set before running the patch.</li>
<li>parameters values that can be set before loading the patch and also be modified during a "live" session. </li>
</ul>

<p>and some objects (called displays) also display various visualisations of live data from the patch.</p>

<p>Operations on objects:  (not in Live Mode):</p>

<ul>
<li>Objects can be moved by dragging the titlebar.</li>
<li>Objects can be selected by clicking the titlebar, or dragging a rectange around a group.</li>
<li>Selected objects can be deleted by pressing delete or backspace.</li>
<li>Objects can be replaced with a different type by double-clicking on the title (or selecting replace in the context menu). Connections and parameters will be preserved. Attributes are not preserved (yet), this is especially useful when you wish to change inlet/outlet types (e.g. control rate to audio rate)</li>
<li>Instance name can be changed (a double click on the instancename brings up the instance name editor)</li>
<li>Attributes can be changed</li>
<li>Parameters can be changed by:<ul>
<li>mouse for units, + shift for sub-units, +shift+ctrl for fine units (e.g 0.5,0.05,0.01)</li>
<li>arrow-up/down. shift-arrow-up/down</li>
<li>page-up/down</li>
<li>home, end</li>
<li>typing the number followed by enter</li>
</ul>
</li>
</ul>

<p><strong>Parameters,  Attributes and Displays</strong><br>An object can have 3 types of user interface elments<br>Parameters - which can be changed at run time.  i.e. when Live  (and can also be modulated or controlled via midi CC)<br>Attributes - can only be configured whilst editing the patch.<br>Displays - show data coming from the axoloti board e.g. an oscilloscope (scope)</p>

<p>Attributes are used where there would be too great an overhead to change them at run-time, which could potentially disrupt the audio e.g. increasing a delay line's size at run time could cause audio glitches.<br>(the most common cases are for configuring buffer sizes/delay lines or configuring which tables/delays things are read from ... often they are text fields or drop down boxes - If you cant change it at run-time, its an attribute <img src="//community.axoloti.com/images/emoji/emoji_one/slight_smile.png?v=3" title=":slight_smile:" class="emoji" alt=":slight_smile:"> )</p>

<p>Some parameters have real-world units, displayed left of the dial. For some, multiple conversions are meaningful. Clicking on the real-world unit to alternate between different units. Eg. frequency in Hertz or period time in milliseconds.<br>Parameter can be mapped to MIDI Continuous Controllers, by right clicking on the parameter to assign a MIDI controller. Mapped parameters have a "C" mark right of the dial.<br>Parameters can be modulated by other objects, right click on the parameter and select modulate, Modulated parameters have a "M" marked to right of the dial</p>

<h1>Connections</h1>

<h2>Connecting wires</h2>

<p>Just drag an inlet to outlet (or vice versa)<br>An outlet can connect to many inlets BUT an inlet can only be connected to one outlet.<br>If you wish to connect 2 outlets to an inlet you will need to mix/sum them.</p>

<h2>Disconnect a wire</h2>

<ul>
<li>select it and press delete </li>
<li>right click on a inlet/outlet and select disconnect</li>
<li>drag the connected inlet/outlet into space</li>
</ul>

<h2>Changing inlet source</h2>

<p>if you want to change the outlet an inlet is connected to, simply drag the new outlet to the inlet, and the connection will be replaced</p>

<h2>Connection network</h2>

<p>a connection network is all of the wires that are connected to a particular outlet.<br>you can delete them all at once with delete network</p>

<h2>Connection (and Inlet/Outlet types)</h2>

<p>Different data types are marked by different colors on the outlets, inlets and wires.</p>

<ul>
<li>Red connections are s-rate ( audio/sample rate - 48000 Hz). The normal range is -64 to 64 units.</li>
<li>Blue connection points are k-rate (control-rate, 3000 Hz) fractional numbers. The normal range is -64 to 64 units, like control voltages on a modular synthesizer.</li>
<li>Yellow connections are for k-rate booleans, like gate signals one a  modular synthesizer.</li>
<li>Green connections are for k-rate integers (whole numbers). The range is a signed 32bit , e.g. -2147483648 to 2147483647. </li>
<li>Pink connections are for strings. Mostly useful for dynamic filenames.</li>
</ul>

<h2>Connections between different types</h2>

<ul>
<li>A red output (audio) can be connected to a blue input (float), this will sample the audio, 1 in 16 audio samples.</li>
<li>A yellow output (boolean) can be connected to a blue input (float), this yields +64 units for true, 0 for false.</li>
<li>A yellow output (boolean) can be connected to a green input (float), this yields 1 for true, 0 for false.</li>
<li>A green output (integer) can be connected to a blue input(float).</li>
<li>A green output (integer) can be connected to a yellow input (boolean), evaluates to true when the value is positive, or to false when zero or negative.</li>
<li>A blue output (float) can be connected to a green input (integer) the value is rounded down.</li>
<li>A blue output (float) can be connected to a yellow input (boolean), evaluates to true when the value is positive, or to false when zero or negative.</li>
<li>A pink output must always be connected to a pink input. (strings)</li>
</ul>

<h1>Execution order</h1>

<p>Every object in the patch is executed once in the signal processing loop, at 3000Hz. <br>These are processed in strict order, left to right, top to bottom.<br>(Feedback is allowed, and will be processed in the next processing loop)</p>

<h1>Documenting patches</h1>

<p>Use comment objects and the patch notes (accessible from the menu) so you don't forget how your patch works, also changing the instance name (menu rename) helps when you have many objects of the same type</p>

<h1>Saving a patch</h1>

<p>Once you have created a patch, you can then save it using the File menu, and choose Save or Save As. </p>

<h2>Presets</h2>

<p>A preset is a set of selected parameters and their new value. To include a parameter to a preset, select the preset index to edit in the toolbar. Then right-click on a parameter and select "include in current preset" in the popup-menu. The parameter will turn yellow. A yellow parameter is not updated live, but indicates that you are adjusting its value in the preset. Changes to presets are only updated after dis- and re-engaging the live checkbox! Presets in a sub-patch can be applied only with the "preset" object. A preset in a "normal" sub-patch only affects the sub-patch. A preset in a polyphonic sub-patch only affects one voice.</p>

<h1>Sub patching</h1>

<p>Sub patches are an important building block in Axoloti.</p>

<p>There are lots of uses for sub patches but the main reasons are:</p>

<ul>
<li>creating 'utility' patches that you want to use in many patches</li>
<li>to simplify a very complex patch</li>
<li>for polyphonic voices </li>
</ul>

<p>Terminology, sometimes sub patches will be referred to as 'child patches' and the main patch is called the parent patch.</p>

<p>Sub patches can be create in two different ways, either embedded into the patch (i.e. saved in the AXP) or as a separate file (AXS) . Functionally they operate the same, the difference is embedded patch does not need to be saved separately, but cannot then be re-used on other patches. <br>Most often embedded patches are used, especially during 'development' of a patch, and the subpatch files (AXS) are create if you wish to use the same functionality in other patches.<br>(note: you can copy and paste embedded patches, like other objects , but of course this means any change you want to make has to be made to individual copies)</p>

<h2>Embedded sub patches</h2>

<p>To create an embedded sub-patch </p>

<ul>
<li>create a new object of type 'patch/patcher'</li>
<li>click the edit object, this will open a new patch window for you to add contents</li>
<li>you can add inlet/outlet objects to communicate with main patch</li>
<li>you can edit the patch settings, e.g. to create multiple voices</li>
<li>you can add parameters to parent</li>
<li>once you have finished editing, close the window <strong>AND click update</strong> on the patch/patcher</li>
</ul>

<p>tip: remember you can rename the patch/patcher object to a more meaningful name.</p>

<p>using embedded patchers makes creating voices trivial, and keeps all of the patch in one file, which means its easy to share. you can even cut and paste embedded patchers to other patches to re-use them.</p>

<p>unless you have a particular reason to use sub-patch files, e.g. sharing in a library, you should use embedded patches.</p>

<h2>Sub patch files (AXS)</h2>

<p>Sub patches are just like main patches, but are saved with as 'Axoloti Subpatch' with an extension of AXS, the difference is they are never used on their own... they are always added to a main patch. <br>(we will also see later that sub-patches can often look like normal axoloti objects)</p>

<p>a few important notes:</p>

<ul>
<li>to use a subpatch it must be saved (to disk) before you can included it in a main patch.</li>
<li>to edit a sub-patch used in a main patch, always use select in the main patch, and from the context menu select 'edit object defintition'</li>
</ul>

<p>to create a sub-patch:</p>

<ul>
<li>Create a new patch, (this will be the sub patch)</li>
<li>include inlet, and outlet objects allow data/audio to be passed to the main patch</li>
<li>Save this patch (as an Axoloti Subpatch,  into the directory you are going to save the main patch) </li>
<li>Create a new patch (this will be the parent)</li>
<li>Save this patch (as an Axoloti Patch, into the same directory as the sub patch above)</li>
<li>Bring up the object search window ( space/N)</li>
<li>Enter the patch filename in the object selector (without .axs extension), prefixed by "./"</li>
</ul>

<p>If you want to modify the sub patch:</p>

<ul>
<li>In the main patch, select the sub patch object</li>
<li>select "edit object definition" in the object popup menu</li>
<li>the sub patch window opens</li>
<li>make the changes</li>
<li>save the sub-patch.</li>
</ul>

<p>Note: If the main patch is LIVE, changes to a sub-patch will not be propagated until the main patch is sent again to the board (e.g. take it offline, then select live again)</p>

<p>Parameters can be propagated to the main patch by right-click on the parameter and select "show on parent". "Show on parent" parameters are drawn in blue.</p>

<p>Sub-patch files (AXS) are useful were you wish to create a generic object that you can use in many different patches, with the advantage that if you update the AXS all patches using it will use the new implementation.<br>(this 'advantage' can be considered a disadvantage if you want consistency in old patches... in which case you may prefer embedded patches or will need to version the AXS) </p>

<h1>Polyphonic Sub patching</h1>

<p>An important use of Sub patches is to create polyphonic voices.<br>If you place an oscillator in a patch, then you have one oscillator (with one pitch), what we need for polyphony is to have many copies of that oscillator, one for each voice.<br>The way we achieve this is to create a sub patch, the sub patch is then used for each voice.<br>When we add the sub-patch to the main patch we can say how many voices are created.<br>Now when midi notes are played Axoloti will automatically allocate notes played simultaneously to different voices. </p>

<p>Note: you can change some properties of how voices are allocated in the patch settings of the sub-patch, see "more on sub patching for details"</p>

<p>For sound design purposes, you can also obtain the index of the voice with the "voiceindex" object... useful to make voices have some variation.</p>

<h1>Patch Settings</h1>

<p>With every patch you can store notes (View-&gt;notes) and also change the patches settings.<br>Patch settiings include:</p>

<ul>
<li>Author, who wrote the patch</li>
<li>Licence, the license for using/sharing the patch</li>
<li>Midi Channel, if you are using midi objects what channel they receive data on  (affected by patch mode)</li>
<li>Number of presets - how many presets can be store on the patch</li>
<li>Entries per presets - the number of parameters that can be store on the preset</li>
<li>Number of modulation source - number of modulation source on the patch (patch/modsource*)</li>
<li>Number of modulation targets - number of targets for sources</li>
<li>Sub patch mode, how voices are handled, see 'more on sub patches'</li>
<li>Has midi channel attribute - the midi channel is exposed on the parent patch, when used as a subpatch</li>
<li>saturate audio - is the the audio output from this patch saturated</li>
</ul>

<h1>Zombies</h1>

<p>If a patch is loaded and an object cannot be found, a zombie will be created (its bright red!) , your patch will not work, so you need to replace it... simply double click, or use replace object. if you replace with something with compatible inlet/outlets it will remain connected!<br>(most likely to happen if you create your own subpatches and move them)</p>

<h1>File types</h1>

<p>Axoloti has 4 file types:<br>AXO  - objects with functionality, found in search window <br>AXP  - patch, which contains objects and can be compiled and sent to Axoloti board<br>AXS  - subpatch, a patch used by a main patch (see below)<br>AXH - help patch, shows how to use an object.<br>all except AXO, can be created by saving the patch with Save As...</p>

<h1>Object and Sub-patch libraries</h1>

<p>By default axoloti will look in the objects sub-directory for objects files and sub-patches.<br>(if you start with ./ (as suggested in sub-patch section) this will also look in the same directory as the patch)</p>

<p>If you develop your own sub-patches that you wish to see as objects, or your own custom objects (axo) or third party objects, then this is possible, simply add them into a Library. <br>if you want them privately then you can add then to the 'home' library,  or you can share them with the community by placing in the community library.</p>

<p>objects all have a unique id, that is allocated by the object editor.<br>however, currently (subject to change!) subpatches are uniquely identified by their name.<br>e.g midi/in/keyb<br>so what happens if you have multiple sub-patches with the same name?<br>axoloti will search using the following rules</p>

<ul>
<li>if it full path is given it will use this</li>
<li>if a relative path is given , it will use this relative to the location the patch is saved (so you need to save your parent patch first) </li>
<li>the order of libraries, listed in the preferences dialog</li>
</ul>

<p>Our recommendation is to use embedded patches and embedded objects as much as possible, or to place sub-patches/objects in library.</p>

<h1>Custom objects</h1>

<p>Creating custom objects is beyond the scope of this user guide.<br>however, a few notes are useful...<br>a) axoloti features an object editor which can be used to create your own objects<br>b) you can either embed custom objects or save objects in the a share library (as an axo file) <br>generally custom objects are useful where a graphical UI becomes cumbersome, i.e. its simpler to right an algorithm in lines of code, or where some structure are not available in patch e.g. looping.</p>

<p>will custom objects be more efficient? this depends, only if you can express your 'intent' in a simpler/more concise efficeint way. custom objects  are <strong>not</strong> par se quicker (as both custom objects and patching both generate C code, which is subject to the optimiser). a badly written custom object is likely to perform worst/have more unwanted side effects than a patch!</p>

<p>if you want to create custom objects , axoloti provides all the tools 'out of the box', <br>but you will need a few additional skills, depending on what you want to achieve.<br>- some programming experience<br>- some C coding experience (not too much , just the basics)*<br>- some DSP knowledge if you want to do audio<br>- some understanding of axoloti (id recommend deep patching experience , before object coding!)</p>

<p>*personally, Id recommend you do some C programming on the desktop first, as you lack things like debuggers in axoloti, and even getting trace output is more cumbersome.</p>
            </blockquote>
            <p>Posts: 1</p>
            <p>Participants: 1</p>
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/axoloti-user-guide/50">Read full topic</a></p>
          ]]></description>
          <link>http://community.axoloti.com/t/axoloti-user-guide/50</link>
          <pubDate>Wed, 22 Jul 2015 14:28:09 +0000</pubDate>
          <discourse:topicPinned>Yes</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">community.axoloti.com-topic-50</guid>
          <source url="http://community.axoloti.com/t/axoloti-user-guide/50.rss">Axoloti User Guide</source>
        </item>
        <item>
          <title>Installing on Mac OS X</title>
          <dc:creator><![CDATA[@thetechnobear Mark Harris]]></dc:creator>
          <category>User Guide</category>
          <description><![CDATA[
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/thetechnobear">@thetechnobear</a> wrote:</p>
            <blockquote>
              <h1>macOS Catalina is NOT supported at this time.</h1>

<p>(we are looking into compatibility issues at this time, and do not have a timeframe on resolving this yet) </p>

<h1>Normal Installation</h1>

<p>To reduce size we split the application into two parts, the main axoloti application, and a runtime which contains other required files. You must download and install both initially. <br>(Usually updates will only require the main application to be downloaded and installed.)</p>

<ol>
<li>
<strong>download</strong> both <strong>application</strong> bundle and <strong>axoloti_runtime</strong><ul>
<li>go to <a href="http://github.com/axoloti/axoloti/releases">http://github.com/axoloti/axoloti/releases</a>, you will see the 'latest release'</li>
<li>download axo_runtime_osx_(version).dmg</li>
<li>download axoloti_osx_(version).dmg</li>
</ul>
</li>
<li>
<strong>install axoloti runtime</strong>: <ul>
<li>open axo_runtime_osx_(version).dmg </li>
<li>drag the axoloti_runtime folder to /Applications</li>
<li>you will now have a folder <strong>/Applications/axoloti_runtime/platform_osx</strong>
</li>
</ul>
</li>
<li>
<strong>install application</strong>:<ul>
<li>double clicking on package</li>
<li>drag  Axoloti app to Applications</li>
</ul>
</li>
<li><strong>Connect Axoloti Core board</strong></li>
<li>
<strong>Run Axoloti</strong> application in Applications folder</li>
</ol>

<p>Thats it your done,<br>Happy patching</p>

<hr>

<h2>Recommended Platform</h2>

<p>Axoloti runs on many platforms and variations, but we are only able to test on limited number of platforms, if you experience issues we recommend the following, as these are our test platforms.</p>

<ul>
<li>Mac OS X 10.10.3+</li>
<li>Java 1.8</li>
</ul>

<p>*recommended java version is 1.8 from  <a href="https://java.com/en/download/">https://java.com/en/download/</a></p>

<h2>Developer installation (from source)</h2>

<p>If you are a developer and would like to follow the most up to date developments, and perhaps contribute to Axoloti development you can install from the Axoloti github repo</p>

<p>if you are running Mac OSX 10.11+ (El Capitan) you will need to install a Java JDK, you should use the Oracle install, JDK 1.8.  this needs to be done 'manually' as Oracle require you to accept their license. you will also need to install ant, and ensure it is on your path.</p>

<ul>
<li>clone from github</li>
<li>run build.sh in platform_macosx</li>
<li>run ./Axoloti.sh</li>
</ul>

<p>Note: to create the bundles you will need to install the Oracle Java 8 JDK</p>

<p>Note: Mac OS 10.11 (El Capitan) should work, but is currently not fully tested, please report any issue on the helpdesk <a href="/t/el-capitan-mac-osx-10-11">thread</a>.</p>
            </blockquote>
            <p>Posts: 8</p>
            <p>Participants: 3</p>
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/installing-on-mac-os-x/37">Read full topic</a></p>
          ]]></description>
          <link>http://community.axoloti.com/t/installing-on-mac-os-x/37</link>
          <pubDate>Tue, 14 Jul 2015 14:22:58 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">community.axoloti.com-topic-37</guid>
          <source url="http://community.axoloti.com/t/installing-on-mac-os-x/37.rss">Installing on Mac OS X</source>
        </item>
        <item>
          <title>Installing on Windows</title>
          <dc:creator><![CDATA[@thetechnobear Mark Harris]]></dc:creator>
          <category>User Guide</category>
          <description><![CDATA[
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/u/thetechnobear">@thetechnobear</a> wrote:</p>
            <blockquote>
              <h1>Normal Installation</h1>

<p>To reduce size we split the application into two parts, the main axoloti application, and a runtime which contains other required files. You must download and install both initially. <br>(Usually updates will only require the main application to be downloaded and installed.)</p>

<ol>
<li>
<strong>download</strong> both <strong>application bundle</strong> and <strong>axoloti_runtime</strong><ul>
<li>go to <a href="http://github.com/axoloti/axoloti/releases">http://github.com/axoloti/axoloti/releases</a>, you will see the 'latest release'</li>
<li>download axo_runtime_win.(version).msi</li>
<li>download axoloti_win_(version).zip</li>
</ul>
</li>
<li>
<strong>install runtime zip</strong>:<ul>
<li>double click on zip file to unzip the file <br>on a 32bit windows system, this needs to be copied to:<br>C:\Program Files<br>on a 64 bit windows system, this needs to be copied to:<br>C:\Program Files (x86)</li>
<li>now check that you have  <strong>C:\Program Files\axoloti_runtime\platform_win</strong> or <br><strong>C:\Program Files (x86)\axoloti_runtime\platform_win</strong> as appropriate.</li>
<li>
<em>if</em> when unzipped you find a folder other than axoloti_runtime, then look into that folder for axoliti_runtime, it is axoloti_runtime that must be copied to Program Files. </li>
</ul>
</li>
<li>
<strong>install axoloti application msi</strong>:<ul>
<li>double click on the MSI file</li>
<li>you may get a warning from windows about not trusting, this is due to it not being signed, you can safely ignore this, click on More Info, and then click on "Run Anyway"</li>
</ul>
</li>
<li>
<strong>Connect axoloti core board</strong>, this will start windows installing the necessary drivers (if they are not already installed), and create a device called "Axoloti Core"</li>
<li>
<strong>Run Axoloti</strong> application, you will find it in C:\Program Files  or C:\Program Files(x86) </li>
</ol>

<p>Thats it, your done!!</p>

<p>Happy patching</p>

<hr>

<h2>Recommended Platform</h2>

<p>Axoloti runs on many platforms and variations, but we are only able to test on limited number of platforms, if you experience issues we recommend the following, as these are our test platforms.<br>- Windows 7, 8, 10<br>- Java 1.8  (can be downloaded from <a href="https://java.com/en/download/">https://java.com/en/download/</a>)</p>

<h2>Developer installation (from source)</h2>

<p>If you are a developer and would like to follow the most up to date developments, and perhaps contribute to Axoloti development you can install from the Axoloti github repo</p>

<ul>
<li>clone from github</li>
<li>run build.bat in platform_windows</li>
<li>run ./Axoloti.bat</li>
</ul>

<p>Note: to create the bundles you will need to install the Oracle Java 8 JDK</p>

<h2>Advanced installation (Rescue mode)</h2>

<p>Usually you can flash the firmware with Axoloti using the regular flashing method, which the above installation will handle.<br>However, there is a 'rescue mode' (aka DFU mode)  which can be used if the board appears to not respond to normal firmware flashing. This is a 'rare' situation, if you have an issue that requires it we will let you know.<br>(most users will not need this function!)</p>

<p>this 'rescue' mode, also called DFU, requires a different driver from the normal Axoloti driver,  unfortunately for windows, the driver installed by default (STM32 Bootloader) is not compatible, and we need to replace it with the generic WinUSB driver.</p>

<p>To do this:</p>

<ul>
<li>Enter rescue mode, by powering down the board, press S1 and hold, and power up the board. The two LEDs stay off in this case.</li>
<li>Windows will then install the incompatible driver, wait for this to complete.</li>
<li>After, go to C:\Program Files (x86)\axoloti_runtime\platform_win and run Zadig (zadig_2.1.2.exe)</li>
<li>Initially, the Zadig window is blank </li>
<li>select  "Options &gt; List All Devices"</li>
<li>While the axoloti board is in DFU mode, it will be listed as STM32 BOOTLOADER in the dropdown menu -  select it.</li>
<li>You will see Driver : Stu* -&gt; WinUSB (v6.1.7600.16385 etc) and underneath, Replace Driver, press "Replace Driver", this will replace the STM driver with the WinUSB driver</li>
<li>Now Axoloti flash rescue mode will work.</li>
<li>You can check that this is mode is available by staying in DFU mode,  start the Axoloti UI, go to "Board&gt;Select Device...", it will say 'STM DFU' in the description, driver OK.  (also Flash (Rescue) will be enabled)</li>
</ul>
            </blockquote>
            <p>Posts: 1</p>
            <p>Participants: 1</p>
            <p><a href="https://sebiik.github.io/community.axoloti.com.backup/t/installing-on-windows/36">Read full topic</a></p>
          ]]></description>
          <link>http://community.axoloti.com/t/installing-on-windows/36</link>
          <pubDate>Tue, 14 Jul 2015 14:21:30 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">community.axoloti.com-topic-36</guid>
          <source url="http://community.axoloti.com/t/installing-on-windows/36.rss">Installing on Windows</source>
        </item>
  </channel>
</rss>
